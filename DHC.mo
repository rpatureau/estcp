within estcp;
package DHC "Models for district heating and cooling systems"
  extends Modelica.Icons.VariantsPackage;

  package EnergyTransferStations "Package of models for energy transfer stations"
    extends Modelica.Icons.VariantsPackage;

    package Combined "Package of models for DHC energy transfer stations"
      extends Modelica.Icons.VariantsPackage;

      model ChillerBorefield "ETS model for 5GDHC systems with heat recovery chiller and optional borefield"
        extends
          estcp.DHC.EnergyTransferStations.Combined.BaseClasses.PartialParallel(
          final have_eleCoo=true,
          final have_fan=false,
          redeclare replaceable
            estcp.DHC.EnergyTransferStations.Combined.Controls.Supervisory
            conSup constrainedby
            estcp.DHC.EnergyTransferStations.Combined.Controls.Supervisory(
            final controllerType=controllerType,
            final kHot=kHot,
            final kCol=kCol,
            final TiHot=TiHot,
            final TiCol=TiCol,
            final THeaWatSupSetMin=THeaWatSupSetMin,
            final TChiWatSupSetMin=TChiWatSupSetMin),
          nSysHea=1,
          nSouAmb=if have_borFie then 2 else 1,
          VTanHeaWat=datChi.PLRMin*datChi.mCon_flow_nominal*5*60/1000,
          VTanChiWat=datChi.PLRMin*datChi.mEva_flow_nominal*5*60/1000,
          colChiWat(mCon_flow_nominal={colAmbWat.mDis_flow_nominal,datChi.mEva_flow_nominal}),

          colHeaWat(mCon_flow_nominal={colAmbWat.mDis_flow_nominal,datChi.mCon_flow_nominal}),

          colAmbWat(mCon_flow_nominal=if have_borFie then {hex.m2_flow_nominal,
                datBorFie.conDat.mBorFie_flow_nominal} else {hex.m2_flow_nominal}),

          totPPum(nin=3),
          totPHea(nin=1),
          totPCoo(nin=1),
          nPorts_bChiWat=1,
          nPorts_aHeaWat=1,
          nPorts_aChiWat=1,
          nPorts_bHeaWat=1);
        parameter Boolean have_borFie=false
          "Set to true in case a borefield is used in addition of the district HX"
          annotation (Evaluate=true);
        parameter Boolean have_WSE=false
          "Set to true in case a waterside economizer is used"
          annotation (Evaluate=true);
        parameter Modelica.Units.SI.PressureDifference dpCon_nominal(displayUnit="Pa")
          "Nominal pressure drop accross condenser"
          annotation (Dialog(group="Chiller"));
        parameter Modelica.Units.SI.PressureDifference dpEva_nominal(displayUnit="Pa")
          "Nominal pressure drop accross evaporator"
          annotation (Dialog(group="Chiller"));
        replaceable parameter Buildings.Fluid.Chillers.Data.ElectricEIR.Generic
          datChi "Chiller performance data" annotation (
          Dialog(group="Chiller"),
          choicesAllMatching=true,
          Placement(transformation(extent={{20,222},{40,242}})));
        replaceable parameter Buildings.Fluid.Movers.Data.Generic perPumCon(
          motorCooledByFluid=false)
          constrainedby Buildings.Fluid.Movers.Data.Generic
          "Record with performance data for condenser pump"
          annotation (Dialog(group="Chiller"),choicesAllMatching=true,
          Placement(transformation(extent={{60,222},{80,242}})));
        replaceable parameter Buildings.Fluid.Movers.Data.Generic perPumEva(
          motorCooledByFluid=false)
          constrainedby Buildings.Fluid.Movers.Data.Generic
          "Record with performance data for evaporator pump"
          annotation (Dialog(group="Chiller"),choicesAllMatching=true,
          Placement(transformation(extent={{100,222},{120,242}})));
        parameter Modelica.Units.SI.PressureDifference dp1WSE_nominal(displayUnit=
              "Pa") = 40E3
          "Nominal pressure drop across heat exchanger on district side"
          annotation (Dialog(group="Waterside economizer", enable=have_WSE));
        parameter Modelica.Units.SI.PressureDifference dp2WSE_nominal(displayUnit=
              "Pa") = 40E3
          "Nominal pressure drop across heat exchanger on building side"
          annotation (Dialog(group="Waterside economizer", enable=have_WSE));
        parameter Modelica.Units.SI.HeatFlowRate QWSE_flow_nominal=0
          "Nominal heat flow rate through heat exchanger (<=0)"
          annotation (Dialog(group="Waterside economizer", enable=have_WSE));
        parameter Modelica.Units.SI.Temperature T_a1WSE_nominal=279.15
          "Nominal water inlet temperature on district side"
          annotation (Dialog(group="Waterside economizer", enable=have_WSE));
        parameter Modelica.Units.SI.Temperature T_b1WSE_nominal=284.15
          "Nominal water outlet temperature on district side"
          annotation (Dialog(group="Waterside economizer", enable=have_WSE));
        parameter Modelica.Units.SI.Temperature T_a2WSE_nominal=288.15
          "Nominal water inlet temperature on building side"
          annotation (Dialog(group="Waterside economizer", enable=have_WSE));
        parameter Modelica.Units.SI.Temperature T_b2WSE_nominal=281.15
          "Nominal water outlet temperature on building side"
          annotation (Dialog(group="Waterside economizer", enable=have_WSE));
        parameter Real y1WSEMin(unit="1")=0.05
          "Minimum pump flow rate or valve opening for temperature measurement (fractional)"
          annotation (Dialog(group="Waterside economizer", enable=have_WSE));
        replaceable parameter Buildings.Fluid.Movers.Data.Generic perPum1WSE(
            motorCooledByFluid=false) constrainedby
          Buildings.Fluid.Movers.Data.Generic
          "Record with performance data for primary pump of waterside economizer"
          annotation (
          Dialog(group="Waterside economizer", enable=not have_val1Hex and
                have_WSE),
          choicesAllMatching=true,
          Placement(transformation(extent={{220,222},{240,242}})));
        final parameter Modelica.Units.SI.MassFlowRate m1WSE_flow_nominal=abs(
            QWSE_flow_nominal/4200/(T_b1WSE_nominal - T_a1WSE_nominal))
          "WSE primary mass flow rate"
          annotation (Dialog(group="Waterside economizer", enable=have_WSE));
        parameter Modelica.Units.SI.Temperature TBorWatEntMax=313.15
          "Maximum value of borefield water entering temperature"
          annotation (Dialog(group="Borefield", enable=have_borFie));
        parameter Real spePumBorMin(unit="1")=0.1
          "Borefield pump minimum speed"
          annotation (Dialog(group="Borefield",enable=have_borFie));
        parameter Modelica.Units.SI.Pressure dpBorFie_nominal(displayUnit="Pa") = 5E4
          "Pressure losses for the entire borefield (control valve excluded)"
          annotation (Dialog(group="Borefield", enable=have_borFie));
        replaceable parameter
          Buildings.Fluid.Geothermal.Borefields.Data.Borefield.Example datBorFie
          constrainedby
          Buildings.Fluid.Geothermal.Borefields.Data.Borefield.Template
          "Borefield parameters" annotation (
          Dialog(group="Borefield", enable=have_borFie),
          choicesAllMatching=true,
          Placement(transformation(extent={{140,222},{160,242}})));
        replaceable parameter Buildings.Fluid.Movers.Data.Generic perPumBorFie(
          motorCooledByFluid=false)
          constrainedby Buildings.Fluid.Movers.Data.Generic
          "Record with performance data for borefield pump"
          annotation (Dialog(group="Borefield",enable=have_borFie),
          choicesAllMatching=true,Placement(transformation(extent={{180,222},{200,242}})));
        parameter Buildings.Controls.OBC.CDL.Types.SimpleController controllerType=
          Buildings.Controls.OBC.CDL.Types.SimpleController.PI
          "Type of controller"
          annotation (Dialog(group="Supervisory controller"));
        parameter Real kHot(
          min=0)=0.05
          "Gain of controller on hot side"
          annotation (Dialog(group="Supervisory controller"));
        parameter Real kCol(
          min=0)=0.1
          "Gain of controller on cold side"
          annotation (Dialog(group="Supervisory controller"));
        parameter Modelica.Units.SI.Time TiHot(min=Buildings.Controls.OBC.CDL.Constants.small)
           = 300 "Time constant of integrator block on hot side" annotation (Dialog(
              group="Supervisory controller", enable=controllerType == Buildings.Controls.OBC.CDL.Types.SimpleController.PI
                 or controllerType == Buildings.Controls.OBC.CDL.Types.SimpleController.PID));
        parameter Modelica.Units.SI.Time TiCol(min=Buildings.Controls.OBC.CDL.Constants.small)
           = 120 "Time constant of integrator block on cold side" annotation (Dialog(
              group="Supervisory controller", enable=controllerType == Buildings.Controls.OBC.CDL.Types.SimpleController.PI
                 or controllerType == Buildings.Controls.OBC.CDL.Types.SimpleController.PID));
        parameter Modelica.Units.SI.Temperature THeaWatSupSetMin(displayUnit="degC")
           = datChi.TConEntMin + 5
          "Minimum value of heating water supply temperature set point"
          annotation (Dialog(group="Supervisory controller"));
        parameter Modelica.Units.SI.Temperature TChiWatSupSetMin(displayUnit="degC")
           = datChi.TEvaLvgMin
          "Minimum value of chilled water supply temperature set point"
          annotation (Dialog(group="Supervisory controller"));

        replaceable
          estcp.DHC.EnergyTransferStations.Combined.Subsystems.Chiller chi(
          redeclare final package Medium = MediumBui,
          final perPumCon=perPumCon,
          final perPumEva=perPumEva,
          final dpCon_nominal=dpCon_nominal,
          final dpEva_nominal=dpEva_nominal,
          final dat=datChi) "Chiller" annotation (Dialog(group="Chiller"),
            Placement(transformation(extent={{-10,-16},{10,4}})));
        replaceable
          estcp.DHC.EnergyTransferStations.Combined.Subsystems.Borefield borFie(
          redeclare final package Medium = MediumBui,
          final datBorFie=datBorFie,
          final perPum=perPumBorFie,
          final TBorWatEntMax=TBorWatEntMax,
          final spePumBorMin=spePumBorMin,
          final dp_nominal=dpBorFie_nominal) if have_borFie "Borefield"
          annotation (Dialog(group="Borefield", enable=have_borFie), Placement(
              transformation(extent={{-80,-230},{-60,-210}})));
        Buildings.Controls.OBC.CDL.Reals.Sources.Constant zerPPum(
          final k=0) if not have_borFie
          "Zero power"
          annotation (Placement(transformation(extent={{220,-90},{240,-70}})));
        Buildings.Controls.OBC.CDL.Reals.Sources.Constant zerPHea(
          final k=0)
          "Zero power"
          annotation (Placement(transformation(extent={{220,50},{240,70}})));
        estcp.DHC.Networks.BaseClasses.DifferenceEnthalpyFlowRate dHFloHeaWat(
            redeclare final package Medium1 = MediumBui, final m_flow_nominal=
              colHeaWat.mDis_flow_nominal) "Variation of enthalpy flow rate"
          annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=-90,
              origin={-274,130})));
        Buildings.Controls.OBC.CDL.Interfaces.RealOutput dHHeaWat_flow(final unit="W")
          "Heating water distributed energy flow rate"
          annotation (Placement(transformation(extent={{300,140},{340,180}}),
            iconTransformation(extent={{-40,-40},{40,40}},
              rotation=-90,
              origin={240,-340})));
        Buildings.Controls.OBC.CDL.Interfaces.RealOutput dHChiWat_flow(final unit="W")
          "Chilled water distributed energy flow rate"
          annotation (Placement(transformation(extent={{300,100},{340,140}}),
            iconTransformation(extent={{-40,-40},{40,40}},
              rotation=-90,
              origin={280,-340})));
        estcp.DHC.Networks.BaseClasses.DifferenceEnthalpyFlowRate dHFloChiWat(
            redeclare final package Medium1 = MediumBui, final m_flow_nominal=
              colChiWat.mDis_flow_nominal) "Variation of enthalpy flow rate"
          annotation (Placement(transformation(
              extent={{-10,10},{10,-10}},
              rotation=90,
              origin={274,130})));
        estcp.DHC.EnergyTransferStations.Combined.Subsystems.WatersideEconomizer
          WSE(
          redeclare final package Medium1 = MediumSer,
          redeclare final package Medium2 = MediumBui,
          final perPum1=perPum1WSE,
          final allowFlowReversal1=allowFlowReversalSer,
          final allowFlowReversal2=allowFlowReversalBui,
          final conCon=conCon,
          final dp1Hex_nominal=dp1WSE_nominal,
          final dp2Hex_nominal=dp2WSE_nominal,
          final Q_flow_nominal=QWSE_flow_nominal,
          final T_a1_nominal=T_a1WSE_nominal,
          final T_b1_nominal=T_b1WSE_nominal,
          final T_a2_nominal=T_a2WSE_nominal,
          final T_b2_nominal=T_b2WSE_nominal,
          final y1Min=y1WSEMin) if have_WSE "Waterside economizer"
          annotation (Placement(transformation(extent={{220,116},{240,136}})));
        estcp.DHC.EnergyTransferStations.BaseClasses.Junction splWSE(redeclare
            final package Medium = MediumSer, final m_flow_nominal={hex.m1_flow_nominal
               + m1WSE_flow_nominal,-hex.m1_flow_nominal,-m1WSE_flow_nominal})
          "Flow splitter for WSE" annotation (Placement(transformation(extent={
                  {-230,-270},{-210,-250}})));
        estcp.DHC.EnergyTransferStations.BaseClasses.Junction mixWSE(redeclare
            final package Medium = MediumSer, final m_flow_nominal={hex.m1_flow_nominal,
              -hex.m1_flow_nominal - m1WSE_flow_nominal,m1WSE_flow_nominal})
          "Flow mixer for WSE" annotation (Placement(transformation(extent={{
                  244,-250},{264,-270}})));

      equation
        if not have_WSE then
          connect(tanChiWat.port_aTop, dHFloChiWat.port_b2)
          annotation (Line(points={{200,112},{268,112},{268,120}}, color={0,127,255}));
        end if;

        connect(chi.port_bHeaWat,colHeaWat.ports_aCon[2])
          annotation (Line(points={{-10,0},{-108,0},{-108,-24}},color={0,127,255}));
        connect(chi.port_aHeaWat,colHeaWat.ports_bCon[2])
          annotation (Line(points={{-10,-12},{-132,-12},{-132,-24}},color={0,127,255}));
        connect(chi.port_bChiWat,colChiWat.ports_aCon[2])
          annotation (Line(points={{10,0},{108,0},{108,-24}},color={0,127,255}));
        connect(colChiWat.ports_bCon[2],chi.port_aChiWat)
          annotation (Line(points={{132,-24},{132,-12},{10,-12},{10,-12}},color={0,127,255}));
        connect(conSup.TChiWatSupSet,chi.TChiWatSupSet)
          annotation (Line(points={{-238,17},{-26,17},{-26,-8},{-12,-8}},color={0,0,127}));
        connect(chi.PPum,totPPum.u[2])
          annotation (Line(points={{12,-8},{20,-8},{20,-58},{258,-58},{258,-60}},color={0,0,127}));
        connect(colAmbWat.ports_aCon[2],borFie.port_b)
          annotation (Line(points={{12,-116},{14,-116},{14,-220},{-60,-220}},color={0,127,255}));
        connect(colAmbWat.ports_bCon[2],borFie.port_a)
          annotation (Line(points={{-12,-116},{-14,-116},{-14,-140},{-100,-140},{-100,-220},{-80,-220}},color={0,127,255}));
        connect(conSup.yAmb[1],borFie.u)
          annotation (Line(points={{-238,25},{-200,25},{-200,-212},{-82,-212}},color={0,0,127}));
        connect(valIsoCon.y_actual,borFie.yValIso_actual[1])
          annotation (Line(points={{-55,-113},{-40,-113},{-40,-198},{-90,-198},
                {-90,-216.5},{-82,-216.5}},                                                           color={0,0,127}));
        connect(valIsoEva.y_actual,borFie.yValIso_actual[2])
          annotation (Line(points={{55,-113},{40,-113},{40,-200},{-88,-200},{
                -88,-215.5},{-82,-215.5}},                                                         color={0,0,127}));
        connect(borFie.PPum,totPPum.u[3])
          annotation (Line(points={{-58,-216},{250,-216},{250,-62},{258,-62},{258,-60}},color={0,0,127}));
        connect(zerPPum.y,totPPum.u[3])
          annotation (Line(points={{242,-80},{248,-80},{248,-60},{258,-60}},          color={0,0,127}));
        connect(zerPHea.y,totPHea.u[1])
          annotation (Line(points={{242,60},{258,60}},color={0,0,127}));
        connect(chi.PChi,totPCoo.u[1])
          annotation (Line(points={{12,-4},{20,-4},{20,20},{258,20}},color={0,0,127}));
        connect(uHea,conSup.uHea)
          annotation (Line(points={{-320,100},{-290,100},{-290,31},{-262,31}},color={255,0,255}));
        connect(conSup.yHea,chi.uHea)
          annotation (Line(points={{-238,31},{-20,31},{-20,-2},{-12,-2}},color={255,0,255}));
        connect(conSup.yCoo,chi.uCoo)
          annotation (Line(points={{-238,29},{-22,29},{-22,-4},{-12,-4}},color={255,0,255}));
        connect(valIsoCon.y_actual,conSup.yValIsoCon_actual)
          annotation (Line(points={{-55,-113},{-40,-113},{-40,-60},{-266,-60},{-266,15},
                {-262,15}},                                                                        color={0,0,127}));
        connect(valIsoEva.y_actual,conSup.yValIsoEva_actual)
          annotation (Line(points={{55,-113},{40,-113},{40,-64},{-270,-64},{-270,13},{
                -262,13}},                                                                      color={0,0,127}));
        connect(dHFloHeaWat.dH_flow,dHHeaWat_flow)
          annotation (Line(points={{-271,142},{-271,160},{320,160}},           color={0,0,127}));
        connect(dHFloChiWat.dH_flow,dHChiWat_flow)
          annotation (Line(points={{277,142},{292,142},{292,120},{320,120}},color={0,0,127}));
        connect(dHFloChiWat.port_a1, tanChiWat.port_bBot)
          annotation (Line(points={{280,120},{280,100},{200,100}},           color={0,127,255}));
        connect(dHFloChiWat.port_b1, ports_bChiWat[1])
          annotation (Line(points={{280,140},{280,200},{300,200}},                               color={0,127,255}));
        connect(tanHeaWat.port_bTop, dHFloHeaWat.port_a1)
          annotation (Line(points={{-220,112},{-268,112},{-268,120}},
                                                           color={0,127,255}));
        connect(tanHeaWat.port_aBot, dHFloHeaWat.port_b2)
          annotation (Line(points={{-220,100},{-280,100},{-280,120}},
                                                           color={0,127,255}));
        connect(dHFloHeaWat.port_a2, ports_aHeaWat[1])
          annotation (Line(points={{-280,140},{-280,260},{-300,260}},            color={0,127,255}));
        connect(ports_aChiWat[1], dHFloChiWat.port_a2)
          annotation (Line(points={{-300,200},{268,200},{268,140}},             color={0,127,255}));
        connect(dHFloHeaWat.port_b1, ports_bHeaWat[1])
          annotation (Line(points={{-268,140},{-268,260},{300,260}},            color={0,127,255}));
        connect(splWSE.port_2, hex.port_a1) annotation (Line(points={{-210,-260},{-10,
                -260}},                                                                       color={0,127,255}));
        connect(dHFloChiWat.port_b2, WSE.port_a2)
          annotation (Line(points={{268,120},{240,120}},                     color={0,127,255}));
        connect(WSE.port_b2, tanChiWat.port_aTop) annotation (Line(points={{220,120},{206,120},{206,112},{200,112}},
                                                                                                 color={0,127,255}));
        connect(mixWSE.port_2, port_bSerAmb)
          annotation (Line(points={{264,-260},{280,-260},{280,-200},{300,-200}}, color={0,127,255}));
        connect(splWSE.port_3, WSE.port_a1)
          annotation (Line(points={{-220,-270},{-220,-280},{210,-280},{210,132},{220,132}}, color={0,127,255}));
        connect(WSE.port_b1, mixWSE.port_3) annotation (Line(points={{240,132},{254,132},{254,-250}}, color={0,127,255}));
        connect(hex.port_b1, mixWSE.port_1) annotation (Line(points={{10,-260},{244,-260}}, color={0,127,255}));
        connect(conSup.yCoo, WSE.uCoo) annotation (Line(points={{-238,29},{140,29},{140,
                126},{218,126}},                                                                         color={255,0,255}));
        connect(valIsoEva.y_actual, WSE.yValIsoEva_actual)
          annotation (Line(points={{55,-113},{40,-113},{40,123},{218,123}}, color={0,0,127}));
        connect(port_aSerAmb, splWSE.port_1) annotation (Line(points={{-300,-200},{
                -280,-200},{-280,-260},{-230,-260}}, color={0,127,255}));
        annotation (
          Diagram(
            coordinateSystem(
              preserveAspectRatio=false,
              extent={{-300,-300},{300,300}}),
            graphics={
              Line(
                points={{86,92}},
                color={28,108,200},
                pattern=LinePattern.Dash)}),
          defaultComponentName="ets",
          Documentation(
            revisions="<html>
<ul>
<li>
April 30, 2021, by Michael Wetter:<br/>
Reformulated replaceable class to avoid access of components that are not in the constraining type.<br/>
This is for <a href=\"https://github.com/lbl-srg/modelica-buildings/issues/2471\">issue #2471</a>.
</li>
<li>
July 31, 2020, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>",   info="<html>
<p>
This model represents an energy transfer station as illustrated in the schematics
below.
</p>
<ul>
<li>
The heating and cooling functions are provided by a heat recovery chiller, see
<a href=\"modelica://Buildings.Experimental.DHC.EnergyTransferStations.Combined.Subsystems.Chiller\">
Buildings.Experimental.DHC.EnergyTransferStations.Combined.Subsystems.Chiller</a>
for the operating principles and modeling assumptions.
The condenser and evaporator loops are equipped with constant speed pumps.
</li>
<li>
The supervisory controller ensures the load balancing between the condenser side
and the evaporator side of the chiller by controlling in sequence an optional
geothermal borefield (priority system), the district heat exchanger (second
priority system), and ultimately the chiller, by resetting down the chilled
water supply temperature, see
<a href=\"modelica://Buildings.Experimental.DHC.EnergyTransferStations.Combined.Controls.Supervisory\">
Buildings.Experimental.DHC.EnergyTransferStations.Combined.Controls.Supervisory</a>
for a detailed description.
The borefield and district heat exchanger loops are equipped with
variable speed pumps modulated by the supervisory controller.
</li>
</ul>
<p>
Note that the heating and cooling enable signals (<code>uHea</code> and <code>uCoo</code>)
connected to this model should be switched to <code>false</code> when the
building has no corresponding demand (e.g., based on the requests yielded by
the terminal unit controllers, in conjunction with a schedule).
This will significantly improve the system performance as it is a
necessary condition for the chiller to be operated at a lower lift, see
<a href=\"modelica://Buildings.Experimental.DHC.EnergyTransferStations.Combined.Controls.Reset\">
Buildings.Experimental.DHC.EnergyTransferStations.Combined.Controls.Reset</a>.
<br/>
</p>
<p align=\"center\">
<img alt=\"System schematics\"
src=\"modelica://Buildings/Resources/Images/Experimental/DHC/EnergyTransferStations/Combined/ChillerBorefield.png\"/>
</p>
</html>"));
      end ChillerBorefield;

      model HeatPumpHeatExchanger "Model of a substation with heat pump and compressor-less cooling"
        extends estcp.DHC.EnergyTransferStations.BaseClasses.PartialETS(
          final typ=estcp.DHC.Types.DistrictSystemType.CombinedGeneration5,
          final have_weaBus=false,
          final have_chiWat=true,
          final have_heaWat=true,
          have_hotWat=false,
          final have_eleHea=true,
          final nFue=0,
          final have_eleCoo=false,
          final have_pum=true,
          final have_fan=false,
          nPorts_aHeaWat=1,
          nPorts_aChiWat=1);
        // SYSTEM GENERAL
        parameter Boolean have_varFloCon = true
          "Set to true for heat pumps with variable condenser flow"
          annotation(Evaluate=true);
        parameter Boolean have_varFloEva = true
          "Set to true for heat pumps with variable evaporator flow"
          annotation(Evaluate=true);
        parameter Real ratFloMin(
          final unit="1",
          final min=0,
          final max=1)=0.3
          "Minimum condenser or evaporator mass flow rate (ratio to nominal)"
          annotation (Dialog(enable=have_varFloCon or have_varFloEva));
        parameter Modelica.Units.SI.Temperature TDisWatMin
          "District water minimum temperature" annotation (Dialog(group="DHC system"));
        parameter Modelica.Units.SI.Temperature TDisWatMax
          "District water maximum temperature" annotation (Dialog(group="DHC system"));
        parameter Modelica.Units.SI.TemperatureDifference dT_nominal(min=0) = 5
          "Water temperature drop/increase accross load and source-side HX (always positive)"
          annotation (Dialog(group="Nominal condition"));
        parameter Modelica.Units.SI.Temperature TChiWatSup_nominal=291.15
          "Chilled water supply temperature"
          annotation (Dialog(group="Nominal conditions"));
        final parameter Modelica.Units.SI.Temperature TChiWatRet_nominal=
            TChiWatSup_nominal + dT_nominal "Chilled water return temperature"
          annotation (Dialog(group="Nominal condition"));
        parameter Modelica.Units.SI.Temperature THeaWatSup_nominal=313.15
          "Heating water supply temperature"
          annotation (Dialog(group="Nominal condition"));
        final parameter Modelica.Units.SI.Temperature THeaWatRet_nominal=
            THeaWatSup_nominal - dT_nominal "Heating water return temperature"
          annotation (Dialog(group="Nominal condition"));
        parameter Modelica.Units.SI.Temperature THotWatSup_nominal=336.15
          "Hot water supply temperature"
          annotation (Dialog(group="Nominal condition", enable=have_hotWat));
        parameter Modelica.Units.SI.Temperature TColWat_nominal=288.15
          "Cold water temperature (for hot water production)"
          annotation (Dialog(group="Nominal condition", enable=have_hotWat));
        parameter Modelica.Units.SI.Pressure dp_nominal(displayUnit="Pa") = 50000
          "Pressure difference at nominal flow rate (for each flow leg)"
          annotation (Dialog(group="Nominal condition"));
        final parameter Modelica.Units.SI.MassFlowRate mHeaWat_flow_nominal(min=0)=
          abs(QHeaWat_flow_nominal/cpBui_default/(THeaWatSup_nominal - THeaWatRet_nominal))
          "Heating water mass flow rate"
          annotation (Dialog(group="Nominal condition"));
        final parameter Modelica.Units.SI.MassFlowRate mChiWat_flow_nominal(min=0)=
          abs(QChiWat_flow_nominal/cpBui_default/(TChiWatSup_nominal - TChiWatRet_nominal))
          "Chilled water mass flow rate"
          annotation (Dialog(group="Nominal conditions"));
        final parameter Modelica.Units.SI.MassFlowRate mEvaHotWat_flow_nominal(min=0)=
             QHotWat_flow_nominal*(COPHotWat_nominal - 1)/COPHotWat_nominal/cpSer_default/dT_nominal
             "Evaporator water mass flow rate of heat pump for hot water production"
          annotation (Dialog(group="Nominal condition", enable=have_hotWat));
        final parameter Modelica.Units.SI.MassFlowRate mSerWat_flow_nominal(min=0)=
          max(proHeaWat.m2_flow_nominal + mEvaHotWat_flow_nominal, hexChi.m1_flow_nominal)
          "Service water mass flow rate"
          annotation (Dialog(group="Nominal condition"));
        constant Modelica.Units.SI.SpecificHeatCapacity cpBui_default=
          MediumBui.specificHeatCapacityCp(MediumBui.setState_pTX(
            p=MediumBui.p_default,
            T=MediumBui.T_default)) "Specific heat capacity of the fluid";
        constant Modelica.Units.SI.SpecificHeatCapacity cpSer_default=
          MediumBui.specificHeatCapacityCp(MediumSer.setState_pTX(
            p=MediumSer.p_default,
            T=MediumSer.T_default)) "Specific heat capacity of the fluid";
        // Heat pump for heating water production
        parameter Real COPHeaWat_nominal(final unit="1")
          "COP of heat pump for heating water production"
          annotation (Dialog(group="Nominal condition"));
        // Heat pump for hot water production
        parameter Real COPHotWat_nominal(final unit="1")
          "COP of heat pump for hot water production"
          annotation (Dialog(group="Nominal condition", enable=have_hotWat));
        // District HX
        final parameter Modelica.Units.SI.MassFlowRate m1HexChi_flow_nominal(min=0)=
             abs(QChiWat_flow_nominal/cpSer_default/dT_nominal)
          "CHW HX primary mass flow rate"
          annotation (Dialog(group="Nominal condition"));
        final parameter Modelica.Units.SI.MassFlowRate m2HexChi_flow_nominal(min=0)=
             abs(QChiWat_flow_nominal/cpSer_default/(THeaWatSup_nominal -
          THeaWatRet_nominal)) "CHW HX secondary mass flow rate"
          annotation (Dialog(group="Nominal condition"));
        // Dynamics
        parameter Modelica.Fluid.Types.Dynamics mixingVolumeEnergyDynamics=
          Modelica.Fluid.Types.Dynamics.FixedInitial
          "Formulation of energy balance for mixing volume at inlet and outlet"
           annotation(Dialog(tab="Dynamics"));
        // IO CONNECTORS
        Buildings.Controls.OBC.CDL.Interfaces.BooleanInput uCoo
          "Cooling enable signal"
          annotation (Placement(transformation(extent={{-340,
                  100},{-300,140}}), iconTransformation(extent={{-380,20},{-300,100}})));
        Buildings.Controls.OBC.CDL.Interfaces.BooleanInput uHea
          "Heating enable signal"
          annotation (Placement(transformation(extent={{-340,
                  140},{-300,180}}), iconTransformation(extent={{-380,60},{-300,140}})));
        Buildings.Controls.OBC.CDL.Interfaces.BooleanInput uSHW if have_hotWat
          "SHW production enable signal"
          annotation (Placement(transformation(extent=
                  {{-340,60},{-300,100}}), iconTransformation(extent={{-380,-20},{-300,
                  60}})));
        Buildings.Controls.OBC.CDL.Interfaces.RealInput THeaWatSupSet(
          final unit="K",
          displayUnit="degC")
          "Heating water supply temperature set point"
          annotation (Placement(
              transformation(
              extent={{-340,20},{-300,60}}),
              iconTransformation(
              extent={{-380,-60},{-300,20}})));
        Buildings.Controls.OBC.CDL.Interfaces.RealInput THotWatSupSet(
          final unit="K",
          displayUnit="degC") if have_hotWat
          "Service hot water supply temperature set point"
          annotation (Placement(
              transformation(
              extent={{-20,-20},{20,20}},
              rotation=0,
              origin={-320,-40}),
              iconTransformation(
              extent={{-380,-140},{-300,-60}})));
        Buildings.Controls.OBC.CDL.Interfaces.RealInput TColWat(
          final unit="K",
          displayUnit="degC") if have_hotWat
          "Cold water temperature" annotation (
            Placement(transformation(
              extent={{-20,-20},{20,20}},
              rotation=0,
              origin={-320,-80}), iconTransformation(
              extent={{-40,-40},{40,40}},
              rotation=0,
              origin={-340,-140})));
        Buildings.Controls.OBC.CDL.Interfaces.RealInput loaSHW(
          final unit="W") if have_hotWat "Service hot water load"
          annotation (
            Placement(transformation(
              extent={{-20,-20},{20,20}},
              rotation=0,
              origin={-320,-120}),iconTransformation(
              extent={{-40,-40},{40,40}},
              rotation=0,
              origin={-340,-180})));
        Buildings.Controls.OBC.CDL.Interfaces.RealInput TChiWatSupSet(final unit="K",
            displayUnit="degC")
          "Chilled water supply temperature set point" annotation (Placement(
              transformation(
              extent={{-340,-20},{-300,20}}),
              iconTransformation(
              extent={{-380,-100},{-300,-20}})));
        Buildings.Controls.OBC.CDL.Interfaces.RealOutput mHea_flow(final unit="kg/s")
          "District water mass flow rate used for heating service"
          annotation ( Placement(transformation(extent={{300,-160},{340,-120}}),
            iconTransformation(extent={{300,-160},{380,-80}})));
        Buildings.Controls.OBC.CDL.Interfaces.RealOutput mCoo_flow(final unit="kg/s")
          "District water mass flow rate used for cooling service"
          annotation ( Placement(transformation(extent={{300,-200},{340,-160}}),
            iconTransformation(extent={{300,-200},{380,-120}})));
        // COMPONENTS
        Buildings.Fluid.Delays.DelayFirstOrder volMix_a(
          redeclare final package Medium = MediumSer,
          final nPorts=if have_hotWat then 4 else 3,
          final m_flow_nominal=mSerWat_flow_nominal,
          tau=600,
          final energyDynamics=mixingVolumeEnergyDynamics)
          "Mixing volume to break algebraic loops and to emulate the delay of the substation"
          annotation (Placement(transformation(extent={{-270,-360},{-250,-380}})));
        Buildings.Fluid.Delays.DelayFirstOrder volMix_b(
          redeclare final package Medium = MediumSer,
          final nPorts=if have_hotWat then 4 else 3,
          final m_flow_nominal=mSerWat_flow_nominal,
          tau=600,
          final energyDynamics=mixingVolumeEnergyDynamics)
          "Mixing volume to break algebraic loops and to emulate the delay of the substation"
          annotation (Placement(transformation(extent={{250,-360},{270,-380}})));
        estcp.DHC.EnergyTransferStations.BaseClasses.Pump_m_flow pum1HexChi(
          redeclare final package Medium = MediumSer,
          final m_flow_nominal=m1HexChi_flow_nominal,
          final allowFlowReversal=allowFlowReversalSer,
          dp_nominal=dp_nominal) "Chilled water HX primary pump"
          annotation (Placement(transformation(extent={{110,-350},{90,-330}})));
        Buildings.Fluid.HeatExchangers.DryCoilEffectivenessNTU hexChi(
          redeclare final package Medium1 = MediumSer,
          redeclare final package Medium2 = MediumBui,
          final m1_flow_nominal=m1HexChi_flow_nominal,
          final m2_flow_nominal=m2HexChi_flow_nominal,
          final dp1_nominal=dp_nominal/2,
          final dp2_nominal=dp_nominal/2,
          configuration=Buildings.Fluid.Types.HeatExchangerConfiguration.CounterFlow,
          final Q_flow_nominal=QChiWat_flow_nominal,
          final T_a1_nominal=TDisWatMax,
          final T_a2_nominal=TChiWatRet_nominal,
          final allowFlowReversal1=allowFlowReversalSer,
          final allowFlowReversal2=allowFlowReversalBui)
          "Chilled water HX"
          annotation (Placement(transformation(extent={{10,-324},{-10,-344}})));
        Buildings.Fluid.Delays.DelayFirstOrder volHeaWatRet(
          redeclare final package Medium = MediumBui,
          final m_flow_nominal=proHeaWat.m1_flow_nominal,
          tau=60,
          final energyDynamics=mixingVolumeEnergyDynamics,
          T_start=THeaWatSup_nominal,
          nPorts=3) "Mixing volume representing building HHW primary" annotation (
            Placement(transformation(
              extent={{-10,10},{10,-10}},
              rotation=90,
              origin={90,180})));
        Buildings.Fluid.Sensors.MassFlowRate senMasFloHeaWat(
          redeclare final package Medium = MediumBui,
          final allowFlowReversal=allowFlowReversalBui)
          "Heating water mass flow rate"
          annotation (Placement(transformation(extent={{-250,250},{-230,270}})));
        Buildings.Fluid.Delays.DelayFirstOrder volChiWat(
          redeclare final package Medium = MediumBui,
          final m_flow_nominal=m1HexChi_flow_nominal,
          tau=60,
          final energyDynamics=mixingVolumeEnergyDynamics,
          T_start=TChiWatSup_nominal,
          nPorts=3) "Mixing volume representing building CHW primary"
          annotation (Placement(transformation(extent={{-110,-280},{-90,-260}})));
        Buildings.Fluid.Sensors.MassFlowRate senMasFloChiWat(
          redeclare final package Medium = MediumBui,
          final allowFlowReversal=allowFlowReversalBui)
          "Chilled water mass flow rate"
          annotation (Placement(transformation(extent={{-250,-130},{-230,-110}})));
        Buildings.Controls.OBC.CDL.Reals.MultiplyByParameter gai2(final k=
              m1HexChi_flow_nominal)
          annotation (Placement(transformation(extent={{-108,-210},{-88,-190}})));
        estcp.DHC.EnergyTransferStations.Combined.Controls.PIDWithEnable conTChiWat(
          k=0.05,
          Ti=120,
          yMax=1,
          controllerType=Buildings.Controls.OBC.CDL.Types.SimpleController.PI,
          reverseActing=false,
          yMin=0) "PI controller for district HX primary side" annotation (
            Placement(transformation(extent={{-150,-210},{-130,-190}})));
        Buildings.Controls.OBC.CDL.Reals.MultiSum PPumHeaTot(final nin=2)
          "Total pump power for heating applications"
          annotation (Placement(transformation(extent={{190,410},{210,430}})));
        Buildings.Fluid.Sources.Boundary_pT bouHeaWat(
          redeclare final package Medium = MediumBui,
          nPorts=1)
          "Pressure boundary condition representing the expansion vessel"
          annotation (Placement(transformation(extent={{10,-10},{-10,10}},
            rotation=-90,
            origin={60,150})));
        Buildings.Fluid.Sources.Boundary_pT bouChiWat(
          redeclare final package Medium = MediumBui,
          nPorts=1)
          "Pressure boundary condition representing the expansion vessel"
          annotation (Placement(transformation(extent={{-162,-290},{-142,-270}})));
        Buildings.Controls.OBC.CDL.Reals.MultiSum PPumCooTot(nin=1)
          "Total pump power for space cooling"
          annotation (Placement(transformation(extent={{190,370},{210,390}})));
        Buildings.Controls.OBC.CDL.Reals.MultiSum PPumTot(nin=2)
          "Total pump power"
          annotation (Placement(transformation(extent={{220,390},{240,410}})));
        Buildings.Fluid.Sensors.TemperatureTwoPort senTHeaWatSup(
          redeclare final package Medium=MediumBui,
          final allowFlowReversal=allowFlowReversalBui,
          final m_flow_nominal=mHeaWat_flow_nominal)
          "Heating water supply temperature"
          annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={140,260})));
        Buildings.Fluid.Sensors.TemperatureTwoPort senTChiWatSup(
          redeclare final package Medium=MediumBui,
          final allowFlowReversal=allowFlowReversalBui,
          final m_flow_nominal=mChiWat_flow_nominal)
          "Chilled water supply temperature"
          annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={140,-280})));
        estcp.DHC.EnergyTransferStations.Combined.Subsystems.SwitchBox swiFlo(
            redeclare final package Medium = MediumSer, final m_flow_nominal=
              mSerWat_flow_nominal) "Flow switch box"
          annotation (Placement(transformation(extent={{-10,-390},{10,-370}})));
        estcp.DHC.EnergyTransferStations.BaseClasses.Junction bypHeaWatSup(
            redeclare final package Medium = MediumBui, final m_flow_nominal=
              proHeaWat.m1_flow_nominal*{1,-1,-1})
          "Bypass heating water (supply)" annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={100,260})));
        estcp.DHC.EnergyTransferStations.BaseClasses.Junction bypHeaWatRet(
            redeclare final package Medium = MediumBui, final m_flow_nominal=
              proHeaWat.m1_flow_nominal*{1,-1,1})
          "Bypass heating water (return)" annotation (Placement(transformation(
              extent={{10,10},{-10,-10}},
              rotation=0,
              origin={100,240})));
        Buildings.Controls.OBC.CDL.Logical.TrueFalseHold enaHea(
          trueHoldDuration=15*60) "Enable heating"
          annotation (Placement(transformation(extent={{-140,150},{-120,170}})));
        estcp.DHC.EnergyTransferStations.Combined.Subsystems.HeatPump proHeaWat(
          redeclare final package Medium1 = MediumBui,
          redeclare final package Medium2 = MediumSer,
          final have_varFloCon=have_varFloCon,
          final have_varFloEva=have_varFloEva,
          final COP_nominal=COPHeaWat_nominal,
          final TCon_nominal=THeaWatSup_nominal,
          final TEva_nominal=TDisWatMin - dT_nominal,
          final Q1_flow_nominal=QHeaWat_flow_nominal,
          final allowFlowReversal1=allowFlowReversalBui,
          final allowFlowReversal2=allowFlowReversalSer,
          final dT1_nominal=dT_nominal,
          final dT2_nominal=-dT_nominal,
          final dp1_nominal=dp_nominal,
          final dp2_nominal=dp_nominal)
          "Subsystem for heating water production"
          annotation (Placement(transformation(extent={{-10,204},{10,224}})));
        estcp.DHC.EnergyTransferStations.Combined.Subsystems.HeatPump proHotWat(
          redeclare final package Medium1 = MediumBui,
          redeclare final package Medium2 = MediumSer,
          final have_pumCon=false,
          final have_varFloEva=have_varFloEva,
          final COP_nominal=COPHotWat_nominal,
          final TCon_nominal=THotWatSup_nominal,
          final TEva_nominal=TDisWatMin - dT_nominal,
          final Q1_flow_nominal=QHotWat_flow_nominal,
          final allowFlowReversal1=allowFlowReversalBui,
          final allowFlowReversal2=allowFlowReversalSer,
          final dT1_nominal=THotWatSup_nominal - TColWat_nominal,
          final dT2_nominal=-dT_nominal,
          final dp1_nominal=dp_nominal,
          final dp2_nominal=dp_nominal) if have_hotWat
          "Subsystem for hot water production"
          annotation (Placement(transformation(extent={{-10,24},{10,44}})));
        Buildings.Fluid.Sources.Boundary_pT sinSHW(redeclare final package
            Medium = MediumBui, nPorts=1) if have_hotWat
          "Sink for service hot water" annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=180,
              origin={-60,60})));
        Buildings.Fluid.Sources.MassFlowSource_T souColWat(
          redeclare final package Medium = MediumBui,
          use_m_flow_in=true,
          use_T_in=true,
          nPorts=1) if have_hotWat "Source for cold water"
          annotation (Placement(transformation(extent={{-48,-50},{-28,-30}})));
        Buildings.Controls.OBC.CDL.Reals.Divide div1 if have_hotWat
          "Compute mass flow rate from load"
          annotation (Placement(transformation(extent={{-100,-50},{-80,-30}})));
        Buildings.Controls.OBC.CDL.Reals.MultiplyByParameter gai(final k=
              cpBui_default) if have_hotWat "Times Cp"
          annotation (Placement(transformation(extent={{-120,-10},{-100,10}})));
        Buildings.Controls.OBC.CDL.Reals.MultiSum masFloHeaTot(final nin=2)
          "Compute district water mass flow rate used for heating service"
          annotation (Placement(transformation(extent={{270,-150},{290,-130}})));
        Modelica.Blocks.Sources.Constant zer(final k=0) if not have_hotWat
          "Replacement variable"
          annotation (Placement(transformation(extent={{140,350},{160,370}})));
        Buildings.Fluid.Sensors.TemperatureTwoPort senTHeaWatRet(
          redeclare final package Medium = MediumBui,
          final allowFlowReversal=allowFlowReversalBui,
          final m_flow_nominal=mHeaWat_flow_nominal)
          "Heating water return temperature" annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={20,300})));
        Buildings.Fluid.Sensors.TemperatureTwoPort senTChiWatRet(
          redeclare final package Medium = MediumBui,
          final allowFlowReversal=allowFlowReversalBui,
          final m_flow_nominal=mChiWat_flow_nominal)
          "Chilled water return temperature" annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={40,-120})));
        Buildings.Controls.OBC.CDL.Reals.Subtract delT if have_hotWat
          "Compute DeltaT needed on condenser side"
          annotation (Placement(transformation(extent={{-150,-10},{-130,10}})));
        Buildings.Fluid.Sensors.MassFlowRate senMasFloHeaWatPri(redeclare
            final package Medium = MediumBui, final allowFlowReversal=
              allowFlowReversalBui) "Primary heating water mass flow rate"
          annotation (Placement(transformation(extent={{30,270},{50,250}})));
        Buildings.Controls.OBC.CDL.Logical.TrueFalseHold enaSHW(
          trueHoldDuration=15*60) if have_hotWat "Enable SHW production"
          annotation (Placement(transformation(extent={{-140,70},{-120,90}})));
        Modelica.Blocks.Sources.Constant zer1(k=0) if not have_hotWat
          "Replacement variable"
          annotation (Placement(transformation(extent={{-40,-250},{-20,-230}})));
        Buildings.Controls.OBC.CDL.Reals.Add masFloHea
          "Service water mass flow rate for heating applications"
          annotation (
            Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=-90,
              origin={0,-264})));
        Buildings.Controls.OBC.CDL.Reals.MultiSum PHeaTot(final nin=2)
          "Total power used for heating and hot water production"
          annotation (Placement(transformation(extent={{270,70},{290,90}})));
        Buildings.Controls.OBC.CDL.Reals.Add heaFloEvaSHW if have_hotWat and have_varFloEva
          "Heat flow rate at evaporator"
          annotation (Placement(transformation(extent={{-100,90},{-80,110}})));
        Buildings.Controls.OBC.CDL.Reals.Subtract dTHHW
          "Heating hot water DeltaT"
          annotation (Placement(transformation(extent={{0,310},{-20,330}})));
        Buildings.Controls.OBC.CDL.Reals.MultiplyByParameter capFloHHW(
          final k=cpBui_default) if have_varFloEva or have_varFloCon "Capacity flow rate"
          annotation (Placement(transformation(extent={{-220,310},{-200,330}})));
        Buildings.Controls.OBC.CDL.Reals.Add heaFloEvaHHW if have_varFloEva
          "Heat flow rate at evaporator"
          annotation (Placement(transformation(extent={{-100,230},{-80,250}})));
        estcp.DHC.EnergyTransferStations.Combined.Controls.PrimaryVariableFlow conFloEvaSHW(
          final Q_flow_nominal=-QHotWat_flow_nominal*(1 - 1/COPHotWat_nominal),

          final dT_nominal=-dT_nominal,
          final ratFloMin=ratFloMin,
          final cp=cpSer_default) if have_hotWat and have_varFloEva
          "Mass flow rate control"
          annotation (Placement(transformation(extent={{-60,90},{-40,110}})));
        estcp.DHC.EnergyTransferStations.Combined.Controls.PrimaryVariableFlow conFloConHHW(
          final Q_flow_nominal=QHeaWat_flow_nominal,
          final dT_nominal=dT_nominal,
          final ratFloMin=ratFloMin,
          final cp=cpBui_default) if have_varFloCon "Mass flow rate control"
          annotation (Placement(transformation(extent={{-100,270},{-80,290}})));
        estcp.DHC.EnergyTransferStations.Combined.Controls.PrimaryVariableFlow conFloEvaHHW(
          final Q_flow_nominal=-QHeaWat_flow_nominal*(1 - 1/COPHeaWat_nominal),

          final dT_nominal=-dT_nominal,
          final ratFloMin=ratFloMin,
          final cp=cpSer_default) if have_varFloEva "Mass flow rate control"
          annotation (Placement(transformation(extent={{-60,230},{-40,250}})));
        Buildings.Controls.OBC.CDL.Reals.Max priOve if have_varFloCon
          "Ensure primary overflow"
          annotation (Placement(transformation(extent={{-60,270},{-40,290}})));
        Buildings.Controls.OBC.CDL.Reals.Multiply loaHHW
          if have_varFloEva or have_varFloCon "Heating load"
          annotation (Placement(transformation(extent={{-140,270},{-120,290}})));

        Buildings.Controls.OBC.CDL.Reals.MultiplyByParameter toSub(final k=-1)
          if have_hotWat "Convert to subtraction"
          annotation (Placement(transformation(extent={{-80,70},{-100,90}})));
        Buildings.Controls.OBC.CDL.Reals.MultiplyByParameter toSub1(final k=-1)
          if have_hotWat "Convert to subtraction"
          annotation (Placement(transformation(extent={{-80,216},{-100,236}})));
      equation
        connect(TChiWatSupSet, conTChiWat.u_s) annotation (Line(points={{-320,0},{-200,
                0},{-200,-200},{-152,-200}},  color={0,0,127}));
        connect(pum1HexChi.P, PPumCooTot.u[1]) annotation (Line(points={{89,-331},{84,
                -331},{84,-322},{180,-322},{180,380},{188,380}}, color={0,0,127}));
        connect(PPumHeaTot.y, PPumTot.u[1]) annotation (Line(points={{212,420},{216,420},
                {216,399.5},{218,399.5}},
                                      color={0,0,127}));
        connect(PPumCooTot.y, PPumTot.u[2]) annotation (Line(points={{212,380},{216,380},
                {216,400.5},{218,400.5}},
                                      color={0,0,127}));
        connect(pum1HexChi.port_b, hexChi.port_a1) annotation (Line(points={{90,-340},
                {10,-340}},                              color={0,127,255}));
        connect(pum1HexChi.m_flow_actual, mCoo_flow) annotation (Line(points={{89,-335},
                {82,-335},{82,-320},{276,-320},{276,-180},{320,-180}}, color={0,0,127}));
        connect(volMix_a.ports[1], swiFlo.port_bSup) annotation (Line(points={{-260,-360},
                {-6,-360},{-6,-370}}, color={0,127,255}));
        connect(swiFlo.port_aRet, volMix_b.ports[1]) annotation (Line(points={{6,-370},
                {6,-360},{260,-360}}, color={0,127,255}));
        connect(volMix_b.ports[2], pum1HexChi.port_a) annotation (Line(points={{260,-360},
                {258,-360},{258,-340},{110,-340}}, color={0,127,255}));
        connect(hexChi.port_b1, volMix_a.ports[2]) annotation (Line(points={{-10,-340},
                {-256,-340},{-256,-360},{-260,-360}}, color={0,127,255}));
        connect(pum1HexChi.m_flow_actual, swiFlo.mRev_flow) annotation (Line(points={
                {89,-335},{80,-335},{80,-356},{-20,-356},{-20,-384},{-12,-384}},
              color={0,0,127}));
        connect(gai2.y, pum1HexChi.m_flow_in)
          annotation (Line(points={{-86,-200},{100,-200},{100,-328}},
                                                                color={0,0,127}));
        connect(PPumTot.y, PPum) annotation (Line(points={{242,400},{244,400},{244,-40},
                {320,-40}}, color={0,0,127}));
        connect(ports_aHeaWat[1], senMasFloHeaWat.port_a) annotation (Line(points={{-300,
                260},{-250,260}},                            color={0,127,255}));
        connect(bypHeaWatSup.port_2, senTHeaWatSup.port_a)
          annotation (Line(points={{110,260},{130,260}}, color={0,127,255}));
        connect(senTHeaWatSup.port_b, ports_bHeaWat[1])
          annotation (Line(points={{150,260},{300,260}}, color={0,127,255}));
        connect(bypHeaWatRet.port_2, volHeaWatRet.ports[1]) annotation (Line(points={{90,240},
                {80,240},{80,178.667}},             color={0,127,255}));
        connect(bouHeaWat.ports[1], volHeaWatRet.ports[2]) annotation (Line(points={{60,160},
                {60,180},{80,180}},                color={0,127,255}));
        connect(ports_aChiWat[1], senMasFloChiWat.port_a) annotation (Line(points={{-300,
                200},{-280,200},{-280,-120},{-250,-120}},    color={0,127,255}));
        connect(senTChiWatSup.port_b, ports_bChiWat[1]) annotation (Line(points={{150,
                -280},{200,-280},{200,200},{300,200}}, color={0,127,255}));
        connect(bypHeaWatRet.port_3, bypHeaWatSup.port_3)
          annotation (Line(points={{100,250},{100,250}}, color={0,127,255}));
        connect(volHeaWatRet.ports[3], proHeaWat.port_a1) annotation (Line(points={{80,
                181.333},{80,180},{-20,180},{-20,208},{-10,208}}, color={0,127,255}));
        connect(proHeaWat.port_b2, volMix_b.ports[3]) annotation (Line(points={{10,
                220},{262,220},{262,-360},{260,-360}}, color={0,127,255}));
        connect(volMix_a.ports[3], proHeaWat.port_a2) annotation (Line(points={{-260,
                -360},{-260,200},{14,200},{14,208},{10,208}}, color={0,127,255}));
        connect(enaHea.y, proHeaWat.uEna) annotation (Line(points={{-118,160},{-48,160},
                {-48,223},{-12,223}}, color={255,0,255}));
        connect(THeaWatSupSet, proHeaWat.TSupSet) annotation (Line(points={{-320,40},{
                -200,40},{-200,217},{-12,217}},
                                              color={0,0,127}));
        connect(proHeaWat.PPum, PPumHeaTot.u[1]) annotation (Line(points={{12,214},{172,
                214},{172,419.5},{188,419.5}},
                                           color={0,0,127}));
        connect(volMix_a.ports[4], proHotWat.port_a2) annotation (Line(points={{-260,
                -360},{-258,-360},{-258,20},{14,20},{14,28},{10,28}}, color={0,127,
                255}));
        connect(proHotWat.port_b2, volMix_b.ports[4])
          annotation (Line(points={{10,40},{260,40},{260,-360}}, color={0,127,255}));
        connect(THotWatSupSet, proHotWat.TSupSet) annotation (Line(points={{-320,-40},
                {-160,-40},{-160,37},{-12,37}}, color={0,0,127}));
        connect(sinSHW.ports[1], proHotWat.port_b1) annotation (Line(points={{-50,60},
                {-20,60},{-20,40},{-10,40}}, color={0,127,255}));
        connect(TColWat, souColWat.T_in) annotation (Line(points={{-320,-80},{-60,-80},
                {-60,-36},{-50,-36}}, color={0,0,127}));
        connect(gai.y, div1.u2) annotation (Line(points={{-98,0},{-80,0},{-80,-20},{-120,
                -20},{-120,-46},{-102,-46}},                color={0,0,127}));
        connect(loaSHW, div1.u1) annotation (Line(points={{-320,-120},{-290,-120},{-290,
                -34},{-102,-34}}, color={0,0,127}));
        connect(masFloHeaTot.y, mHea_flow)
          annotation (Line(points={{292,-140},{320,-140}}, color={0,0,127}));
        connect(proHotWat.mEva_flow, masFloHeaTot.u[2]) annotation (Line(points={{12,31},
                {218,31},{218,-139.5},{268,-139.5}},
                                                 color={0,0,127}));
        connect(zer.y, masFloHeaTot.u[2]) annotation (Line(points={{161,360},{216,360},
                {216,-144},{268,-144},{268,-139.5}},
                                                  color={0,0,127}));
        connect(proHotWat.PPum, PPumHeaTot.u[2]) annotation (Line(points={{12,34},{176,
                34},{176,420},{188,420},{188,420.5}},
                                                    color={0,0,127}));
        connect(proHeaWat.mEva_flow, masFloHeaTot.u[1]) annotation (Line(points={{12,211},
                {220,211},{220,-140.5},{268,-140.5}},
                                                  color={0,0,127}));
        connect(zer.y, PPumHeaTot.u[2]) annotation (Line(points={{161,360},{174,360},{
                174,418},{188,418},{188,420.5}},
                                               color={0,0,127}));
        connect(senMasFloHeaWat.port_b, senTHeaWatRet.port_a) annotation (Line(points={{-230,
                260},{-220,260},{-220,300},{10,300}},        color={0,127,255}));
        connect(senTHeaWatRet.port_b, bypHeaWatRet.port_1) annotation (Line(points={{30,300},
                {120,300},{120,240},{110,240}},      color={0,127,255}));
        connect(senMasFloChiWat.port_b, senTChiWatRet.port_a)
          annotation (Line(points={{-230,-120},{30,-120}}, color={0,127,255}));
        connect(souColWat.ports[1], proHotWat.port_a1) annotation (Line(points={{-28,-40},
                {-20,-40},{-20,28},{-10,28}}, color={0,127,255}));
        connect(delT.y, gai.u)
          annotation (Line(points={{-128,0},{-122,0}},     color={0,0,127}));
        connect(TColWat, delT.u2) annotation (Line(points={{-320,-80},{-156,-80},{-156,
                -6},{-152,-6}},   color={0,0,127}));
        connect(THotWatSupSet, delT.u1) annotation (Line(points={{-320,-40},{-160,-40},
                {-160,6},{-152,6}},
                                  color={0,0,127}));
        connect(proHeaWat.port_b1, senMasFloHeaWatPri.port_a) annotation (Line(points=
               {{-10,220},{-20,220},{-20,260},{30,260}}, color={0,127,255}));
        connect(senMasFloHeaWatPri.port_b, bypHeaWatSup.port_1)
          annotation (Line(points={{50,260},{90,260}},  color={0,127,255}));
        connect(port_aSerAmb, swiFlo.port_aSup) annotation (Line(points={{-300,-200},{
                -272,-200},{-272,-344},{-280,-344},{-280,-400},{-6,-400},{-6,-390}},
                                                             color={0,127,255}));
        connect(swiFlo.port_bRet, port_bSerAmb) annotation (Line(points={{6,-390},{6,
                -400},{280,-400},{280,-200},{300,-200}},
                                                   color={0,127,255}));
        connect(uHea, enaHea.u) annotation (Line(points={{-320,160},{-142,160}},
                             color={255,0,255}));
        connect(conTChiWat.y, gai2.u)
          annotation (Line(points={{-128,-200},{-110,-200}}, color={0,0,127}));
        connect(uCoo, conTChiWat.uEna) annotation (Line(points={{-320,120},{-180,120},
                {-180,-220},{-144,-220},{-144,-212}}, color={255,0,255}));
        connect(uSHW, enaSHW.u)
          annotation (Line(points={{-320,80},{-142,80}}, color={255,0,255}));
        connect(enaSHW.y, proHotWat.uEna) annotation (Line(points={{-118,80},{-114,80},
                {-114,43},{-12,43}},color={255,0,255}));
        connect(div1.y, souColWat.m_flow_in) annotation (Line(points={{-78,-40},{-68,-40},
                {-68,-32},{-50,-32}}, color={0,0,127}));
        connect(senTChiWatRet.port_b, volChiWat.ports[1]) annotation (Line(points={{50,-120},
                {60,-120},{60,-280},{-101.333,-280}},          color={0,127,255}));
        connect(volChiWat.ports[2], hexChi.port_a2) annotation (Line(points={{-100,
                -280},{-120,-280},{-120,-320},{-20,-320},{-20,-328},{-10,-328}},
              color={0,127,255}));
        connect(hexChi.port_b2, senTChiWatSup.port_a) annotation (Line(points={{10,
                -328},{20,-328},{20,-320},{80,-320},{80,-280},{130,-280}}, color={0,
                127,255}));
        connect(bouChiWat.ports[1], volChiWat.ports[3])
          annotation (Line(points={{-142,-280},{-98.6667,-280}}, color={0,127,255}));
        connect(senTChiWatSup.T, conTChiWat.u_m) annotation (Line(points={{140,-269},
                {140,-220},{-140,-220},{-140,-212}}, color={0,0,127}));
        connect(zer1.y, masFloHea.u2) annotation (Line(points={{-19,-240},{-8,-240},{
                -8,-252},{-6,-252}}, color={0,0,127}));
        connect(proHotWat.mEva_flow, masFloHea.u2) annotation (Line(points={{12,31},{18,
                31},{18,-240},{-6,-240},{-6,-252}}, color={0,0,127}));
        connect(proHeaWat.mEva_flow, masFloHea.u1) annotation (Line(points={{12,211},{
                20,211},{20,-246},{6,-246},{6,-252}}, color={0,0,127}));
        connect(masFloHea.y, swiFlo.mPos_flow) annotation (Line(points={{0,-276},{0,
                -320},{-16,-320},{-16,-376},{-12,-376}}, color={0,0,127}));
        connect(proHeaWat.PHea, PHeaTot.u[1]) annotation (Line(points={{12,217},{240,217},
                {240,79.5},{268,79.5}},       color={0,0,127}));
        connect(proHotWat.PHea, PHeaTot.u[2]) annotation (Line(points={{12,37},{240,37},
                {240,80.5},{268,80.5}},
                                    color={0,0,127}));
        connect(zer.y, PHeaTot.u[2]) annotation (Line(points={{161,360},{242,360},{242,
                78},{268,78},{268,80.5}},    color={0,0,127}));
        connect(PHeaTot.y, PHea)
          annotation (Line(points={{292,80},{320,80}}, color={0,0,127}));
        connect(loaSHW, heaFloEvaSHW.u1) annotation (Line(points={{-320,-120},{-288,
                -120},{-288,-36},{-164,-36},{-164,106},{-102,106}},
                                                             color={0,0,127}));
        connect(senTHeaWatRet.T, dTHHW.u2)
          annotation (Line(points={{20,311},{20,314},{2,314}}, color={0,0,127}));
        connect(senTHeaWatSup.T, dTHHW.u1)
          annotation (Line(points={{140,271},{140,326},{2,326}}, color={0,0,127}));
        connect(senMasFloHeaWat.m_flow, capFloHHW.u) annotation (Line(points={{-240,271},
                {-240,320},{-222,320}}, color={0,0,127}));
        connect(conFloEvaSHW.m_flow, proHotWat.m2_flow) annotation (Line(points={{-38,100},
                {-16,100},{-16,31},{-12,31}},               color={0,0,127}));
        connect(conFloEvaHHW.m_flow, proHeaWat.m2_flow) annotation (Line(points={{-38,240},
                {-28,240},{-28,211},{-12,211}},      color={0,0,127}));
        connect(senMasFloHeaWat.m_flow, priOve.u1) annotation (Line(points={{-240,271},
                {-240,296},{-70,296},{-70,286},{-62,286}}, color={0,0,127}));
        connect(conFloConHHW.m_flow, priOve.u2) annotation (Line(points={{-78,280},{-70,
                280},{-70,274},{-62,274}}, color={0,0,127}));
        connect(priOve.y, proHeaWat.m1_flow) annotation (Line(points={{-38,280},{-24,280},
                {-24,214},{-12,214}}, color={0,0,127}));
        connect(heaFloEvaSHW.y, conFloEvaSHW.loa)
          annotation (Line(points={{-78,100},{-62,100}}, color={0,0,127}));
        connect(heaFloEvaHHW.y, conFloEvaHHW.loa)
          annotation (Line(points={{-78,240},{-62,240}}, color={0,0,127}));
        connect(capFloHHW.y, loaHHW.u2) annotation (Line(points={{-198,320},{-180,320},
                {-180,274},{-142,274}}, color={0,0,127}));
        connect(dTHHW.y, loaHHW.u1) annotation (Line(points={{-22,320},{-160,320},{
                -160,286},{-142,286}}, color={0,0,127}));
        connect(loaHHW.y, conFloConHHW.loa)
          annotation (Line(points={{-118,280},{-102,280}}, color={0,0,127}));
        connect(loaHHW.y, heaFloEvaHHW.u1) annotation (Line(points={{-118,280},{-110,
                280},{-110,246},{-102,246}}, color={0,0,127}));
        connect(proHotWat.PHea, toSub.u) annotation (Line(points={{12,37},{18,37},{18,
                80},{-78,80}}, color={0,0,127}));
        connect(toSub.y, heaFloEvaSHW.u2) annotation (Line(points={{-102,80},{-108,80},
                {-108,94},{-102,94}}, color={0,0,127}));
        connect(proHeaWat.PHea, toSub1.u) annotation (Line(points={{12,217},{20,217},
                {20,226},{-78,226}}, color={0,0,127}));
        connect(toSub1.y, heaFloEvaHHW.u2) annotation (Line(points={{-102,226},{-110,
                226},{-110,234},{-102,234}}, color={0,0,127}));
        annotation (
        defaultComponentName="ets",
        Documentation(info="<html>
<p>
This model represents an energy transfer station as described in Sommer (2020).
</p>
<ul>
<li>
The cooling function is provided in a compressor-less mode by a heat exchanger
connected to the service line.
The chilled water is typically produced at high temperature and distributed
to radiant cooling systems, for instance at 19&deg;C.
</li>
<li>
The heating functions are provided by water-to-water heat pumps.
<ul>
<li>
By default the condenser and evaporator loops are operated
with variable mass flow rate, with a lower limit specified by the ratio
<code>ratFloMin</code>.
The model can also represent constant flow condenser and evaporator loops
by setting <code>have_varFloCon</code> and <code>have_varFloEva</code>
to <code>false</code>.
</li>
<li>
The evaporator water is supplied by mixing the flow rate from the direct connection
to the service line to the flow rate from the primary side of the cooling
heat exchanger.
The hydronic arrangement modeled in
<a href=\"modelica://Buildings.Experimental.DHC.EnergyTransferStations.Combined.Subsystems.SwitchBox\">
Buildings.Experimental.DHC.EnergyTransferStations.Combined.Subsystems.SwitchBox</a>
ensures that the resulting fluid stream in the service line always flows
in the same direction.
</li>
<li>
The heating hot water is typically produced at low temperature,
for instance 40&deg;C.
</li>
</ul>
</li>
</ul>
<h4>Controls</h4>
<p>
Heating (resp. cooling) is enabled based on the input signal <code>uHea</code>
(resp. <code>uCoo</code>) which is held for <i>15</i> minutes, meaning that,
when enabled, the mode remains active for at least <i>15</i> minutes and,
when disabled, the mode cannot be enabled again for at least <i>15</i> minutes.
The heating and cooling enable signals should be computed externally based
on a schedule (to lock out the system during off-hours), ideally in conjunction
with the number of requests yielded by the terminal unit controllers, or any
other signal representative of the load.
</p>
<p>
When enabled,
</p>
<ul>
<li>
the heat pumps and the evaporator and condenser water pumps are controlled
based on the principles described in
<a href=\"modelica://Buildings.Experimental.DHC.EnergyTransferStations.Combined.Subsystems.HeatPump\">
Buildings.Experimental.DHC.EnergyTransferStations.Combined.Subsystems.HeatPump</a>.
The evaporator and condenser water mass flow rates are computed based on the
logic described in
<a href=\"modelica://Buildings.Experimental.DHC.EnergyTransferStations.Combined.Controls.PrimaryVariableFlow\">
Buildings.Experimental.DHC.EnergyTransferStations.Combined.Controls.PrimaryVariableFlow</a>.
</li>
<li>
the cooling heat exchanger primary pump is modulated based on a PI control
loop tracking the chilled water supply temperature at the outlet of the heat exchanger
secondary side.
</li>
</ul>
<h4>Modeling considerations</h4>
<p>
There is a control volume at each of the two fluid ports that serve as inlet and outlet
of the heating and cooling systems. These approximate the dynamics
of the substation, and they also generally avoid nonlinear systems
of equations if multiple substations are connected to each other.
</p>
<h4>References</h4>
<p>
Sommer T., Sulzer M., Wetter M., Sotnikov A., Mennel S., Stettler C.
<i>The reservoir network: A new network topology for district heating
and cooling.</i>
Energy, Volume 199, 15 May 2020, 117418.
</p>
</html>",
        revisions="<html>
<ul>
<li>
May 17, 2023, by David Blum:<br/>
Assigned dp_nominal to <code>pum1HexChi</code>.<br/>
Corrected calculation of heat pump evaporator mass flow control.<br/>
This is for
<a href=\"https://github.com/lbl-srg/modelica-buildings/issues/3379\">
issue 3379</a>.
</li>
<li>
February 23, 2021, by Antoine Gautier:<br/>
Refactored with subsystem models and partial ETS base class.<br/>
This is for
<a href=\"https://github.com/lbl-srg/modelica-buildings/issues/1769\">
issue 1769</a>.
</li>
<li>
December 12, 2017, by Michael Wetter:<br/>
Removed call to <code>Modelica.Utilities.Files.loadResource</code>.<br/>
This is for
<a href=\"https://github.com/lbl-srg/modelica-buildings/issues/1097\">issue 1097</a>.
</li>
</ul>
</html>"),Diagram(coordinateSystem(extent={{-300,-420},{300,440}})),
          Icon(coordinateSystem(preserveAspectRatio=false, extent={{-300,-300},{300,300}})));
      end HeatPumpHeatExchanger;

      package Controls "Package of control blocks for fifth generation DHC ETS"
        extends Modelica.Icons.VariantsPackage;

        model Borefield
          "Borefield controller"
          extends Modelica.Blocks.Icons.Block;
          parameter Modelica.Units.SI.Temperature TBorWatEntMax(displayUnit="degC")
            "Maximum value of borefield water entering temperature";
          parameter Real spePumBorMin(
            final unit="1")=0.1
            "Borefield pump minimum speed";
          Buildings.Controls.OBC.CDL.Interfaces.RealInput yValIso_actual[2]
            "Isolation valves return position (fractional)"
            annotation (Placement(transformation(extent={{-140,-60},{-100,-20}}),
            iconTransformation(extent={{-140,-20},{-100,20}})));
          Buildings.Controls.OBC.CDL.Interfaces.RealInput u
            "Control signal from supervisory"
            annotation (Placement(transformation(extent={{-140,40},{-100,80}}),
            iconTransformation(extent={{-140,40},{-100,80}})));
          Buildings.Controls.OBC.CDL.Interfaces.RealOutput yPum(
            final unit="kg/s")
            "Control signal for borefield pump"
            annotation (Placement(transformation(extent={{100,40},{140,80}}),
            iconTransformation(extent={{100,40},{140,80}})));
          Buildings.Controls.OBC.CDL.Interfaces.RealOutput yValMix(
            final unit="1")
            "Control signal for borefield mixing valve"
            annotation (Placement(transformation(extent={{100,-80},{140,-40}}),
            iconTransformation(extent={{100,-80},{140,-40}})));
          Buildings.Controls.OBC.CDL.Interfaces.RealInput TBorWatEnt(
            final unit="K",
            displayUnit="degC")
            "Borefield water entering temperature"
            annotation (Placement(transformation(extent={{-140,-120},{-100,-80}}),
            iconTransformation(extent={{-140,-80},{-100,-40}})));
          Buildings.Controls.OBC.CDL.Reals.PIDWithReset conMix(
            final yMin=0,
            final yMax=1,
            final reverseActing=true,
            y_reset=0,
            k=0.1,
            final controllerType=Modelica.Blocks.Types.SimpleController.PI,
            Ti(
              displayUnit="s")=120)
            "Mixing valve controller"
            annotation (Placement(transformation(extent={{-10,-90},{10,-70}})));
          Buildings.Controls.OBC.CDL.Reals.Sources.Constant maxTBorWatEnt(
            y(final unit="K",
              displayUnit="degC"),
            final k=TBorWatEntMax)
            "Maximum value of borefield water entering temperature"
            annotation (Placement(transformation(extent={{-50,-90},{-30,-70}})));
          Buildings.Controls.OBC.CDL.Reals.GreaterThreshold opeVal(
            final t=0.9,
            final h=0.1)
            "True if at least one isolation valve is open"
            annotation (Placement(transformation(extent={{-50,-58},{-30,-38}})));
          Buildings.Controls.OBC.CDL.Reals.MultiMax multiMax1(
            final nin=2)
            "Maximum opening"
            annotation (Placement(transformation(extent={{-90,-50},{-70,-30}})));
          Buildings.Controls.OBC.CDL.Reals.GreaterThreshold enaSup(
            final t=0.05,
            final h=0.025)
            "Borefield enabled from supervisory"
            annotation (Placement(transformation(extent={{-50,-30},{-30,-10}})));
          Buildings.Controls.OBC.CDL.Reals.Switch runBor
            "Enable borefield system pump"
            annotation (Placement(transformation(extent={{70,50},{90,70}})));
          Buildings.Controls.OBC.CDL.Reals.Sources.Constant limVal(
            final k=0.3)
            "Control signal value for full opening of the valve"
            annotation (Placement(transformation(extent={{-40,10},{-20,30}})));
          Buildings.Controls.OBC.CDL.Reals.Sources.Constant speMin(
            final k=spePumBorMin)
            "Minimum pump speed"
            annotation (Placement(transformation(extent={{-40,74},{-20,94}})));
          Buildings.Controls.OBC.CDL.Logical.And enaBor
            "Borefield enable signal"
            annotation (Placement(transformation(extent={{-10,-40},{10,-20}})));
          Buildings.Controls.OBC.CDL.Reals.Line mapSpe
            "Mapping function for pump speed"
            annotation (Placement(transformation(extent={{20,70},{40,90}})));
          Buildings.Controls.OBC.CDL.Reals.Sources.Constant one(
            final k=1)
            "One"
            annotation (Placement(transformation(extent={{-20,-10},{0,10}})));
          Buildings.Controls.OBC.CDL.Reals.Sources.Constant zer(
            final k=0)
            "Zero"
            annotation (Placement(transformation(extent={{-60,30},{-40,50}})));
          Buildings.Controls.OBC.CDL.Reals.Line mapVal
            "Mapping function for valve opening"
            annotation (Placement(transformation(extent={{20,30},{40,50}})));
          Buildings.Controls.OBC.CDL.Reals.Min min1
            "Minimum"
            annotation (Placement(transformation(extent={{70,-70},{90,-50}})));
        equation
          connect(multiMax1.y,opeVal.u)
            annotation (Line(points={{-68,-40},{-60,-40},{-60,-48},{-52,-48}},color={0,0,127}));
          connect(yValIso_actual,multiMax1.u)
            annotation (Line(points={{-120,-40},{-92,-40}},color={0,0,127}));
          connect(u,enaSup.u)
            annotation (Line(points={{-120,60},{-80,60},{-80,-20},{-52,-20}},color={0,0,127}));
          connect(enaSup.y,enaBor.u1)
            annotation (Line(points={{-28,-20},{-20,-20},{-20,-30},{-12,-30}},color={255,0,255}));
          connect(opeVal.y,enaBor.u2)
            annotation (Line(points={{-28,-48},{-20,-48},{-20,-38},{-12,-38}},color={255,0,255}));
          connect(enaBor.y,conMix.trigger)
            annotation (Line(points={{12,-30},{20,-30},{20,-96},{-6,-96},{-6,-92}},color={255,0,255}));
          connect(maxTBorWatEnt.y,conMix.u_s)
            annotation (Line(points={{-28,-80},{-12,-80}},color={0,0,127}));
          connect(runBor.y,yPum)
            annotation (Line(points={{92,60},{120,60}},color={0,0,127}));
          connect(TBorWatEnt,conMix.u_m)
            annotation (Line(points={{-120,-100},{0,-100},{0,-92}},color={0,0,127}));
          connect(enaBor.y,runBor.u2)
            annotation (Line(points={{12,-30},{20,-30},{20,20},{64,20},{64,60},{68,60}},color={255,0,255}));
          connect(mapSpe.y,runBor.u1)
            annotation (Line(points={{42,80},{60,80},{60,68},{68,68}},color={0,0,127}));
          connect(u,mapSpe.u)
            annotation (Line(points={{-120,60},{0,60},{0,80},{18,80}},color={0,0,127}));
          connect(speMin.y,mapSpe.f1)
            annotation (Line(points={{-18,84},{18,84}},color={0,0,127}));
          connect(min1.y,yValMix)
            annotation (Line(points={{92,-60},{120,-60}},color={0,0,127}));
          connect(conMix.y,min1.u2)
            annotation (Line(points={{12,-80},{60,-80},{60,-66},{68,-66}},color={0,0,127}));
          connect(mapVal.y,min1.u1)
            annotation (Line(points={{42,40},{60,40},{60,-54},{68,-54}},color={0,0,127}));
          connect(one.y,mapSpe.x2)
            annotation (Line(points={{2,0},{12,0},{12,76},{18,76}},color={0,0,127}));
          connect(one.y,mapSpe.f2)
            annotation (Line(points={{2,0},{12,0},{12,72},{18,72}},color={0,0,127}));
          connect(one.y,mapVal.f2)
            annotation (Line(points={{2,0},{12,0},{12,32},{18,32}},color={0,0,127}));
          connect(zer.y,mapVal.x1)
            annotation (Line(points={{-38,40},{-10,40},{-10,48},{18,48}},color={0,0,127}));
          connect(limVal.y,mapVal.x2)
            annotation (Line(points={{-18,20},{6,20},{6,36},{18,36}},color={0,0,127}));
          connect(u,mapVal.u)
            annotation (Line(points={{-120,60},{0,60},{0,40},{18,40}},color={0,0,127}));
          connect(limVal.y,mapSpe.x1)
            annotation (Line(points={{-18,20},{6,20},{6,88},{18,88}},color={0,0,127}));
          connect(zer.y,mapVal.f1)
            annotation (Line(points={{-38,40},{-10,40},{-10,44},{18,44}},color={0,0,127}));
          connect(zer.y,runBor.u3)
            annotation (Line(points={{-38,40},{-10,40},{-10,52},{68,52}},color={0,0,127}));
          annotation (
            Diagram(
              coordinateSystem(
                preserveAspectRatio=false,
                extent={{-100,-120},{100,120}})),
            defaultComponentName="con",
            Documentation(
              revisions="<html>
<ul>
<li>
July 31, 2020, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>",     info="<html>
<p>
This block implements the control logic for the borefield system.
The main control signal <code>u</code> is yielded by the hot side
or cold side controller, see for instance
<a href=\"modelica://Buildings.Experimental.DHC.EnergyTransferStations.Combined.Controls.SideHot\">
Buildings.Experimental.DHC.EnergyTransferStations.Combined.Controls.SideHot</a>.
</p>
<p>
The system is enabled when
</p>
<ul>
<li>
the main control signal is greater than zero,
</li>
<li>
the return position of at least one isolation valve is greater than 90%.
</li>
</ul>
<p>
When the system is enabled,
</p>
<ul>
<li>
the input signal is mapped to modulate in sequence the mixing valve
(from full bypass to closed bypass for a control signal varying between
0% and 30%) and the pump speed (from the minimum to the maximum value
for a control signal varying between 30% and 100%),
</li>
<li>
a PI loop tracks the maximum inlet temperature, the minimum between this
loop output and the previously mapped signal being used to modulate the
valve.
</li>
</ul>
<p>
Note that the first control signal for the valve is needed to stabilize
the control of the system when the mass flow rate required to meet
the heat or cold rejection demand is below the flow rate corresponding
to the minimum pump speed.
</p>
</html>"));
        end Borefield;

        model Chiller
          "Chiller controller"
          extends Modelica.Blocks.Icons.Block;
          parameter Modelica.Units.SI.Temperature TConWatEntMin(displayUnit="degC")
            "Minimum value of condenser water entering temperature";
          parameter Modelica.Units.SI.Temperature TEvaWatEntMax(displayUnit="degC")
            "Maximum value of evaporator water entering temperature";
          Buildings.Controls.OBC.CDL.Interfaces.BooleanInput uCoo
            "Cooling enable signal"
            annotation (Placement(transformation(extent={{-200,20},{-160,60}}),
            iconTransformation(extent={{-140,10},{-100,50}})));
          Buildings.Controls.OBC.CDL.Interfaces.BooleanInput uHea
            "Heating enable signal"
            annotation (Placement(transformation(extent={{-200,60},{-160,100}}),
            iconTransformation(extent={{-140,50},{-100,90}})));
          Buildings.Controls.OBC.CDL.Interfaces.RealInput TConWatEnt(
            final unit="K",
            displayUnit="degC")
            "Condenser water entering temperature"
            annotation (Placement(transformation(extent={{-200,-100},{-160,-60}}),
            iconTransformation(extent={{-140,-90},{-100,-50}})));
          Buildings.Controls.OBC.CDL.Interfaces.RealInput TEvaWatEnt(
            final unit="K",
            displayUnit="degC")
            "Evaporator water entering temperature"
            annotation (Placement(transformation(extent={{-200,-40},{-160,0}}),
            iconTransformation(extent={{-140,-50},{-100,-10}})));
          Buildings.Controls.OBC.CDL.Interfaces.RealOutput yValCon
            "Condenser mixing valve control signal"
            annotation (Placement(transformation(extent={{160,-80},{200,-40}}),
            iconTransformation(extent={{100,-90},{140,-50}})));
          Buildings.Controls.OBC.CDL.Interfaces.RealOutput yValEva
            "Evaporator mixing valve control signal"
            annotation (Placement(transformation(extent={{160,-20},{200,20}}),
            iconTransformation(extent={{100,-50},{140,-10}})));
          Buildings.Controls.OBC.CDL.Interfaces.BooleanOutput yChi
            "Chiller enable signal"
            annotation (Placement(transformation(extent={{160,40},{200,80}}),
            iconTransformation(extent={{100,40},{140,80}})));
          Buildings.Controls.OBC.CDL.Logical.Or heaOrCoo
            "Heating or cooling enabled"
            annotation (Placement(transformation(extent={{-120,50},{-100,70}})));
          PIDWithEnable conValEva(
            final controllerType=Modelica.Blocks.Types.SimpleController.PI,
            final yMax=1,
            final yMin=0,
            y_reset=0,
            k=0.1,
            Ti(
              displayUnit="s")=60,
            final reverseActing=true)
            "Evaporator three-way valve control"
            annotation (Placement(transformation(extent={{50,-10},{70,10}})));
          PIDWithEnable conValCon(
            final controllerType=Modelica.Blocks.Types.SimpleController.PI,
            final yMax=1,
            final yMin=0,
            y_reset=0,
            k=0.1,
            Ti(
              displayUnit="s")=60,
            final reverseActing=false)
            "Condenser three-way valve control"
            annotation (Placement(transformation(extent={{50,-70},{70,-50}})));
          Buildings.Controls.OBC.CDL.Reals.Sources.Constant maxTEvaWatEnt(
            y(final unit="K",
              displayUnit="degC"),
            final k=TEvaWatEntMax)
            "Maximum value of evaporator water entering temperature"
            annotation (Placement(transformation(extent={{-10,-10},{10,10}})));
          Buildings.Controls.OBC.CDL.Reals.Sources.Constant minTConWatEnt(
            y(final unit="K",
              displayUnit="degC"),
            final k=TConWatEntMin)
            "Minimum value of condenser water entering temperature"
            annotation (Placement(transformation(extent={{-10,-70},{10,-50}})));
        equation
          connect(TEvaWatEnt,conValEva.u_m)
            annotation (Line(points={{-180,-20},{60,-20},{60,-12}},color={0,0,127}));
          connect(TConWatEnt,conValCon.u_m)
            annotation (Line(points={{-180,-80},{60,-80},{60,-72}},color={0,0,127}));
          connect(heaOrCoo.y,yChi)
            annotation (Line(points={{-98,60},{180,60}},color={255,0,255}));
          connect(uHea,heaOrCoo.u1)
            annotation (Line(points={{-180,80},{-140,80},{-140,60},{-122,60}},color={255,0,255}));
          connect(uCoo,heaOrCoo.u2)
            annotation (Line(points={{-180,40},{-140,40},{-140,52},{-122,52}},color={255,0,255}));
          connect(maxTEvaWatEnt.y,conValEva.u_s)
            annotation (Line(points={{12,0},{48,0}},color={0,0,127}));
          connect(minTConWatEnt.y,conValCon.u_s)
            annotation (Line(points={{12,-60},{48,-60}},color={0,0,127}));
          connect(conValEva.y,yValEva)
            annotation (Line(points={{72,0},{180,0}},color={0,0,127}));
          connect(heaOrCoo.y,conValEva.uEna)
            annotation (Line(points={{-98,60},{-40,60},{-40,-16},{56,-16},{56,-12}},color={255,0,255}));
          connect(heaOrCoo.y,conValCon.uEna)
            annotation (Line(points={{-98,60},{-40,60},{-40,-76},{56,-76},{56,-72}},color={255,0,255}));
          connect(conValCon.y,yValCon)
            annotation (Line(points={{72,-60},{180,-60}},color={0,0,127}));
          annotation (
            Icon(
              coordinateSystem(
                preserveAspectRatio=false,
                extent={{-100,-100},{100,100}})),
            Diagram(
              coordinateSystem(
                preserveAspectRatio=false,
                extent={{-160,-120},{160,120}})),
            defaultComponentName="con",
            Documentation(
              revisions="<html>
<ul>
<li>
July 31, 2020, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>",     info="<html>
<p>
This is a controller for the chiller system, which includes the dedicated
condenser and evaporator pumps.
</p>
<p>
The system is enabled if any of the input control signals <code>uHea</code>
or <code>uCoo</code> is <code>true</code>.
When enabled,
</p>
<ul>
<li>
the condenser and evaporator pumps are operated at constant speed,
</li>
<li>
the condenser (resp. evaporator) mixing valve is modulated with a PI
loop controlling the minimum (resp. maximum) inlet temperature.
</li>
</ul>
</html>"));
        end Chiller;

        model HeatExchanger
          "District heat exchanger controller"
          extends Modelica.Blocks.Icons.Block;
          parameter DHC.EnergyTransferStations.Types.ConnectionConfiguration conCon
            "District connection configuration" annotation (Evaluate=true);
          parameter Real spePum1Min(
            final unit="1",
            min=0)=0.1
            "Heat exchanger primary pump minimum speed (fractional)"
            annotation (Dialog(enable=not have_val1));
          parameter Real spePum2Min(
            final unit="1",
            min=0.01)=0.1
            "Heat exchanger secondary pump minimum speed (fractional)";
          Buildings.Controls.OBC.CDL.Interfaces.RealInput yValIso[2]
            "Isolation valves return position (index 1 for condenser)"
            annotation (Placement(transformation(extent={{-260,-60},{-220,-20}}),
                                                                               iconTransformation(extent={{-140,-70},{-100,-30}})));
          Buildings.Controls.OBC.CDL.Interfaces.RealOutput y1(final unit="1")
            "District heat exchanger primary control signal" annotation (Placement(
                transformation(extent={{220,20},{260,60}}), iconTransformation(extent={
                    {100,40},{140,80}})));
          Buildings.Controls.OBC.CDL.Interfaces.RealOutput yPum2(
            final unit="1")
            "District heat exchanger secondary pump control signal"
            annotation (Placement(transformation(extent={{220,-20},{260,20}}),
                                                                             iconTransformation(extent={{100,-20},{140,20}})));
          Buildings.Controls.OBC.CDL.Interfaces.RealOutput yVal2(
            final unit="1")
            "District heat exchanger secondary valve control signal"
            annotation (Placement(transformation(extent={{220,-80},{260,-40}}),iconTransformation(extent={{100,-80},{140,-40}})));
          Buildings.Controls.OBC.CDL.Reals.Max max1
            "Maximum between control signal and minimum speed or opening"
            annotation (Placement(transformation(extent={{90,-70},{110,-50}})));
          Buildings.Controls.OBC.CDL.Reals.Switch swiOff1
            "Output zero if not enabled"
            annotation (Placement(transformation(extent={{160,-70},{180,-50}})));
          Buildings.Controls.OBC.CDL.Reals.Sources.Constant min1(
            final k=if have_val1 then 0 else spePum1Min)
            "Minimum pump speed or actuator opening"
            annotation (Placement(transformation(extent={{40,-90},{60,-70}})));
          Buildings.Controls.OBC.CDL.Interfaces.RealInput u
            "Control signal for secondary side (from supervisory)"
            annotation (Placement(transformation(extent={{-260,20},{-220,60}}),  iconTransformation(extent={{-140,30},{-100,70}})));
          Buildings.Controls.OBC.CDL.Reals.GreaterThreshold greThr(
            final t=0.01,
            final h=0.005)
            "Check for heat or cold rejection demand"
            annotation (Placement(transformation(extent={{-170,30},{-150,50}})));
          Buildings.Controls.OBC.CDL.Logical.And and2
            "At least one valve is open and HX circuit is enabled"
            annotation (Placement(transformation(extent={{-60,-10},{-40,10}})));
          Buildings.Controls.OBC.CDL.Reals.GreaterThreshold heaRej(
            final t=0.9,
            final h=0.1)
            "Heat rejection if condenser isolation valve is open"
            annotation (Placement(transformation(extent={{-170,-10},{-150,10}})));
          Buildings.Controls.OBC.CDL.Reals.GreaterThreshold cooRej(
            final t=0.9,
            final h=0.1)
            "Cold rejection if evaporator isolation valve is open"
            annotation (Placement(transformation(extent={{-170,-50},{-150,-30}})));
          Buildings.Controls.OBC.CDL.Logical.Or or1
            "At least one valve is open "
            annotation (Placement(transformation(extent={{-110,-30},{-90,-10}})));
          Buildings.Controls.OBC.CDL.Reals.Sources.Constant speMin(
            final k=spePum2Min)
            "Minimum pump speed"
            annotation (Placement(transformation(extent={{-10,70},{10,90}})));
          Buildings.Controls.OBC.CDL.Reals.Switch swiOff2
            "Output zero if not enabled"
            annotation (Placement(transformation(extent={{160,50},{180,70}})));
          Buildings.Controls.OBC.CDL.Reals.Line mapSpe
            "Mapping function for pump speed"
            annotation (Placement(transformation(extent={{90,50},{110,70}})));
          Buildings.Controls.OBC.CDL.Reals.Sources.Constant one(
            final k=1)
            "One"
            annotation (Placement(transformation(extent={{40,10},{60,30}})));
          Buildings.Controls.OBC.CDL.Reals.Sources.Constant zer(
            final k=0)
            "Zero"
            annotation (Placement(transformation(extent={{-10,-50},{10,-30}})));
          Buildings.Controls.OBC.CDL.Reals.Sources.Constant hal(
            final k=0.3)
            "Control signal value for full opening of the valve"
            annotation (Placement(transformation(extent={{-10,10},{10,30}})));
          Buildings.Controls.OBC.CDL.Reals.Line mapVal
            "Mapping function for valve opening"
            annotation (Placement(transformation(extent={{90,10},{110,30}})));
        protected
          parameter Boolean have_val1=conCon ==DHC.EnergyTransferStations.Types.ConnectionConfiguration.TwoWayValve
            "True in case of control valve on district side, false in case of a pump";
        equation
          connect(swiOff1.y, y1) annotation (Line(points={{182,-60},{200,-60},{200,40},
                  {240,40}}, color={0,0,127}));
          connect(max1.y,swiOff1.u1)
            annotation (Line(points={{112,-60},{126,-60},{126,-52},{158,-52}},color={0,0,127}));
          connect(u,greThr.u)
            annotation (Line(points={{-240,40},{-172,40}},  color={0,0,127}));
          connect(greThr.y,and2.u1)
            annotation (Line(points={{-148,40},{-80,40},{-80,0},{-62,0}},    color={255,0,255}));
          connect(and2.y,swiOff1.u2)
            annotation (Line(points={{-38,0},{140,0},{140,-60},{158,-60}},  color={255,0,255}));
          connect(cooRej.y,or1.u2)
            annotation (Line(points={{-148,-40},{-120,-40},{-120,-28},{-112,-28}},
                                                                              color={255,0,255}));
          connect(heaRej.y,or1.u1)
            annotation (Line(points={{-148,0},{-120,0},{-120,-20},{-112,-20}},color={255,0,255}));
          connect(or1.y,and2.u2)
            annotation (Line(points={{-88,-20},{-80,-20},{-80,-8},{-62,-8}},
                                                                          color={255,0,255}));
          connect(min1.y,max1.u2)
            annotation (Line(points={{62,-80},{80,-80},{80,-66},{88,-66}},  color={0,0,127}));
          connect(swiOff2.y,yPum2)
            annotation (Line(points={{182,60},{190,60},{190,0},{240,0}},      color={0,0,127}));
          connect(one.y,mapSpe.x2)
            annotation (Line(points={{62,20},{70,20},{70,56},{88,56}},    color={0,0,127}));
          connect(one.y,mapSpe.f2)
            annotation (Line(points={{62,20},{70,20},{70,52},{88,52}},    color={0,0,127}));
          connect(u,mapSpe.u)
            annotation (Line(points={{-240,40},{-180,40},{-180,60},{88,60}},    color={0,0,127}));
          connect(speMin.y,mapSpe.f1)
            annotation (Line(points={{12,80},{70,80},{70,64},{88,64}},    color={0,0,127}));
          connect(mapSpe.y,swiOff2.u1)
            annotation (Line(points={{112,60},{120,60},{120,68},{158,68}},    color={0,0,127}));
          connect(zer.y,swiOff2.u3)
            annotation (Line(points={{12,-40},{120,-40},{120,52},{158,52}},color={0,0,127}));
          connect(zer.y,swiOff1.u3)
            annotation (Line(points={{12,-40},{120,-40},{120,-68},{158,-68}},
                                                                           color={0,0,127}));
          connect(hal.y,mapSpe.x1)
            annotation (Line(points={{12,20},{20,20},{20,68},{88,68}},    color={0,0,127}));
          connect(u,mapVal.u)
            annotation (Line(points={{-240,40},{-180,40},{-180,60},{84,60},{84,20},{88,20}},      color={0,0,127}));
          connect(zer.y,mapVal.x1)
            annotation (Line(points={{12,-40},{80,-40},{80,28},{88,28}},color={0,0,127}));
          connect(zer.y,mapVal.f1)
            annotation (Line(points={{12,-40},{80,-40},{80,24},{88,24}},color={0,0,127}));
          connect(one.y,mapVal.f2)
            annotation (Line(points={{62,20},{70,20},{70,12},{88,12}},  color={0,0,127}));
          connect(hal.y,mapVal.x2)
            annotation (Line(points={{12,20},{20,20},{20,4},{84,4},{84,16},{88,16}},    color={0,0,127}));
          connect(mapVal.y,yVal2)
            annotation (Line(points={{112,20},{210,20},{210,-60},{240,-60}},  color={0,0,127}));
          connect(and2.y,swiOff2.u2)
            annotation (Line(points={{-38,0},{-20,0},{-20,40},{130,40},{130,60},{158,60}},      color={255,0,255}));
          connect(u, max1.u1)
            annotation (Line(points={{-240,40},{-200,40},{-200,-60},{80,-60},{80,-54},{
                  88,-54}},                                                                        color={0,0,127}));
          connect(yValIso[1], heaRej.u)
            annotation (Line(points={{-240,-50},{-238,-40},{-180,-40},{-180,0},{-172,0}}, color={0,0,127}));
          connect(yValIso[2], cooRej.u) annotation (Line(points={{-240,-30},{-240,-40},{-172,-40}}, color={0,0,127}));
          annotation (
            Diagram(
              coordinateSystem(
                preserveAspectRatio=false,
                extent={{-220,-120},{220,120}})),
            defaultComponentName="con",
            Documentation(
              revisions="<html>
<ul>
<li>
July 14, 2021, by Antoine Gautier:<br/>
Updated the control logic.<br/>
This is for <a href=\"https://github.com/lbl-srg/modelica-buildings/issues/2561\">issue #2561</a>.
</li>
<li>
July 31, 2020, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>",     info="<html>
<p>
This block implements the control logic for the district heat exchanger,
which realizes the interface between the building system and the district system.
</p>
<p>
The input signal <code>u</code> is yielded by the supervisory controller, see
<a href=\"modelica://Buildings.Experimental.DHC.EnergyTransferStations.Combined.Controls.Supervisory\">
Buildings.Experimental.DHC.EnergyTransferStations.Combined.Controls.Supervisory</a>.
The primary and secondary circuits are enabled to operate if this input signal
is greater than zero and the return position of at least one isolation valve
is greater than 90%.
When enabled,
</p>
<ul>
<li>
the secondary circuit is controlled based on the input signal <code>u</code>,
which is mapped to modulate in sequence the mixing valve
(from full bypass to closed bypass for a control signal varying between
0% and 30%) and the pump speed (from the minimum to the maximum value
for a control signal varying between 30% and 100%),
</li>
<li>
the primary pump speed (or valve opening) is directly modulated with
the input signal <code>u</code>.
</li>
</ul>
<p>
Note that the valve on the secondary side is needed to stabilize the control
of the system when the secondary mass flow rate required to meet the heat or
cold rejection demand is below the flow rate corresponding to the minimum pump speed.
</p>
</html>"));
        end HeatExchanger;

        block PIDWithEnable
          "PID controller with enable signal"
          extends Modelica.Blocks.Icons.Block;
          parameter Buildings.Controls.OBC.CDL.Types.SimpleController controllerType=Buildings.Controls.OBC.CDL.Types.SimpleController.PI
            "Type of controller";
          parameter Real k(
            min=0)=1
            "Gain of controller";
          parameter Modelica.Units.SI.Time Ti(min=Buildings.Controls.OBC.CDL.Constants.small)
             = 0.5 "Time constant of integrator block" annotation (Dialog(enable=
                  controllerType == Buildings.Controls.OBC.CDL.Types.SimpleController.PI
                   or controllerType == Buildings.Controls.OBC.CDL.Types.SimpleController.PID));
          parameter Modelica.Units.SI.Time Td(min=0) = 0.1
            "Time constant of derivative block" annotation (Dialog(enable=
                  controllerType == Buildings.Controls.OBC.CDL.Types.SimpleController.PD
                   or controllerType == Buildings.Controls.OBC.CDL.Types.SimpleController.PID));
          parameter Real r(
            min=100*Modelica.Constants.eps)=1
            "Typical range of control error, used for scaling the control error";
          parameter Real yMin=0
            "Lower limit of output";
          parameter Real yMax=1
            "Upper limit of output";
          parameter Boolean reverseActing=true
            "Set to true for reverse acting, or false for direct acting control action";
          parameter Real y_reset=yMin
            "Value to which the controller output is reset if the boolean trigger has a rising edge";
          parameter Real y_neutral=y_reset
            "Value to which the controller output is reset when the controller is disabled";
          Buildings.Controls.OBC.CDL.Interfaces.RealInput u_s
            "Connector of setpoint input signal"
            annotation (Placement(transformation(extent={{-140,-20},{-100,20}}),iconTransformation(extent={{-140,-20},{-100,20}})));
          Buildings.Controls.OBC.CDL.Interfaces.RealInput u_m
            "Connector of measurement input signal"
            annotation (Placement(transformation(origin={0,-120},extent={{20,-20},{-20,20}},rotation=270),iconTransformation(extent={{20,-20},{-20,20}},rotation=270,origin={0,-120})));
          Buildings.Controls.OBC.CDL.Interfaces.RealOutput y
            "Connector of actuator output signal"
            annotation (Placement(transformation(extent={{100,-20},{140,20}}),iconTransformation(extent={{100,-20},{140,20}})));
          Buildings.Controls.OBC.CDL.Interfaces.BooleanInput uEna
            "Enable signal"
            annotation (Placement(transformation(extent={{-20,-20},{20,20}},rotation=90,origin={-60,-120}),iconTransformation(extent={{-20,-20},{20,20}},rotation=90,origin={-40,-120})));
          Buildings.Controls.OBC.CDL.Reals.PIDWithReset conPID(
            final k=k,
            final Ti=Ti,
            final Td=Td,
            final r=r,
            final controllerType=controllerType,
            final yMin=yMin,
            final yMax=yMax,
            final reverseActing=reverseActing,
            final y_reset=y_reset)
            annotation (Placement(transformation(extent={{-10,-10},{10,10}})));
          Buildings.Controls.OBC.CDL.Reals.Switch swi
            annotation (Placement(transformation(extent={{-40,-10},{-20,10}})));
          Buildings.Controls.OBC.CDL.Reals.Switch swi1
            annotation (Placement(transformation(extent={{72,-10},{92,10}})));
          Buildings.Controls.OBC.CDL.Reals.Sources.Constant valDis(
            final k=y_neutral)
            "Value when disabled"
            annotation (Placement(transformation(extent={{30,-50},{50,-30}})));
        equation
          connect(conPID.u_s,swi.y)
            annotation (Line(points={{-12,0},{-18,0}},color={0,0,127}));
          connect(uEna,swi.u2)
            annotation (Line(points={{-60,-120},{-60,-21.5625},{-60,0},{-42,0}},color={255,0,255}));
          connect(u_s,swi.u1)
            annotation (Line(points={{-120,0},{-80,0},{-80,8},{-42,8}},color={0,0,127}));
          connect(u_m,swi.u3)
            annotation (Line(points={{0,-120},{0,-80},{-50,-80},{-50,-8},{-42,-8}},color={0,0,127}));
          connect(uEna,conPID.trigger)
            annotation (Line(points={{-60,-120},{-60,-20},{-6,-20},{-6,-12}},color={255,0,255}));
          connect(u_m,conPID.u_m)
            annotation (Line(points={{0,-120},{0,-12}},color={0,0,127}));
          connect(conPID.y,swi1.u1)
            annotation (Line(points={{12,0},{40,0},{40,8},{70,8}},color={0,0,127}));
          connect(swi1.y,y)
            annotation (Line(points={{94,0},{120,0}},color={0,0,127}));
          connect(uEna,swi1.u2)
            annotation (Line(points={{-60,-120},{-60,-20},{60,-20},{60,0},{70,0}},color={255,0,255}));
          connect(valDis.y,swi1.u3)
            annotation (Line(points={{52,-40},{64,-40},{64,-8},{70,-8}},color={0,0,127}));
          annotation (
            defaultComponentName="conPID",
            Icon(
              coordinateSystem(
                preserveAspectRatio=false)),
            Diagram(
              coordinateSystem(
                preserveAspectRatio=false)),
            Documentation(
              info="<html>
<p>
This is an update of
<a href=\"modelica://Buildings.Controls.OBC.CDL.Reals.PIDWithReset\">
Buildings.Controls.OBC.CDL.Reals.PIDWithReset</a>
with an additional Boolean input representing an enable signal.
</p>
<ul>
<li>
When enabled, the controller output is identical to
<a href=\"modelica://Buildings.Controls.OBC.CDL.Reals.PIDWithReset\">
Buildings.Controls.OBC.CDL.Reals.PIDWithReset</a>
(and the controller integral term is reset to <code>yMin</code> at
enabling time).
</li>
<li>
When disabled, the controller output is zero (and the set point
is replaced by the measurement signal to avoid any
time integration of the control error).
</li>
</ul>
</html>"));
        end PIDWithEnable;

        model PredictLeavingTemperature
          "Block that predicts heat exchanger leaving water temperature"
          extends Modelica.Blocks.Icons.Block;
          parameter Modelica.Units.SI.TemperatureDifference dTApp_nominal
            "Heat exchanger approach" annotation (Dialog(group="Nominal condition"));
          parameter Modelica.Units.SI.MassFlowRate m2_flow_nominal
            "Heat exchanger secondary mass flow rate"
            annotation (Dialog(group="Nominal condition"));
          Buildings.Controls.OBC.CDL.Interfaces.RealInput T1WatEnt(
            final unit="K",
            displayUnit="degC")
            "Heat exchanger primary water entering temperature"
            annotation (Placement(transformation(extent={{-140,-60},{-100,-20}}),
              iconTransformation(extent={{-140,-70},{-100,-30}})));
          Buildings.Controls.OBC.CDL.Interfaces.RealOutput T2WatLvg(
            final unit="K",
            displayUnit="degC")
            "Heat exchanger secondary water leaving temperature"
            annotation (Placement(transformation(extent={{100,-20},{140,20}}),
                iconTransformation(extent={{100,-20},{140,20}})));
          Buildings.Controls.OBC.CDL.Interfaces.RealInput m2_flow(
            final unit="kg/s")
            "Heat exchanger secondary mass flow rate" annotation (Placement(
                transformation(extent={{-140,20},{-100,60}}), iconTransformation(extent=
                   {{-140,30},{-100,70}})));
        protected
          Real ratLoa "Part load ratio";
        equation
          ratLoa = min(1, abs(m2_flow / m2_flow_nominal));
          T2WatLvg = T1WatEnt + dTApp_nominal * ratLoa;
        annotation (
          defaultComponentName="calTemLvg",
          Documentation(
            revisions="<html>
<ul>
<li>
July 14, 2021, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>",     info="<html>
<p>
This block computes the predicted heat exchanger leaving water temperature
as used in
<a href=\"modelica://Buildings.Experimental.DHC.EnergyTransferStations.Combined.Controls.WatersideEconomizer\">
Buildings.Experimental.DHC.EnergyTransferStations.Combined.Controls.WatersideEconomizer</a>.
</p>
<p>
The predicted heat exchanger approach is computed as
</p>
<p>
<i>dTApp = dTApp_nominal * m2_flow / m2_flow_nominal</i>.
</p>
<p>
Which gives the predicted heat exchanger leaving water temperature as
</p>
<p>
<i>T2WatLvg = T1WatEnt + dTApp</i>.
</p>
</html>"));
        end PredictLeavingTemperature;

        block PrimaryVariableFlow
          "Ideal control of condenser or evaporator variable flow rate"
          extends Modelica.Blocks.Icons.Block;
          parameter Modelica.Units.SI.HeatFlowRate Q_flow_nominal
            "Heat flow rate at nominal conditions (>0 for condenser)";
          parameter Modelica.Units.SI.TemperatureDifference dT_nominal(min=if
                Q_flow_nominal > 0 then Modelica.Constants.eps else -100, max=if
                Q_flow_nominal < 0 then -Modelica.Constants.eps else 100)
            "DeltaT at nominal conditions (>0 for condenser)";
          parameter Real ratFloMin(
            final unit="1",
            final min=0,
            final max=1)=0.3
            "Minimum mass flow rate (ratio to nominal)";
          constant Modelica.Units.SI.SpecificHeatCapacity cp=Buildings.Utilities.Psychrometrics.Constants.cpWatLiq
            "Specific heat capacity";
          final parameter Modelica.Units.SI.MassFlowRate m_flow_nominal(min=0)=
            Q_flow_nominal/cp/dT_nominal "Mass flow rate at nominal conditions";
          Buildings.Controls.OBC.CDL.Interfaces.RealInput loa(final unit="W")
            "Signal approximating the load on condenser or evaporator"
            annotation (
              Placement(transformation(extent={{-140,-20},{-100,20}}),
                iconTransformation(extent={{-140,-20},{-100,20}})));
          Buildings.Controls.OBC.CDL.Interfaces.RealOutput m_flow(final unit="kg/s")
            "Mass flow rate"
            annotation (Placement(transformation(extent={{100,-20},{140,20}}),
              iconTransformation(extent={{100,-20},{140,20}})));
          Buildings.Controls.OBC.CDL.Reals.Sources.Constant masFloMin(
            final k=ratFloMin*m_flow_nominal)
            "Minimum mass flow rate"
            annotation (Placement(transformation(extent={{-10,30},{10,50}})));
          Buildings.Controls.OBC.CDL.Reals.MultiplyByParameter masFlo_dT(final k=1
                /cp/dT_nominal) "Mass flow rate for constant DeltaT"
            annotation (Placement(transformation(extent={{-60,-10},{-40,10}})));
          Buildings.Controls.OBC.CDL.Reals.Max masFlo "Mass flow rate"
            annotation (Placement(transformation(extent={{40,-10},{60,10}})));
          Buildings.Controls.OBC.CDL.Reals.Abs abs1 "Absolute value"
            annotation (Placement(transformation(extent={{-10,-10},{10,10}})));
        equation
          connect(loa, masFlo_dT.u)
            annotation (Line(points={{-120,0},{-62,0}}, color={0,0,127}));
          connect(masFloMin.y, masFlo.u1) annotation (Line(points={{12,40},{20,40},{20,
                  6},{38,6}}, color={0,0,127}));
          connect(masFlo.y, m_flow)
            annotation (Line(points={{62,0},{120,0}}, color={0,0,127}));
          connect(masFlo_dT.y, abs1.u)
            annotation (Line(points={{-38,0},{-12,0}}, color={0,0,127}));
          connect(abs1.y, masFlo.u2)
            annotation (Line(points={{12,0},{20,0},{20,-6},{38,-6}}, color={0,0,127}));
          annotation (
            defaultComponentName="conFlo",
            Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
                coordinateSystem(preserveAspectRatio=false)),
            Documentation(info="<html>
<p>
This block implements an ideal control of the evaporator (or condenser) water
mass flow rate.
The control intent aims to maintain a constant water temperature difference
<code>dT_nominal</code> across the heat exchanger, within the limit of a
minimum mass flow rate ratio <code>ratFloMin</code>.
For computational performance and to avoid the use of a PI controller,
the required mass flow rate is computed based on a signal representative of
the load.
</p>
</html>",         revisions="<html>
<ul>
<li>
February 23, 2021, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>"));
        end PrimaryVariableFlow;

        model Reset
          "Supervisory supply temperature reset"
          extends Modelica.Blocks.Icons.Block;
          parameter Modelica.Units.SI.Temperature THeaWatSupSetMin(displayUnit="degC")
            "Minimum value of heating water supply temperature set point";
          Buildings.Controls.OBC.CDL.Interfaces.BooleanInput uHea
            "Heating enable signal"
            annotation (Placement(transformation(extent={{-140,40},{-100,80}}),
            iconTransformation(extent={{-140,40},{-100,80}})));
          Buildings.Controls.OBC.CDL.Interfaces.RealInput THeaWatSupPreSet(
            final unit="K",
            displayUnit="degC")
            "Heating water supply temperature set point"
            annotation (Placement(transformation(extent={{-140,-70},{-100,-30}}),
            iconTransformation(extent={{-140,-70},{-100,-30}})));
          Buildings.Controls.OBC.CDL.Interfaces.RealOutput THeaWatSupSet(
            final unit="K",
            displayUnit="degC")
            "Heating water supply temperature set point after reset"
            annotation (Placement(transformation(extent={{100,-20},{140,20}}),
            iconTransformation(extent={{100,-20},{140,20}})));
          Buildings.Controls.OBC.CDL.Reals.Sources.Constant minSet(
            k=THeaWatSupSetMin)
            "Minimum value of HW set point"
            annotation (Placement(transformation(extent={{-60,-30},{-40,-10}})));
          Buildings.Controls.OBC.CDL.Reals.Switch swiHea
            "Switch"
            annotation (Placement(transformation(extent={{0,-10},{20,10}})));
          Buildings.Controls.OBC.CDL.Reals.LimitSlewRate ramLimHea(raisingSlewRate
              =0.1) "Limit the rate of change"
            annotation (Placement(transformation(extent={{50,-10},{70,10}})));
        equation
          connect(THeaWatSupPreSet,swiHea.u1)
            annotation (Line(points={{-120,-50},{-80,-50},{-80,8},{-2,8}},color={0,0,127}));
          connect(minSet.y,swiHea.u3)
            annotation (Line(points={{-38,-20},{-20,-20},{-20,-8},{-2,-8}},color={0,0,127}));
          connect(uHea,swiHea.u2)
            annotation (Line(points={{-120,60},{-60,60},{-60,0},{-2,0}},color={255,0,255}));
          connect(swiHea.y,ramLimHea.u)
            annotation (Line(points={{22,0},{48,0}},color={0,0,127}));
          connect(ramLimHea.y,THeaWatSupSet)
            annotation (Line(points={{72,0},{120,0}},color={0,0,127}));
          annotation (
            defaultComponentName="resTSup",
            Icon(
              coordinateSystem(
                preserveAspectRatio=false)),
            Diagram(
              coordinateSystem(
                preserveAspectRatio=false,
                extent={{-100,-100},{100,100}})),
            Documentation(
              revisions="<html>
<ul>
<li>
July 31, 2020, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>",     info="<html>
<p>
This block implements the supervisory reset of the heating water
supply temperature.
The heating water supply temperature is reset down whenever the
heating demand signal yielded by the building automation system
is <code>false</code>.
This enables operating the chiller at a reduced lift whenever
there is no requirement on the water temperature supplied to the
building system.
</p>
<p>
Note that the chilled water supply temperature is not reset
for the sake of simplicity. It would indeed require a more
involved algorithm preventing the reset in case it limits
the cold rejection capacity considering the actual
district water temperature.
</p>
</html>"));
        end Reset;

        model SideCold
          "Control block for cold side"
          extends Modelica.Blocks.Icons.Block;
          parameter Integer nSouAmb=1
            "Number of ambient sources to control"
            annotation (Evaluate=true);
          parameter Modelica.Units.SI.Temperature TChiWatSupSetMin(displayUnit="degC")
            "Minimum value of chilled water supply temperature set point";
          parameter Buildings.Controls.OBC.CDL.Types.SimpleController controllerType=Buildings.Controls.OBC.CDL.Types.SimpleController.PI
            "Type of controller"
            annotation (choices(choice=Buildings.Controls.OBC.CDL.Types.SimpleController.P,
            choice=Buildings.Controls.OBC.CDL.Types.SimpleController.PI));
          parameter Real k(
            min=0)=0.1
            "Gain of controller";
          parameter Modelica.Units.SI.Time Ti(
            min=Buildings.Controls.OBC.CDL.Constants.small)=120
            "Time constant of integrator block"
            annotation (Dialog(enable=controllerType == Buildings.Controls.OBC.CDL.Types.SimpleController.PI
                                   or controllerType == Buildings.Controls.OBC.CDL.Types.SimpleController.PID));
          Buildings.Controls.OBC.CDL.Interfaces.RealInput uCol
            "Cold rejection control signal"
            annotation (Placement(transformation(extent={{-220,-20},{-180,20}}),
            iconTransformation(extent={{-140,-22},{-100,18}})));
          Buildings.Controls.OBC.CDL.Interfaces.RealOutput TChiWatSupSet(
            final unit="K",
            displayUnit="degC")
            "Chilled water supply temperature set point"
            annotation (Placement(transformation(extent={{180,60},{220,100}}),
            iconTransformation(extent={{100,-60},{140,-20}})));
          Buildings.Controls.OBC.CDL.Reals.Line mapFun[nSouAmb]
            "Mapping functions for ambient source control"
            annotation (Placement(transformation(extent={{100,-10},{120,10}})));
          Buildings.Controls.OBC.CDL.Reals.Sources.Constant x1[nSouAmb](
            final k={(i-1) for i in 1:nSouAmb})
            "x1"
            annotation (Placement(transformation(extent={{40,10},{60,30}})));
          Buildings.Controls.OBC.CDL.Routing.RealScalarReplicator rep(
            final nout=nSouAmb)
            "Replicate control signal"
            annotation (Placement(transformation(extent={{-10,-10},{10,10}},rotation=0)));
          Buildings.Controls.OBC.CDL.Reals.Sources.Constant f1[nSouAmb](
            each final k=0)
            "f1"
            annotation (Placement(transformation(extent={{40,-40},{60,-20}})));
          Buildings.Controls.OBC.CDL.Reals.Sources.Constant f2[nSouAmb](
            each final k=1)
            "f2"
            annotation (Placement(transformation(extent={{-10,110},{10,130}})));
          Buildings.Controls.OBC.CDL.Reals.Sources.Constant x2[nSouAmb](
            final k={(i) for i in 1:nSouAmb})
            "x2"
            annotation (Placement(transformation(extent={{40,-70},{60,-50}})));
          Combined.Controls.PIDWithEnable conTChiWatSup(
            final k=k,
            final Ti=Ti,
            final controllerType=Buildings.Controls.OBC.CDL.Types.SimpleController.PI,
            final yMin=0,
            final yMax=1,
            final reverseActing=false)
            "Controller for CHWST"
            annotation (Placement(transformation(extent={{-150,-30},{-130,-10}})));
          Buildings.Controls.OBC.CDL.Reals.Line mapFunTChiSupSet
            "Mapping function for CHWST reset"
            annotation (Placement(transformation(extent={{100,70},{120,90}})));
          Buildings.Controls.OBC.CDL.Reals.Sources.Constant minTChiWatSup(
            y(final unit="K",
              displayUnit="degC"),
            final k=TChiWatSupSetMin)
            "Minimum value of chilled water supply temperature"
            annotation (Placement(transformation(extent={{62,50},{82,70}})));
          Buildings.Controls.OBC.CDL.Reals.AddParameter addPar(
            p=nSouAmb)
            "One minus control loop output"
            annotation (Placement(transformation(extent={{-80,-30},{-60,-10}})));
          Buildings.Controls.OBC.CDL.Reals.MultiplyByParameter gai(
            k=-nSouAmb)
            "Gain factor"
            annotation (Placement(transformation(extent={{-120,-30},{-100,-10}})));
          Buildings.Controls.OBC.CDL.Reals.Max max1
            "CHWST reset signal"
            annotation (Placement(transformation(extent={{-30,70},{-10,90}})));
          Buildings.Controls.OBC.CDL.Reals.Sources.Constant zer(
            k=0)
            "Zero"
            annotation (Placement(transformation(extent={{-80,50},{-60,70}})));
          Buildings.Controls.OBC.CDL.Reals.AddParameter subNumSou(
            p=-nSouAmb)
            "Control signal minus nSouAmb"
            annotation (Placement(transformation(extent={{-80,90},{-60,110}})));
          Buildings.Controls.OBC.CDL.Reals.Min min1
            "Ambient source control signal"
            annotation (Placement(transformation(extent={{-40,-10},{-20,10}})));
          Buildings.Controls.OBC.CDL.Reals.LimitSlewRate ramLimHea(
            raisingSlewRate=0.1) "Limit the rate of change"
            annotation (Placement(transformation(extent={{140,70},{160,90}})));
          Buildings.Controls.OBC.CDL.Interfaces.BooleanInput uHeaCoo
            "Enable signal for heating or cooling"
            annotation (Placement(transformation(extent={{-220,100},{-180,140}}),
            iconTransformation(extent={{-140,60},{-100,100}})));
          Buildings.Controls.OBC.CDL.Interfaces.RealInput TSet(
            final unit="K",
            displayUnit="degC")
            "Supply temperature set point (heating or chilled water)"
            annotation (Placement(transformation(extent={{-220,20},{-180,60}}),
            iconTransformation(extent={{-140,-62},{-100,-22}})));
          Buildings.Controls.OBC.CDL.Interfaces.RealInput TBot(
            final unit="K",
            displayUnit="degC")
            "Temperature at bottom of tank"
            annotation (Placement(transformation(extent={{-220,-100},{-180,-60}}),
            iconTransformation(extent={{-140,-104},{-100,-64}})));
          Buildings.Controls.OBC.CDL.Interfaces.RealOutput yAmb[nSouAmb](
            each final unit="1")
            "Control signal for ambient sources"
            annotation (Placement(transformation(extent={{180,20},{220,60}}),
            iconTransformation(extent={{100,20},{140,60}})));
          Buildings.Controls.OBC.CDL.Interfaces.RealOutput yValIso(
            final unit="1")
            "Ambient loop isolation valve control signal"
            annotation (Placement(transformation(extent={{180,-20},{220,20}}),
            iconTransformation(extent={{100,-20},{140,20}})));
          Buildings.Controls.OBC.CDL.Conversions.BooleanToReal booToRea
            "Convert DO to AO signal"
            annotation (Placement(transformation(extent={{40,-110},{60,-90}})));
          Buildings.Controls.OBC.CDL.Reals.GreaterThreshold greThr(
            t=0.01)
            "Control signal is non zero (with 1% tolerance)"
            annotation (Placement(transformation(extent={{0,-110},{20,-90}})));
          Modelica.Blocks.Discrete.ZeroOrderHold zeroOrderHold(
            samplePeriod=60)
            annotation (Placement(transformation(extent={{80,-110},{100,-90}})));
        equation
          connect(x1.y,mapFun.x1)
            annotation (Line(points={{62,20},{80,20},{80,8},{98,8}},color={0,0,127}));
          connect(rep.y,mapFun.u)
            annotation (Line(points={{12,0},{98,0}},color={0,0,127}));
          connect(f1.y,mapFun.f1)
            annotation (Line(points={{62,-30},{80,-30},{80,4},{98,4}},color={0,0,127}));
          connect(f2.y,mapFun.f2)
            annotation (Line(points={{12,120},{30,120},{30,-8},{98,-8}},color={0,0,127}));
          connect(x2.y,mapFun.x2)
            annotation (Line(points={{62,-60},{90,-60},{90,-4},{98,-4}},color={0,0,127}));
          connect(TSet,conTChiWatSup.u_s)
            annotation (Line(points={{-200,40},{-172,40},{-172,-20},{-152,-20}},color={0,0,127}));
          connect(TBot,conTChiWatSup.u_m)
            annotation (Line(points={{-200,-80},{-140,-80},{-140,-32}},color={0,0,127}));
          connect(f2[1].y,mapFunTChiSupSet.x2)
            annotation (Line(points={{12,120},{30,120},{30,76},{98,76}},color={0,0,127}));
          connect(minTChiWatSup.y,mapFunTChiSupSet.f2)
            annotation (Line(points={{84,60},{90,60},{90,72},{98,72}},color={0,0,127}));
          connect(TSet,mapFunTChiSupSet.f1)
            annotation (Line(points={{-200,40},{20,40},{20,84},{98,84}},color={0,0,127}));
          connect(uCol,subNumSou.u)
            annotation (Line(points={{-200,0},{-160,0},{-160,100},{-82,100}},color={0,0,127}));
          connect(max1.y,mapFunTChiSupSet.u)
            annotation (Line(points={{-8,80},{98,80}},color={0,0,127}));
          connect(uCol,min1.u1)
            annotation (Line(points={{-200,0},{-80,0},{-80,6},{-42,6}},color={0,0,127}));
          connect(addPar.y,min1.u2)
            annotation (Line(points={{-58,-20},{-50,-20},{-50,-6},{-42,-6}},color={0,0,127}));
          connect(min1.y,rep.u)
            annotation (Line(points={{-18,0},{-12,0}},color={0,0,127}));
          connect(mapFun.y,yAmb)
            annotation (Line(points={{122,0},{140,0},{140,40},{200,40}},color={0,0,127}));
          connect(ramLimHea.y,TChiWatSupSet)
            annotation (Line(points={{162,80},{200,80}},color={0,0,127}));
          connect(uHeaCoo,conTChiWatSup.uEna)
            annotation (Line(points={{-200,120},{-166,120},{-166,-40},{-144,-40},{-144,-32}},color={255,0,255}));
          connect(zer.y,mapFunTChiSupSet.x1)
            annotation (Line(points={{-58,60},{0,60},{0,88},{98,88}},color={0,0,127}));
          connect(uCol,greThr.u)
            annotation (Line(points={{-200,0},{-160,0},{-160,-100},{-2,-100}},color={0,0,127}));
          connect(greThr.y,booToRea.u)
            annotation (Line(points={{22,-100},{38,-100}},color={255,0,255}));
          connect(booToRea.y,zeroOrderHold.u)
            annotation (Line(points={{62,-100},{78,-100}},color={0,0,127}));
          connect(zeroOrderHold.y,yValIso)
            annotation (Line(points={{101,-100},{160,-100},{160,0},{200,0}},color={0,0,127}));
          connect(mapFunTChiSupSet.y,ramLimHea.u)
            annotation (Line(points={{122,80},{138,80}},color={0,0,127}));
          connect(zer.y,max1.u2)
            annotation (Line(points={{-58,60},{-40,60},{-40,74},{-32,74}},color={0,0,127}));
          connect(subNumSou.y,max1.u1)
            annotation (Line(points={{-58,100},{-40,100},{-40,86},{-32,86}},color={0,0,127}));
          connect(conTChiWatSup.y, gai.u)
            annotation (Line(points={{-128,-20},{-122,-20}}, color={0,0,127}));
          connect(gai.y, addPar.u)
            annotation (Line(points={{-98,-20},{-82,-20}}, color={0,0,127}));
          annotation (
            defaultComponentName="conCol",
            Documentation(
              revisions="<html>
<ul>
<li>
July 31, 2020, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>",     info="<html>
<p>
This block serves as the controller for the cold side of the ETS in
<a href=\"modelica://Buildings.Experimental.DHC.EnergyTransferStations.Combined.Controls.Supervisory\">
Buildings.Experimental.DHC.EnergyTransferStations.Combined.Controls.Supervisory</a>.
It computes the following control signals.
</p>
<ul>
<li>
Control signals for ambient sources <code>yAmb</code> (array)<br/>

The cold rejection control signal yielded by the hot side controller
is processed as follows.
<ul>
<li>
A controller is used to track the chilled water
supply temperature (CHWST) set point.
This controller is enabled when cooling is enabled.
It yields a control signal value between
<code>0</code> and <code>nSouAmb</code>.
</li>
<li>
The systems serving as ambient sources are then controlled in sequence
by mapping the minimum between the CHWST control loop output and the
part of the cold rejection signal between <code>0</code>
and <code>nSouAmb</code> to a <code>nSouAmb</code>-array
of signals between <code>0</code> and <code>1</code>.
</li>
</ul>
</li>
<li>
Chilled water supply temperature set point <code>TChiWatSupSet</code><br/>

The remaining part of the cold rejection signal between
<code>nSouAmb</code> and <code>nSouAmb+1</code> is used
to reset the CHWST set point between a maximum value provided
as an input variable, and a minimum value provided as a
parameter.
</li>
<li>
Control signal for the evaporator loop isolation valve <code>yIsoAmb</code><br/>

The valve is commanded to be fully open whenever the cold rejection control signal
is greater than zero.
The command signal is held for 60s to avoid short cycling.
</li>
</ul>
</html>"),  Diagram(
              coordinateSystem(
                extent={{-180,-140},{180,140}})));
        end SideCold;

        block SideHot
          "Control block for hot side"
          extends Modelica.Blocks.Icons.Block;
          parameter Integer nSouAmb=1
            "Number of ambient sources to control"
            annotation (Evaluate=true);
          parameter Modelica.Units.SI.TemperatureDifference dTDea(min=0) = 1
            "Temperature difference band between set point tracking and heat rejection (absolute value)";
          parameter Modelica.Units.SI.TemperatureDifference dTLoc(min=0) = dTDea + 2
            "Temperature difference between set point tracking and cold rejection lockout (absolute value)";
          parameter Buildings.Controls.OBC.CDL.Types.SimpleController controllerType=Buildings.Controls.OBC.CDL.Types.SimpleController.PI
            "Type of controller"
            annotation (choices(choice=Buildings.Controls.OBC.CDL.Types.SimpleController.P,
            choice=Buildings.Controls.OBC.CDL.Types.SimpleController.PI));
          parameter Real k(
            min=0)=0.1
            "Gain of controller";
          parameter Modelica.Units.SI.Time Ti(min=Buildings.Controls.OBC.CDL.Constants.small)=
               120 "Time constant of integrator block" annotation (Dialog(enable=
                  controllerType == Buildings.Controls.OBC.CDL.Types.SimpleController.PI
                   or controllerType == Buildings.Controls.OBC.CDL.Types.SimpleController.PID));
          PIDWithEnable conColRej(
            final k=k,
            final Ti=Ti,
            final controllerType=Buildings.Controls.OBC.CDL.Types.SimpleController.PI,
            final yMin=0,
            final yMax=nSouAmb+1,
            final reverseActing=true)
            "Controller for cold rejection"
            annotation (Placement(transformation(extent={{-10,-50},{10,-30}})));
          Buildings.Controls.OBC.CDL.Interfaces.RealOutput yCol(
            final unit="1")
            "Control signal for cold side"
            annotation (Placement(transformation(extent={{180,-60},{220,-20}}),
            iconTransformation(extent={{100,-60},{140,-20}})));
          Buildings.Controls.OBC.CDL.Reals.GreaterThreshold greThr(
            final t=0.01)
            "Control signal is non zero (with 1% tolerance)"
            annotation (Placement(transformation(extent={{40,-10},{60,10}})));
          Buildings.Controls.OBC.CDL.Conversions.BooleanToReal booToRea
            "Convert DO to AO signal"
            annotation (Placement(transformation(extent={{80,-10},{100,10}})));
          PIDWithEnable conHeaRej(
            final k=k,
            final Ti=Ti,
            final controllerType=Buildings.Controls.OBC.CDL.Types.SimpleController.PI,
            final yMin=0,
            final yMax=nSouAmb,
            final reverseActing=false)
            "Controller for heat rejection"
            annotation (Placement(transformation(extent={{-90,-10},{-70,10}})));
          Buildings.Controls.OBC.CDL.Reals.Line mapFun[nSouAmb]
            "Mapping functions for controlled systems"
            annotation (Placement(transformation(extent={{100,50},{120,70}})));
          Buildings.Controls.OBC.CDL.Reals.Sources.Constant x1[nSouAmb](
            final k={(i-1) for i in 1:nSouAmb})
            "x1"
            annotation (Placement(transformation(extent={{60,70},{80,90}})));
          Buildings.Controls.OBC.CDL.Routing.RealScalarReplicator rep(
            final nout=nSouAmb)
            "Replicate control signal"
            annotation (Placement(transformation(extent={{-10,-10},{10,10}},rotation=0,origin={0,60})));
          Buildings.Controls.OBC.CDL.Reals.Sources.Constant f1[nSouAmb](
            each final k=0)
            "f1"
            annotation (Placement(transformation(extent={{20,70},{40,90}})));
          Buildings.Controls.OBC.CDL.Reals.Sources.Constant f2[nSouAmb](
            each final k=1)
            "f2"
            annotation (Placement(transformation(extent={{60,30},{80,50}})));
          Buildings.Controls.OBC.CDL.Reals.Sources.Constant x2[nSouAmb](
            final k={(i) for i in 1:nSouAmb})
            "x2"
            annotation (Placement(transformation(extent={{20,30},{40,50}})));
          Buildings.Controls.OBC.CDL.Interfaces.BooleanInput uHeaCoo
            "Enable signal for heating or cooling"
            annotation (Placement(transformation(extent={{-220,80},{-180,120}}),
            iconTransformation(extent={{-140,60},{-100,100}})));
          Buildings.Controls.OBC.CDL.Interfaces.RealInput TSet(
            final unit="K",
            displayUnit="degC")
            "Supply temperature set point (heating or chilled water)"
            annotation (Placement(transformation(extent={{-220,-20},{-180,20}}),
            iconTransformation(extent={{-140,22},{-100,62}})));
          Buildings.Controls.OBC.CDL.Interfaces.RealInput TTop(
            final unit="K",
            displayUnit="degC")
            "Temperature at top of tank"
            annotation (Placement(transformation(extent={{-220,-60},{-180,-20}}),
            iconTransformation(extent={{-140,-20},{-100,20}})));
          Buildings.Controls.OBC.CDL.Interfaces.RealOutput yAmb[nSouAmb](
            each final unit="1")
            "Control signal for ambient sources"
            annotation (Placement(transformation(extent={{180,40},{220,80}}),
            iconTransformation(extent={{100,20},{140,60}})));
          Buildings.Controls.OBC.CDL.Interfaces.RealOutput yValIso(
            final unit="1")
            "Ambient loop isolation valve control signal"
            annotation (Placement(transformation(extent={{180,-20},{220,20}}),
            iconTransformation(extent={{100,-20},{140,20}})));
          Buildings.Controls.OBC.CDL.Interfaces.RealInput yValIsoCon_actual(
            final unit="1")
            "Return position of condenser to ambient loop isolation valve"
            annotation (Placement(transformation(extent={{-220,-100},{-180,-60}}),
            iconTransformation(extent={{-140,-60},{-100,-20}})));
          Buildings.Controls.OBC.CDL.Interfaces.RealInput yValIsoEva_actual(
            final unit="1")
            "Return position of evaporator to ambient loop isolation valve"
            annotation (Placement(transformation(extent={{-220,-140},{-180,-100}}),
            iconTransformation(extent={{-140,-100},{-100,-60}})));
          Buildings.Controls.OBC.CDL.Reals.LessThreshold isValIsoConClo(
            final t=1E-6,
            h=0.5E-6)
            "Check if isolation valve is closed"
            annotation (Placement(transformation(extent={{-160,-90},{-140,-70}})));
          Buildings.Controls.OBC.CDL.Reals.LessThreshold isValIsoEvaClo(
            final t=1E-6,
            h=0.5E-6)
            "At least one signal is non zero"
            annotation (Placement(transformation(extent={{-160,-130},{-140,-110}})));
          Buildings.Controls.OBC.CDL.Logical.MultiAnd mulAnd(
            nin=3)
            annotation (Placement(transformation(extent={{-40,-90},{-20,-70}})));
          Buildings.Controls.OBC.CDL.Reals.AddParameter addDea(
            p=dTDea)
            "Add dead band"
            annotation (Placement(transformation(extent={{-130,-10},{-110,10}})));
          Modelica.Blocks.Discrete.ZeroOrderHold zeroOrderHold(
            samplePeriod=60)
            annotation (Placement(transformation(extent={{120,-10},{140,10}})));
          Buildings.Controls.OBC.CDL.Reals.AddParameter addLoc(
            p=dTLoc)
            "Add temperature difference for lockout"
            annotation (Placement(transformation(extent={{-130,30},{-110,50}})));
          Buildings.Controls.OBC.CDL.Reals.Less isBelLoc(
            h=0.1)
            "Check if temperature is below cold rejection lockout"
            annotation (Placement(transformation(extent={{-90,50},{-70,70}})));
        equation
          connect(mapFun.y,yAmb)
            annotation (Line(points={{122,60},{200,60}},color={0,0,127}));
          connect(TSet,conColRej.u_s)
            annotation (Line(points={{-200,0},{-140,0},{-140,-40},{-12,-40}},color={0,0,127}));
          connect(TTop,conColRej.u_m)
            annotation (Line(points={{-200,-40},{-160,-40},{-160,-58},{0,-58},{0,-52}},color={0,0,127}));
          connect(conHeaRej.y,greThr.u)
            annotation (Line(points={{-68,0},{38,0}},color={0,0,127}));
          connect(x1.y,mapFun.x1)
            annotation (Line(points={{82,80},{90,80},{90,68},{98,68}},color={0,0,127}));
          connect(conHeaRej.y,rep.u)
            annotation (Line(points={{-68,0},{-20,0},{-20,60},{-12,60}},color={0,0,127}));
          connect(rep.y,mapFun.u)
            annotation (Line(points={{12,60},{98,60}},color={0,0,127}));
          connect(f1.y,mapFun.f1)
            annotation (Line(points={{42,80},{50,80},{50,64},{98,64}},color={0,0,127}));
          connect(f2.y,mapFun.f2)
            annotation (Line(points={{82,40},{90,40},{90,52},{98,52}},color={0,0,127}));
          connect(x2.y,mapFun.x2)
            annotation (Line(points={{42,40},{50,40},{50,56},{98,56}},color={0,0,127}));
          connect(conColRej.y,yCol)
            annotation (Line(points={{12,-40},{200,-40}},color={0,0,127}));
          connect(TTop,conHeaRej.u_m)
            annotation (Line(points={{-200,-40},{-160,-40},{-160,-20},{-80,-20},{-80,-12}},color={0,0,127}));
          connect(yValIsoCon_actual,isValIsoConClo.u)
            annotation (Line(points={{-200,-80},{-162,-80}},color={0,0,127}));
          connect(yValIsoEva_actual,isValIsoEvaClo.u)
            annotation (Line(points={{-200,-120},{-162,-120}},color={0,0,127}));
          connect(mulAnd.y,conColRej.uEna)
            annotation (Line(points={{-18,-80},{-4,-80},{-4,-52}},color={255,0,255}));
          connect(isValIsoEvaClo.y,conHeaRej.uEna)
            annotation (Line(points={{-138,-120},{-84,-120},{-84,-12}},color={255,0,255}));
          connect(TSet,addDea.u)
            annotation (Line(points={{-200,0},{-132,0}},color={0,0,127}));
          connect(addDea.y,conHeaRej.u_s)
            annotation (Line(points={{-108,0},{-92,0}},color={0,0,127}));
          connect(greThr.y,booToRea.u)
            annotation (Line(points={{62,0},{78,0}},color={255,0,255}));
          connect(booToRea.y,zeroOrderHold.u)
            annotation (Line(points={{102,0},{118,0}},color={0,0,127}));
          connect(zeroOrderHold.y,yValIso)
            annotation (Line(points={{141,0},{200,0}},color={0,0,127}));
          connect(TSet,addLoc.u)
            annotation (Line(points={{-200,0},{-140,0},{-140,40},{-132,40}},color={0,0,127}));
          connect(TTop,isBelLoc.u1)
            annotation (Line(points={{-200,-40},{-160,-40},{-160,60},{-92,60}},color={0,0,127}));
          connect(addLoc.y,isBelLoc.u2)
            annotation (Line(points={{-108,40},{-100,40},{-100,52},{-92,52}},color={0,0,127}));
          connect(uHeaCoo,mulAnd.u[1])
            annotation (Line(points={{-200,100},{-56,100},{-56,-75.3333},{-42,-75.3333}},color={255,0,255}));
          connect(isValIsoConClo.y,mulAnd.u[2])
            annotation (Line(points={{-138,-80},{-42,-80}},color={255,0,255}));
          connect(isBelLoc.y,mulAnd.u[3])
            annotation (Line(points={{-68,60},{-60,60},{-60,-84.6667},{-42,-84.6667}},color={255,0,255}));
          annotation (
            defaultComponentName="conHot",
            Documentation(
              revisions="<html>
<ul>
<li>
July 31, 2020, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>",     info="<html>
<p>
This block serves as the controller for the hot side of the ETS in
<a href=\"modelica://Buildings.Experimental.DHC.EnergyTransferStations.Combined.Controls.Supervisory\">
Buildings.Experimental.DHC.EnergyTransferStations.Combined.Controls.Supervisory</a>.
It computes the following control signals.
</p>
<ul>
<li>
Control signals for ambient sources <code>yAmb</code> (array)<br/>

The controller for heat rejection is enabled when the return position
of the evaporator loop isolation valve is close to zero.
When enabled, it maintains the temperature at the top of the heating water
tank at the heating water supply temperature set point plus a
dead band <code>dTDea</code>.
The controller yields a control signal value between
<code>0</code> and <code>nSouAmb</code>.
The systems serving as ambient sources are then controlled in sequence
by mapping the controller output to a <code>nSouAmb</code>-array of
signals between <code>0</code> and <code>1</code>.
</li>
<li>
Control signal for cold rejection <code>yCol</code><br/>

The controller for cold rejection is enabled if
<ul>
<li>
the return position of the condenser loop isolation valve is close to zero,
and
</li>
<li>
heating is enabled, and
</li>
<li>
the temperature at the top of the heating water tank is below a safety
limit equal to the heating water supply temperature set point plus the
parameter <code>dTLoc</code>. This last condition limits the temperature
overshoot after the warmup periods, without having to finely tune the heat and
cold rejection controller parameters to guard against the disturbing effect
of a varying district water temperature.
</li>
</ul>
When enabled, the controller maintains the temperature at the top of the
heating water tank at the heating water supply temperature set point.
The controller yields a signal between <code>0</code> and <code>nSouAmb+1</code>
which is connected to
<a href=\"modelica://Buildings.Experimental.DHC.EnergyTransferStations.Combined.Controls.SideCold\">
Buildings.Experimental.DHC.EnergyTransferStations.Combined.Controls.SideCold</a>
where it is used to control in sequence the systems serving as ambient sources
and ultimately to reset down the chilled water supply temperature.
</li>
<li>
Control signal for the condenser loop isolation valve <code>yIsoAmb</code><br/>

The valve is commanded to be fully open whenever the controller
for heat rejection yields an output signal greater than zero.
The command signal is held for 60s to avoid short cycling.
</li>
</ul>
</html>"),  Diagram(
              coordinateSystem(
                extent={{-180,-140},{180,140}})));
        end SideHot;

        model Supervisory
          "Supervisory controller"
          extends
            estcp.DHC.EnergyTransferStations.Combined.Controls.BaseClasses.PartialSupervisory;
          parameter Buildings.Controls.OBC.CDL.Types.SimpleController
            controllerType=Buildings.Controls.OBC.CDL.Types.SimpleController.PI
            "Type of controller"
            annotation (choices(choice=Buildings.Controls.OBC.CDL.Types.SimpleController.P,
            choice=Buildings.Controls.OBC.CDL.Types.SimpleController.PI));
          parameter Real kHot(
            min=0)=0.05
            "Gain of controller on hot side";
          parameter Real kCol(
            min=0)=0.1
            "Gain of controller on cold side";
          parameter Modelica.Units.SI.Time TiHot(min=Buildings.Controls.OBC.CDL.Constants.small)
             = 300 "Time constant of integrator block on hot side" annotation (Dialog(
                enable=controllerType == Buildings.Controls.OBC.CDL.Types.SimpleController.PI
                   or controllerType == Buildings.Controls.OBC.CDL.Types.SimpleController.PID));
          parameter Modelica.Units.SI.Time TiCol(min=Buildings.Controls.OBC.CDL.Constants.small)
             = 120 "Time constant of integrator block on cold side" annotation (Dialog(
                enable=controllerType == Buildings.Controls.OBC.CDL.Types.SimpleController.PI
                   or controllerType == Buildings.Controls.OBC.CDL.Types.SimpleController.PID));
          parameter Modelica.Units.SI.Temperature THeaWatSupSetMin(displayUnit="degC")
            "Minimum value of heating water supply temperature set point";
          parameter Modelica.Units.SI.Temperature TChiWatSupSetMin(displayUnit="degC")
            "Minimum value of chilled water supply temperature set point";
          Buildings.Controls.OBC.CDL.Interfaces.RealInput yValIsoCon_actual(
            final unit="1")
            "Return position of condenser to ambient loop isolation valve"
            annotation (Placement(transformation(extent={{-160,-100},{-120,-60}}),
            iconTransformation(extent={{-140,-90},{-100,-50}})));
          Buildings.Controls.OBC.CDL.Interfaces.RealInput yValIsoEva_actual(
            final unit="1")
            "Return position of evaporator to ambient loop isolation valve"
            annotation (Placement(transformation(extent={{-160,-120},{-120,-80}}),
            iconTransformation(extent={{-140,-110},{-100,-70}})));
          Combined.Controls.SideHot conHot(
            final k=kHot,
            final Ti=TiHot,
            final nSouAmb=nSouAmb,
            final controllerType=controllerType)
            "Hot side controller"
            annotation (Placement(transformation(extent={{0,20},{20,40}})));
          SideCold conCol(
            final k=kCol,
            final Ti=TiCol,
            final nSouAmb=nSouAmb,
            final controllerType=controllerType,
            final TChiWatSupSetMin=TChiWatSupSetMin)
            "Cold side controller"
            annotation (Placement(transformation(extent={{0,-42},{20,-22}})));
          Buildings.Controls.OBC.CDL.Reals.Max max1[nSouAmb]
            "Maximum of output control signals"
            annotation (Placement(transformation(extent={{50,-10},{70,10}})));
          Reset resTSup(
            final THeaWatSupSetMin=THeaWatSupSetMin)
            "Supply temperature reset"
            annotation (Placement(transformation(extent={{-70,10},{-50,30}})));
        equation
          connect(conHot.yAmb,max1.u1)
            annotation (Line(points={{22,34},{40,34},{40,6},{48,6}},color={0,0,127}));
          connect(conCol.yAmb,max1.u2)
            annotation (Line(points={{22,-28},{40,-28},{40,-6},{48,-6}},color={0,0,127}));
          connect(conHot.yCol,conCol.uCol)
            annotation (Line(points={{22,26},{30,26},{30,0},{-14,0},{-14,-32.2},{-2,-32.2}},color={0,0,127}));
          connect(resTSup.THeaWatSupSet,conHot.TSet)
            annotation (Line(points={{-48,20},{-30,20},{-30,34.2},{-2,34.2}},color={0,0,127}));
          connect(THeaWatTop,conHot.TTop)
            annotation (Line(points={{-140,0},{-26,0},{-26,30},{-2,30}},color={0,0,127}));
          connect(max1.y,yAmb)
            annotation (Line(points={{72,0},{90,0},{90,-20},{140,-20}},color={0,0,127}));
          connect(TChiWatBot,conCol.TBot)
            annotation (Line(points={{-140,-60},{-40,-60},{-40,-40.4},{-2,-40.4}},color={0,0,127}));
          connect(THeaWatSupPreSet,resTSup.THeaWatSupPreSet)
            annotation (Line(points={{-140,20},{-80,20},{-80,15},{-72,15}},color={0,0,127}));
          connect(conHot.yValIso,yValIsoCon)
            annotation (Line(points={{22,30},{60,30},{60,20},{140,20}},color={0,0,127}));
          connect(conCol.yValIso,yValIsoEva)
            annotation (Line(points={{22,-32},{100,-32},{100,0},{140,0}},color={0,0,127}));
          connect(resTSup.THeaWatSupSet,THeaWatSupSet)
            annotation (Line(points={{-48,20},{-30,20},{-30,-60},{140,-60}},color={0,0,127}));
          connect(conCol.TChiWatSupSet,TChiWatSupSet)
            annotation (Line(points={{22,-36},{100,-36},{100,-80},{140,-80}},color={0,0,127}));
          connect(TChiWatSupPreSet,conCol.TSet)
            annotation (Line(points={{-140,-40},{-44,-40},{-44,-36.2},{-2,-36.2}},color={0,0,127}));
          connect(uHeaHol.y,conHot.uHeaCoo)
            annotation (Line(points={{-88,100},{-20,100},{-20,38},{-2,38}},color={255,0,255}));
          connect(uCooHol.y,conCol.uHeaCoo)
            annotation (Line(points={{-88,60},{-40,60},{-40,-24},{-2,-24}},color={255,0,255}));
          connect(uHeaHol.y,resTSup.uHea)
            annotation (Line(points={{-88,100},{-80,100},{-80,26},{-72,26}},color={255,0,255}));
          connect(uHeaHol.y,yHea)
            annotation (Line(points={{-88,100},{140,100}},color={255,0,255}));
          connect(uCooHol.y,yCoo)
            annotation (Line(points={{-88,60},{140,60}},color={255,0,255}));
          connect(yValIsoCon_actual,conHot.yValIsoCon_actual)
            annotation (Line(points={{-140,-80},{-22,-80},{-22,26},{-2,26}},color={0,0,127}));
          connect(yValIsoEva_actual,conHot.yValIsoEva_actual)
            annotation (Line(points={{-140,-100},{-18,-100},{-18,22},{-2,22}},color={0,0,127}));
          annotation (
            Icon(
              coordinateSystem(
                preserveAspectRatio=false)),
            Diagram(
              coordinateSystem(
                preserveAspectRatio=false,
                extent={{-120,-120},{120,120}})),
            defaultComponentName="conSup",
            Documentation(
              revisions="<html>
<ul>
<li>
July 31, 2020, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>",     info="<html>
<p>
This block implements the supervisory control functions of the ETS model
<a href=\"modelica://Buildings.Experimental.DHC.EnergyTransferStations.Combined.ChillerBorefield\">
Buildings.Experimental.DHC.EnergyTransferStations.Combined.ChillerBorefield</a>.
</p>
<ul>
<li>
Heating (resp. cooling) is enabled based on the input signal <code>uHea</code>
(resp. <code>uCoo</code>) which is held for 15', meaning that,
when enabled, the mode remains active for at least <i>15</i> minutes and,
when disabled, the mode cannot be enabled again for at least <i>15</i> minutes.
The heating and cooling enable signals should be computed externally based on a schedule
(to lock out the system during off-hours), ideally in conjunction with the number
of requests yielded by the terminal unit controllers, or any
other signal representative of the load.
Indeed, the heating water supply set point is allowed to be reset down 
only when heating is disabled, in which
case the system performance is improved due to a lower chiller lift.
</li>
<li>
The controller resets the heating water supply temperature based on the logic described in
<a href=\"modelica://Buildings.Experimental.DHC.EnergyTransferStations.Combined.Controls.Reset\">
Buildings.Experimental.DHC.EnergyTransferStations.Combined.Controls.Reset</a>.
Note that this resetting logic is meant to operate the chiller at low lift.
The chilled water supply temperature may be also reset down by
<a href=\"modelica://Buildings.Experimental.DHC.EnergyTransferStations.Combined.Controls.SideCold\">
Buildings.Experimental.DHC.EnergyTransferStations.Combined.Controls.SideCold</a>
to maintain the heating water supply temperature set point.
This second resetting logic is required for the heating function of the unit,
but it has a negative impact on the lift.
</li>
<li>
Eventually the systems serving as ambient sources are controlled based on the
maximum of the control signals <code>yAmb</code> yielded by
<a href=\"modelica://Buildings.Experimental.DHC.EnergyTransferStations.Combined.Controls.SideHot\">
Buildings.Experimental.DHC.EnergyTransferStations.Combined.Controls.SideHot</a>
and
<a href=\"modelica://Buildings.Experimental.DHC.EnergyTransferStations.Combined.Controls.SideCold\">
Buildings.Experimental.DHC.EnergyTransferStations.Combined.Controls.SideCold</a>.
</li>
</ul>
</html>"));
        end Supervisory;

        block SwitchBox "Controller for flow switch box"
          extends Modelica.Blocks.Icons.Block;
          parameter Real trueHoldDuration(
            final quantity="Time",
            final unit="s")
            "true hold duration";
          parameter Real falseHoldDuration(
            final quantity="Time",
            final unit="s") = trueHoldDuration
            "false hold duration";
          Buildings.Controls.OBC.CDL.Interfaces.RealInput mPos_flow(final unit="kg/s")
            "Service water mass flow rate in positive direction"
            annotation (Placement(transformation(extent={{-140,60},{-100,100}})));
          Buildings.Controls.OBC.CDL.Interfaces.RealInput mRev_flow(final unit="kg/s")
            "Service water mass flow rate in reverse direction"
            annotation (Placement(transformation(extent={{-140,-100},{-100,-60}})));
          Buildings.Controls.OBC.CDL.Interfaces.RealOutput y(final unit="1")
            "Control output signal"
            annotation (Placement(transformation(extent={{100,-20},{140,20}})));
          Modelica.Blocks.Logical.GreaterEqual posDom
            "Output true in case of dominating positive flow"
            annotation (Placement(transformation(extent={{-40,-10},{-20,10}})));
          Modelica.Blocks.Logical.Switch swi "Switch to select the mode"
            annotation (Placement(transformation(extent={{60,-10},{80,10}})));
          Modelica.Blocks.Sources.Constant posModOn(final k=1)
            "Output signal in case of dominating positive flow"
            annotation (Placement(transformation(extent={{0,70},{20,90}})));
          Buildings.Controls.OBC.CDL.Logical.TrueFalseHold truFalHol(
            final trueHoldDuration=trueHoldDuration,
            final falseHoldDuration=falseHoldDuration)
            "True/false hold to remove the risk of chattering"
            annotation (Placement(transformation(extent={{0,-10},{20,10}})));
          Modelica.Blocks.Sources.Constant revModOn(final k=0)
            "Output signal in case of dominating reverse flow"
            annotation (Placement(transformation(extent={{0,-90},{20,-70}})));
        equation
          connect(posModOn.y, swi.u1)
            annotation (Line(points={{21,80},{40,80},{40,8},{58,8}}, color={0,0,127}));
          connect(swi.y, y) annotation (Line(points={{81,0},{120,0}}, color={0,0,127}));
          connect(mRev_flow, posDom.u2) annotation (Line(points={{-120,-80},{-80,-80},{-80,
                  -8},{-42,-8}}, color={0,0,127}));
          connect(posDom.y, truFalHol.u)
            annotation (Line(points={{-19,0},{-2,0}},
                                                    color={255,0,255}));
          connect(truFalHol.y, swi.u2)
            annotation (Line(points={{22,0},{58,0}}, color={255,0,255}));
          connect(mPos_flow, posDom.u1) annotation (Line(points={{-120,80},{-80,80},{-80,
                  0},{-42,0}}, color={0,0,127}));
          connect(revModOn.y, swi.u3) annotation (Line(points={{21,-80},{40,-80},{40,-8},
                  {58,-8}}, color={0,0,127}));
          annotation (Documentation(info="<html>
<p>
This block implements a control logic preventing flow reversal in the 
service line, for instance with the hydronic configuration of 
<a href=\"modelica://Buildings.Experimental.DHC.EnergyTransferStations.Combined.HeatPumpHeatExchanger\">
Buildings.Experimental.DHC.EnergyTransferStations.Combined.HeatPumpHeatExchanger</a>.
The block requires two input signals representing the mass flow rate contributing
to a positive flow direction <code>mPos_flow</code> and the mass flow contributing
to a reverse flow direction <code>mRev_flow</code>.
The output signal <code>y</code> switches to maintain <code>mPos_flow ≥ mRev_flow</code>  
with a temporization avoiding short cycling. 
Due to the temporization, the mass flow rate may transiently change direction as
illustrated in
<a href=\"modelica://Buildings.Experimental.DHC.EnergyTransferStations.Combined.Subsystems.Validation.SwitchBox\">
Buildings.Experimental.DHC.EnergyTransferStations.Combined.Subsystems.Validation.SwitchBox</a>.
</p>
</html>",         revisions="<html>
<ul>
<li>
February 23, 2021, by Antoine Gautier:<br/>
Refactored with CDL connectors.
</li>
<li>
January 23, 2020, by Michael Wetter:<br/>
Added <a href=\"modelica://Buildings.Controls.OBC.CDL.Logical.TrueFalseHold\">
Buildings.Controls.OBC.CDL.Logical.TrueFalseHold</a>
to avoid the risk of chattering.
</li>
<li>
January 12, 2020, by Michael Wetter:<br/>
Added documentation.
</li>
</ul>
</html>"));
        end SwitchBox;

        model WatersideEconomizer
          "Waterside economizer controller"
          extends Modelica.Blocks.Icons.Block;

          parameter Modelica.Units.SI.MassFlowRate m2_flow_nominal
            "Heat exchanger secondary mass flow rate"
            annotation (Dialog(group="Nominal condition"));
          parameter Modelica.Units.SI.Temperature T_a1_nominal
            "Nominal water inlet temperature on district side"
            annotation (Dialog(group="Nominal condition"));
          parameter Modelica.Units.SI.Temperature T_b2_nominal
            "Nominal water outlet temperature on building side"
            annotation (Dialog(group="Nominal condition"));
          parameter Real y1Min(final unit="1")=0.05
            "Minimum pump flow rate or valve opening for temperature measurement (fractional)"
            annotation (Dialog(group="Controls"));
          parameter Modelica.Units.SI.TemperatureDifference dTEna=1
            "Minimum delta-T above predicted heat exchanger leaving water temperature to enable WSE"
            annotation (Dialog(group="Controls"));
          parameter Modelica.Units.SI.TemperatureDifference dTDis=0.5
            "Minimum delta-T across heat exchanger before disabling WSE"
            annotation (Dialog(group="Controls"));
          Buildings.Controls.OBC.CDL.Interfaces.RealInput T1WatEnt(
            final unit="K",
            displayUnit="degC") "Heat exchanger primary water entering temperature"
            annotation (Placement(transformation(extent={{-220,-60},{-180,-20}}),
              iconTransformation(extent={{-140,0},{-100,40}})));
          Buildings.Controls.OBC.CDL.Interfaces.RealInput m2_flow(
            final unit="kg/s")
            "Heat exchanger secondary mass flow rate" annotation (
              Placement(transformation(extent={{-220,80},{-180,120}}),
                iconTransformation(extent={{-140,30},{-100,70}})));
          Buildings.Controls.OBC.CDL.Interfaces.RealInput T2WatLvg(
            final unit="K", displayUnit="degC")
            "Heat exchanger secondary water leaving temperature"
            annotation (Placement(transformation(extent={{-220,-140},{-180,-100}}),
                             iconTransformation(extent={{-140,-60},{-100,-20}})));
          Buildings.Controls.OBC.CDL.Interfaces.RealInput T2WatEnt(
            final unit="K", displayUnit="degC")
            "Heat exchanger secondary water entering temperature"
            annotation (Placement(transformation(extent={{-220,-100},{-180,-60}}),
                            iconTransformation(extent={{-140,-30},{-100,10}})));
          Buildings.Controls.OBC.CDL.Interfaces.RealOutput y1(final unit="1")
            "Primary control signal (pump or valve)" annotation (Placement(
                transformation(extent={{180,80},{220,120}}), iconTransformation(extent=
                    {{100,30},{140,70}})));
          Buildings.Controls.OBC.CDL.Interfaces.RealOutput yVal2(
            final unit="1")
            "Secondary valve control signal"
            annotation (Placement(transformation(extent={{180,-60},{220,-20}}),
              iconTransformation(extent={{100,-70},{140,-30}})));
          Buildings.Controls.OBC.CDL.Reals.AddParameter addDelTem(
            final p=dTEna)
            "Add threshold for enabling WSE"
            annotation (Placement(transformation(extent={{-90,-50},{-70,-30}})));
          Modelica.StateGraph.InitialStepWithSignal iniSta(nIn=1, nOut=1)
                                                           "Initial state "
            annotation (Placement(transformation(extent={{-30,30},{-10,50}})));
          Modelica.StateGraph.TransitionWithSignal ena "Transition to enabled state"
            annotation (Placement(transformation(extent={{10,30},{30,50}})));
          Modelica.StateGraph.StepWithSignal actSta(nIn=1, nOut=1)
                                                    "Active WSE"
            annotation (Placement(transformation(extent={{50,30},{70,50}})));
          Modelica.StateGraph.TransitionWithSignal dis "Transition to disabled state"
            annotation (Placement(transformation(extent={{90,30},{110,50}})));
          Buildings.Controls.OBC.CDL.Reals.Subtract delT1 "Add delta-T"
            annotation (Placement(transformation(extent={{-140,-110},{-120,-90}})));
          Buildings.Controls.OBC.CDL.Reals.LessThreshold delTemDis(t=dTDis)
            "Compare to threshold for disabling WSE"
            annotation (Placement(transformation(extent={{-50,-110},{-30,-90}})));
          PredictLeavingTemperature calTemLvg(
            final dTApp_nominal=abs(T_a1_nominal - T_b2_nominal),
            final m2_flow_nominal=m2_flow_nominal)
            "Compute predicted leaving water temperature"
            annotation (Placement(transformation(extent={{-140,-50},{-120,-30}})));
          Buildings.Controls.OBC.CDL.Reals.Less delTemDis1
            "Compare to threshold for enabling WSE"
            annotation (Placement(transformation(extent={{-50,-50},{-30,-30}})));
          Buildings.Controls.OBC.CDL.Conversions.BooleanToReal booToRea(
            final realTrue=1,
            final realFalse=0)
            "Convert to real signal (close bypass valve when WSE enabled)"
            annotation (Placement(transformation(extent={{140,-50},{160,-30}})));
          inner Modelica.StateGraph.StateGraphRoot stateGraphRoot "Root of state graph"
            annotation (Placement(transformation(extent={{-80,40},{-60,60}})));
          Buildings.Controls.OBC.CDL.Reals.Sources.Constant min1(
            final k=y1Min)
            "Minimum signal"
            annotation (Placement(transformation(extent={{-10,130},{10,150}})));
          Buildings.Controls.OBC.CDL.Reals.Line lin
            "Linear variation bounded by minimum and 1"
            annotation (Placement(transformation(extent={{60,90},{80,110}})));
          Buildings.Controls.OBC.CDL.Reals.Switch swiOff1
            "Output zero if cooling not enabled or isolation valve open (cold rejection)"
            annotation (Placement(transformation(extent={{100,150},{120,170}})));
          Buildings.Controls.OBC.CDL.Reals.Sources.Constant zer(final k=0) "Zero"
            annotation (Placement(transformation(extent={{60,130},{80,150}})));
          Buildings.Controls.OBC.CDL.Interfaces.BooleanInput uCoo
            "Cooling enable signal"
            annotation (Placement(transformation(extent={{-220,140},{-180,180}}),
            iconTransformation(extent={{-140,60},{-100,100}})));
          Buildings.Controls.OBC.CDL.Logical.MultiAnd mulAnd(nin=4)
            "Enable if cooling enabled and temperature criterion verified"
            annotation (Placement(transformation(extent={{0,-50},{20,-30}})));
          Buildings.Controls.OBC.CDL.Logical.MultiOr or1(nin=3)
            "Cooling disabled or temperature criterion verified"
            annotation (Placement(transformation(extent={{0,-110},{20,-90}})));
          Buildings.Controls.OBC.CDL.Logical.Not not2 "Cooling disabled"
            annotation (Placement(transformation(extent={{-50,-80},{-30,-60}})));
          Buildings.Controls.OBC.CDL.Logical.Timer tim(t=1200)
            "True when WSE active for more than t" annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=-90,
                origin={50,-70})));
          Buildings.Controls.OBC.CDL.Logical.Timer tim1(t=1200)
            "True when WSE inactive for more than t"
            annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=-90)));
          Buildings.Controls.OBC.CDL.Logical.And and2
            "Cooling disabled or temperature criterion verified"
            annotation (Placement(transformation(extent={{70,-102},{90,-82}})));
          Buildings.Controls.OBC.CDL.Reals.LessThreshold isValIsoEvaClo(
            final t=1E-6, h=0.5E-6)
            "True if valve closed"
            annotation (Placement(transformation(extent={{-140,-170},{-120,-150}})));
          Buildings.Controls.OBC.CDL.Interfaces.RealInput yValIsoEva_actual(final unit="1")
            "Return position of evaporator to ambient loop isolation valve"
            annotation (Placement(transformation(extent={{-220,-180},{-180,-140}}),
            iconTransformation(extent={{-140,-90},{-100,-50}})));
          Buildings.Controls.OBC.CDL.Logical.Not not1 "True if valve open"
            annotation (Placement(transformation(extent={{-50,-150},{-30,-130}})));
          Buildings.Controls.OBC.CDL.Logical.And and1 "Cooling disabled or temperature criterion verified"
            annotation (Placement(transformation(extent={{-90,150},{-70,170}})));
          Buildings.Controls.OBC.CDL.Reals.MultiplyByParameter nor2(
            k=1/m2_flow_nominal) "Normalize"
            annotation (Placement(transformation(extent={{-140,90},{-120,110}})));
          Buildings.Controls.OBC.CDL.Reals.Switch swiOff2
            "Switch between enabled and disabled mode"
            annotation (Placement(transformation(extent={{140,90},{160,110}})));
          Buildings.Controls.OBC.CDL.Reals.Sources.Constant one(final k=1) "One"
            annotation (Placement(transformation(extent={{-10,70},{10,90}})));
        equation
          connect(T2WatEnt, delT1.u1)
            annotation (Line(points={{-200,-80},{-160,-80},{-160,-94},{-142,-94}}, color={0,0,127}));
          connect(T2WatLvg, delT1.u2)
            annotation (Line(points={{-200,-120},{-160,-120},{-160,-106},{-142,-106}},
                                                                                     color={0,0,127}));
          connect(delT1.y, delTemDis.u) annotation (Line(points={{-118,-100},{-52,-100}},color={0,0,127}));
          connect(T1WatEnt, calTemLvg.T1WatEnt)
            annotation (Line(points={{-200,-40},{-160,-40},{-160,-45},{-142,-45}},
                                                                             color={0,0,127}));
          connect(calTemLvg.T2WatLvg, addDelTem.u) annotation (Line(points={{-118,-40},{-92,-40}}, color={0,0,127}));
          connect(addDelTem.y, delTemDis1.u1) annotation (Line(points={{-68,-40},{-52,-40}}, color={0,0,127}));
          connect(T2WatEnt, delTemDis1.u2)
            annotation (Line(points={{-200,-80},{-60,-80},{-60,-48},{-52,-48}}, color={0,0,127}));
          connect(iniSta.outPort[1], ena.inPort) annotation (Line(points={{-9.5,40},{16,40}},   color={0,0,0}));
          connect(ena.outPort, actSta.inPort[1]) annotation (Line(points={{21.5,40},{49,40}}, color={0,0,0}));
          connect(actSta.outPort[1], dis.inPort) annotation (Line(points={{70.5,40},{96,40}}, color={0,0,0}));
          connect(dis.outPort, iniSta.inPort[1])
            annotation (Line(points={{101.5,40},{120,40},{120,60},{-40,60},{-40,40},{-31,40}}, color={0,0,0}));
          connect(booToRea.y, yVal2) annotation (Line(points={{162,-40},{200,-40}}, color={0,0,127}));
          connect(zer.y, swiOff1.u3) annotation (Line(points={{82,140},{90,140},{90,152},
                  {98,152}},                                                                    color={0,0,127}));
          connect(mulAnd.y, ena.condition) annotation (Line(points={{22,-40},{30,-40},{
                  30,18},{20,18},{20,28}},                                                      color={255,0,255}));
          connect(uCoo, not2.u) annotation (Line(points={{-200,160},{-170,160},{-170,-70},{-52,-70}},   color={255,0,255}));
          connect(actSta.active, booToRea.u) annotation (Line(points={{60,29},{60,-40},{138,-40}}, color={255,0,255}));
          connect(delTemDis1.y, mulAnd.u[1])
            annotation (Line(points={{-28,-40},{-2,-40},{-2,-42.625}},                   color={255,0,255}));
          connect(iniSta.active, tim1.u) annotation (Line(points={{-20,29},{-20,20},{
                  2.22045e-15,20},{2.22045e-15,12}},                                  color={255,0,255}));
          connect(tim1.passed, mulAnd.u[2])
            annotation (Line(points={{-8,-12},{-8,-36},{-2,-36},{-2,-38.25}},  color={255,0,255}));
          connect(uCoo, mulAnd.u[3]) annotation (Line(points={{-200,160},{-170,160},{-170,
                  0},{-20,0},{-20,-38},{-2,-38},{-2,-41.75}},
                                  color={255,0,255}));
          connect(actSta.active, tim.u) annotation (Line(points={{60,29},{60,-40},{50,-40},{50,-58}},
                                                                                    color={255,0,255}));
          connect(tim.passed, and2.u1) annotation (Line(points={{42,-82},{42,-92},{68,-92}},    color={255,0,255}));
          connect(or1.y, and2.u2) annotation (Line(points={{22,-100},{68,-100}},                     color={255,0,255}));
          connect(and2.y, dis.condition) annotation (Line(points={{92,-92},{100,-92},{100,28}}, color={255,0,255}));
          connect(m2_flow, calTemLvg.m2_flow) annotation (Line(points={{-200,100},{-160,
                  100},{-160,-35},{-142,-35}}, color={0,0,127}));
          connect(yValIsoEva_actual,isValIsoEvaClo.u)
            annotation (Line(points={{-200,-160},{-142,-160}},color={0,0,127}));
          connect(isValIsoEvaClo.y, mulAnd.u[4])
            annotation (Line(points={{-118,-160},{-100,-160},{-100,-20},{-24,-20},{-24,-42},
                  {-2,-42},{-2,-45.25}}, color={255,0,255}));
          connect(isValIsoEvaClo.y, not1.u)
            annotation (Line(points={{-118,-160},{-60,-160},{-60,-140},{-52,-140}}, color={255,0,255}));
          connect(delTemDis.y, or1.u[1])
            annotation (Line(points={{-28,-100},{-2,-100},{-2,-102.333}},                 color={255,0,255}));
          connect(not2.y, or1.u[2]) annotation (Line(points={{-28,-70},{-20,-70},{-20,
                  -96},{-2,-96},{-2,-100}}, color={255,0,255}));
          connect(not1.y, or1.u[3])
            annotation (Line(points={{-28,-140},{-20,-140},{-20,-104},{-2,-104},{-2,
                  -97.6667}},                                                             color={255,0,255}));
          connect(uCoo, and1.u1) annotation (Line(points={{-200,160},{-92,160}}, color={255,0,255}));
          connect(and1.y, swiOff1.u2) annotation (Line(points={{-68,160},{98,160}},                   color={255,0,255}));
          connect(isValIsoEvaClo.y, and1.u2)
            annotation (Line(points={{-118,-160},{-100,-160},{-100,152},{-92,152}}, color={255,0,255}));
          connect(m2_flow, nor2.u)
            annotation (Line(points={{-200,100},{-142,100}}, color={0,0,127}));
          connect(min1.y, swiOff1.u1) annotation (Line(points={{12,140},{40,140},{40,
                  168},{98,168}}, color={0,0,127}));
          connect(swiOff2.y, y1)
            annotation (Line(points={{162,100},{200,100}}, color={0,0,127}));
          connect(swiOff1.y, swiOff2.u1) annotation (Line(points={{122,160},{130,160},{
                  130,108},{138,108}}, color={0,0,127}));
          connect(iniSta.active, swiOff2.u2) annotation (Line(points={{-20,29},{-20,20},
                  {130,20},{130,100},{138,100}}, color={255,0,255}));
          connect(lin.y, swiOff2.u3) annotation (Line(points={{82,100},{120,100},{120,
                  92},{138,92}}, color={0,0,127}));
          connect(nor2.y, lin.u)
            annotation (Line(points={{-118,100},{58,100}}, color={0,0,127}));
          connect(one.y, lin.x2) annotation (Line(points={{12,80},{40,80},{40,96},{58,
                  96}}, color={0,0,127}));
          connect(one.y, lin.f2) annotation (Line(points={{12,80},{50,80},{50,92},{58,
                  92}}, color={0,0,127}));
          connect(zer.y, lin.x1) annotation (Line(points={{82,140},{90,140},{90,120},{
                  50,120},{50,108},{58,108}}, color={0,0,127}));
          connect(min1.y, lin.f1) annotation (Line(points={{12,140},{40,140},{40,104},{
                  58,104}}, color={0,0,127}));
          annotation (
            Diagram(
              coordinateSystem(
                preserveAspectRatio=false,
                extent={{-180,-180},{180,180}})),
            defaultComponentName="conWSE",
            Documentation(
              revisions="<html>
<ul>
<li>
July 14, 2021, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>",     info="<html>
<p>
This block implements the control logic for the waterside economizer.
</p>
<p>
The system is enabled if
</p>
<ul>
<li>
it has been disabled for more than 20 minutes, and
</li>
<li>
the \"cooling enabled\" input signal is <code>true</code>, and
</li>
<li>
the evaporator isolation valve is closed (i.e., the system is not in cold
rejection mode), and
</li>
<li>
the predicted leaving water temperature is lower than the entering water
temperature minus <code>dTEna</code>.
</li>
</ul>
<p>
The system is disabled if
</p>
<ul>
<li>
it has been enabled for more than 20 minutes, and
</li>
<li>
the \"cooling enabled\" input signal is <code>false</code>, or
</li>
<li>
the evaporator isolation valve is open, or
</li>
<li>
the leaving water temperature is higher than the entering water
temperature minus <code>dTDis</code>.
</li>
</ul>
<p>
When the system is enabled
</p>
<ul>
<li>
the primary side is controlled so that the primary flow rate
varies linearly with the secondary flow rate,
</li>
<li>
the bypass valve on the secondary side is fully closed.
</li>
</ul>
<p>
When the system is disabled
</p>
<ul>
<li>
if the \"cooling enabled\" input signal is <code>true</code> and
the evaporator isolation valve is closed,
the primary pump (resp. valve) is operated at its minimum speed
(resp. opening), otherwise it is switched off (resp. fully closed):
this is needed to yield a representative measurement of the
service water entering temperature,
</li>
<li>
the bypass valve on the secondary side is fully open.
</li>
</ul>
</html>"));
        end WatersideEconomizer;

        package BaseClasses "Package with base classes"
          extends Modelica.Icons.BasesPackage;

          partial block PartialSupervisory
            "Partial model for supervisory controller"
            extends Modelica.Blocks.Icons.Block;
            parameter Integer nSouAmb
              "Number of ambient sources to control"
              annotation (Evaluate=true);
            Buildings.Controls.OBC.CDL.Interfaces.BooleanInput uHea
              "Heating enable signal"
              annotation (Placement(transformation(extent={{-160,80},{-120,120}}),
              iconTransformation(extent={{-140,70},{-100,110}})));
            Buildings.Controls.OBC.CDL.Interfaces.BooleanInput uCoo
              "Cooling enable signal"
              annotation (Placement(transformation(extent={{-160,40},{-120,80}}),
              iconTransformation(extent={{-140,50},{-100,90}})));
            Buildings.Controls.OBC.CDL.Interfaces.RealInput TChiWatSupPreSet(
              final unit="K",
              displayUnit="degC")
              "Chilled water supply temperature set point"
              annotation (Placement(transformation(extent={{-160,-60},{-120,-20}}),
              iconTransformation(extent={{-140,-30},{-100,10}})));
            Buildings.Controls.OBC.CDL.Interfaces.RealInput TChiWatBot(
              final unit="K",
              displayUnit="degC")
              "Chilled water temperature at tank bottom"
              annotation (Placement(transformation(extent={{-160,-80},{-120,-40}}),
              iconTransformation(extent={{-140,-50},{-100,-10}})));
            Buildings.Controls.OBC.CDL.Interfaces.RealInput THeaWatTop(
              final unit="K",
              displayUnit="degC")
              "Heating water temperature at tank top"
              annotation (Placement(transformation(extent={{-160,-20},{-120,20}}),
              iconTransformation(extent={{-140,10},{-100,50}})));
            Buildings.Controls.OBC.CDL.Interfaces.RealInput THeaWatSupPreSet(
              final unit="K",
              displayUnit="degC")
              "Heating water supply temperature set point"
              annotation (Placement(transformation(extent={{-160,0},{-120,40}}),
              iconTransformation(extent={{-140,30},{-100,70}})));
            Buildings.Controls.OBC.CDL.Interfaces.RealOutput THeaWatSupSet(
              final unit="K",
              displayUnit="degC")
              "Heating water supply temperature set point after reset"
              annotation (Placement(transformation(extent={{120,-80},{160,-40}}),
              iconTransformation(extent={{100,-50},{140,-10}})));
            Buildings.Controls.OBC.CDL.Interfaces.RealOutput TChiWatSupSet(
              final unit="K",
              displayUnit="degC")
              "Chilled water supply temperature set point after reset"
              annotation (Placement(transformation(extent={{120,-100},{160,-60}}),
              iconTransformation(extent={{100,-70},{140,-30}})));
            Buildings.Controls.OBC.CDL.Interfaces.RealOutput yValIsoEva(
              final unit="1")
              "Evaporator to ambient loop isolation valve control signal"
              annotation (Placement(transformation(extent={{120,-20},{160,20}}),
              iconTransformation(extent={{100,-30},{140,10}})));
            Buildings.Controls.OBC.CDL.Interfaces.RealOutput yValIsoCon(
              final unit="1")
              "Condenser to ambient loop isolation valve control signal"
              annotation (Placement(transformation(extent={{120,0},{160,40}}),
              iconTransformation(extent={{100,-10},{140,30}})));
            Buildings.Controls.OBC.CDL.Interfaces.RealOutput yAmb[nSouAmb](
              each final unit="1")
              "Control output for ambient sources"
              annotation (Placement(transformation(extent={{120,-40},{160,0}}),
              iconTransformation(extent={{100,10},{140,50}})));
            Buildings.Controls.OBC.CDL.Interfaces.BooleanOutput yHea
              "Tank in heating demand"
              annotation (Placement(transformation(extent={{120,80},{160,120}}),
              iconTransformation(extent={{100,70},{140,110}})));
            Buildings.Controls.OBC.CDL.Interfaces.BooleanOutput yCoo
              "Tank in cooling demand"
              annotation (Placement(transformation(extent={{120,40},{160,80}}),
              iconTransformation(extent={{100,50},{140,90}})));
            Buildings.Controls.OBC.CDL.Logical.TrueFalseHold uHeaHol(
              trueHoldDuration=900)
              "Hold heating enable signal"
              annotation (Placement(transformation(extent={{-110,90},{-90,110}})));
            Buildings.Controls.OBC.CDL.Logical.TrueFalseHold uCooHol(
              trueHoldDuration=900)
              "Hold cooling enable signal"
              annotation (Placement(transformation(extent={{-110,50},{-90,70}})));
          equation
            connect(uHea,uHeaHol.u)
              annotation (Line(points={{-140,100},{-112,100}},color={255,0,255}));
            connect(uCoo,uCooHol.u)
              annotation (Line(points={{-140,60},{-112,60}},color={255,0,255}));
            annotation (
              Icon(
                coordinateSystem(
                  preserveAspectRatio=false)),
              Diagram(
                coordinateSystem(
                  preserveAspectRatio=false,
                  extent={{-120,-120},{120,120}})),
              defaultComponentName="conSup",
              Documentation(
                revisions="<html>
<ul>
<li>
July 31, 2020, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>",       info="<html>
<p>
This is a base class for the ETS supervisory controller.
</p>
</html>"));
          end PartialSupervisory;
          annotation (
            preferredView="info",
            Documentation(
              info="<html>
<p>
This package contains base classes that are used to construct the classes in
<a href=\"modelica://Buildings.Experimental.DHC.EnergyTransferStations.Combined.Controls\">
Buildings.Experimental.DHC.EnergyTransferStations.Combined.Controls</a>.
</p>
</html>"));
        end BaseClasses;
        annotation (
          preferredView="info",
          Documentation(
            info="<html>
<p>
This package contains control blocks for energy transfer stations in
fifth generation district heating and cooling systems.
</p>
</html>"));
      end Controls;

      package Subsystems "Package of models for subsystems of fifth generation DHC ETS"
        extends Modelica.Icons.VariantsPackage;

        model Borefield
          "Base subsystem with geothermal borefield"
          extends Buildings.Fluid.Interfaces.PartialTwoPortInterface(
            final m_flow_nominal=datBorFie.conDat.mBorFie_flow_nominal);
          replaceable model BoreFieldType=
              Buildings.Fluid.Geothermal.Borefields.OneUTube constrainedby
            Buildings.Fluid.Geothermal.Borefields.BaseClasses.PartialBorefield(
            redeclare package Medium = Medium,
            allowFlowReversal=allowFlowReversal,
            borFieDat=datBorFie,
            energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial)
            "Wall heat transfer"
            annotation (choicesAllMatching=true);
          replaceable parameter
            Buildings.Fluid.Geothermal.Borefields.Data.Borefield.Example datBorFie(conDat=
                Buildings.Fluid.Geothermal.Borefields.Data.Configuration.Example())
            constrainedby
            Buildings.Fluid.Geothermal.Borefields.Data.Borefield.Template(
              conDat(dp_nominal=0)) "Borefield parameters" annotation (
              choicesAllMatching=true, Placement(transformation(extent={{0,60},
                    {20,80}})));
          replaceable parameter Buildings.Fluid.Movers.Data.Generic perPum(
            motorCooledByFluid=false)
            constrainedby Buildings.Fluid.Movers.Data.Generic
            "Record with performance data for borefield pump"
            annotation (choicesAllMatching=true,Placement(transformation(extent={{40,60},{60,80}})));
          parameter Modelica.Units.SI.Pressure dp_nominal(displayUnit="Pa")
            "Pressure losses for the entire borefield (control valve excluded)"
            annotation (Dialog(group="Nominal condition"));
          parameter Modelica.Units.SI.Pressure dpValBorFie_nominal=dp_nominal/2
            "Nominal pressure drop of control valve";
          parameter Modelica.Units.SI.Temperature TBorWatEntMax(displayUnit="degC")
            "Maximum value of borefield water entering temperature";
          parameter Real spePumBorMin=0.1
            "Borefield pump minimum speed";
          // IO VARIABLES
          Buildings.Controls.OBC.CDL.Interfaces.RealInput yValIso_actual[2]
            "Isolation valves return position (fractional)"
            annotation (Placement(transformation(extent={{-140,20},{-100,60}}),
            iconTransformation(extent={{-140,20},{-100,60}})));
          Buildings.Controls.OBC.CDL.Interfaces.RealInput u
            "Control signal from supervisory"
            annotation (Placement(transformation(extent={{-140,60},{-100,100}}),
            iconTransformation(extent={{-140,60},{-100,100}})));
          // COMPONENTS
          Buildings.Fluid.Actuators.Valves.ThreeWayEqualPercentageLinear val(
            redeclare final package Medium = Medium,
            energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,
            from_dp=false,
            use_inputFilter=false,
            final m_flow_nominal=m_flow_nominal,
            final dpValve_nominal=dpValBorFie_nominal,
            final dpFixed_nominal=fill(dp_nominal, 2))
            "Mixing valve controlling entering temperature" annotation (
              Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={-80,0})));
          estcp.DHC.EnergyTransferStations.BaseClasses.Pump_m_flow pum(
            redeclare final package Medium = Medium,
            final per=perPum,
            final m_flow_nominal=m_flow_nominal,
            final dp_nominal=dpValBorFie_nominal + dp_nominal)
            "Pump with prescribed mass flow rate" annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={-40,0})));
          Buildings.Fluid.Sensors.TemperatureTwoPort senTEnt(
            final tau=if allowFlowReversal then 1 else 0,
            redeclare final package Medium = Medium,
            final allowFlowReversal=allowFlowReversal,
            final m_flow_nominal=m_flow_nominal) "Entering temperature"
            annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={-10,0})));
          BoreFieldType borFie
            "Geothermal borefield"
            annotation (Placement(transformation(extent={{-10,-10},{10,10}},rotation=0,origin={22,0})));
          estcp.DHC.EnergyTransferStations.BaseClasses.Junction spl(redeclare
              final package Medium = Medium, final m_flow_nominal=
                m_flow_nominal .* {1,-1,-1}) "Flow splitter" annotation (
              Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={80,0})));
          Buildings.Fluid.Sensors.TemperatureTwoPort senTLvg(
            redeclare final package Medium = Medium,
            final allowFlowReversal=allowFlowReversal,
            final m_flow_nominal=m_flow_nominal) "Leaving temperature"
            annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={50,0})));
          estcp.DHC.EnergyTransferStations.Combined.Controls.Borefield con(final
              TBorWatEntMax=TBorWatEntMax, final spePumBorMin=spePumBorMin)
            "Controller"
            annotation (Placement(transformation(extent={{-80,64},{-60,84}})));
          Buildings.Controls.OBC.CDL.Interfaces.RealOutput PPum(
            final unit="W")
            "Pump power"
            annotation (Placement(transformation(extent={{100,20},{140,60}}),iconTransformation(extent={{100,20},{140,60}})));
          Buildings.Controls.OBC.CDL.Reals.MultiplyByParameter gai1(final k=
                m_flow_nominal) "Scale to nominal mass flow rate" annotation (Placement(
                transformation(
                extent={{10,-10},{-10,10}},
                rotation=90,
                origin={-40,50})));
        initial equation
          assert(
            abs(
              datBorFie.conDat.dp_nominal) < Modelica.Constants.eps,
            "In "+getInstanceName()+": dp_nominal in the parameter record should be set to zero as the nominal
    pressure drop is lumped in the valve model. Use the exposed parameter
    dp_nominal instead.",
            level=AssertionLevel.warning);
        equation
          connect(pum.port_b,senTEnt.port_a)
            annotation (Line(points={{-30,0},{-20,0}},color={0,127,255}));
          connect(senTEnt.port_b,borFie.port_a)
            annotation (Line(points={{0,0},{12,0}},color={0,127,255}));
          connect(port_b,spl.port_2)
            annotation (Line(points={{100,0},{90,0}},color={0,127,255}));
          connect(spl.port_1,senTLvg.port_b)
            annotation (Line(points={{70,0},{60,0}},color={0,127,255}));
          connect(borFie.port_b,senTLvg.port_a)
            annotation (Line(points={{32,0},{40,0}},color={0,127,255}));
          connect(spl.port_3,val.port_3)
            annotation (Line(points={{80,-10},{80,-40},{-80,-40},{-80,-10}},color={0,127,255}));
          connect(u,con.u)
            annotation (Line(points={{-120,80},{-82,80}},color={0,0,127}));
          connect(yValIso_actual,con.yValIso_actual)
            annotation (Line(points={{-120,40},{-90,40},{-90,74},{-82,74}},color={0,0,127}));
          connect(con.yValMix,val.y)
            annotation (Line(points={{-58,68},{-56,68},{-56,60},{-80,60},{-80,12}},color={0,0,127}));
          connect(port_a,val.port_1)
            annotation (Line(points={{-100,0},{-90,0}},color={0,127,255}));
          connect(val.port_2,pum.port_a)
            annotation (Line(points={{-70,0},{-50,0}},color={0,127,255}));
          connect(senTEnt.T,con.TBorWatEnt)
            annotation (Line(points={{-10,11},{-10,30},{-86,30},{-86,68},{-82,68}},color={0,0,127}));
          connect(pum.P,PPum)
            annotation (Line(points={{-29,9},{-20,9},{-20,40},{120,40}},color={0,0,127}));
          connect(con.yPum,gai1.u)
            annotation (Line(points={{-58,80},{-40,80},{-40,62}},color={0,0,127}));
          connect(gai1.y,pum.m_flow_in)
            annotation (Line(points={{-40,38},{-40,12}},color={0,0,127}));
          annotation (
            defaultComponentName="borFie",
            Icon(
              coordinateSystem(
                preserveAspectRatio=false),
              graphics={
                Rectangle(
                  extent={{-100,-100},{100,100}},
                  lineColor={0,0,127},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Rectangle(
                  extent={{-60,60},{60,-60}},
                  lineColor={27,0,55},
                  fillColor={170,213,255},
                  fillPattern=FillPattern.Solid)}),
            Diagram(
              coordinateSystem(
                preserveAspectRatio=false,
                extent={{-100,-100},{100,100}})),
            Documentation(
              info="<html>
<p>
This is a model for a borefield system with a variable speed pump
and a mixing valve modulated to maintain a maximum inlet temperature.
</p>
<p>
The system is controlled based on the logic described in
<a href=\"modelica://Buildings.Experimental.DHC.EnergyTransferStations.Combined.Controls.Borefield\">
Buildings.Experimental.DHC.EnergyTransferStations.Combined.Controls.Borefield</a>.
The pump flow rate is considered proportional to the pump speed
under the assumption of a constant flow resistance in the borefield loop.
This assumption is justified by the connection of the loop to the buffer tanks,
and by the additional assumption that the bypass branch of the mixing valve
is balanced with the direct branch.
</p>
<p>
(The parameter <code>from_dp</code> of the valve model is set to false to
simplify the system of algebraic equations, which, in this specific case,
alleviates non-convergence issues.)
</p>
</html>"));
        end Borefield;

        model Chiller
          "Base subsystem with heat recovery chiller"
          replaceable package Medium=Modelica.Media.Interfaces.PartialMedium
            "Medium model"
            annotation (choices(choice(redeclare package Medium=
                    Buildings.Media.Water                                             "Water"),
            choice(redeclare package Medium =
                    Buildings.Media.Antifreeze.PropyleneGlycolWater (property_T=293.15,X_a=0.40)
            "Propylene glycol water, 40% mass fraction")));
          parameter Boolean allowFlowReversal=false
            "= true to allow flow reversal, false restricts to design direction (port_a -> port_b)"
            annotation (Dialog(tab="Assumptions"),Evaluate=true);
          replaceable parameter Buildings.Fluid.Chillers.Data.ElectricEIR.Generic dat
            "Chiller performance data"
            annotation (choicesAllMatching=true,Placement(transformation(extent={{60,160},{80,180}})));
          replaceable parameter Buildings.Fluid.Movers.Data.Generic perPumCon(
            motorCooledByFluid=false)
            constrainedby Buildings.Fluid.Movers.Data.Generic
            "Record with performance data for condenser pump"
            annotation (choicesAllMatching=true,Placement(transformation(extent={{100,160},{120,180}})));
          replaceable parameter Buildings.Fluid.Movers.Data.Generic perPumEva(
            motorCooledByFluid=false)
            constrainedby Buildings.Fluid.Movers.Data.Generic
            "Record with performance data for evaporator pump"
            annotation (choicesAllMatching=true,Placement(transformation(extent={{140,160},{160,180}})));
          parameter Modelica.Units.SI.PressureDifference dpCon_nominal(displayUnit="Pa")
            "Nominal pressure drop accross condenser"
            annotation (Dialog(group="Nominal condition"));
          parameter Modelica.Units.SI.PressureDifference dpEva_nominal(displayUnit="Pa")
            "Nominal pressure drop accross evaporator"
            annotation (Dialog(group="Nominal condition"));
          parameter Modelica.Units.SI.Pressure dpValCon_nominal=dpCon_nominal/2
            "Nominal pressure drop accross control valve on condenser side"
            annotation (Dialog(group="Nominal condition"));
          parameter Modelica.Units.SI.Pressure dpValEva_nominal=dpEva_nominal/2
            "Nominal pressure drop accross control valve on evaporator side"
            annotation (Dialog(group="Nominal condition"));
          parameter Modelica.Units.SI.Temperature TConWatEntMin(displayUnit="degC")=
            dat.TConEntMin "Minimum value of condenser water entering temperature"
            annotation (Dialog(group="Controls"));
          parameter Modelica.Units.SI.Temperature TEvaWatEntMax(displayUnit="degC")=
            dat.TEvaLvgMax - dat.QEva_flow_nominal/cp_default/dat.mEva_flow_nominal
            "Maximum value of evaporator water entering temperature"
            annotation (Dialog(group="Controls"));
          // IO CONNECTORS
          Buildings.Controls.OBC.CDL.Interfaces.BooleanInput uHea
            "Heating enable signal"
            annotation (Placement(transformation(extent={{-240,168},{-200,208}}),
            iconTransformation(extent={{-140,20},{-100,60}})));
          Buildings.Controls.OBC.CDL.Interfaces.BooleanInput uCoo
            "Cooling enable signal"
            annotation (Placement(transformation(extent={{-240,148},{-200,188}}),
            iconTransformation(extent={{-140,0},{-100,40}})));
          Buildings.Controls.OBC.CDL.Interfaces.RealInput TChiWatSupSet(
            final unit="K",
            displayUnit="degC")
            "Chilled water supply temperature set point (may be reset down)"
            annotation (Placement(transformation(extent={{-240,120},{-200,160}}),
            iconTransformation(extent={{-140,-40},{-100,0}})));
          Modelica.Fluid.Interfaces.FluidPort_a port_aChiWat(
            redeclare final package Medium=Medium,
            m_flow(
              min=
                if allowFlowReversal then
                  -Modelica.Constants.inf
                else
                  0),
            h_outflow(
              start=Medium.h_default,
              nominal=Medium.h_default))
            "Fluid port for chilled water return"
            annotation (Placement(transformation(extent={{190,-70},{210,-50}}),
            iconTransformation(extent={{90,-70},{110,-50}})));
          Modelica.Fluid.Interfaces.FluidPort_b port_bChiWat(
            redeclare final package Medium=Medium,
            m_flow(
              max=
                if allowFlowReversal then
                  +Modelica.Constants.inf
                else
                  0),
            h_outflow(
              start=Medium.h_default,
              nominal=Medium.h_default))
            "Fluid port for chilled water supply"
            annotation (Placement(transformation(extent={{190,50},{210,70}}),
            iconTransformation(extent={{90,50},{110,70}})));
          Modelica.Fluid.Interfaces.FluidPort_a port_aHeaWat(
            redeclare final package Medium=Medium,
            m_flow(
              min=
                if allowFlowReversal then
                  -Modelica.Constants.inf
                else
                  0),
            h_outflow(
              start=Medium.h_default,
              nominal=Medium.h_default))
            "Fluid port for heating water return"
            annotation (Placement(transformation(extent={{-210,-70},{-190,-50}}),
            iconTransformation(extent={{-110,-70},{-90,-50}})));
          Modelica.Fluid.Interfaces.FluidPort_b port_bHeaWat(
            redeclare final package Medium=Medium,
            m_flow(
              max=
                if allowFlowReversal then
                  +Modelica.Constants.inf
                else
                  0),
            h_outflow(
              start=Medium.h_default,
              nominal=Medium.h_default))
            "Fluid port for heating water supply"
            annotation (Placement(transformation(extent={{-210,50},{-190,70}}),
            iconTransformation(extent={{-110,50},{-90,70}})));
          Buildings.Controls.OBC.CDL.Interfaces.RealOutput PChi(
            final unit="W")
            "Chiller power"
            annotation (Placement(transformation(extent={{200,-20},{240,20}}),
            iconTransformation(extent={{100,0},{140,40}})));
          Buildings.Controls.OBC.CDL.Interfaces.RealOutput PPum(
            final unit="W")
            "Pump power"
            annotation (Placement(transformation(extent={{200,-160},{240,-120}}),
            iconTransformation(extent={{100,-40},{140,0}})));
          // COMPONENTS
          Buildings.Fluid.Chillers.ElectricEIR chi(
            redeclare final package Medium1 = Medium,
            redeclare final package Medium2 = Medium,
            final allowFlowReversal1=allowFlowReversal,
            final allowFlowReversal2=allowFlowReversal,
            final dp1_nominal=0,
            final dp2_nominal=0,
            energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,
            final per=dat)
            "Water cooled chiller (ports indexed 1 are on condenser side)"
            annotation (Placement(transformation(extent={{-10,-10},{10,10}})));
          estcp.DHC.EnergyTransferStations.BaseClasses.Pump_m_flow pumCon(
            redeclare final package Medium = Medium,
            final per=perPumCon,
            final allowFlowReversal=allowFlowReversal,
            final m_flow_nominal=dat.mCon_flow_nominal,
            final dp_nominal=dpCon_nominal + dpValCon_nominal) "Condenser pump"
            annotation (Placement(transformation(extent={{-110,50},{-90,70}})));
          estcp.DHC.EnergyTransferStations.BaseClasses.Pump_m_flow pumEva(
            redeclare final package Medium = Medium,
            final per=perPumEva,
            final allowFlowReversal=allowFlowReversal,
            final m_flow_nominal=dat.mEva_flow_nominal,
            final dp_nominal=dpEva_nominal + dpValEva_nominal)
            "Evaporator pump" annotation (Placement(transformation(
                extent={{10,-10},{-10,10}},
                rotation=0,
                origin={-100,-60})));
          estcp.DHC.EnergyTransferStations.Combined.Controls.Chiller con(final
              TConWatEntMin=TConWatEntMin, final TEvaWatEntMax=TEvaWatEntMax)
            "Controller" annotation (Placement(transformation(extent={{-70,130},
                    {-50,150}})));
          Buildings.Fluid.Sensors.TemperatureTwoPort senTConLvg(
            redeclare final package Medium=Medium,
            final allowFlowReversal=allowFlowReversal,
            final m_flow_nominal=dat.mCon_flow_nominal)
            "Condenser water leaving temperature"
            annotation (Placement(transformation(extent={{10,10},{-10,-10}},rotation=270,origin={20,20})));
          Buildings.Fluid.Sensors.TemperatureTwoPort senTConEnt(
            redeclare final package Medium=Medium,
            final allowFlowReversal=allowFlowReversal,
            final m_flow_nominal=dat.mCon_flow_nominal)
            "Condenser water entering temperature"
            annotation (Placement(transformation(extent={{-10,10},{10,-10}},rotation=-90,origin={-20,40})));
          Buildings.Fluid.Sensors.TemperatureTwoPort senTEvaEnt(
            redeclare final package Medium=Medium,
            final allowFlowReversal=allowFlowReversal,
            final m_flow_nominal=dat.mEva_flow_nominal)
            "Evaporator water entering temperature"
            annotation (Placement(transformation(extent={{10,10},{-10,-10}},rotation=270,origin={20,-40})));
          Buildings.Fluid.Sensors.TemperatureTwoPort senTEvaLvg(
            redeclare final package Medium=Medium,
            final allowFlowReversal=allowFlowReversal,
            final m_flow_nominal=dat.mEva_flow_nominal)
            "Evaporator water leaving temperature"
            annotation (Placement(transformation(extent={{10,-10},{-10,10}},rotation=90,origin={-20,-20})));
          estcp.DHC.EnergyTransferStations.BaseClasses.Junction splEva(
              redeclare final package Medium = Medium, final m_flow_nominal=dat.mEva_flow_nominal
                 .* {1,-1,-1}) "Flow splitter for the evaporator water circuit"
            annotation (Placement(transformation(
                extent={{10,-10},{-10,10}},
                rotation=0,
                origin={-140,-60})));
          estcp.DHC.EnergyTransferStations.BaseClasses.Junction splConMix(
              redeclare final package Medium = Medium, final m_flow_nominal=dat.mCon_flow_nominal
                 .* {1,-1,-1}) "Flow splitter" annotation (Placement(
                transformation(
                extent={{-10,10},{10,-10}},
                rotation=0,
                origin={120,60})));
          Buildings.Fluid.Actuators.Valves.ThreeWayEqualPercentageLinear valEva(
            redeclare final package Medium = Medium,
            energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,
            from_dp=false,
            use_inputFilter=false,
            final m_flow_nominal=dat.mEva_flow_nominal,
            final dpValve_nominal=dpValEva_nominal,
            final dpFixed_nominal=fill(dpEva_nominal, 2))
            "Control valve for maximum evaporator water entering temperature"
            annotation (Placement(transformation(
                extent={{-10,10},{10,-10}},
                rotation=180,
                origin={120,-60})));
          Buildings.Fluid.Actuators.Valves.ThreeWayEqualPercentageLinear valCon(
            redeclare final package Medium = Medium,
            energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,
            from_dp=false,
            use_inputFilter=false,
            final m_flow_nominal=dat.mCon_flow_nominal,
            final dpValve_nominal=dpValCon_nominal,
            final dpFixed_nominal=fill(dpCon_nominal, 2))
            "Control valve for minimum condenser water entering temperature"
            annotation (Placement(transformation(
                extent={{-10,10},{10,-10}},
                rotation=0,
                origin={-140,60})));
          Buildings.Controls.OBC.CDL.Conversions.BooleanToReal booToRea
            "Constant speed primary pumps control signal"
            annotation (Placement(transformation(extent={{-60,170},{-80,190}})));
          Buildings.Controls.OBC.CDL.Reals.Add add2
            annotation (Placement(transformation(extent={{160,-150},{180,-130}})));
          Buildings.Controls.OBC.CDL.Reals.MultiplyByParameter gai1(final k=dat.mCon_flow_nominal)
            "Scale to nominal mass flow rate" annotation (Placement(transformation(
                extent={{10,-10},{-10,10}},
                rotation=90,
                origin={-100,114})));
          Buildings.Controls.OBC.CDL.Reals.MultiplyByParameter gai2(final k=dat.mEva_flow_nominal)
            "Scale to nominal mass flow rate" annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=-90,
                origin={-100,-22})));
        protected
          final parameter Medium.ThermodynamicState sta_default=Medium.setState_pTX(
            T=Medium.T_default,
            p=Medium.p_default,
            X=Medium.X_default[1:Medium.nXi])
            "Medium state at default properties";
          final parameter Modelica.Units.SI.SpecificHeatCapacity cp_default=
              Medium.specificHeatCapacityCp(sta_default)
            "Specific heat capacity of the fluid";
        equation
          connect(splConMix.port_3,valCon.port_3)
            annotation (Line(points={{120,70},{120,80},{-140,80},{-140,70}},color={0,127,255}));
          connect(valCon.port_2,pumCon.port_a)
            annotation (Line(points={{-130,60},{-110,60}},color={0,127,255}));
          connect(pumEva.port_b,splEva.port_1)
            annotation (Line(points={{-110,-60},{-130,-60}},color={0,127,255}));
          connect(splEva.port_3,valEva.port_3)
            annotation (Line(points={{-140,-70},{-140,-80},{120,-80},{120,-70}},color={0,127,255}));
          connect(con.yValEva,valEva.y)
            annotation (Line(points={{-48,137},{-32,137},{-32,120},{160,120},{160,-40},{
                  120,-40},{120,-48}},                                                                      color={0,0,127}));
          connect(con.yValCon,valCon.y)
            annotation (Line(points={{-48,133},{-44,133},{-44,90},{-160,90},{-160,40},{-140,
                  40},{-140,48}},                                                                          color={0,0,127}));
          connect(con.yChi,chi.on)
            annotation (Line(points={{-48,146},{-36,146},{-36,3},{-12,3}},color={255,0,255}));
          connect(uHea,con.uHea)
            annotation (Line(points={{-220,188},{-180,188},{-180,147},{-72,147}},color={255,0,255}));
          connect(uCoo,con.uCoo)
            annotation (Line(points={{-220,168},{-186,168},{-186,143},{-72,143}},color={255,0,255}));
          connect(senTConEnt.T,con.TConWatEnt)
            annotation (Line(points={{-31,40},{-78,40},{-78,133},{-72,133}},color={0,0,127}));
          connect(senTEvaEnt.T,con.TEvaWatEnt)
            annotation (Line(points={{9,-40},{-80,-40},{-80,137},{-72,137}},color={0,0,127}));
          connect(splConMix.port_2,port_bHeaWat)
            annotation (Line(points={{130,60},{140,60},{140,100},{-180,100},{-180,60},{-200,60}},color={0,127,255}));
          connect(splEva.port_2,port_bChiWat)
            annotation (Line(points={{-150,-60},{-160,-60},{-160,-100},{180,-100},{180,60},{200,60}},color={0,127,255}));
          connect(port_aHeaWat,valCon.port_1)
            annotation (Line(points={{-200,-60},{-170,-60},{-170,60},{-150,60}},color={0,127,255}));
          connect(port_aChiWat,valEva.port_1)
            annotation (Line(points={{200,-60},{130,-60}},color={0,127,255}));
          connect(valEva.port_2,senTEvaEnt.port_a)
            annotation (Line(points={{110,-60},{20,-60},{20,-50}},color={0,127,255}));
          connect(senTEvaLvg.port_b,pumEva.port_a)
            annotation (Line(points={{-20,-30},{-20,-60},{-90,-60}},color={0,127,255}));
          connect(senTEvaLvg.port_a,chi.port_b2)
            annotation (Line(points={{-20,-10},{-20,-6},{-10,-6}},color={0,127,255}));
          connect(senTEvaEnt.port_b,chi.port_a2)
            annotation (Line(points={{20,-30},{20,-6},{10,-6}},color={0,127,255}));
          connect(chi.port_b1,senTConLvg.port_a)
            annotation (Line(points={{10,6},{20,6},{20,10}},color={0,127,255}));
          connect(senTConLvg.port_b,splConMix.port_1)
            annotation (Line(points={{20,30},{20,60},{110,60}},color={0,127,255}));
          connect(pumCon.port_b,senTConEnt.port_a)
            annotation (Line(points={{-90,60},{-20,60},{-20,50}},color={0,127,255}));
          connect(senTConEnt.port_b,chi.port_a1)
            annotation (Line(points={{-20,30},{-20,6},{-10,6}},color={0,127,255}));
          connect(chi.P,PChi)
            annotation (Line(points={{11,9},{14,9},{14,0},{220,0}},color={0,0,127}));
          connect(add2.y,PPum)
            annotation (Line(points={{182,-140},{220,-140}},color={0,0,127}));
          connect(pumEva.P,add2.u2)
            annotation (Line(points={{-111,-51},{-120,-51},{-120,-140},{140,-140},{140,-146},{158,-146}},color={0,0,127}));
          connect(pumCon.P,add2.u1)
            annotation (Line(points={{-89,69},{-60,69},{-60,-134},{158,-134}},color={0,0,127}));
          connect(con.yChi,booToRea.u)
            annotation (Line(points={{-48,146},{-36,146},{-36,180},{-58,180}},color={255,0,255}));
          connect(booToRea.y,gai2.u)
            annotation (Line(points={{-82,180},{-120,180},{-120,0},{-100,0},{-100,-10}},color={0,0,127}));
          connect(gai2.y,pumEva.m_flow_in)
            annotation (Line(points={{-100,-34},{-100,-48}},color={0,0,127}));
          connect(gai1.y,pumCon.m_flow_in)
            annotation (Line(points={{-100,102},{-100,72}},color={0,0,127}));
          connect(booToRea.y,gai1.u)
            annotation (Line(points={{-82,180},{-100,180},{-100,126}},color={0,0,127}));
          connect(TChiWatSupSet,chi.TSet)
            annotation (Line(points={{-220,140},{-188,140},{-188,-3},{-12,-3}},color={0,0,127}));
          annotation (
            defaultComponentName="chi",
            Icon(
              graphics={
                Rectangle(
                  extent={{-100,-100},{100,100}},
                  lineColor={0,0,127},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Rectangle(
                  extent={{-60,60},{60,-60}},
                  lineColor={27,0,55},
                  fillColor={170,213,255},
                  fillPattern=FillPattern.Solid),
                Text(
                  extent={{-149,-110},{151,-150}},
                  textColor={0,0,255},
                  textString="%name")}),
            Diagram(
              coordinateSystem(
                extent={{-200,-200},{200,200}})),
            Documentation(
              revisions="<html>
<ul>
<li>
July 31, 2020, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>",     info="<html>
<p>
This is a model for a chiller system with constant speed evaporator and
condenser pumps, and mixing valves modulated to maintain a minimum
condenser inlet temperature (resp. maximum evaporator inlet temperature).
</p>
<p>
The system is controlled based on the logic described in
<a href=\"modelica://Buildings.Experimental.DHC.EnergyTransferStations.Combined.Controls.Chiller\">
Buildings.Experimental.DHC.EnergyTransferStations.Combined.Controls.Chiller</a>.
The pump flow rate is considered proportional to the pump speed
under the assumption of a constant flow resistance for both the condenser
and the evaporator loops. This assumption is justified
by the connection of the loops to the buffer tanks, and the additional
assumption that the bypass branch of the mixing valves is balanced
with the direct branch.
</p>
</html>"));
        end Chiller;

        model HeatExchanger
          "Base subsystem with district heat exchanger"
          extends Buildings.Fluid.Interfaces.PartialFourPortInterface(
            final m1_flow_nominal=abs(Q_flow_nominal/4200/(T_b1_nominal - T_a1_nominal)),
            final m2_flow_nominal=abs(Q_flow_nominal/4200/(T_b2_nominal - T_a2_nominal)));
          parameter DHC.EnergyTransferStations.Types.ConnectionConfiguration conCon
            "District connection configuration" annotation (Evaluate=true);
          replaceable parameter Buildings.Fluid.Movers.Data.Generic perPum1(
            motorCooledByFluid=false)
            constrainedby Buildings.Fluid.Movers.Data.Generic
            "Record with performance data for primary pump"
            annotation (Dialog(enable=not have_val1), choicesAllMatching=true,
            Placement(transformation(extent={{-40,-140},{-20,-120}})));
          replaceable parameter Buildings.Fluid.Movers.Data.Generic perPum2(
            motorCooledByFluid=false)
            constrainedby Buildings.Fluid.Movers.Data.Generic
            "Record with performance data for secondary pump"
            annotation (choicesAllMatching=true,Placement(transformation(extent={{20,-140},{40,-120}})));
          parameter Modelica.Units.SI.PressureDifference dp1Hex_nominal(displayUnit=
                "Pa") "Nominal pressure drop across heat exchanger on district side"
            annotation (Dialog(group="Nominal condition"));
          parameter Modelica.Units.SI.PressureDifference dp2Hex_nominal(displayUnit=
                "Pa") "Nominal pressure drop across heat exchanger on building side"
            annotation (Dialog(group="Nominal condition"));
          parameter Modelica.Units.SI.PressureDifference dpVal1_nominal(displayUnit=
                "Pa") = dp1Hex_nominal/2
            "Nominal pressure drop of primary control valve"
            annotation (Dialog(enable=have_val1, group="Nominal condition"));
          parameter Modelica.Units.SI.PressureDifference dpVal2_nominal(displayUnit=
                "Pa") = dp2Hex_nominal/2
            "Nominal pressure drop of secondary control valve"
            annotation (Dialog(group="Nominal condition"));
          parameter Modelica.Units.SI.HeatFlowRate Q_flow_nominal
            "Nominal heat flow rate (from district to building)"
            annotation (Dialog(group="Nominal condition"));
          parameter Modelica.Units.SI.Temperature T_a1_nominal
            "Nominal water inlet temperature on district side"
            annotation (Dialog(group="Nominal condition"));
          parameter Modelica.Units.SI.Temperature T_b1_nominal
            "Nominal water outlet temperature on district side"
            annotation (Dialog(group="Nominal condition"));
          parameter Modelica.Units.SI.Temperature T_a2_nominal
            "Nominal water inlet temperature on building side"
            annotation (Dialog(group="Nominal condition"));
          parameter Modelica.Units.SI.Temperature T_b2_nominal
            "Nominal water outlet temperature on building side"
            annotation (Dialog(group="Nominal condition"));
          parameter Real spePum1Min(unit="1")=0.1
            "Heat exchanger primary pump minimum speed (fractional)"
            annotation (Dialog(group="Controls",enable=not have_val1));
          parameter Real spePum2Min(unit="1")=0.1
            "Heat exchanger secondary pump minimum speed (fractional)"
            annotation (Dialog(group="Controls"));
          // IO CONNECTORS
          Buildings.Controls.OBC.CDL.Interfaces.RealInput yValIso_actual[2]
            "Isolation valves return position (index 1 for condenser)"
            annotation (Placement(transformation(extent={{-140,80},{-100,120}}),
            iconTransformation(extent={{-140,-40},{-100,0}})));
          Buildings.Controls.OBC.CDL.Interfaces.RealInput u
            "Control signal for secondary side (from supervisory)"
            annotation (Placement(transformation(extent={{-140,120},{-100,160}}),
            iconTransformation(extent={{-140,0},{-100,40}})));
          Buildings.Controls.OBC.CDL.Interfaces.RealOutput PPum(
            final unit="W")
            "Power drawn by pump motors"
            annotation (Placement(transformation(extent={{100,-20},{140,20}}),
            iconTransformation(extent={{100,-20},{140,20}})));
          // COMPONENTS
          estcp.DHC.EnergyTransferStations.Combined.Controls.HeatExchanger con(
            final conCon=conCon,
            final spePum1Min=spePum1Min,
            final spePum2Min=spePum2Min)
            "District heat exchanger loop controller" annotation (Placement(
                transformation(extent={{-70,150},{-50,170}})));
          Buildings.Fluid.HeatExchangers.PlateHeatExchangerEffectivenessNTU hex(
            redeclare final package Medium1 = Medium1,
            redeclare final package Medium2 = Medium2,
            final use_Q_flow_nominal=true,
            configuration=Buildings.Fluid.Types.HeatExchangerConfiguration.CounterFlow,
            final allowFlowReversal1=allowFlowReversal1,
            final allowFlowReversal2=allowFlowReversal2,
            final dp1_nominal=if have_val1 then 0 else dp1Hex_nominal,
            final dp2_nominal=0,
            final m1_flow_nominal=m1_flow_nominal,
            final m2_flow_nominal=m2_flow_nominal,
            final Q_flow_nominal=Q_flow_nominal,
            final T_a1_nominal=T_a1_nominal,
            final T_a2_nominal=T_a2_nominal)
            "Heat exchanger" annotation (Placement(
                transformation(
                extent={{10,10},{-10,-10}},
                rotation=180,
                origin={0,0})));

          DHC.EnergyTransferStations.BaseClasses.Pump_m_flow pum1(
            redeclare final package Medium = Medium1,
            final per=perPum1,
            final m_flow_nominal=m1_flow_nominal,
            final dp_nominal=dp1Hex_nominal,
            final allowFlowReversal=allowFlowReversal1) if not have_val1
            "District heat exchanger primary pump" annotation (Placement(
                transformation(
                extent={{10,10},{-10,-10}},
                rotation=180,
                origin={-60,80})));
          DHC.EnergyTransferStations.BaseClasses.Pump_m_flow pum2(
            redeclare final package Medium = Medium2,
            final per=perPum2,
            final m_flow_nominal=m2_flow_nominal,
            final dp_nominal=dp2Hex_nominal + dpVal2_nominal,
            final allowFlowReversal=allowFlowReversal2) "Secondary pump"
            annotation (Placement(transformation(
                extent={{-10,10},{10,-10}},
                rotation=180,
                origin={40,-60})));
          Buildings.Fluid.Sensors.TemperatureTwoPort senT2WatEnt(
            redeclare final package Medium = Medium2,
            final m_flow_nominal=m2_flow_nominal,
            final allowFlowReversal=allowFlowReversal2)
            "Heat exchanger secondary water entering temperature" annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=90,
                origin={20,-40})));
          Buildings.Fluid.Sensors.TemperatureTwoPort senT2WatLvg(
            redeclare final package Medium = Medium2,
            final m_flow_nominal=m2_flow_nominal,
            final allowFlowReversal=allowFlowReversal2)
            "Heat exchanger secondary water leaving temperature" annotation (Placement(
                transformation(
                extent={{10,-10},{-10,10}},
                rotation=90,
                origin={-20,-20})));
          Buildings.Controls.OBC.CDL.Reals.MultiplyByParameter gai2(final k=
                m2_flow_nominal) "Scale to nominal mass flow rate" annotation (
              Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=-90,
                origin={40,118})));
          Buildings.Fluid.Actuators.Valves.TwoWayPressureIndependent val1(
            redeclare final package Medium = Medium1,
            final m_flow_nominal=m1_flow_nominal,
            from_dp=true,
            final dpValve_nominal=dpVal1_nominal,
            use_inputFilter=false,
            final dpFixed_nominal=dp1Hex_nominal) if have_val1
            "Heat exchanger primary control valve"
            annotation (Placement(transformation(extent={{70,70},{90,90}})));
          Buildings.Controls.OBC.CDL.Reals.MultiplyByParameter gai1(final k=
                m1_flow_nominal) if not have_val1 "Scale to nominal mass flow rate"
            annotation (Placement(transformation(extent={{-12,110},{-32,130}})));
          Buildings.Controls.OBC.CDL.Reals.MultiSum totPPum(
            final nin=
              if have_val1 then
                1
              else
                2)
            "Total pump power"
            annotation (Placement(transformation(extent={{70,-10},{90,10}})));
          Buildings.Fluid.Actuators.Valves.ThreeWayEqualPercentageLinear val2(
            redeclare final package Medium = Medium2,
            energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,
            from_dp=false,
            use_inputFilter=false,
            final m_flow_nominal=m2_flow_nominal,
            final dpValve_nominal=dpVal2_nominal,
            final dpFixed_nominal=fill(dp2Hex_nominal, 2))
            "Control valve" annotation (
              Placement(transformation(
                extent={{10,-10},{-10,10}},
                rotation=0,
                origin={80,-60})));
          DHC.EnergyTransferStations.BaseClasses.Junction spl(redeclare final
              package Medium = Medium2, final m_flow_nominal=m2_flow_nominal
                 .* {1,-1,-1}) "Flow splitter" annotation (Placement(
                transformation(
                extent={{10,-10},{-10,10}},
                rotation=0,
                origin={-60,-60})));
        protected
          parameter Boolean have_val1=
            conCon ==DHC.EnergyTransferStations.Types.ConnectionConfiguration.TwoWayValve
            "True in case of control valve on district side, false in case of a pump";
        equation
          if have_val1 then
            connect(port_a1, hex.port_a1)
              annotation (Line(points={{-100,60},{-20,60},{-20,6},{-10,6}}, color={0,127,255}));
          else
            connect(hex.port_b1, port_b1)
              annotation (Line(points={{10,6},{20,6},{20,60},{100,60}}, color={0,127,255}));
          end if;
          connect(gai2.y,pum2.m_flow_in)
            annotation (Line(points={{40,106},{40,-48}},color={0,0,127}));
          connect(port_a1,pum1.port_a)
            annotation (Line(points={{-100,60},{-90,60},{-90,80},{-70,80}},color={0,127,255}));
          connect(val1.port_b,port_b1)
            annotation (Line(points={{90,80},{94,80},{94,60},{100,60}},color={0,127,255}));
          connect(pum2.port_b,senT2WatEnt.port_a)
            annotation (Line(points={{30,-60},{20,-60},{20,-50}},color={0,127,255}));
          connect(senT2WatEnt.port_b,hex.port_a2)
            annotation (Line(points={{20,-30},{20,-6},{10,-6}},color={0,127,255}));
          connect(con.y1, val1.y)
            annotation (Line(points={{-48,166},{80,166},{80,92}}, color={0,0,127}));
          connect(con.y1, gai1.u) annotation (Line(points={{-48,166},{0,166},{0,120},{-10,
                  120}}, color={0,0,127}));
          connect(gai1.y,pum1.m_flow_in)
            annotation (Line(points={{-34,120},{-60,120},{-60,92}},color={0,0,127}));
          connect(pum1.P,totPPum.u[2])
            annotation (Line(points={{-49,89},{60,89},{60,0},{68,0}},color={0,0,127}));
          connect(pum2.P,totPPum.u[1])
            annotation (Line(points={{29,-51},{28,-51},{28,0},{68,0}},color={0,0,127}));
          connect(totPPum.y,PPum)
            annotation (Line(points={{92,0},{120,0}},color={0,0,127}));
          connect(yValIso_actual,con.yValIso)
            annotation (Line(points={{-120,100},{-92,100},{-92,155},{-72,155}},color={0,0,127}));
          connect(con.yPum2,gai2.u)
            annotation (Line(points={{-48,160},{40,160},{40,130}},color={0,0,127}));
          connect(u,con.u)
            annotation (Line(points={{-120,140},{-96,140},{-96,165},{-72,165}},color={0,0,127}));
          connect(hex.port_b2,senT2WatLvg.port_a)
            annotation (Line(points={{-10,-6},{-20,-6},{-20,-10}},color={0,127,255}));
          connect(val2.port_2,pum2.port_a)
            annotation (Line(points={{70,-60},{50,-60}},color={0,127,255}));
          connect(port_a2,val2.port_1)
            annotation (Line(points={{100,-60},{90,-60}},color={0,127,255}));
          connect(spl.port_1,senT2WatLvg.port_b)
            annotation (Line(points={{-50,-60},{-20,-60},{-20,-30}},color={0,127,255}));
          connect(spl.port_2,port_b2)
            annotation (Line(points={{-70,-60},{-100,-60}},color={0,127,255}));
          connect(spl.port_3,val2.port_3)
            annotation (Line(points={{-60,-70},{-60,-80},{80,-80},{80,-70}},color={0,127,255}));
          connect(con.yVal2,val2.y)
            annotation (Line(points={{-48,154},{64,154},{64,-40},{80,-40},{80,-48}},color={0,0,127}));
          connect(hex.port_b1, val1.port_a) annotation (Line(points={{10,6},{20,6},{20,80},{70,80}}, color={0,127,255}));
          connect(pum1.port_b, hex.port_a1) annotation (Line(points={{-50,80},{-20,80},{-20,6},{-10,6}}, color={0,127,255}));
          annotation (
            defaultComponentName="hex",
            Icon(
              coordinateSystem(
                preserveAspectRatio=false,
                extent={{-100,-100},{100,100}}),
              graphics={
                Rectangle(
                  extent={{-100,-100},{100,100}},
                  lineColor={0,0,127},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Rectangle(
                  extent={{-60,60},{60,-60}},
                  lineColor={27,0,55},
                  fillColor={170,213,255},
                  fillPattern=FillPattern.Solid)}),
            Diagram(
              coordinateSystem(
                preserveAspectRatio=false,
                extent={{-100,-160},{100,180}})),
            Documentation(
              revisions="<html>
<ul>
<li>
July 14, 2021, by Antoine Gautier:<br/>
Refactored after updating the control logic, changed the primary control valve to pressure-independent.<br/>
This is for <a href=\"https://github.com/lbl-srg/modelica-buildings/issues/2561\">issue #2561</a>.
</li>
<li>
July 31, 2020, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>",     info="<html>
<p>
This is a model for a district heat exchanger system with a variable speed
pump on the secondary side, and a variable speed pump (in case of a passive
network) or a two-way modulating valve (in case of an active network)
on the primary side.
</p>
<p>
The system is controlled based on the logic described in
<a href=\"modelica://Buildings.Experimental.DHC.EnergyTransferStations.Combined.Controls.HeatExchanger\">
Buildings.Experimental.DHC.EnergyTransferStations.Combined.Controls.HeatExchanger</a>.
The pump flow rate is considered proportional to the pump speed
under the assumption of a constant flow resistance in both the primary and
the secondary loops.
</p>
</html>"));
        end HeatExchanger;

        model HeatPump "Base subsystem with water-to-water heat pump"
          replaceable package Medium1=Modelica.Media.Interfaces.PartialMedium
            "Medium model on condenser side"
            annotation (choices(choice(redeclare package Medium=
                    Buildings.Media.Water                                             "Water"),
            choice(redeclare package Medium =
              Buildings.Media.Antifreeze.PropyleneGlycolWater (property_T=293.15,X_a=0.40)
            "Propylene glycol water, 40% mass fraction")));
          replaceable package Medium2=Modelica.Media.Interfaces.PartialMedium
            "Medium model on evaporator side"
            annotation (choices(choice(redeclare package Medium=
                    Buildings.Media.Water                                             "Water"),
            choice(redeclare package Medium =
              Buildings.Media.Antifreeze.PropyleneGlycolWater (property_T=293.15,X_a=0.40)
            "Propylene glycol water, 40% mass fraction")));
          parameter Boolean have_pumCon = true
            "Set to true to include a condenser pump (false for external pump)"
            annotation(Evaluate=true);
          parameter Boolean have_varFloCon = true
            "Set to true for a variable condenser flow"
            annotation(Evaluate=true, Dialog(enable=have_pumCon));
          parameter Boolean have_varFloEva = true
            "Set to true for a variable evaporator flow"
            annotation(Evaluate=true);
          parameter Real COP_nominal(final unit="1")
            "Heat pump COP"
            annotation (Dialog(group="Nominal condition"));
          parameter Modelica.Units.SI.Temperature TCon_nominal
            "Condenser outlet temperature used to compute COP_nominal"
            annotation (Dialog(group="Nominal condition"));
          parameter Modelica.Units.SI.Temperature TEva_nominal
            "Evaporator outlet temperature used to compute COP_nominal"
            annotation (Dialog(group="Nominal condition"));
          parameter Modelica.Units.SI.HeatFlowRate Q1_flow_nominal(min=0)
            "Heating heat flow rate" annotation (Dialog(group="Nominal condition"));
          parameter Modelica.Units.SI.TemperatureDifference dT1_nominal(final min=0)=
            5 "Temperature difference condenser outlet-inlet"
            annotation (Dialog(group="Nominal condition"));
          parameter Modelica.Units.SI.TemperatureDifference dT2_nominal(final max=0)=
            -5 "Temperature difference evaporator outlet-inlet"
            annotation (Dialog(group="Nominal condition"));
          parameter Modelica.Units.SI.Pressure dp1_nominal(displayUnit="Pa")
            "Pressure difference over condenser"
            annotation (Dialog(group="Nominal condition"));
          parameter Modelica.Units.SI.Pressure dp2_nominal(displayUnit="Pa")
            "Pressure difference over evaporator"
            annotation (Dialog(group="Nominal condition"));
          parameter Boolean allowFlowReversal1=false
            "Set to true to allow flow reversal on condenser side"
            annotation (Dialog(tab="Assumptions"), Evaluate=true);
          parameter Boolean allowFlowReversal2=false
            "Set to true to allow flow reversal on evaporator side"
            annotation (Dialog(tab="Assumptions"), Evaluate=true);
          final parameter Modelica.Units.SI.MassFlowRate m1_flow_nominal(min=0)=
            heaPum.m1_flow_nominal "Mass flow rate on condenser side"
            annotation (Dialog(group="Nominal condition"));
          final parameter Modelica.Units.SI.MassFlowRate m2_flow_nominal(min=0)=
            heaPum.m2_flow_nominal "Mass flow rate on evaporator side"
            annotation (Dialog(group="Nominal condition"));
          // IO CONNECTORS
          Buildings.Controls.OBC.CDL.Interfaces.BooleanInput uEna(start=false)
            "Enable signal"
            annotation (
              Placement(transformation(extent={{-240,100},{-200,140}}),
                iconTransformation(extent={{-140,70},{-100,110}})));
          Buildings.Controls.OBC.CDL.Interfaces.RealInput TSupSet(
            final unit="K",
            displayUnit="degC")
            "Supply temperature set point"
            annotation (Placement(transformation(extent={{-240,-40},{-200,0}}),
              iconTransformation(extent={{-140,10},{-100,50}})));
          Buildings.Controls.OBC.CDL.Interfaces.RealInput m1_flow(
            final unit="kg/s") if have_varFloCon and have_pumCon
            "Condenser mass flow rate"
            annotation (Placement(transformation(extent={{-240,60},{-200,100}}),
              iconTransformation(extent={{-140,-20},{-100,20}})));
          Buildings.Controls.OBC.CDL.Interfaces.RealInput m2_flow(
            final unit="kg/s") if have_varFloEva
            "Evaporator mass flow rate"
            annotation (Placement(transformation(extent={{-240,20},{-200,60}}),
              iconTransformation(extent={{-140,-50},{-100,-10}})));
          Modelica.Fluid.Interfaces.FluidPort_a port_a2(
            redeclare final package Medium = Medium2,
            m_flow(min=if allowFlowReversal2 then -Modelica.Constants.inf else 0),
            h_outflow(start=Medium2.h_default, nominal=Medium2.h_default))
            "Fluid port for entering evaporator water" annotation (Placement(
                transformation(extent={{190,-70},{210,-50}}), iconTransformation(extent=
                   {{90,-70},{110,-50}})));
          Modelica.Fluid.Interfaces.FluidPort_b port_b2(
            redeclare final package Medium = Medium2,
            m_flow(max=if allowFlowReversal2 then +Modelica.Constants.inf else 0),
            h_outflow(start=Medium2.h_default, nominal=Medium2.h_default))
            "Fluid port for leaving evaporator water" annotation (Placement(
                transformation(extent={{190,50},{210,70}}), iconTransformation(extent={{
                    90,50},{110,70}})));
          Modelica.Fluid.Interfaces.FluidPort_a port_a1(
            redeclare final package Medium = Medium1,
            m_flow(min=if allowFlowReversal1 then -Modelica.Constants.inf else 0),
            h_outflow(start=Medium1.h_default, nominal=Medium1.h_default))
            "Fluid port for entering condenser water" annotation (Placement(
                transformation(extent={{-210,-70},{-190,-50}}), iconTransformation(
                  extent={{-110,-70},{-90,-50}})));
          Modelica.Fluid.Interfaces.FluidPort_b port_b1(
            redeclare final package Medium = Medium1,
            m_flow(max=if allowFlowReversal1 then +Modelica.Constants.inf else 0),
            h_outflow(start=Medium1.h_default, nominal=Medium1.h_default))
            "Fluid port for leaving condenser water" annotation (Placement(
                transformation(extent={{-210,50},{-190,70}}), iconTransformation(extent=
                   {{-110,50},{-90,70}})));
          Buildings.Controls.OBC.CDL.Interfaces.RealOutput PHea(
            final unit="W") "Heat pump power"
            annotation (Placement(transformation(extent={{200,20},{240,60}}),
            iconTransformation(extent={{100,10},{140,50}})));
          Buildings.Controls.OBC.CDL.Interfaces.RealOutput PPum(
            final unit="W") "Pump power"
            annotation (Placement(transformation(extent={{200,-20},{240,20}}),
            iconTransformation(extent={{100,-20},{140,20}})));
          Buildings.Controls.OBC.CDL.Interfaces.RealOutput mEva_flow(final unit="kg/s")
            "Evaporator water mass flow rate"
            annotation (Placement(transformation(
              extent={{200,-60},{240,-20}}), iconTransformation(extent={{100,-50},{
                140,-10}})));
          // COMPONENTS
          Buildings.Fluid.HeatPumps.Carnot_TCon heaPum(
            redeclare final package Medium1 = Medium1,
            redeclare final package Medium2 = Medium2,
            final dTEva_nominal=dT2_nominal,
            final dTCon_nominal=dT1_nominal,
            final TCon_nominal=TCon_nominal,
            final TEva_nominal=TEva_nominal,
            final allowFlowReversal1=allowFlowReversal1,
            final allowFlowReversal2=allowFlowReversal2,
            final use_eta_Carnot_nominal=false,
            final COP_nominal=COP_nominal,
            final QCon_flow_nominal=Q1_flow_nominal,
            final dp1_nominal=dp1_nominal,
            final dp2_nominal=dp2_nominal)
            "Heat pump (index 1 for condenser side)"
            annotation (Placement(transformation(extent={{0,-24},{20,-4}})));
          estcp.DHC.EnergyTransferStations.BaseClasses.Pump_m_flow pumEva(
            redeclare final package Medium = Medium2,
            final m_flow_nominal=m2_flow_nominal,
            final allowFlowReversal=allowFlowReversal2,
            dp_nominal=dp2_nominal) "Heat pump evaporator water pump"
            annotation (Placement(transformation(extent={{70,-70},{50,-50}})));
          estcp.DHC.EnergyTransferStations.BaseClasses.Pump_m_flow pumCon(
            redeclare final package Medium = Medium1,
            final m_flow_nominal=m1_flow_nominal,
            final allowFlowReversal=allowFlowReversal1,
            dp_nominal=dp1_nominal) if have_pumCon
            "Heat pump condenser water pump" annotation (Placement(
                transformation(extent={{-70,-60},{-50,-40}})));
          Buildings.Controls.OBC.CDL.Reals.Sources.Constant floConNom(
            final k=m1_flow_nominal) if not have_varFloCon
            "Nominal flow rate"
            annotation (Placement(transformation(extent={{-100,80},{-120,100}})));
          Buildings.Controls.OBC.CDL.Conversions.BooleanToReal booToRea
            annotation (Placement(transformation(extent={{-180,110},{-160,130}})));
          Buildings.Controls.OBC.CDL.Reals.Sources.Constant floEvaNom(
            final k=m2_flow_nominal) if not have_varFloEva
            "Nominal flow rate"
            annotation (Placement(transformation(extent={{0,80},{-20,100}})));
          Buildings.Fluid.Sensors.TemperatureTwoPort senTConLvg(
            redeclare final package Medium = Medium1,
            final allowFlowReversal=allowFlowReversal1,
            final m_flow_nominal=m1_flow_nominal)
            "Condenser water leaving temperature" annotation (Placement(
                transformation(
                extent={{10,-10},{-10,10}},
                rotation=-90,
                origin={40,20})));
          Buildings.Fluid.Sensors.TemperatureTwoPort senTConEnt(
            redeclare final package Medium = Medium1,
            final allowFlowReversal=allowFlowReversal1,
            final m_flow_nominal=m1_flow_nominal)
            "Condenser water entering temperature" annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=90,
                origin={-40,-20})));
          Buildings.Controls.OBC.CDL.Reals.Switch enaHeaPum(
            u2(start=false))
            "Enable heat pump by switching to actual set point"
            annotation (Placement(transformation(extent={{-140,10},{-120,30}})));
          Buildings.Controls.OBC.CDL.Reals.Add add2 "Adder"
            annotation (Placement(transformation(extent={{140,-10},{160,10}})));
          Modelica.Blocks.Sources.Constant zer(final k=0) if not have_pumCon
            "Replacement variable"
            annotation (Placement(transformation(extent={{80,-110},{100,-90}})));
          Buildings.Controls.OBC.CDL.Reals.GreaterThreshold staPum[2](
            y(each start=false),
            t=1e-2 .* {m1_flow_nominal,m2_flow_nominal},
            h=0.5e-2 .* {m1_flow_nominal, m2_flow_nominal})
            "Pump return status"
            annotation (Placement(transformation(extent={{-80,-110},{-100,-90}})));
          Buildings.Controls.OBC.CDL.Logical.And ena
            "Enable heat pump if pump return status on"
            annotation (Placement(transformation(extent={{-120,-110},{-140,-90}})));
          Modelica.Blocks.Sources.Constant one(final k=1) if not have_pumCon
            "Replacement variable"
            annotation (Placement(transformation(extent={{60,-110},{40,-90}})));
          Buildings.Controls.OBC.CDL.Reals.Multiply floCon if have_pumCon
            "Zero flow rate if not enabled"
            annotation (Placement(transformation(extent={{-120,110},{-100,130}})));
          Buildings.Controls.OBC.CDL.Reals.Multiply floEva
            "Zero flow rate if not enabled"
            annotation (Placement(transformation(extent={{-20,110},{0,130}})));
        protected
          Buildings.Fluid.FixedResistances.LosslessPipe pip(redeclare package
              Medium = Medium1, m_flow_nominal=m1_flow_nominal)
            if not have_pumCon
            "Dummy connection used if model is configured to have no pump"
            annotation (Placement(transformation(extent={{-70,-90},{-50,-70}})));
        equation
          connect(pumEva.port_b,heaPum. port_a2)
            annotation (Line(points={{50,-60},{40,-60},{40,-20},{20,-20}},
                                                           color={0,127,255}));
          connect(heaPum.port_b1,senTConLvg. port_a) annotation (Line(points={{20,-8},{40,
                  -8},{40,10}},                        color={0,127,255}));
          connect(senTConEnt.port_b,heaPum. port_a1) annotation (Line(points={{-40,-10},
                  {-40,-8},{0,-8}},            color={0,127,255}));
          connect(senTConEnt.T,enaHeaPum. u3) annotation (Line(points={{-51,-20},{-150,-20},
                  {-150,12},{-142,12}},            color={0,0,127}));
          connect(enaHeaPum.y,heaPum. TSet) annotation (Line(points={{-118,20},{-10,20},
                  {-10,-5},{-2,-5}},  color={0,0,127}));
          connect(uEna, booToRea.u)
            annotation (Line(points={{-220,120},{-182,120}}, color={255,0,255}));
          connect(TSupSet, enaHeaPum.u1) annotation (Line(points={{-220,-20},{-180,-20},
                  {-180,28},{-142,28}},   color={0,0,127}));
          connect(heaPum.port_b2, port_b2) annotation (Line(points={{0,-20},{-20,-20},{-20,
                  40},{180,40},{180,60},{200,60}}, color={0,127,255}));
          connect(senTConLvg.port_b, port_b1)
            annotation (Line(points={{40,30},{40,60},{-200,60}}, color={0,127,255}));
          connect(pumEva.m_flow_actual, mEva_flow) annotation (Line(points={{49,-55},{
                  44,-55},{44,-40},{220,-40}}, color={0,0,127}));
          connect(port_a2, pumEva.port_a)
            annotation (Line(points={{200,-60},{70,-60}}, color={0,127,255}));
          connect(port_a1, pumCon.port_a)
            annotation (Line(points={{-200,-60},{-140,-60},{-140,-50},{-70,-50}},
                                                            color={0,127,255}));
          connect(add2.y, PPum)
            annotation (Line(points={{162,0},{220,0}}, color={0,0,127}));
          connect(heaPum.P, PHea) annotation (Line(points={{21,-14},{190,-14},{190,40},{
                  220,40}}, color={0,0,127}));
          connect(pumCon.P, add2.u2) annotation (Line(points={{-49,-41},{0,-41},{0,-80},
                  {120,-80},{120,-6},{138,-6}}, color={0,0,127}));
          connect(pumEva.P, add2.u1) annotation (Line(points={{49,-51},{46,-51},{46,6},{
                  138,6}}, color={0,0,127}));
          connect(pumCon.port_b, senTConEnt.port_a) annotation (Line(points={{-50,-50},
                  {-40,-50},{-40,-30}},color={0,127,255}));
          connect(zer.y, add2.u2) annotation (Line(points={{101,-100},{120,-100},{120,-6},
                  {138,-6}}, color={0,0,127}));
          connect(pumCon.m_flow_actual, staPum[1].u) annotation (Line(points={{-49,-45},
                  {-38,-45},{-38,-100},{-78,-100}}, color={0,0,127}));
          connect(pumEva.m_flow_actual, staPum[2].u) annotation (Line(points={{49,-55},{
                  20,-55},{20,-100},{-78,-100}}, color={0,0,127}));
          connect(staPum[1].y, ena.u1)
            annotation (Line(points={{-102,-100},{-118,-100}}, color={255,0,255}));
          connect(staPum[2].y, ena.u2) annotation (Line(points={{-102,-100},{-110,-100},
                  {-110,-108},{-118,-108}}, color={255,0,255}));
          connect(ena.y, enaHeaPum.u2) annotation (Line(points={{-142,-100},{-160,-100},
                  {-160,20},{-142,20}}, color={255,0,255}));
          connect(one.y, staPum[1].u)
            annotation (Line(points={{39,-100},{-78,-100}}, color={0,0,127}));
          connect(booToRea.y, floCon.u1) annotation (Line(points={{-158,120},{-140,120},
                  {-140,126},{-122,126}}, color={0,0,127}));
          connect(m1_flow, floCon.u2) annotation (Line(points={{-220,80},{-140,80},{-140,
                  114},{-122,114}}, color={0,0,127}));
          connect(booToRea.y, floEva.u1) annotation (Line(points={{-158,120},{-140,120},
                  {-140,134},{-40,134},{-40,126},{-22,126}}, color={0,0,127}));
          connect(floConNom.y, floCon.u2) annotation (Line(points={{-122,90},{-130,90},{
                  -130,114},{-122,114}}, color={0,0,127}));
          connect(m2_flow, floEva.u2) annotation (Line(points={{-220,40},{-40,40},{-40,114},
                  {-22,114}}, color={0,0,127}));
          connect(floEvaNom.y, floEva.u2) annotation (Line(points={{-22,90},{-30,90},{-30,
                  114},{-22,114}}, color={0,0,127}));
          connect(floEva.y, pumEva.m_flow_in)
            annotation (Line(points={{2,120},{60,120},{60,-48}}, color={0,0,127}));
          connect(floCon.y, pumCon.m_flow_in)
            annotation (Line(points={{-98,120},{-60,120},{-60,-38}}, color={0,0,127}));
          connect(port_a1, pip.port_a) annotation (Line(points={{-200,-60},{-140,-60},{
                  -140,-80},{-70,-80}}, color={0,127,255}));
          connect(pip.port_b, senTConEnt.port_a) annotation (Line(points={{-50,-80},{
                  -40,-80},{-40,-30}}, color={0,127,255}));
          annotation (
          defaultComponentName="heaPum",
          Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                Rectangle(
                  extent={{-60,60},{60,-60}},
                  lineColor={27,0,55},
                  fillColor={170,213,255},
                  fillPattern=FillPattern.Solid),
                Rectangle(
                  extent={{-100,-100},{100,100}},
                  lineColor={0,0,127},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Rectangle(
                  extent={{-58,62},{62,-58}},
                  lineColor={27,0,55},
                  fillColor={170,213,255},
                  fillPattern=FillPattern.Solid)}), Diagram(
                coordinateSystem(preserveAspectRatio=false, extent={{-200,-140},{200,140}})),
            Documentation(info="<html>
<p>
This model represents a water-to-water heat pump, an evaporator water pump,
and an optional condenser water pump if <code>have_pumCon</code> is set to
<code>true</code>.
The heat pump model is described in
<a href=\"modelica://Buildings.Fluid.HeatPumps.Carnot_TCon\">
Buildings.Fluid.HeatPumps.Carnot_TCon</a>.
By default variable speed pumps are considered.
Constant speed pumps may also be represented by setting <code>have_varFloEva</code>
and <code>have_varFloCon</code> to <code>false</code>.
</p>
<h4>Controls</h4>
<p>
The system is enabled when the input control signal <code>uEna</code> switches to
<code>true</code>.
When enabled,
</p>
<ul>
<li>
the evaporator and optionally the condenser water pumps are commanded on and supply either
the mass flow rate set point provided as an input in the case of variable speed pumps,
or the nominal mass flow rate in the case of constant speed pumps,
</li>
<li>
the heat pump is commanded on when the evaporator and optionally the condenser water pump
are proven on. When enabled, the heat pump controller—idealized in this model—tracks the
supply temperature set point at the condenser outlet.
</li>
</ul>
</html>",         revisions="<html>
<ul>
<li>
May 3, 2023, by David Blum:<br/>
Assigned <code>dp_nominal</code> to condenser pump.<br/>
This is for
<a href=\"https://github.com/lbl-srg/modelica-buildings/issues/3379\">
issue 3379</a>.
</li>
<li>
November 16, 2022, by Michael Wetter:<br/>
Set <code>pumEva.dp_nominal</code> to correct value.
</li>
<li>
February 23, 2021, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>"));
        end HeatPump;

        model SwitchBox
          "Model for mass flow rate redirection with three-port two-position directional valves"
          replaceable package Medium = Modelica.Media.Interfaces.PartialMedium
            "Medium model";
          parameter Modelica.Units.SI.MassFlowRate m_flow_nominal
            "Nominal mass flow rate" annotation (Dialog(group="Nominal condition"));
          parameter Modelica.Units.SI.PressureDifference dpValve_nominal(
            min=0,
            displayUnit="Pa") = 5000 "Valve pressure drop at nominal conditions"
            annotation (Dialog(group="Nominal condition"));
          parameter Real trueHoldDuration(
            final unit="s") = 60
            "true hold duration";
          parameter Real falseHoldDuration(
            final unit="s") = trueHoldDuration
            "false hold duration";
          parameter Modelica.Fluid.Types.Dynamics energyDynamics=
            Modelica.Fluid.Types.Dynamics.FixedInitial
            "Type of energy balance (except for the pump always modeled in steady state)"
            annotation(Evaluate=true, Dialog(tab="Dynamics", group="Conservation equations"));
          // IO CONECTORS
          Modelica.Fluid.Interfaces.FluidPort_b port_bSup(
            redeclare package Medium = Medium)
            "Supply line outlet port"
            annotation (Placement(transformation(
              extent={{-30,90},{-10,110}}),
              iconTransformation(extent={{-70,90},{-50,110}})));
          Modelica.Fluid.Interfaces.FluidPort_b port_bRet(
            redeclare final package Medium = Medium)
            "Return line outlet port"
            annotation (Placement(transformation(extent={{10,-110},{30,-90}}),
              iconTransformation(extent={{50,-110},{70,-90}})));
          Modelica.Fluid.Interfaces.FluidPort_a port_aSup(
            redeclare final package Medium = Medium)
            "Supply line inlet port"
            annotation (Placement(transformation(extent={{-30,-110},{-10,-90}}),
              iconTransformation(extent={{-70,-110},{-50,-90}})));
          Modelica.Fluid.Interfaces.FluidPort_a port_aRet(
            redeclare final package Medium = Medium)
            "Return line inlet port"
            annotation (Placement(transformation(extent={{10,90},{30,110}}),
              iconTransformation(extent={{50,90},{70,110}})));
          Buildings.Controls.OBC.CDL.Interfaces.RealInput mRev_flow(final unit="kg/s")
            "Service water mass flow rate in reverse direction"
            annotation (Placement(
              transformation(extent={{-140,-60},{-100,-20}}),
                iconTransformation(extent={{-140,-60},{-100,-20}})));
          Buildings.Controls.OBC.CDL.Interfaces.RealInput mPos_flow(final unit="kg/s")
            "Service water mass flow rate in positive direction"
            annotation (Placement(transformation(extent={{-140,20},{-100,60}}),
            iconTransformation(extent=
                   {{-140,20},{-100,60}})));
          // COMPONENTS
          estcp.DHC.EnergyTransferStations.BaseClasses.Junction splSup(
              redeclare final package Medium = Medium, m_flow_nominal={1,1,1}*
                m_flow_nominal) "Flow splitter" annotation (Placement(
                transformation(
                extent={{10,10},{-10,-10}},
                rotation=-90,
                origin={-20,40})));
          estcp.DHC.EnergyTransferStations.BaseClasses.Junction splRet(
              redeclare final package Medium = Medium, m_flow_nominal={1,1,1}*
                m_flow_nominal) "Flow splitter" annotation (Placement(
                transformation(
                extent={{10,10},{-10,-10}},
                rotation=90,
                origin={20,0})));
          estcp.DHC.EnergyTransferStations.Combined.Controls.SwitchBox con(final
              trueHoldDuration=trueHoldDuration, final falseHoldDuration=
                falseHoldDuration) "Switch box controller"
            annotation (Placement(transformation(extent={{-70,-10},{-50,10}})));
          Buildings.Fluid.Actuators.Valves.ThreeWayEqualPercentageLinear valSup(
            redeclare package Medium = Medium,
            dpValve_nominal=dpValve_nominal,
            use_inputFilter=false,
            m_flow_nominal=m_flow_nominal,
            linearized={true,true},
            energyDynamics=Modelica.Fluid.Types.Dynamics.SteadyState)
            "Directional valve" annotation (Placement(transformation(
                extent={{-10,10},{10,-10}},
                origin={-20,0},
                rotation=-90)));
          Buildings.Fluid.Actuators.Valves.ThreeWayEqualPercentageLinear valRet(
            redeclare package Medium = Medium,
            dpValve_nominal=dpValve_nominal,
            use_inputFilter=false,
            m_flow_nominal=m_flow_nominal,
            linearized={true,true},
            energyDynamics=Modelica.Fluid.Types.Dynamics.SteadyState)
            "Directional valve" annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                origin={20,-40},
                rotation=-90)));
        equation
          connect(port_bSup, splSup.port_2)
            annotation (Line(points={{-20,100},{-20,50}}, color={0,127,255}));
          connect(mRev_flow, con.mRev_flow) annotation (Line(points={{-120,-40},{-80,-40},
                  {-80,-8},{-72,-8}}, color={0,0,127}));
          connect(splRet.port_1, port_aRet)
            annotation (Line(points={{20,10},{20,100}}, color={0,127,255}));
          connect(valSup.port_1, splSup.port_1)
            annotation (Line(points={{-20,10},{-20,30}}, color={0,127,255}));
          connect(valSup.port_3, splRet.port_3)
            annotation (Line(points={{-10,0},{10,0}}, color={0,127,255}));
          connect(splRet.port_2, valRet.port_1)
            annotation (Line(points={{20,-10},{20,-30}}, color={0,127,255}));
          connect(splSup.port_3, valRet.port_3) annotation (Line(points={{-10,40},{0,40},
                  {0,-40},{10,-40}}, color={0,127,255}));
          connect(valRet.port_2, port_bRet)
            annotation (Line(points={{20,-50},{20,-100}}, color={0,127,255}));
          connect(valSup.port_2, port_aSup) annotation (Line(points={{-20,-10},{-20,-100}},
                              color={0,127,255}));
          connect(con.y, valRet.y) annotation (Line(points={{-48,0},{-40,0},{-40,-20},{60,
                  -20},{60,-40},{32,-40}},
                             color={0,0,127}));
          connect(mPos_flow, con.mPos_flow) annotation (Line(points={{-120,40},{-80,40},
                  {-80,8},{-72,8}}, color={0,0,127}));
          connect(con.y, valSup.y)
            annotation (Line(points={{-48,0},{-32,0}}, color={0,0,127}));
          annotation (
          defaultComponentName="swiFlo",
          Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},
            {100,100}}), graphics={Rectangle(extent={{-100,100},{100,-100}},
            lineColor={0,0,127}, fillColor={255,255,255},
          fillPattern=FillPattern.Solid),
                Rectangle(
                  extent={{-60,60},{60,-60}},
                  lineColor={27,0,55},
                  fillColor={170,213,255},
                  fillPattern=FillPattern.Solid)}),                   Diagram(
          coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,100}})),
            Documentation(info="<html>
<p>
This model represents a hydronic arrangement avoid flow reversal in the service line,
for instance when connecting an energy transfer station such as the one modeled in
<a href=\"modelica://Buildings.Experimental.DHC.EnergyTransferStations.Combined.HeatPumpHeatExchanger\">
Buildings.Experimental.DHC.EnergyTransferStations.Combined.HeatPumpHeatExchanger</a>.
For that intent, two three-port two-position directional valves are used. The valves are
actuated based on the logic described in
<a href=\"modelica://Buildings.Experimental.DHC.EnergyTransferStations.Combined.Controls.SwitchBox\">
Buildings.Experimental.DHC.EnergyTransferStations.Combined.Controls.SwitchBox</a>.
</p>
</html>",         revisions="<html>
<ul>
<li>
February 23, 2021, by Antoine Gautier:<br/>
Refactored with three-way valves instead of pumps.<br/>
This is for
<a href=\"https://github.com/lbl-srg/modelica-buildings/issues/1769\">
issue 1769</a>.
</li>
<li>
January 16, 2020, by Michael Wetter:<br/>
Added documentation.
</li>
</ul>
</html>"));
        end SwitchBox;

        model WatersideEconomizer
          "Base subsystem with waterside economizer"
          extends Buildings.Fluid.Interfaces.PartialFourPortInterface(
            final m1_flow_nominal=abs(Q_flow_nominal/4200/(T_b1_nominal - T_a1_nominal)),
            final m2_flow_nominal=abs(Q_flow_nominal/4200/(T_b2_nominal - T_a2_nominal)));
          parameter DHC.EnergyTransferStations.Types.ConnectionConfiguration conCon
            "District connection configuration" annotation (Evaluate=true);
          replaceable parameter Buildings.Fluid.Movers.Data.Generic perPum1(
            motorCooledByFluid=false)
            constrainedby Buildings.Fluid.Movers.Data.Generic
            "Record with performance data for primary pump"
            annotation (Dialog(enable=not have_val1),choicesAllMatching=true,
            Placement(transformation(extent={{-40,-140},{-20,-120}})));
          parameter Modelica.Units.SI.PressureDifference dp1Hex_nominal(displayUnit=
                "Pa") "Nominal pressure drop across heat exchanger on district side"
            annotation (Dialog(group="Nominal condition"));
          parameter Modelica.Units.SI.PressureDifference dp2Hex_nominal(displayUnit=
                "Pa") "Nominal pressure drop across heat exchanger on building side"
            annotation (Dialog(group="Nominal condition"));
          parameter Modelica.Units.SI.PressureDifference dpVal1_nominal(displayUnit=
                "Pa") = if have_val1 then dp1Hex_nominal/2 else 0
            "Nominal pressure drop of primary control valve"
            annotation (Dialog(enable=have_val1, group="Nominal condition"));
          parameter Modelica.Units.SI.PressureDifference dpVal2_nominal(displayUnit=
                "Pa") = dp2Hex_nominal/10
            "Nominal pressure drop of heat exchanger bypass valve"
            annotation (Dialog(group="Nominal condition"));
          parameter Modelica.Units.SI.HeatFlowRate Q_flow_nominal
            "Nominal heat flow rate (from district to building)"
            annotation (Dialog(group="Nominal condition"));
          parameter Modelica.Units.SI.Temperature T_a1_nominal
            "Nominal water inlet temperature on district side"
            annotation (Dialog(group="Nominal condition"));
          parameter Modelica.Units.SI.Temperature T_b1_nominal
            "Nominal water outlet temperature on district side"
            annotation (Dialog(group="Nominal condition"));
          parameter Modelica.Units.SI.Temperature T_a2_nominal
            "Nominal water inlet temperature on building side"
            annotation (Dialog(group="Nominal condition"));
          parameter Modelica.Units.SI.Temperature T_b2_nominal
            "Nominal water outlet temperature on building side"
            annotation (Dialog(group="Nominal condition"));
          parameter Real y1Min(final unit="1")=0.05
            "Minimum pump flow rate or valve opening for temperature measurement (fractional)"
            annotation (Dialog(group="Controls"));
          parameter Modelica.Units.SI.TemperatureDifference dTEna=1
            "Minimum delta-T above predicted heat exchanger leaving water temperature to enable WSE"
            annotation (Dialog(group="Controls"));
          parameter Modelica.Units.SI.TemperatureDifference dTDis=0.5
            "Minimum delta-T across heat exchanger before disabling WSE"
            annotation (Dialog(group="Controls"));
          parameter Real k(
            min=0)=1
            "Gain of controller"
            annotation (Dialog(group="Controls"));
          parameter Modelica.Units.SI.Time Ti(min=Buildings.Controls.OBC.CDL.Constants.small)=
               60 "Time constant of integrator block"
            annotation (Dialog(group="Controls"));
          // IO CONNECTORS
          Buildings.Controls.OBC.CDL.Interfaces.RealOutput PPum(
            final unit="W") if not have_val1
            "Power drawn by pump motors"
            annotation (Placement(transformation(extent={{100,-20},{140,20}}),
            iconTransformation(extent={{100,-20},{140,20}})));
          // COMPONENTS
          estcp.DHC.EnergyTransferStations.Combined.Controls.WatersideEconomizer
            conWSE(
            final m2_flow_nominal=m2_flow_nominal,
            final y1Min=y1Min,
            final T_a1_nominal=T_a1_nominal,
            final T_b2_nominal=T_b2_nominal,
            final dTEna=dTEna,
            final dTDis=dTDis) "District heat exchanger loop controller"
            annotation (Placement(transformation(extent={{30,150},{50,170}})));
          Buildings.Fluid.HeatExchangers.PlateHeatExchangerEffectivenessNTU hex(
            redeclare final package Medium1 = Medium1,
            redeclare final package Medium2 = Medium2,
            final use_Q_flow_nominal=true,
            configuration=Buildings.Fluid.Types.HeatExchangerConfiguration.CounterFlow,
            final allowFlowReversal1=allowFlowReversal1,
            final allowFlowReversal2=allowFlowReversal2,
            final dp1_nominal=if have_val1 then 0 else dp1Hex_nominal,
            final dp2_nominal=0,
            final m1_flow_nominal=m1_flow_nominal,
            final m2_flow_nominal=m2_flow_nominal,
            final Q_flow_nominal=Q_flow_nominal,
            final T_a1_nominal=T_a1_nominal,
            final T_a2_nominal=T_a2_nominal)
            "Heat exchanger" annotation (Placement(
                transformation(extent={{10,10},{-10,-10}}, rotation=180)));
          DHC.EnergyTransferStations.BaseClasses.Pump_m_flow pum1(
            redeclare final package Medium = Medium1,
            final per=perPum1,
            final m_flow_nominal=m1_flow_nominal,
            final dp_nominal=dp1Hex_nominal,
            final allowFlowReversal=allowFlowReversal1) if not have_val1
            "District heat exchanger primary pump" annotation (Placement(
                transformation(
                extent={{10,10},{-10,-10}},
                rotation=180,
                origin={-60,80})));
          Buildings.Fluid.Sensors.TemperatureTwoPort senT2WatEnt(
            redeclare final package Medium = Medium2,
            final m_flow_nominal=m2_flow_nominal,
            final allowFlowReversal=allowFlowReversal2)
            "Heat exchanger secondary water entering temperature" annotation (Placement(
                transformation(
                extent={{10,-10},{-10,10}},
                rotation=0,
                origin={40,-60})));
          Buildings.Fluid.Sensors.TemperatureTwoPort senT2WatLvg(
            redeclare final package Medium = Medium2,
            final m_flow_nominal=m2_flow_nominal,
            final allowFlowReversal=allowFlowReversal2)
            "Heat exchanger secondary water leaving temperature"
            annotation (Placement(
                transformation(
                extent={{10,-10},{-10,10}},
                rotation=0,
                origin={-40,-60})));
          Buildings.Fluid.Actuators.Valves.TwoWayPressureIndependent val1(
            redeclare final package Medium = Medium1,
            final m_flow_nominal=m1_flow_nominal,
            from_dp=true,
            final dpValve_nominal=dpVal1_nominal,
            final dpFixed_nominal=dp1Hex_nominal,
            use_inputFilter=false) if have_val1
            "Heat exchanger primary control valve"
            annotation (Placement(transformation(extent={{70,70},{90,90}})));
          Buildings.Controls.OBC.CDL.Reals.MultiplyByParameter gai1(final k=
                m1_flow_nominal) if not have_val1 "Scale to nominal mass flow rate"
            annotation (Placement(transformation(extent={{10,100},{-10,120}})));
          Buildings.Fluid.Actuators.Valves.ThreeWayLinear val2(
            redeclare final package Medium = Medium2,
            energyDynamics=Modelica.Fluid.Types.Dynamics.SteadyState,
            use_inputFilter=false,
            final m_flow_nominal=m2_flow_nominal,
            final dpValve_nominal=dpVal2_nominal,
            final dpFixed_nominal={dp2Hex_nominal,0},
            fraK=1) "Heat exchanger secondary control valve" annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=-90,
                origin={20,-40})));
          Buildings.Fluid.Sensors.TemperatureTwoPort senT1WatEnt(
            redeclare final package Medium = Medium1,
            final m_flow_nominal=m1_flow_nominal,
            final allowFlowReversal=allowFlowReversal1)
            "Heat exchanger primary water entering temperature" annotation (Placement(
                transformation(
                extent={{10,-10},{-10,10}},
                rotation=90,
                origin={-20,40})));
          Buildings.Controls.OBC.CDL.Interfaces.BooleanInput uCoo
            "Cooling enable signal"
            annotation (Placement(transformation(extent={{-140,140},{-100,180}}),
            iconTransformation(extent={{-140,-20},{-100,20}})));
          Buildings.Controls.OBC.CDL.Interfaces.RealInput yValIsoEva_actual(final unit="1")
            "Return position of evaporator to ambient loop isolation valve"
            annotation (Placement(transformation(extent={{-140,110},{-100,150}}),
            iconTransformation(extent={{-140,-50},{-100,-10}})));
          Buildings.Fluid.Sensors.MassFlowRate senMasFlo2(redeclare final
              package Medium =
                       Medium2, final allowFlowReversal=allowFlowReversal2)
            "Heat exchanger secondary mass flow rate" annotation (Placement(
                transformation(
                extent={{10,-10},{-10,10}},
                rotation=0,
                origin={-80,-60})));
        protected
          parameter Boolean have_val1=
            conCon ==estcp.DHC.EnergyTransferStations.Types.ConnectionConfiguration.TwoWayValve
            "True in case of control valve on district side, false in case of a pump";
        equation
          if not have_val1 then
            connect(hex.port_b1, port_b1) annotation (Line(points={{10,6},{20,6},{20,60},
                    {100,60}}, color={0,127,255}));
          else
            connect(port_a1, senT1WatEnt.port_a) annotation (Line(points={{-100,60},{-20,60},{-20,50}}, color={0,127,255}));
          end if;
          connect(port_a1,pum1.port_a)
            annotation (Line(points={{-100,60},{-90,60},{-90,80},{-70,80}},color={0,127,255}));
          connect(val1.port_b,port_b1)
            annotation (Line(points={{90,80},{94,80},{94,60},{100,60}},color={0,127,255}));
          connect(conWSE.y1, val1.y) annotation (Line(points={{52,165},{80,165},{80,92}},  color={0,0,127}));
          connect(conWSE.y1, gai1.u) annotation (Line(points={{52,165},{80,165},{80,110},
                  {12,110}},                                                                           color={0,0,127}));
          connect(gai1.y,pum1.m_flow_in)
            annotation (Line(points={{-12,110},{-60,110},{-60,92}},color={0,0,127}));
          connect(PPum, pum1.P) annotation (Line(points={{120,0},{44,0},{44,89},{-49,89}}, color={0,0,127}));
          connect(conWSE.yVal2, val2.y)
            annotation (Line(points={{52,155},{60,155},{60,-40},{32,-40}},        color={0,0,127}));
          connect(port_a2, senT2WatEnt.port_a) annotation (Line(points={{100,-60},{50,-60}}, color={0,127,255}));
          connect(hex.port_b2, senT2WatLvg.port_a)
            annotation (Line(points={{-10,-6},{-20,-6},{-20,-60},{-30,-60}}, color={0,127,255}));
          connect(senT1WatEnt.port_b, hex.port_a1) annotation (Line(points={{-20,30},
                  {-20,6},{-10,6}},                                                                       color={0,127,255}));
          connect(senT1WatEnt.port_a, pum1.port_b)
            annotation (Line(points={{-20,50},{-20,80},{-50,80}}, color={0,127,255}));
          connect(hex.port_b1, val1.port_a) annotation (Line(points={{10,6},{20,6},{
                  20,80},{70,80}},                                                                      color={0,127,255}));
          connect(uCoo, conWSE.uCoo) annotation (Line(points={{-120,160},{-40,160},{-40,168},{28,168}}, color={255,0,255}));
          connect(senT1WatEnt.T, conWSE.T1WatEnt)
            annotation (Line(points={{-31,40},{-38,40},{-38,162},{28,162}}, color={0,0,127}));
          connect(conWSE.T2WatEnt, senT2WatEnt.T)
            annotation (Line(points={{28,159},{20,159},{20,140},{40,140},{40,-49},{40,-49}}, color={0,0,127}));
          connect(senT2WatLvg.T, conWSE.T2WatLvg)
            annotation (Line(points={{-40,-49},{-40,156},{28,156}}, color={0,0,127}));
          connect(yValIsoEva_actual, conWSE.yValIsoEva_actual)
            annotation (Line(points={{-120,130},{24,130},{24,153},{28,153}}, color={0,0,127}));
          connect(val2.port_3, senT2WatLvg.port_a)
            annotation (Line(points={{10,-40},{-20,-40},{-20,-60},{-30,-60}}, color={0,127,255}));
          connect(val2.port_1, hex.port_a2)
            annotation (Line(points={{20,-30},{20,-6},{10,-6}}, color={0,127,255}));
          connect(val2.port_2, senT2WatEnt.port_b)
            annotation (Line(points={{20,-50},{20,-60},{30,-60}}, color={0,127,255}));
          connect(port_b2, senMasFlo2.port_b)
            annotation (Line(points={{-100,-60},{-90,-60}}, color={0,127,255}));
          connect(senMasFlo2.port_a, senT2WatLvg.port_b)
            annotation (Line(points={{-70,-60},{-50,-60}}, color={0,127,255}));
          connect(senMasFlo2.m_flow, conWSE.m2_flow)
            annotation (Line(points={{-80,-49},{-80,165},{28,165}}, color={0,0,127}));
          annotation (
            defaultComponentName="hex",
            Icon(
              coordinateSystem(
                preserveAspectRatio=false,
                extent={{-100,-100},{100,100}}),
              graphics={
                Rectangle(
                  extent={{-100,-100},{100,100}},
                  lineColor={0,0,127},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Rectangle(
                  extent={{-60,60},{60,-60}},
                  lineColor={27,0,55},
                  fillColor={170,213,255},
                  fillPattern=FillPattern.Solid)}),
            Diagram(
              coordinateSystem(
                preserveAspectRatio=false,
                extent={{-100,-160},{100,180}})),
            Documentation(
              revisions="<html>
<ul>
<li>
July 14, 2021, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>",     info="<html>
<p>
This is a model for a waterside economizer for sidestream integration (in
series with the chillers).
The primary side is typically connected to the service line.
The primary flow rate is modulated either with a variable speed pump or
with a two-way valve.
The secondary side is typically connected to the chilled water return,
using a three-port two-position directional control valve.
</p>
<p>
The system is controlled based on the logic described in
<a href=\"modelica://Buildings.Experimental.DHC.EnergyTransferStations.Combined.Controls.WatersideEconomizer\">
Buildings.Experimental.DHC.EnergyTransferStations.Combined.Controls.WatersideEconomizer</a>.
</p>
</html>"));
        end WatersideEconomizer;

        package Validation "Collection of validation models"
          extends Modelica.Icons.ExamplesPackage;

          model Borefield
            "Validation of the base subsystem model with geothermal borefield"
            extends Modelica.Icons.Example;
            package Medium=Buildings.Media.Water
              "Medium model";
            parameter Integer nBorHol=100
              "Number of boreholes (must be a square number)";
            parameter Modelica.Units.SI.Distance dxy=6
              "Distance in x-axis (and y-axis) between borehole axes";
            final parameter Modelica.Units.SI.Distance cooBor[nBorHol,2]=
                estcp.DHC.EnergyTransferStations.BaseClasses.computeCoordinates(
                nBorHol, dxy) "Coordinates of boreholes";
            estcp.DHC.EnergyTransferStations.Combined.Subsystems.Borefield borFie(
              redeclare final package Medium = Medium,
              final datBorFie=datBorFie,
              dp_nominal=5E4,
              TBorWatEntMax=313.15) "Subsystem with heat recovery chiller"
              annotation (Placement(transformation(extent={{40,-10},{60,10}})));
            Buildings.Fluid.Sources.Boundary_pT conWat(
              redeclare package Medium = Medium,
              use_T_in=true,
              nPorts=2) "Condenser water boundary conditions" annotation (
                Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={-40,-2})));
            Buildings.Fluid.Sensors.TemperatureTwoPort senTInl(redeclare final
                package Medium = Medium, m_flow_nominal=borFie.pum.m_flow_nominal)
              "Water inlet temperature" annotation (Placement(transformation(
                  extent={{10,-10},{-10,10}},
                  rotation=0,
                  origin={-10,20})));
            Buildings.Fluid.Sensors.TemperatureTwoPort senTOut(redeclare final
                package Medium = Medium, m_flow_nominal=borFie.pum.m_flow_nominal)
              "Water outlet temperature" annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={-10,-20})));
            parameter
              Buildings.Fluid.Geothermal.Borefields.Data.Borefield.Example datBorFie(conDat=
                  Buildings.Fluid.Geothermal.Borefields.Data.Configuration.Example(
                            cooBor=cooBor, dp_nominal=0))
              "Borefield design data"
              annotation (Placement(transformation(extent={{60,60},{80,80}})));
            Modelica.Blocks.Sources.TimeTable TInlVal(
              y(final unit="K",
                displayUnit="degC"),
              table=[
                0,2;
                2,2;
                3,15;
                7,15;
                9,35;
                10,45;
                11,30;
                20,30],
              timeScale=1000,
              offset=273.15)
              "Inlet temperature values"
              annotation (Placement(transformation(extent={{-110,-10},{-90,10}})));
            Buildings.Controls.OBC.CDL.Reals.Sources.Constant zer(
              k=0)
              "Zero"
              annotation (Placement(transformation(extent={{-110,30},{-90,50}})));
            Buildings.Controls.OBC.CDL.Reals.Sources.Ramp u(
              duration=1000,
              startTime=2500)
              "Control signal"
              annotation (Placement(transformation(extent={{-110,70},{-90,90}})));
          equation
            connect(senTInl.port_b,conWat.ports[1])
              annotation (Line(points={{-20,20},{-30,20},{-30,0}},color={0,127,255}));
            connect(conWat.ports[2],senTOut.port_a)
              annotation (Line(points={{-30,-4},{-30,-20},{-20,-20}},color={0,127,255}));
            connect(senTInl.port_a,borFie.port_a)
              annotation (Line(points={{0,20},{20,20},{20,0},{40,0}},color={0,127,255}));
            connect(borFie.port_b,senTOut.port_b)
              annotation (Line(points={{60,0},{80,0},{80,-20},{0,-20}},color={0,127,255}));
            connect(TInlVal.y,conWat.T_in)
              annotation (Line(points={{-89,0},{-70,0},{-70,2},{-52,2}},color={0,0,127}));
            connect(zer.y,borFie.yValIso_actual[2])
              annotation (Line(points={{-88,40},{30,40},{30,5},{38,5}},color={0,0,127}));
            connect(u.y,borFie.u)
              annotation (Line(points={{-88,80},{32,80},{32,8},{38,8}},color={0,0,127}));
            connect(u.y,borFie.yValIso_actual[1])
              annotation (Line(points={{-88,80},{32,80},{32,3},{38,3}},color={0,0,127}));
            annotation (
              Diagram(
                coordinateSystem(
                  preserveAspectRatio=false,
                  extent={{-120,-100},{100,100}})),
              __Dymola_Commands(
                file="modelica://Buildings/Resources/Scripts/Dymola/Experimental/DHC/EnergyTransferStations/Combined/Subsystems/Validation/Borefield.mos" "Simulate and plot"),
              experiment(
                StopTime=20000,
                Tolerance=1e-06),
              Documentation(
                revisions="<html>
<ul>
<li>
July 31, 2020, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>",       info="<html>
<p>
This model validates
<a href=\"modelica://Buildings.Experimental.DHC.EnergyTransferStations.Combined.Subsystems.Borefield\">
Buildings.Experimental.DHC.EnergyTransferStations.Combined.Subsystems.Borefield</a>.
</p>
</html>"));
          end Borefield;

          model Chiller
            "Validation of the base subsystem model with heat recovery chiller"
            extends Modelica.Icons.Example;
            package Medium=Buildings.Media.Water
              "Medium model";
            parameter Buildings.Fluid.Chillers.Data.ElectricEIR.Generic datChi(
              QEva_flow_nominal=-1E6,
              COP_nominal=3,
              PLRMax=1,
              PLRMinUnl=0.3,
              PLRMin=0.3,
              etaMotor=1,
              mEva_flow_nominal=30,
              mCon_flow_nominal=30,
              TEvaLvg_nominal=280.15,
              capFunT={1,0,0,0,0,0},
              EIRFunT={1,0,0,0,0,0},
              EIRFunPLR={1,0,0},
              TEvaLvgMin=276.15,
              TEvaLvgMax=288.15,
              TConEnt_nominal=313.15,
              TConEntMin=303.15,
              TConEntMax=333.15) "Chiller performance data" annotation (
                Placement(transformation(extent={{20,100},{40,120}})));
            estcp.DHC.EnergyTransferStations.Combined.Subsystems.Chiller chi(
              redeclare final package Medium = Medium,
              final dat=datChi,
              dpCon_nominal=15E3,
              dpEva_nominal=15E3) "Subsystem with heat recovery chiller"
              annotation (Placement(transformation(extent={{-10,-72},{10,-52}})));
            Buildings.Fluid.Sources.Boundary_pT evaWat(
              redeclare package Medium = Medium,
              use_T_in=true,
              nPorts=2) "Evaporator water boundary conditions" annotation (
                Placement(transformation(
                  extent={{10,-10},{-10,10}},
                  rotation=0,
                  origin={110,-62})));
            Buildings.Fluid.Sources.Boundary_pT conWat(
              redeclare package Medium = Medium,
              use_T_in=true,
              nPorts=2) "Condenser water boundary conditions" annotation (
                Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={-110,-62})));
            Buildings.Controls.OBC.CDL.Reals.Sources.Constant TChiWatSupSet(
              k=7+273.15,
              y(final unit="K",
                displayUnit="degC"))
              "Chilled water supply temperature set point"
              annotation (Placement(transformation(extent={{-120,-10},{-100,10}})));
            Buildings.Fluid.Sensors.TemperatureTwoPort senTHeaWatSup(redeclare
                final package Medium = Medium, m_flow_nominal=datChi.mCon_flow_nominal)
              "Heating water supply temperature" annotation (Placement(
                  transformation(
                  extent={{10,-10},{-10,10}},
                  rotation=0,
                  origin={-80,-40})));
            Buildings.Fluid.Sensors.TemperatureTwoPort senTChiWatSup(redeclare
                final package Medium = Medium, m_flow_nominal=datChi.mEva_flow_nominal)
              "Chilled water supply temperature" annotation (Placement(
                  transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={70,-40})));
            Buildings.Fluid.Sensors.TemperatureTwoPort senTHeaWatRet(redeclare
                final package Medium = Medium, m_flow_nominal=datChi.mCon_flow_nominal)
              "Heating water return temperature" annotation (Placement(
                  transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={-80,-80})));
            Buildings.Fluid.Sensors.TemperatureTwoPort senTChiWatRet(redeclare
                final package Medium = Medium, m_flow_nominal=datChi.mEva_flow_nominal)
              "Chilled water return temperature" annotation (Placement(
                  transformation(
                  extent={{10,-10},{-10,10}},
                  rotation=0,
                  origin={70,-80})));
            Modelica.Blocks.Sources.BooleanExpression uHea(
              y=time < 4000)
              "Heating enable signal"
              annotation (Placement(transformation(extent={{-120,90},{-100,110}})));
            Modelica.Blocks.Sources.BooleanExpression uCoo(
              y=time >= 1000)
              "Cooling enable signal"
              annotation (Placement(transformation(extent={{-120,70},{-100,90}})));
            Modelica.Blocks.Sources.TimeTable THeaWatRet(
              y(final unit="K",
                displayUnit="degC"),
              table=[
                0,44;
                2,44;
                3,34;
                4.5,34;
                5,14;
                10,14],
              timeScale=1000,
              offset=273.15)
              "Heating water return temperature values"
              annotation (Placement(transformation(extent={{-190,-70},{-170,-50}})));
            Modelica.Blocks.Sources.TimeTable TChiWatRet(
              y(final unit="K",
                displayUnit="degC"),
              table=[
                0,9;
                1,9;
                2,14;
                3,14;
                4,11;
                5,11],
              timeScale=1000,
              offset=273.15)
              "Chilled water return temperature values"
              annotation (Placement(transformation(extent={{160,-70},{140,-50}})));
          equation
            connect(chi.port_bHeaWat,senTHeaWatSup.port_a)
              annotation (Line(points={{-10,-56},{-40,-56},{-40,-40},{-70,-40}},color={0,127,255}));
            connect(senTHeaWatSup.port_b,conWat.ports[1])
              annotation (Line(points={{-90,-40},{-100,-40},{-100,-60}},color={0,127,255}));
            connect(evaWat.ports[1],senTChiWatSup.port_b)
              annotation (Line(points={{100,-60},{100,-40},{80,-40}},color={0,127,255}));
            connect(senTChiWatSup.port_a,chi.port_bChiWat)
              annotation (Line(points={{60,-40},{40,-40},{40,-56},{10,-56}},color={0,127,255}));
            connect(conWat.ports[2],senTHeaWatRet.port_a)
              annotation (Line(points={{-100,-64},{-100,-80},{-90,-80}},color={0,127,255}));
            connect(senTHeaWatRet.port_b,chi.port_aHeaWat)
              annotation (Line(points={{-70,-80},{-40,-80},{-40,-68},{-10,-68}},color={0,127,255}));
            connect(chi.port_aChiWat,senTChiWatRet.port_b)
              annotation (Line(points={{10,-68},{40,-68},{40,-80},{60,-80}},color={0,127,255}));
            connect(senTChiWatRet.port_a,evaWat.ports[2])
              annotation (Line(points={{80,-80},{100,-80},{100,-64}},color={0,127,255}));
            connect(uCoo.y,chi.uCoo)
              annotation (Line(points={{-99,80},{-24,80},{-24,-60},{-12,-60}},color={255,0,255}));
            connect(uHea.y,chi.uHea)
              annotation (Line(points={{-99,100},{-20,100},{-20,-58},{-12,-58}},color={255,0,255}));
            connect(TChiWatSupSet.y,chi.TChiWatSupSet)
              annotation (Line(points={{-98,0},{-34,0},{-34,-64},{-12,-64}},color={0,0,127}));
            connect(THeaWatRet.y,conWat.T_in)
              annotation (Line(points={{-169,-60},{-140,-60},{-140,-58},{-122,-58}},color={0,0,127}));
            connect(TChiWatRet.y,evaWat.T_in)
              annotation (Line(points={{139,-60},{132,-60},{132,-58},{122,-58}},color={0,0,127}));
            annotation (
              Diagram(
                coordinateSystem(
                  preserveAspectRatio=false,
                  extent={{-200,-140},{200,140}})),
              __Dymola_Commands(
                file="modelica://Buildings/Resources/Scripts/Dymola/Experimental/DHC/EnergyTransferStations/Combined/Subsystems/Validation/Chiller.mos" "Simulate and plot"),
              experiment(
                StopTime=5000,
                Tolerance=1e-06),
              Documentation(
                revisions="<html>
<ul>
<li>
July 31, 2020, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>",       info="<html>
<p>
This model validates
<a href=\"modelica://Buildings.Experimental.DHC.EnergyTransferStations.Combined.Subsystems.Chiller\">
Buildings.Experimental.DHC.EnergyTransferStations.Combined.Subsystems.Chiller</a>.
</p>
</html>"));
          end Chiller;

          model HeatExchanger
            "Validation of the base subsystem model with district heat exchanger"
            extends Modelica.Icons.Example;
            package Medium=Buildings.Media.Water
              "Medium model";
            Buildings.Fluid.Sources.Boundary_pT bou1Pum(
              redeclare package Medium = Medium,
              use_T_in=true,
              nPorts=2) "Primary boundary conditions" annotation (Placement(
                  transformation(
                  extent={{10,-10},{-10,10}},
                  rotation=0,
                  origin={150,-82})));
            Buildings.Fluid.Sources.Boundary_pT bou2(
              redeclare package Medium = Medium,
              use_T_in=true,
              nPorts=4) "Secondary boundary conditions" annotation (Placement(
                  transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={-70,-20})));
            Modelica.Blocks.Sources.BooleanExpression uHeaRej(
              y=time >= 3000) "Heat rejection enable signal"
              annotation (Placement(transformation(extent={{-190,90},{-170,110}})));
            Modelica.Blocks.Sources.BooleanExpression uEnaColRej(
              y=time >= 1000 and time < 3000)
              "Cold rejection enable signal"
              annotation (Placement(transformation(extent={{-190,70},{-170,90}})));
            estcp.DHC.EnergyTransferStations.Combined.Subsystems.HeatExchanger hexPum(
              redeclare final package Medium1 = Medium,
              redeclare final package Medium2 = Medium,
              show_T=true,
              conCon=estcp.DHC.EnergyTransferStations.Types.ConnectionConfiguration.Pump,

              dp1Hex_nominal=20E3,
              dp2Hex_nominal=20E3,
              Q_flow_nominal=1E6,
              T_a1_nominal=281.15,
              T_b1_nominal=277.15,
              T_a2_nominal=275.15,
              T_b2_nominal=279.15) "Heat exchanger with primary pump"
              annotation (Placement(transformation(extent={{30,-90},{50,-70}})));
            Buildings.Controls.OBC.CDL.Reals.Switch swi
              "Switch secondary temperature value depending on heat/cold rejection mode"
              annotation (Placement(transformation(extent={{-120,-90},{-100,-70}})));
            Buildings.Fluid.Sensors.TemperatureTwoPort senT1OutPum(redeclare
                final package Medium =
                                 Medium, m_flow_nominal=hexPum.m1_flow_nominal)
              "Primary outlet temperature" annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={110,-100})));
            Buildings.Fluid.Sensors.TemperatureTwoPort senT1InlPum(redeclare
                final package Medium =
                                 Medium, m_flow_nominal=hexPum.m1_flow_nominal)
              "Primary inlet temperature" annotation (Placement(transformation(
                  extent={{10,-10},{-10,10}},
                  rotation=0,
                  origin={110,-60})));
            Buildings.Fluid.Sensors.TemperatureTwoPort senT2OutPum(redeclare
                final package Medium =
                                 Medium, m_flow_nominal=hexPum.m2_flow_nominal)
              "Secondary outlet temperature" annotation (Placement(transformation(
                  extent={{10,-10},{-10,10}},
                  rotation=0,
                  origin={-30,-60})));
            Buildings.Fluid.Sensors.TemperatureTwoPort senT2InlPum(redeclare
                final package Medium =
                                 Medium, m_flow_nominal=hexPum.m2_flow_nominal)
              "Secondary inlet temperature" annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={-30,-100})));
            estcp.DHC.EnergyTransferStations.Combined.Subsystems.HeatExchanger hexVal(
              redeclare final package Medium1 = Medium,
              redeclare final package Medium2 = Medium,
              show_T=true,
              conCon=estcp.DHC.EnergyTransferStations.Types.ConnectionConfiguration.TwoWayValve,

              dp1Hex_nominal=20E3,
              dp2Hex_nominal=20E3,
              Q_flow_nominal=1E6,
              T_a1_nominal=281.15,
              T_b1_nominal=277.15,
              T_a2_nominal=275.15,
              T_b2_nominal=279.15) "Heat exchanger with primary control valve"
              annotation (Placement(transformation(extent={{30,-10},{50,10}})));

            Buildings.Fluid.Sources.Boundary_pT bou1InlVal(
              redeclare package Medium = Medium,
              p=Medium.p_default + 30E3,
              use_T_in=true,
              nPorts=1) "Primary boundary conditions" annotation (Placement(
                  transformation(
                  extent={{10,-10},{-10,10}},
                  rotation=0,
                  origin={152,20})));
            Buildings.Fluid.Sources.Boundary_pT bou1OutVal(redeclare package
                Medium =
                  Medium, nPorts=1) "Primary boundary conditions" annotation (Placement(
                  transformation(
                  extent={{10,-10},{-10,10}},
                  rotation=0,
                  origin={150,-20})));
            Buildings.Fluid.Sensors.TemperatureTwoPort senT1InlVal(redeclare
                final package Medium =
                                 Medium, m_flow_nominal=hexVal.m1_flow_nominal)
              "Primary inlet temperature" annotation (Placement(transformation(
                  extent={{10,-10},{-10,10}},
                  rotation=0,
                  origin={110,20})));
            Buildings.Fluid.Sensors.TemperatureTwoPort senT1OutVal(redeclare
                final package Medium =
                                 Medium, m_flow_nominal=hexVal.m1_flow_nominal)
              "Primary outlet temperature" annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={110,-20})));
            Buildings.Fluid.Sensors.TemperatureTwoPort senT2OutVal(redeclare
                final package Medium =
                                 Medium, m_flow_nominal=hexVal.m2_flow_nominal)
              "Secondary outlet temperature" annotation (Placement(transformation(
                  extent={{10,-10},{-10,10}},
                  rotation=0,
                  origin={-30,20})));
            Buildings.Fluid.Sensors.TemperatureTwoPort senT2InlVal(redeclare
                final package Medium =
                                 Medium, m_flow_nominal=hexVal.m2_flow_nominal)
              "Secondary inlet temperature" annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={-30,-20})));
            Buildings.Controls.OBC.CDL.Logical.Or or2
              "Compute enable signal for heat/cold rejection"
              annotation (Placement(transformation(extent={{-120,70},{-100,90}})));
            Modelica.Blocks.Sources.RealExpression yValIsoCon(
              y=if time >= 2500 then
                  1
                else
                  0)
              "Condenser loop isolation valve opening"
              annotation (Placement(transformation(extent={{-190,50},{-170,70}})));
            Modelica.Blocks.Sources.RealExpression yValIsoEva(
              y=if time >= 500 then
                  1
                else
                  0)
              "Evaporator loop isolation valve opening"
              annotation (Placement(transformation(extent={{-190,30},{-170,50}})));
            Buildings.Controls.OBC.CDL.Reals.Sources.Sin sin1(
              amplitude=0.5,
              freqHz=1e-3,
              offset=0.5)
              "Control signal"
              annotation (Placement(transformation(extent={{-80,130},{-60,150}})));
            Buildings.Controls.OBC.CDL.Reals.Switch swi1 "Activate heat/cold rejection"
              annotation (Placement(transformation(extent={{-20,70},{0,90}})));
            Buildings.Controls.OBC.CDL.Reals.Sources.Constant zer(
              k=0) "Zero"
              annotation (Placement(transformation(extent={{-80,90},{-60,110}})));
            Modelica.Blocks.Sources.TimeTable TColVal(
              y(final unit="K",
                displayUnit="degC"),
              table=[
                0,6;
                2,6;
                3,16;
                4.5,16;
                5,6;
                10,6],
              timeScale=1000,
              offset=273.15) "Cold side temperature values"
              annotation (Placement(transformation(extent={{-190,-70},{-170,-50}})));
            Modelica.Blocks.Sources.TimeTable THotVal(
              y(final unit="K",
                displayUnit="degC"),
              table=[
                0,45;
                2,45;
                3,55;
                4.5,55;
                5,25;
                10,25],
              timeScale=1000,
              offset=273.15)
              "Hot side temperature values"
              annotation (Placement(transformation(extent={{-190,-110},{-170,-90}})));
            Modelica.Blocks.Sources.TimeTable TSerWat(
              y(final unit="K",
                displayUnit="degC"),
              table=[
                0,8;
                1,8;
                2,13;
                3,18;
                4,6;
                5,18],
              timeScale=1000,
              offset=273.15) "Service water temperature values"
              annotation (Placement(transformation(extent={{210,-90},{190,-70}})));
          equation
            connect(swi.y, bou2.T_in) annotation (Line(points={{-98,-80},{-90,-80},{-90,
                    -16},{-82,-16}}, color={0,0,127}));
            connect(uEnaColRej.y,swi.u2)
              annotation (Line(points={{-169,80},{-140,80},{-140,20},{-120,20},{-120,-60},
                    {-130,-60},{-130,-80},{-122,-80}},                                                                        color={255,0,255}));
            connect(hexPum.port_b1,senT1OutPum.port_a)
              annotation (Line(points={{50,-74},{80,-74},{80,-100},{100,-100}},
                                                                            color={0,127,255}));
            connect(senT1OutPum.port_b, bou1Pum.ports[1]) annotation (Line(points={{120,-100},
                    {140,-100},{140,-80}}, color={0,127,255}));
            connect(hexPum.port_a1,senT1InlPum.port_b)
              annotation (Line(points={{30,-74},{20,-74},{20,-60},{100,-60}},  color={0,127,255}));
            connect(senT1InlPum.port_a, bou1Pum.ports[2]) annotation (Line(points={{120,-60},
                    {140,-60},{140,-84}}, color={0,127,255}));
            connect(hexPum.port_b2,senT2OutPum.port_a)
              annotation (Line(points={{30,-86},{0,-86},{0,-60},{-20,-60}},     color={0,127,255}));
            connect(senT2OutPum.port_b, bou2.ports[1]) annotation (Line(points={{-40,-60},
                    {-50,-60},{-50,-24},{-60,-24},{-60,-17}}, color={0,127,255}));
            connect(bou2.ports[2], senT2InlPum.port_a) annotation (Line(points={{-60,-19},
                    {-60,-100},{-40,-100}}, color={0,127,255}));
            connect(senT2InlPum.port_b,hexPum.port_a2)
              annotation (Line(points={{-20,-100},{60,-100},{60,-86},{50,-86}},
                                                                             color={0,127,255}));
            connect(hexVal.port_a1,senT1InlVal.port_b)
              annotation (Line(points={{30,6},{20,6},{20,20},{100,20}},    color={0,127,255}));
            connect(senT1InlVal.port_a, bou1InlVal.ports[1])
              annotation (Line(points={{120,20},{142,20}}, color={0,127,255}));
            connect(bou1OutVal.ports[1], senT1OutVal.port_b)
              annotation (Line(points={{140,-20},{120,-20}}, color={0,127,255}));
            connect(senT1OutVal.port_a,hexVal.port_b1)
              annotation (Line(points={{100,-20},{70,-20},{70,6},{50,6}},
                                                                      color={0,127,255}));
            connect(hexVal.port_a2,senT2InlVal.port_b)
              annotation (Line(points={{50,-6},{60,-6},{60,-20},{-20,-20}},
                                                                       color={0,127,255}));
            connect(senT2OutVal.port_a,hexVal.port_b2)
              annotation (Line(points={{-20,20},{0,20},{0,-6},{30,-6}},     color={0,127,255}));
            connect(uEnaColRej.y,or2.u2)
              annotation (Line(points={{-169,80},{-140,80},{-140,72},{-122,72}},  color={255,0,255}));
            connect(uHeaRej.y,or2.u1)
              annotation (Line(points={{-169,100},{-130,100},{-130,80},{-122,80}},  color={255,0,255}));
            connect(yValIsoCon.y,hexVal.yValIso_actual[1])
              annotation (Line(points={{-169,60},{8,60},{8,-3},{28,-3}},     color={0,0,127}));
            connect(yValIsoCon.y,hexPum.yValIso_actual[1])
              annotation (Line(points={{-169,60},{8,60},{8,-83},{28,-83}},     color={0,0,127}));
            connect(yValIsoEva.y,hexVal.yValIso_actual[2])
              annotation (Line(points={{-169,40},{4,40},{4,-1},{28,-1}},     color={0,0,127}));
            connect(yValIsoEva.y,hexPum.yValIso_actual[2])
              annotation (Line(points={{-169,40},{4,40},{4,-81},{28,-81}},     color={0,0,127}));
            connect(or2.y,swi1.u2)
              annotation (Line(points={{-98,80},{-22,80}},   color={255,0,255}));
            connect(sin1.y,swi1.u1)
              annotation (Line(points={{-58,140},{-40,140},{-40,88},{-22,88}},  color={0,0,127}));
            connect(zer.y,swi1.u3)
              annotation (Line(points={{-58,100},{-50,100},{-50,72},{-22,72}},color={0,0,127}));
            connect(swi1.y,hexVal.u)
              annotation (Line(points={{2,80},{12,80},{12,2},{28,2}},         color={0,0,127}));
            connect(swi1.y,hexPum.u)
              annotation (Line(points={{2,80},{12,80},{12,-78},{28,-78}},       color={0,0,127}));
            connect(TColVal.y,swi.u1)
              annotation (Line(points={{-169,-60},{-140,-60},{-140,-72},{-122,-72}},color={0,0,127}));
            connect(THotVal.y,swi.u3)
              annotation (Line(points={{-169,-100},{-140,-100},{-140,-88},{-122,-88}},
                                                                                    color={0,0,127}));
            connect(TSerWat.y, bou1Pum.T_in) annotation (Line(points={{189,-80},{180,-80},
                    {180,-78},{162,-78}}, color={0,0,127}));
            connect(TSerWat.y, bou1InlVal.T_in) annotation (Line(points={{189,-80},{180,-80},
                    {180,24},{164,24}}, color={0,0,127}));
            connect(senT2OutVal.port_b, bou2.ports[3])
              annotation (Line(points={{-40,20},{-60,20},{-60,-21}}, color={0,127,255}));
            connect(bou2.ports[4], senT2InlVal.port_a) annotation (Line(points={{-60,-23},
                    {-60,-20},{-40,-20}}, color={0,127,255}));
            annotation (
              Diagram(
                coordinateSystem(
                  preserveAspectRatio=false,
                  extent={{-220,-160},{220,160}})),
              __Dymola_Commands(
                file="modelica://Buildings/Resources/Scripts/Dymola/Experimental/DHC/EnergyTransferStations/Combined/Subsystems/Validation/HeatExchanger.mos" "Simulate and plot"),
              experiment(
                StopTime=5000,
                Tolerance=1e-06),
              Documentation(
                revisions="<html>
<ul>
<li>
July 31, 2020, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>",       info="<html>
<p>
This model validates
<a href=\"modelica://Buildings.Experimental.DHC.EnergyTransferStations.Combined.Subsystems.HeatExchanger\">
Buildings.Experimental.DHC.EnergyTransferStations.Combined.Subsystems.HeatExchanger</a>
in a configuration where the primary flow rate is modulated by means of a
two-way valve (see <code>hexVal</code>), and in a configuration where the
primary flow rate is modulated by means of a variable speed pump
(see <code>hexPum</code>).
</p>
</html>"));
          end HeatExchanger;

          model SwitchBox "Validation of flow switch box"
            extends Modelica.Icons.Example;

            package Medium=Buildings.Media.Water
              "Medium model";
            parameter Modelica.Units.SI.MassFlowRate m_flow_nominal=1
              "Nominal water mass flow rate";
            Buildings.Fluid.Delays.DelayFirstOrder volSup(
              redeclare final package Medium = Medium,
              energyDynamics=Modelica.Fluid.Types.Dynamics.SteadyStateInitial,
              final m_flow_nominal=m_flow_nominal,
              tau=60,
              nPorts=3) "Mixing volume supply" annotation (Placement(
                  transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=90,
                  origin={-70,0})));
            Buildings.Fluid.Delays.DelayFirstOrder volRet(
              redeclare final package Medium = Medium,
              energyDynamics=Modelica.Fluid.Types.Dynamics.SteadyStateInitial,
              final m_flow_nominal=m_flow_nominal,
              tau=60,
              nPorts=3) "Mixing volume return" annotation (Placement(
                  transformation(
                  extent={{-10,10},{10,-10}},
                  rotation=90,
                  origin={70,0})));
            estcp.DHC.EnergyTransferStations.BaseClasses.Pump_m_flow pum1(
                redeclare package Medium = Medium, final m_flow_nominal=
                  m_flow_nominal) "Chilled water HX secondary pump" annotation
              (Placement(transformation(extent={{10,-10},{-10,10}})));
            estcp.DHC.EnergyTransferStations.BaseClasses.Pump_m_flow pum2(
                redeclare package Medium = Medium, final m_flow_nominal=
                  m_flow_nominal) "Chilled water HX secondary pump"
              annotation (Placement(transformation(extent={{-10,50},{10,70}})));
            estcp.DHC.EnergyTransferStations.Combined.Subsystems.SwitchBox floSwiBox(
              final m_flow_nominal=m_flow_nominal,
              redeclare final package Medium = Medium,
              trueHoldDuration=300) "Flow switch box" annotation (Placement(
                  transformation(extent={{-10,-60},{10,-40}})));
            Buildings.Fluid.Sensors.MassFlowRate senMasFlo(redeclare final
                package Medium = Medium) "District water mass flow rate"
              annotation (Placement(transformation(
                  extent={{10,-10},{-10,10}},
                  rotation=0,
                  origin={0,-100})));
            Buildings.Controls.OBC.CDL.Reals.Sources.Constant setMasFlo1(k=0.5)
              "Set point for mass flow rate (normalized)"
              annotation (Placement(transformation(extent={{-90,30},{-70,50}})));
            Buildings.Fluid.Sources.Boundary_pT disWatBou(redeclare package
                Medium = Medium, nPorts=2) "District water boundary conditions"
              annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={-70,-90})));
            Modelica.Blocks.Sources.CombiTimeTable setMasFlo2(
              tableName="tab1",
              table=[0,0; 0.6,1; 0.7,0; 1,1],
              extrapolation=Modelica.Blocks.Types.Extrapolation.Periodic,
              columns={2},
              timeScale=1000) "Set point for mass flow rate (normalized)"
              annotation (Placement(transformation(extent={{-90,70},{-70,90}})));
            Buildings.Controls.OBC.CDL.Reals.MultiplyByParameter gai2(final k=
                  m_flow_nominal) "Scale with nominal mass flow rate"
              annotation (Placement(transformation(extent={{-46,70},{-26,90}})));
            Buildings.Controls.OBC.CDL.Reals.MultiplyByParameter gai1(final k=
                  m_flow_nominal) "Scale with nominal mass flow rate"
              annotation (Placement(transformation(extent={{-46,30},{-26,50}})));
          equation
            connect(pum1.port_b, volSup.ports[1]) annotation (Line(points={{-10,0},{-60,0},
                    {-60,-2.66667}}, color={0,127,255}));
            connect(volSup.ports[2], pum2.port_a) annotation (Line(points={{-60,-4.44089e-16},
                    {-60,60},{-10,60}}, color={0,127,255}));
            connect(pum2.port_b, volRet.ports[1]) annotation (Line(points={{10,60},{60,60},
                    {60,-2.66667}}, color={0,127,255}));
            connect(volRet.ports[2], pum1.port_a) annotation (Line(points={{60,8.88178e-16},
                    {60,0},{10,0}}, color={0,127,255}));
            connect(floSwiBox.port_bSup, volSup.ports[3]) annotation (Line(points={{-6,-40},
                    {-6,-20},{-60,-20},{-60,2.66667}}, color={0,127,255}));
            connect(floSwiBox.port_aRet, volRet.ports[3]) annotation (Line(points={{6,-40},
                    {6,-20},{60,-20},{60,2.66667}}, color={0,127,255}));
            connect(floSwiBox.port_bRet, senMasFlo.port_a) annotation (Line(points={{6,-60},
                    {6,-80},{60,-80},{60,-100},{10,-100}},
                                                 color={0,127,255}));
            connect(senMasFlo.port_b, disWatBou.ports[1]) annotation (Line(points={{-10,
                    -100},{-60,-100},{-60,-88}},
                                               color={0,127,255}));
            connect(disWatBou.ports[2], floSwiBox.port_aSup) annotation (Line(points={{-60,-92},
                    {-60,-80},{-6,-80},{-6,-60}},
                                              color={0,127,255}));
            connect(pum1.m_flow_actual, floSwiBox.mRev_flow) annotation (Line(points={{-11,
                    5},{-20,5},{-20,-54},{-12,-54}}, color={0,0,127}));
            connect(setMasFlo2.y[1], gai2.u)
              annotation (Line(points={{-69,80},{-48,80}}, color={0,0,127}));
            connect(gai2.y, pum2.m_flow_in)
              annotation (Line(points={{-24,80},{0,80},{0,72}}, color={0,0,127}));
            connect(setMasFlo1.y, gai1.u)
              annotation (Line(points={{-68,40},{-48,40}}, color={0,0,127}));
            connect(gai1.y, pum1.m_flow_in)
              annotation (Line(points={{-24,40},{0,40},{0,12}}, color={0,0,127}));
            connect(pum2.m_flow_actual, floSwiBox.mPos_flow) annotation (Line(points={{11,
                    65},{20,65},{20,-28},{-16,-28},{-16,-46},{-12,-46}}, color={0,0,127}));
            annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
                  coordinateSystem(preserveAspectRatio=false, extent={{-120,-120},{120,120}})),
              Documentation(info="<html>
<p>
This model validates that
<a href=\"modelica://Buildings.Experimental.DHC.EnergyTransferStations.Combined.Subsystems.SwitchBox\">
Buildings.Experimental.DHC.EnergyTransferStations.Combined.Subsystems.SwitchBox</a>
maintains a positive flow rate in the district line outside of the temporization
period set by the controller.
</p>
</html>"),  experiment(
                StopTime=1000,
                Tolerance=1e-06),
              __Dymola_Commands(
              file="modelica://Buildings/Resources/Scripts/Dymola/Experimental/DHC/EnergyTransferStations/Combined/Subsystems/Validation/SwitchBox.mos"
              "Simulate and plot"));
          end SwitchBox;

          model WatersideEconomizer
            "Validation of the base subsystem model with waterside economizer"
            extends Modelica.Icons.Example;
            package Medium=Buildings.Media.Water
              "Medium model";
            Buildings.Fluid.Sources.Boundary_pT bou1Pum(
              redeclare package Medium = Medium,
              use_T_in=true,
              nPorts=2) "Primary boundary conditions" annotation (Placement(
                  transformation(
                  extent={{10,-10},{-10,10}},
                  rotation=0,
                  origin={140,-62})));
            Buildings.Fluid.Movers.FlowControlled_dp pum2Pum(
              redeclare package Medium = Medium,
              energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,
              m_flow_nominal=hexPum.m2_flow_nominal,
              addPowerToMedium=false,
              nominalValuesDefineDefaultPressureCurve=true,
              dp_nominal=25E4) "CHW pump" annotation (Placement(transformation(
                  extent={{10,-10},{-10,10}},
                  rotation=0,
                  origin={-70,-40})));
            Modelica.Blocks.Sources.BooleanExpression uCoo(y=time >= 1000)
              "Cooling enable signal"
              annotation (Placement(transformation(extent={{-200,70},{-180,90}})));
            estcp.DHC.EnergyTransferStations.Combined.Subsystems.WatersideEconomizer
              hexPum(
              redeclare final package Medium1 = Medium,
              redeclare final package Medium2 = Medium,
              show_T=true,
              conCon=estcp.DHC.EnergyTransferStations.Types.ConnectionConfiguration.Pump,

              dp1Hex_nominal=3E4,
              dp2Hex_nominal=3E4,
              Q_flow_nominal=-1E6,
              T_a1_nominal=281.15,
              T_b1_nominal=291.15,
              T_a2_nominal=293.15,
              T_b2_nominal=283.15) "Heat exchanger with primary pump"
              annotation (Placement(transformation(extent={{20,-70},{40,-50}})));
            Buildings.Fluid.Sensors.TemperatureTwoPort senT1OutPum(redeclare
                final package Medium =
                                 Medium, m_flow_nominal=hexPum.m1_flow_nominal)
              "Primary outlet temperature" annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={100,-80})));
            Buildings.Fluid.Sensors.TemperatureTwoPort senT1InlPum(redeclare
                final package Medium =
                                 Medium, m_flow_nominal=hexPum.m1_flow_nominal)
              "Primary inlet temperature" annotation (Placement(transformation(
                  extent={{10,-10},{-10,10}},
                  rotation=0,
                  origin={100,-40})));
            Buildings.Fluid.Sensors.TemperatureTwoPort senT2OutPum(redeclare
                final package Medium =
                                 Medium, m_flow_nominal=hexPum.m2_flow_nominal)
              "Secondary outlet temperature" annotation (Placement(transformation(
                  extent={{10,-10},{-10,10}},
                  rotation=0,
                  origin={-40,-40})));
            Buildings.Fluid.Sensors.TemperatureTwoPort senT2InlPum(redeclare
                final package Medium =
                                 Medium, m_flow_nominal=hexPum.m2_flow_nominal)
              "Secondary inlet temperature" annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={-40,-80})));
            estcp.DHC.EnergyTransferStations.Combined.Subsystems.WatersideEconomizer
              hexVal(
              redeclare final package Medium1 = Medium,
              redeclare final package Medium2 = Medium,
              show_T=true,
              conCon=estcp.DHC.EnergyTransferStations.Types.ConnectionConfiguration.TwoWayValve,

              dp1Hex_nominal=3E4,
              dp2Hex_nominal=3E4,
              Q_flow_nominal=-1E6,
              T_a1_nominal=281.15,
              T_b1_nominal=291.15,
              T_a2_nominal=293.15,
              T_b2_nominal=283.15) "Heat exchanger with primary control valve"
              annotation (Placement(transformation(extent={{20,10},{40,30}})));
            Buildings.Fluid.Sources.Boundary_pT bou1InlVal(
              redeclare package Medium = Medium,
              p=Medium.p_default + 45E3,
              use_T_in=true,
              nPorts=1) "Primary boundary conditions" annotation (Placement(
                  transformation(
                  extent={{10,-10},{-10,10}},
                  rotation=0,
                  origin={140,40})));
            Buildings.Fluid.Sources.Boundary_pT bou1OutVal(redeclare package
                Medium =
                  Medium, nPorts=1) "Primary boundary conditions" annotation (Placement(
                  transformation(
                  extent={{10,-10},{-10,10}},
                  rotation=0,
                  origin={140,0})));
            Buildings.Fluid.Sensors.TemperatureTwoPort senT1InlVal(redeclare
                final package Medium =
                                 Medium, m_flow_nominal=hexVal.m1_flow_nominal)
              "Primary inlet temperature" annotation (Placement(transformation(
                  extent={{10,-10},{-10,10}},
                  rotation=0,
                  origin={100,40})));
            Buildings.Fluid.Sensors.TemperatureTwoPort senT1OutVal(redeclare
                final package Medium =
                                 Medium, m_flow_nominal=hexVal.m1_flow_nominal)
              "Primary outlet temperature" annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={100,0})));
            Buildings.Fluid.Sensors.TemperatureTwoPort senT2OutVal(redeclare
                final package Medium =
                                 Medium, m_flow_nominal=hexVal.m2_flow_nominal)
              "Secondary outlet temperature" annotation (Placement(transformation(
                  extent={{10,-10},{-10,10}},
                  rotation=0,
                  origin={-40,40})));
            Buildings.Fluid.Sensors.TemperatureTwoPort senT2InlVal(redeclare
                final package Medium =
                                 Medium, m_flow_nominal=hexVal.m2_flow_nominal)
              "Secondary inlet temperature" annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={-40,0})));
            Buildings.Fluid.Sensors.RelativePressure senRelPre(redeclare final
                package Medium =
                         Medium) annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=-90,
                  origin={80,20})));
            Modelica.Blocks.Sources.TimeTable TChiWatRet(
              y(final unit="K", displayUnit="degC"),
              table=[0,10; 2,15; 3,16; 4.5,16; 5,13; 10,9],
              timeScale=1000,
              offset=273.15) "Chilled water return temperature values"
              annotation (Placement(transformation(extent={{-200,10},{-180,30}})));
            Modelica.Blocks.Sources.TimeTable TSerWat(
              y(final unit="K",
                displayUnit="degC"),
              table=[
                0,8;
                1,8;
                2,13;
                3,18;
                4,6;
                5,18],
              timeScale=1000,
              offset=273.15) "Service water temperature values"
              annotation (Placement(transformation(extent={{200,-70},{180,-50}})));
            Buildings.Fluid.Sources.Boundary_pT bou2(
              redeclare package Medium = Medium,
              use_T_in=true,
              nPorts=4) "Secondary boundary conditions" annotation (Placement(
                  transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={-150,0})));
            Buildings.Fluid.FixedResistances.PressureDrop resPum(
              redeclare package Medium = Medium,
              m_flow_nominal=hexPum.m2_flow_nominal,
              dp_nominal=20E4) "Pipe flow resistance"
              annotation (Placement(transformation(extent={{-100,-50},{-120,-30}})));
            Buildings.Controls.OBC.CDL.Reals.Sources.Ramp     dpSet(
              height=15E4,
              duration=1000,
              offset=10E4,
              startTime=1500)                                                    "Differential pressure set point"
              annotation (Placement(transformation(extent={{-200,-40},{-180,-20}})));
            Buildings.Fluid.Movers.FlowControlled_dp pum2Val(
              redeclare package Medium = Medium,
              energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,
              m_flow_nominal=hexPum.m2_flow_nominal,
              addPowerToMedium=false,
              nominalValuesDefineDefaultPressureCurve=true,
              dp_nominal=25E4) "CHW pump" annotation (Placement(transformation(
                  extent={{10,-10},{-10,10}},
                  rotation=0,
                  origin={-70,40})));
            Buildings.Fluid.FixedResistances.PressureDrop resVal(
              redeclare package Medium = Medium,
              m_flow_nominal=hexPum.m2_flow_nominal,
              dp_nominal=20E4) "Pipe flow resistance"
              annotation (Placement(transformation(extent={{-100,30},{-120,50}})));
            Modelica.Blocks.Sources.RealExpression yEva(y=0) "Isolation valve signal"
              annotation (Placement(transformation(extent={{-200,50},{-180,70}})));
          equation
            connect(hexPum.port_b1,senT1OutPum.port_a)
              annotation (Line(points={{40,-54},{70,-54},{70,-80},{90,-80}},color={0,127,255}));
            connect(senT1OutPum.port_b, bou1Pum.ports[1]) annotation (Line(points={{110,-80},
                    {130,-80},{130,-60}}, color={0,127,255}));
            connect(hexPum.port_a1,senT1InlPum.port_b)
              annotation (Line(points={{20,-54},{10,-54},{10,-40},{90,-40}},   color={0,127,255}));
            connect(senT1InlPum.port_a, bou1Pum.ports[2]) annotation (Line(points={{110,-40},
                    {130,-40},{130,-64}}, color={0,127,255}));
            connect(hexPum.port_b2,senT2OutPum.port_a)
              annotation (Line(points={{20,-66},{-10,-66},{-10,-40},{-30,-40}}, color={0,127,255}));
            connect(senT2InlPum.port_b,hexPum.port_a2)
              annotation (Line(points={{-30,-80},{50,-80},{50,-66},{40,-66}},color={0,127,255}));
            connect(hexVal.port_a1,senT1InlVal.port_b)
              annotation (Line(points={{20,26},{10,26},{10,40},{90,40}},   color={0,127,255}));
            connect(senT1InlVal.port_a, bou1InlVal.ports[1])
              annotation (Line(points={{110,40},{130,40}}, color={0,127,255}));
            connect(bou1OutVal.ports[1], senT1OutVal.port_b)
              annotation (Line(points={{130,0},{110,0}}, color={0,127,255}));
            connect(senT1OutVal.port_a,hexVal.port_b1)
              annotation (Line(points={{90,0},{60,0},{60,26},{40,26}},color={0,127,255}));
            connect(hexVal.port_a2,senT2InlVal.port_b)
              annotation (Line(points={{40,14},{50,14},{50,0},{-30,0}},color={0,127,255}));
            connect(senT2OutVal.port_a,hexVal.port_b2)
              annotation (Line(points={{-30,40},{-10,40},{-10,14},{20,14}}, color={0,127,255}));
            connect(hexVal.port_a1,senRelPre.port_a)
              annotation (Line(points={{20,26},{10,26},{10,40},{80,40},{80,30}},   color={0,127,255}));
            connect(senRelPre.port_b,senT1OutVal.port_a)
              annotation (Line(points={{80,10},{80,0},{90,0}},color={0,127,255}));
            connect(TSerWat.y, bou1Pum.T_in) annotation (Line(points={{179,-60},{170,-60},
                    {170,-58},{152,-58}}, color={0,0,127}));
            connect(TSerWat.y, bou1InlVal.T_in) annotation (Line(points={{179,-60},{170,-60},
                    {170,44},{152,44}}, color={0,0,127}));
            connect(uCoo.y, hexVal.uCoo) annotation (Line(points={{-179,80},{0,80},{0,20},{18,20}},      color={255,0,255}));
            connect(uCoo.y, hexPum.uCoo) annotation (Line(points={{-179,80},{0,80},{0,-60},{18,-60}},      color={255,0,255}));
            connect(bou2.ports[1], senT2InlVal.port_a) annotation (Line(points={{-140,3},
                    {-120,3},{-120,0},{-50,0}}, color={0,127,255}));
            connect(TChiWatRet.y, bou2.T_in) annotation (Line(points={{-179,20},{-172,20},
                    {-172,4},{-162,4}}, color={0,0,127}));
            connect(pum2Pum.port_a, senT2OutPum.port_b)
              annotation (Line(points={{-60,-40},{-50,-40}}, color={0,127,255}));
            connect(resPum.port_a, pum2Pum.port_b)
              annotation (Line(points={{-100,-40},{-80,-40}}, color={0,127,255}));
            connect(dpSet.y, pum2Pum.dp_in) annotation (Line(points={{-178,-30},{-90,-30},
                    {-90,-20},{-70,-20},{-70,-28}}, color={0,0,127}));
            connect(senT2OutVal.port_b, pum2Val.port_a)
              annotation (Line(points={{-50,40},{-60,40}}, color={0,127,255}));
            connect(pum2Val.port_b, resVal.port_a)
              annotation (Line(points={{-80,40},{-100,40}}, color={0,127,255}));
            connect(dpSet.y, pum2Val.dp_in) annotation (Line(points={{-178,-30},{-90,-30},
                    {-90,60},{-70,60},{-70,52}}, color={0,0,127}));
            connect(resVal.port_b, bou2.ports[2]) annotation (Line(points={{-120,40},{
                    -140,40},{-140,1}}, color={0,127,255}));
            connect(yEva.y, hexVal.yValIsoEva_actual) annotation (Line(points={{-179,60},
                    {-6,60},{-6,17},{18,17}}, color={0,0,127}));
            connect(yEva.y, hexPum.yValIsoEva_actual) annotation (Line(points={{-179,60},
                    {-6.07143,60},{-6.07143,17.1429},{-6,17.1429},{-6,-63},{18,-63}},
                  color={0,0,127}));
            connect(bou2.ports[3], resPum.port_b) annotation (Line(points={{-140,-1},{
                    -140,-2},{-130,-2},{-130,-40},{-120,-40}}, color={0,127,255}));
            connect(senT2InlPum.port_a, bou2.ports[4]) annotation (Line(points={{-50,-80},
                    {-140,-80},{-140,-3}}, color={0,127,255}));
            annotation (
              Diagram(
                coordinateSystem(
                  preserveAspectRatio=false,
                  extent={{-220,-120},{220,120}})),
              __Dymola_Commands(
                file="modelica://Buildings/Resources/Scripts/Dymola/Experimental/DHC/EnergyTransferStations/Combined/Subsystems/Validation/WatersideEconomizer.mos"
                "Simulate and plot"),
              experiment(
                StopTime=5000,
                Tolerance=1e-06),
              Documentation(
                revisions="<html>
<ul>
<li>
July 31, 2020, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>",       info="<html>
<p>
This model validates
<a href=\"modelica://Buildings.Experimental.DHC.EnergyTransferStations.Combined.Subsystems.WatersideEconomizer\">
Buildings.Experimental.DHC.EnergyTransferStations.Combined.Subsystems.WatersideEconomizer</a>
in a configuration where the primary flow rate is modulated by means of a
two-way valve (see <code>hexVal</code>), and in a configuration where the
primary flow rate is modulated by means of a variable speed pump
(see <code>hexPum</code>).
</p>
</html>"));
          end WatersideEconomizer;
          annotation (
            Documentation(
              info="<html>
<p>
This package contains validation models for the classes in
<a href=\"modelica://Buildings.Experimental.DHC.EnergyTransferStations.Combined.Subsystems\">
Buildings.Experimental.DHC.EnergyTransferStations.Combined.Subsystems</a>.
</p>
</html>"));
        end Validation;
        annotation (
          preferredView="info",
          Documentation(
            info="<html>
<p>
This package contains models for subsystems composing energy transfer stations in
fifth generation district heating and cooling systems.
</p>
</html>"));
      end Subsystems;

      package Examples "Example models integrating multiple components"
        extends Modelica.Icons.ExamplesPackage;

        model ChillerBorefield
          "Example of the ETS model with heat recovery chiller and borefield"
          extends ChillerOnly(
            ets(
              have_borFie=true,
              datBorFie=datBorFie));
          parameter Integer nBorHol=64
            "Number of boreholes (must be a square number)";
          parameter Modelica.Units.SI.Distance dxy=6
            "Distance in x-axis (and y-axis) between borehole axes";
          final parameter Modelica.Units.SI.Distance cooBor[nBorHol,2]=
            estcp.DHC.EnergyTransferStations.BaseClasses.computeCoordinates(                 nBorHol, dxy)
            "Coordinates of boreholes";
          parameter
            Buildings.Fluid.Geothermal.Borefields.Data.Borefield.Example datBorFie(conDat=
                Buildings.Fluid.Geothermal.Borefields.Data.Configuration.Example(
                        cooBor=cooBor, dp_nominal=0)) "Borefield design data"
            annotation (Placement(transformation(extent={{60,180},{80,200}})));
          annotation (
            __Dymola_Commands(
              file="modelica://Buildings/Resources/Scripts/Dymola/Experimental/DHC/EnergyTransferStations/Combined/Examples/ChillerBorefield.mos" "Simulate and plot"),
            experiment(
              StartTime=6.5E6,
              StopTime=7E6,
              Tolerance=1e-06),
            Documentation(
              revisions="<html>
<ul>
<li>
July 31, 2020, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>",     info="<html>
<p>
This model validates
<a href=\"modelica://Buildings.Experimental.DHC.EnergyTransferStations.Combined.ChillerBorefield\">
Buildings.Experimental.DHC.EnergyTransferStations.Combined.ChillerBorefield</a>
in a system configuration including a geothermal borefield.
See
<a href=\"modelica://Buildings.Experimental.DHC.EnergyTransferStations.Combined.Examples.ChillerOnly\">
Buildings.Experimental.DHC.EnergyTransferStations.Combined.Examples.ChillerOnly</a>
for the description of the main modeling assumptions.
</p>
</html>"));
        end ChillerBorefield;

        model ChillerOnly
          "Example of the ETS model with heat recovery chiller"
          extends
            estcp.DHC.EnergyTransferStations.Combined.Validation.BaseClasses.PartialChillerBorefield(
            TDisWatSup(table=[0,11; 1,12; 2,13; 3,14; 4,15; 5,16; 6,17; 7,18; 8,
                  20; 9,18; 10,16; 11,13; 12,11], timeScale=2592000),
            loa(
              tableOnFile=true,
              fileName=Modelica.Utilities.Files.loadResource(filNam),
              timeScale=1),
            QCoo_flow_nominal=estcp.DHC.Loads.BaseClasses.getPeakLoad(string=
                "#Peak space cooling load", filNam=
                Modelica.Utilities.Files.loadResource(filNam)),
            QHea_flow_nominal=estcp.DHC.Loads.BaseClasses.getPeakLoad(string=
                "#Peak space heating load", filNam=
                Modelica.Utilities.Files.loadResource(filNam)));
          parameter String filNam="modelica://Buildings/Resources/Data/Experimental/DHC/Loads/Examples/MediumOffice-90.1-2010-5A.mos"
            "File name with thermal loads as time series";
          Buildings.Controls.OBC.CDL.Reals.MultiplyByParameter loaNorHea(
            final k=1/ets.QHeaWat_flow_nominal)
            "Normalize by nominal" annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={-278,60})));
          Buildings.Controls.OBC.CDL.Reals.MultiplyByParameter loaNorCoo(
            final k=1/ets.QChiWat_flow_nominal) "Normalize by nominal" annotation (Placement(
                transformation(
                extent={{10,-10},{-10,10}},
                rotation=0,
                origin={298,60})));
        equation
          connect(loa.y[2],loaNorHea.u)
            annotation (Line(points={{-309,160},{-300,160},{-300,60},{-290,60}},color={0,0,127}));
          connect(loa.y[1],loaNorCoo.u)
            annotation (Line(points={{-309,160},{320,160},{320,60},{310,60}},color={0,0,127}));
          connect(loaNorHea.y,heaLoaNor.u)
            annotation (Line(points={{-266,60},{-252,60}},color={0,0,127}));
          connect(loaNorCoo.y,loaCooNor.u)
            annotation (Line(points={{286,60},{272,60}},color={0,0,127}));
          connect(TDisWatSup.y[1],disWat.T_in)
            annotation (Line(points={{-309,-140},{-140,-140},{-140,-136},{-122,-136}},color={0,0,127}));
          annotation (
            __Dymola_Commands(
              file="modelica://Buildings/Resources/Scripts/Dymola/Experimental/DHC/EnergyTransferStations/Combined/Examples/ChillerOnly.mos" "Simulate and plot"),
            experiment(
              StartTime=6.5E6,
              StopTime=7E6,
              Tolerance=1e-06),
            Documentation(
              revisions="<html>
<ul>
<li>
July 31, 2020, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>",     info="<html>
<p>
This model validates
<a href=\"modelica://Buildings.Experimental.DHC.EnergyTransferStations.Combined.ChillerBorefield\">
Buildings.Experimental.DHC.EnergyTransferStations.Combined.ChillerBorefield</a>
in a system configuration with no geothermal borefield.
</p>
<ul>
<li>
A load profile based on a whole building energy simulation is used to
represent realistic operating conditions.
</li>
<li>
The district water supply temperature varies on a monthly basis, with
a minimum in January and a maximum in August.
</li>
<li>
The other modeling assumptions are described in
<a href=\"modelica://Buildings.Experimental.DHC.EnergyTransferStations.Combined.Validation.BaseClasses.PartialChillerBorefield\">
Buildings.Experimental.DHC.EnergyTransferStations.Combined.Validation.BaseClasses.PartialChillerBorefield</a>.
</li>
</ul>
</html>"));
        end ChillerOnly;
        annotation (
          preferredView="info",
          Documentation(
            info="<html>
<p>
This package contains advanced examples illustrating the use of the models in
<a href=\"modelica://Buildings.Experimental.DHC.EnergyTransferStations.Combined\">
Buildings.Experimental.DHC.EnergyTransferStations.Combined</a>.
</p>
</html>"));
      end Examples;

      package Validation "Collection of validation models"
        extends Modelica.Icons.ExamplesPackage;

        model ChillerBorefield
          "Validation of the ETS model with heat recovery chiller and borefield"
          extends ChillerOnly(
            ets(
              have_borFie=true,
              datBorFie=datBorFie));
          parameter Integer nBorHol=64
            "Number of boreholes (must be a square number)";
          parameter Modelica.Units.SI.Distance dxy=6
            "Distance in x-axis (and y-axis) between borehole axes";
          final parameter Modelica.Units.SI.Distance cooBor[nBorHol,2]=
              estcp.DHC.EnergyTransferStations.BaseClasses.computeCoordinates(                 nBorHol, dxy)
            "Coordinates of boreholes";
          parameter
            Buildings.Fluid.Geothermal.Borefields.Data.Borefield.Example datBorFie(conDat=
                Buildings.Fluid.Geothermal.Borefields.Data.Configuration.Example(
                        dp_nominal=0, cooBor=cooBor)) "Borefield design data"
            annotation (Placement(transformation(extent={{60,180},{80,200}})));
          annotation (
            __Dymola_Commands(
              file="modelica://Buildings/Resources/Scripts/Dymola/Experimental/DHC/EnergyTransferStations/Combined/Validation/ChillerBorefield.mos" "Simulate and plot"),
            experiment(
              StopTime=360000,
              Tolerance=1e-06),
            Documentation(
              revisions="<html>
<ul>
<li>
July 31, 2020, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>",     info="<html>
<p>
This model validates
<a href=\"modelica://Buildings.Experimental.DHC.EnergyTransferStations.Combined.ChillerBorefield\">
Buildings.Experimental.DHC.EnergyTransferStations.Combined.ChillerBorefield</a>
in a system configuration including a geothermal borefield.
See
<a href=\"modelica://Buildings.Experimental.DHC.EnergyTransferStations.Combined.Validation.ChillerOnly\">
Buildings.Experimental.DHC.EnergyTransferStations.Combined.Validation.ChillerOnly</a>
for the description of the main modeling assumptions.
</p>
</html>"));
        end ChillerBorefield;

        model ChillerOnly
          "Validation of the ETS model with heat recovery chiller"
          extends
            estcp.DHC.EnergyTransferStations.Combined.Validation.BaseClasses.PartialChillerBorefield;
          Modelica.Blocks.Sources.CombiTimeTable TDisWatSup(
            tableName="tab1",
            table=[
              0,11;
              49,11;
              50,20;
              100,20],
            extrapolation=Modelica.Blocks.Types.Extrapolation.Periodic,
            timeScale=3600,
            offset={273.15},
            columns={2},
            smoothness=Modelica.Blocks.Types.Smoothness.MonotoneContinuousDerivative1)
            "District water supply temperature"
            annotation (Placement(transformation(extent={{-330,-150},{-310,-130}})));
        equation
          connect(TDisWatSup.y[1],disWat.T_in)
            annotation (Line(points={{-309,-140},{-140,-140},{-140,-136},{-122,-136}},color={0,0,127}));
          connect(loa.y[2],heaLoaNor.u)
            annotation (Line(points={{-309,160},{-300,160},{-300,60},{-252,60}},color={0,0,127}));
          connect(loa.y[1],loaCooNor.u)
            annotation (Line(points={{-309,160},{280,160},{280,60},{272,60}},color={0,0,127}));
          annotation (
            __Dymola_Commands(
              file="modelica://Buildings/Resources/Scripts/Dymola/Experimental/DHC/EnergyTransferStations/Combined/Validation/ChillerOnly.mos" "Simulate and plot"),
            experiment(
              StopTime=360000,
              Tolerance=1e-06),
            Documentation(
              revisions="<html>
<ul>
<li>
July 31, 2020, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>",     info="<html>
<p>
This model validates
<a href=\"modelica://Buildings.Experimental.DHC.EnergyTransferStations.Combined.ChillerBorefield\">
Buildings.Experimental.DHC.EnergyTransferStations.Combined.ChillerBorefield</a>
in a system configuration with no geothermal borefield.
</p>
<ul>
<li>
A fictitious load profile is used, consisting in the succession of five load
patterns.
</li>
<li>
Each load pattern is simulated with two values of the district water supply
temperature, corresponding to typical extreme values over a whole year
 of operation.
</li>
<li>
The other modeling assumptions are described in
<a href=\"modelica://Buildings.Experimental.DHC.EnergyTransferStations.Combined.Validation.BaseClasses.PartialChillerBorefield\">
Buildings.Experimental.DHC.EnergyTransferStations.Combined.Validation.BaseClasses.PartialChillerBorefield</a>.
</li>
</ul>
</html>"));
        end ChillerOnly;

        model ChillerWSE
          "Validation of the ETS model with heat recovery chiller and waterside economizer"
          extends ChillerOnly(
            ets(
              have_WSE=true), TChiWatSupSet(k=12 + 273.15));
          Modelica.Blocks.Sources.CombiTimeTable TDisWatSup(
            tableName="tab1",
            table=[
              0,11;
              49,11;
              50,20;
              100,20],
            extrapolation=Modelica.Blocks.Types.Extrapolation.Periodic,
            timeScale=3600,
            offset={273.15},
            columns={2},
            smoothness=Modelica.Blocks.Types.Smoothness.MonotoneContinuousDerivative1)
            "District water supply temperature"
            annotation (Placement(transformation(extent={{-330,-150},{-310,-130}})));
        equation
          connect(TDisWatSup.y[1],disWat.T_in)
            annotation (Line(points={{-309,-140},{-140,-140},{-140,-136},{-122,-136}},color={0,0,127}));
          connect(loa.y[2],heaLoaNor.u)
            annotation (Line(points={{-309,160},{-300,160},{-300,60},{-252,60}},color={0,0,127}));
          connect(loa.y[1],loaCooNor.u)
            annotation (Line(points={{-309,160},{280,160},{280,60},{272,60}},color={0,0,127}));
          annotation (
            __Dymola_Commands(
              file="modelica://Buildings/Resources/Scripts/Dymola/Experimental/DHC/EnergyTransferStations/Combined/Validation/ChillerWSE.mos"
              "Simulate and plot"),
            experiment(
              StopTime=360000,
              Tolerance=1e-06),
            Documentation(
              revisions="<html>
<ul>
<li>
July 31, 2020, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>",     info="<html>
<p>
This model validates
<a href=\"modelica://Buildings.Experimental.DHC.EnergyTransferStations.Combined.ChillerBorefield\">
Buildings.Experimental.DHC.EnergyTransferStations.Combined.ChillerBorefield</a>
in a system configuration with no geothermal borefield.
</p>
<ul>
<li>
A fictitious load profile is used, consisting in the succession of five load
patterns.
</li>
<li>
Each load pattern is simulated with two values of the district water supply
temperature, corresponding to typical extreme values over a whole year
 of operation.
</li>
<li>
The other modeling assumptions are described in
<a href=\"modelica://Buildings.Experimental.DHC.EnergyTransferStations.Combined.Validation.BaseClasses.PartialChillerBorefield\">
Buildings.Experimental.DHC.EnergyTransferStations.Combined.Validation.BaseClasses.PartialChillerBorefield</a>.
</li>
</ul>
</html>"));
        end ChillerWSE;

        package BaseClasses "Package with base classes"
          extends Modelica.Icons.BasesPackage;

          partial model PartialChillerBorefield
            "Partial validation of the ETS model with heat recovery chiller and optional borefield"
            extends Modelica.Icons.Example;
            package Medium=Buildings.Media.Water
              "Medium model";
            parameter Modelica.Units.SI.MassFlowRate mHeaWat_flow_nominal=0.9*datChi.mCon_flow_nominal
              "Nominal heating water mass flow rate";
            parameter Modelica.Units.SI.MassFlowRate mChiWat_flow_nominal=0.9*datChi.mEva_flow_nominal
              "Nominal chilled water mass flow rate";
            parameter Modelica.Units.SI.HeatFlowRate QCoo_flow_nominal(max=-Modelica.Constants.eps)=
                 -1e6 "Design cooling heat flow rate (<=0)"
              annotation (Dialog(group="Design parameter"));
            parameter Modelica.Units.SI.HeatFlowRate QHea_flow_nominal(min=Modelica.Constants.eps)=
                 abs(QCoo_flow_nominal)*(1 + 1/datChi.COP_nominal)
              "Design heating heat flow rate (>=0)"
              annotation (Dialog(group="Design parameter"));
            parameter Buildings.Fluid.Chillers.Data.ElectricEIR.Generic datChi(
              QEva_flow_nominal=QCoo_flow_nominal,
              COP_nominal=3,
              PLRMax=1,
              PLRMinUnl=0.3,
              PLRMin=0.3,
              etaMotor=1,
              mEva_flow_nominal=abs(QCoo_flow_nominal)/5/4186,
              mCon_flow_nominal=QHea_flow_nominal/5/4186,
              TEvaLvg_nominal=277.15,
              capFunT={1.72,0.02,0,-0.02,0,0},
              EIRFunT={0.28,-0.02,0,0.02,0,0},
              EIRFunPLR={0.1,0.9,0},
              TEvaLvgMin=277.15,
              TEvaLvgMax=288.15,
              TConEnt_nominal=313.15,
              TConEntMin=298.15,
              TConEntMax=328.15) "Chiller performance data"
              annotation (Placement(transformation(extent={{20,180},{40,200}})));
            Buildings.Controls.OBC.CDL.Reals.Sources.Constant THeaWatSupSet(
              k=45+273.15,
              y(final unit="K",
                displayUnit="degC"))
              "Heating water supply temperature set point"
              annotation (Placement(transformation(extent={{-140,130},{-120,150}})));
            Buildings.Controls.OBC.CDL.Reals.Sources.Constant TChiWatSupSet(
              k=7+273.15,
              y(final unit="K",
                displayUnit="degC"))
              "Chilled water supply temperature set point"
              annotation (Placement(transformation(extent={{-140,90},{-120,110}})));
            Buildings.Fluid.Sensors.TemperatureTwoPort senTHeaWatSup(redeclare
                package Medium =
                         Medium, m_flow_nominal=datChi.mCon_flow_nominal)
              "Heating water supply temperature" annotation (Placement(transformation(
                  extent={{10,-10},{-10,10}},
                  rotation=0,
                  origin={-60,40})));
            Buildings.Fluid.Sensors.TemperatureTwoPort senTChiWatSup(redeclare
                package Medium =
                         Medium, m_flow_nominal=datChi.mEva_flow_nominal)
              "Chilled water supply temperature" annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={90,40})));
            estcp.DHC.EnergyTransferStations.Combined.ChillerBorefield ets(
              redeclare package MediumSer = Medium,
              redeclare package MediumBui = Medium,
              QChiWat_flow_nominal=QCoo_flow_nominal,
              QHeaWat_flow_nominal=QHea_flow_nominal,
              dp1Hex_nominal=40E3,
              dp2Hex_nominal=40E3,
              QHex_flow_nominal=-QCoo_flow_nominal,
              T_a1Hex_nominal=284.15,
              T_b1Hex_nominal=279.15,
              T_a2Hex_nominal=277.15,
              T_b2Hex_nominal=282.15,
              QWSE_flow_nominal=QCoo_flow_nominal,
              dpCon_nominal=40E3,
              dpEva_nominal=40E3,
              datChi=datChi,
              nPorts_bChiWat=1,
              nPorts_bHeaWat=1,
              nPorts_aHeaWat=1,
              nPorts_aChiWat=1) "ETS" annotation (Placement(transformation(
                    extent={{-10,-84},{50,-24}})));
            Buildings.Fluid.Sensors.TemperatureTwoPort senTHeaWatRet(redeclare
                final package Medium =
                                 Medium, m_flow_nominal=datChi.mCon_flow_nominal)
              "Heating water return temperature" annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={-60,-28})));
            Buildings.Fluid.Sensors.TemperatureTwoPort senTChiWatRet(redeclare
                final package Medium =
                                 Medium, m_flow_nominal=datChi.mEva_flow_nominal)
              "Chilled water return temperature" annotation (Placement(transformation(
                  extent={{10,-10},{-10,10}},
                  rotation=0,
                  origin={90,0})));
            Buildings.Fluid.Sources.Boundary_pT disWat(
              redeclare package Medium = Medium,
              use_T_in=true,
              nPorts=2) "District water boundary conditions" annotation (Placement(
                  transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={-110,-140})));
            DHC.EnergyTransferStations.BaseClasses.Pump_m_flow pumChiWat(
              redeclare package Medium = Medium,
              final m_flow_nominal=mChiWat_flow_nominal,
              dp_nominal=100E3) "Chilled water distribution pump" annotation (
                Placement(transformation(extent={{110,30},{130,50}})));
            Buildings.Controls.OBC.CDL.Reals.MultiplyByParameter gai2(final k=
                  mChiWat_flow_nominal) "Scale to nominal mass flow rate"
              annotation (Placement(transformation(extent={{90,90},{110,110}})));
            Buildings.Controls.OBC.CDL.Reals.MultiplyByParameter gai1(final k=
                  mHeaWat_flow_nominal) "Scale to nominal mass flow rate"
              annotation (Placement(transformation(extent={{40,90},{20,110}})));
            DHC.EnergyTransferStations.BaseClasses.Pump_m_flow pumHeaWat(
              redeclare package Medium = Medium,
              final m_flow_nominal=mHeaWat_flow_nominal,
              dp_nominal=100E3) "Heating water distribution pump"
              annotation (Placement(transformation(extent={{10,30},{-10,50}})));
            Buildings.Fluid.MixingVolumes.MixingVolume volHeaWat(
              energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,
              T_start=45 + 273.15,
              final prescribedHeatFlowRate=true,
              redeclare package Medium = Medium,
              V=10,
              final mSenFac=1,
              final m_flow_nominal=mHeaWat_flow_nominal,
              nPorts=2) "Volume for heating water distribution circuit" annotation (
                Placement(transformation(
                  extent={{-10,10},{10,-10}},
                  rotation=-90,
                  origin={-111,0})));
            Buildings.Controls.OBC.CDL.Reals.MultiplyByParameter gai3(final k=-ets.QHeaWat_flow_nominal)
              "Scale to nominal heat flow rate"
              annotation (Placement(transformation(extent={{-180,50},{-160,70}})));
            Buildings.HeatTransfer.Sources.PrescribedHeatFlow loaHea
              "Heating load as prescribed heat flow rate"
              annotation (Placement(transformation(extent={{-140,50},{-120,70}})));
            Buildings.Fluid.MixingVolumes.MixingVolume volChiWat(
              energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,
              T_start=7 + 273.15,
              final prescribedHeatFlowRate=true,
              redeclare package Medium = Medium,
              V=10,
              final mSenFac=1,
              final m_flow_nominal=mChiWat_flow_nominal,
              nPorts=2) "Volume for chilled water distribution circuit" annotation (
                Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=-90,
                  origin={149,0})));
            Buildings.Controls.OBC.CDL.Reals.MultiplyByParameter gai4(final k=-ets.QChiWat_flow_nominal)
              "Scale to nominal heat flow rate"
              annotation (Placement(transformation(extent={{220,50},{200,70}})));
            Buildings.HeatTransfer.Sources.PrescribedHeatFlow loaCoo
              "Cooling load as prescribed heat flow rate"
              annotation (Placement(transformation(extent={{182,50},{162,70}})));
            Buildings.Controls.OBC.CDL.Reals.GreaterThreshold uHea(
              final t=0.01,
              final h=0.005)
              "Enable heating"
              annotation (Placement(transformation(extent={{-200,-30},{-180,-10}})));
            Buildings.Controls.OBC.CDL.Reals.GreaterThreshold uCoo(
              final t=0.01,
              final h=0.005)
              "Enable cooling"
              annotation (Placement(transformation(extent={{-200,-110},{-180,-90}})));
            Modelica.Blocks.Routing.RealPassThrough heaLoaNor
              "Connect with normalized heating load"
              annotation (Placement(transformation(extent={{-250,50},{-230,70}})));
            Modelica.Blocks.Routing.RealPassThrough loaCooNor
              "Connect with normalized cooling load"
              annotation (Placement(transformation(extent={{270,50},{250,70}})));
            Modelica.Blocks.Sources.CombiTimeTable TDisWatSup(
              tableName="tab1",
              table=[
                0,11;
                49,11;
                50,20;
                100,20],
              extrapolation=Modelica.Blocks.Types.Extrapolation.Periodic,
              timeScale=3600,
              offset={273.15},
              columns={2},
              smoothness=Modelica.Blocks.Types.Smoothness.MonotoneContinuousDerivative1)
              "District water supply temperature"
              annotation (Placement(transformation(extent={{-330,-150},{-310,-130}})));
            Modelica.Blocks.Sources.CombiTimeTable loa(
              tableName="tab1",
              table=[
                0,0,0;
                1,0,0;
                2,0,1;
                3,0,1;
                4,0,0.5;
                5,0,0.5;
                6,0,0.1;
                7,0,0.1;
                8,0,0;
                9,0,0;
                10,0,0;
                11,0,0;
                12,1,0;
                13,1,0;
                14,0.5,0;
                15,0.5,0;
                16,0.1,0;
                17,0.1,0;
                18,0,0;
                19,0,0;
                20,0,0;
                21,0,0;
                22,1,1;
                23,1,1;
                24,0.5,0.5;
                25,0.5,0.5;
                26,0.1,0.1;
                27,0.1,0.1;
                28,0,0;
                29,0,0;
                30,0,0;
                31,0,0;
                32,0.1,1;
                33,0.1,1;
                34,0.5,0.5;
                35,0.5,0.5;
                36,1,0.1;
                37,1,0.1;
                38,0,0;
                39,0,0;
                40,0,0;
                41,0,0;
                42,0.1,0.3;
                43,0.1,0.3;
                44,0.3,0.1;
                45,0.3,0.1;
                46,0.1,0.1;
                47,0.1,0.1;
                48,0,0;
                49,0,0],
              extrapolation=Modelica.Blocks.Types.Extrapolation.Periodic,
              timeScale=3600,
              offset={0,0},
              columns={2,3},
              smoothness=Modelica.Blocks.Types.Smoothness.MonotoneContinuousDerivative1)
              "Thermal loads (y[1] is cooling load, y[2] is heating load)"
              annotation (Placement(transformation(extent={{-330,150},{-310,170}})));
            Buildings.Fluid.Sensors.TemperatureTwoPort senTDisWatSup(redeclare
                final package Medium =
                                 Medium, final m_flow_nominal=ets.hex.m1_flow_nominal)
              "District water supply temperature" annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={-60,-74})));
            Modelica.Blocks.Continuous.Integrator EChi(
              y(unit="J"))
              "Chiller electricity use"
              annotation (Placement(transformation(extent={{300,-70},{320,-50}})));
            Buildings.Fluid.Sensors.TemperatureTwoPort senTDisWatRet(redeclare
                final package Medium = Medium, final m_flow_nominal=ets.hex.m1_flow_nominal)
              "District water return temperature" annotation (Placement(
                  transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={100,-74})));
          equation
            connect(TChiWatSupSet.y,ets.TChiWatSupSet)
              annotation (Line(points={{-118,100},{-32,100},{-32,-64},{-14,-64}},color={0,0,127}));
            connect(THeaWatSupSet.y,ets.THeaWatSupSet)
              annotation (Line(points={{-118,140},{-28,140},{-28,-58},{-14,-58}},color={0,0,127}));
            connect(pumChiWat.port_a,senTChiWatSup.port_b)
              annotation (Line(points={{110,40},{100,40}},color={0,127,255}));
            connect(gai2.y,pumChiWat.m_flow_in)
              annotation (Line(points={{112,100},{120,100},{120,52}},color={0,0,127}));
            connect(pumHeaWat.port_b,senTHeaWatSup.port_a)
              annotation (Line(points={{-10,40},{-50,40}},color={0,127,255}));
            connect(gai1.y,pumHeaWat.m_flow_in)
              annotation (Line(points={{18,100},{0,100},{0,52}},color={0,0,127}));
            connect(gai3.y,loaHea.Q_flow)
              annotation (Line(points={{-158,60},{-140,60}},color={0,0,127}));
            connect(loaHea.port,volHeaWat.heatPort)
              annotation (Line(points={{-120,60},{-112,60},{-112,10},{-111,10}},color={191,0,0}));
            connect(pumChiWat.port_b,volChiWat.ports[1])
              annotation (Line(points={{130,40},{139,40},{139,1}},color={0,127,255}));
            connect(volChiWat.ports[2],senTChiWatRet.port_a)
              annotation (Line(points={{139,-1},{139,0},{100,0}},color={0,127,255}));
            connect(senTHeaWatSup.port_b,volHeaWat.ports[1])
              annotation (Line(points={{-70,40},{-101,40},{-101,1}},color={0,127,255}));
            connect(gai4.y,loaCoo.Q_flow)
              annotation (Line(points={{198,60},{182,60}},color={0,0,127}));
            connect(loaCoo.port,volChiWat.heatPort)
              annotation (Line(points={{162,60},{149,60},{149,10}},color={191,0,0}));
            connect(volHeaWat.ports[2],senTHeaWatRet.port_a)
              annotation (Line(points={{-101,-1},{-101,-28},{-70,-28}},color={0,127,255}));
            connect(heaLoaNor.y,gai3.u)
              annotation (Line(points={{-229,60},{-182,60}},color={0,0,127}));
            connect(heaLoaNor.y,uHea.u)
              annotation (Line(points={{-229,60},{-220,60},{-220,-20},{-202,-20}},color={0,0,127}));
            connect(heaLoaNor.y,gai1.u)
              annotation (Line(points={{-229,60},{-220,60},{-220,120},{60,120},{60,100},{42,100}},color={0,0,127}));
            connect(loaCooNor.y,gai4.u)
              annotation (Line(points={{249,60},{222,60}},color={0,0,127}));
            connect(loaCooNor.y,gai2.u)
              annotation (Line(points={{249,60},{240,60},{240,120},{80,120},{80,100},{88,100}},color={0,0,127}));
            connect(loaCooNor.y,uCoo.u)
              annotation (Line(points={{249,60},{240,60},{240,-120},{-220,-120},{-220,-100},{-202,-100}},color={0,0,127}));
            connect(TDisWatSup.y[1],disWat.T_in)
              annotation (Line(points={{-309,-140},{-140,-140},{-140,-136},{-122,-136}},color={0,0,127}));
            connect(uCoo.y,ets.uCoo)
              annotation (Line(points={{-178,-100},{-120,-100},{-120,-52},{-14,-52}},color={255,0,255}));
            connect(uHea.y,ets.uHea)
              annotation (Line(points={{-178,-20},{-120,-20},{-120,-46},{-14,-46}},color={255,0,255}));
            connect(disWat.ports[1],senTDisWatSup.port_a)
              annotation (Line(points={{-100,-141},{-100,-74},{-70,-74}},color={0,127,255}));
            connect(senTDisWatSup.port_b, ets.port_aSerAmb) annotation (Line(points={{-50,-74},
                    {-10,-74}},                          color={0,127,255}));
            connect(ets.ports_bChiWat[1],senTChiWatSup.port_a)
              annotation (Line(points={{50,-38},{70,-38},{70,40},{80,40}},color={0,127,255}));
            connect(ets.ports_bHeaWat[1],pumHeaWat.port_a)
              annotation (Line(points={{50,-28},{60,-28},{60,40},{10,40}},color={0,127,255}));
            connect(senTHeaWatRet.port_b,ets.ports_aHeaWat[1])
              annotation (Line(points={{-50,-28},{-10,-28}},color={0,127,255}));
            connect(senTChiWatRet.port_b,ets.ports_aChiWat[1])
              annotation (Line(points={{80,0},{-40,0},{-40,-38},{-10,-38}},color={0,127,255}));
            connect(ets.PCoo, EChi.u) annotation (Line(points={{54,-50},{60,-50},{60,-60},{298,-60}},
                                color={0,0,127}));
            connect(ets.port_bSerAmb, senTDisWatRet.port_a)
              annotation (Line(points={{50,-74},{90,-74}}, color={0,127,255}));
            connect(senTDisWatRet.port_b, disWat.ports[2]) annotation (Line(points={{110,-74},
                    {160,-74},{160,-180},{-100,-180},{-100,-139}},      color={0,127,255}));
            annotation (
              Diagram(
                coordinateSystem(
                  preserveAspectRatio=false,
                  extent={{-340,-220},{340,220}})),
              Documentation(
                revisions="<html>
<ul>
<li>
July 31, 2020, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>",       info="<html>
<p>
This is a partial model used as a base class to construct the
validation and example models.
</p>
<ul>
<li>
The building distribution pumps are variable speed and the flow rate
is considered to vary linearly with the load (with no inferior limit).
</li>
<li>
The Boolean enable signals for heating and cooling typically provided
by the building automation system are here computed based on the condition
that the load is greater than 1% of the nominal load.
</li>
<li>
Simplified chiller performance data are used, which represent a linear
variation of the EIR and the capacity with the evaporator outlet temperature
and the condenser inlet temperature (no variation of the EIR at part
load is considered).
</li>
</ul>
</html>"));
          end PartialChillerBorefield;
          annotation (
            Documentation(
              info="<html>
<p>
This package contains base classes that are used to construct the classes in
<a href=\"modelica://Buildings.Experimental.DHC.EnergyTransferStations.Combined.Validation\">
Buildings.Experimental.DHC.EnergyTransferStations.Combined.Validation</a>.
</p>
</html>"));
        end BaseClasses;
        annotation (
          preferredView="info",
          Documentation(
            info="<html>
<p>
This package contains validation models for the classes in
<a href=\"modelica://Buildings.Experimental.DHC.EnergyTransferStations.Combined\">
Buildings.Experimental.DHC.EnergyTransferStations.Combined</a>.
</p>
</html>"));
      end Validation;

      package BaseClasses "Package with base classes"
        extends Modelica.Icons.BasesPackage;

        model PartialParallel
          "Partial ETS model with district heat exchanger and parallel connection of production systems"
          extends estcp.DHC.EnergyTransferStations.BaseClasses.PartialETS(
            final typ=estcp.DHC.Types.DistrictSystemType.CombinedGeneration5,
            final have_heaWat=true,
            final have_chiWat=true,
            final have_pum=true,
            have_hotWat=false,
            have_eleHea=false,
            have_weaBus=false);

          parameter
            estcp.DHC.EnergyTransferStations.Types.ConnectionConfiguration conCon=estcp.DHC.EnergyTransferStations.Types.ConnectionConfiguration
              .Pump "District connection configuration"
            annotation (Evaluate=true);
          parameter Integer nSysHea
            "Number of heating systems"
            annotation (Evaluate=true);
          parameter Integer nSysCoo=nSysHea
            "Number of cooling systems"
            annotation (Evaluate=true);
          parameter Integer nSouAmb=1
            "Number of ambient sources"
            annotation (Evaluate=true);
          parameter Modelica.Units.SI.PressureDifference dpValIso_nominal(displayUnit=
                "Pa") = 2E3 "Nominal pressure drop of ambient circuit isolation valves"
            annotation (Dialog(group="Nominal condition"));
          parameter Modelica.Units.SI.PressureDifference dp1Hex_nominal(displayUnit=
                "Pa") "Nominal pressure drop across heat exchanger on district side"
            annotation (Dialog(group="District heat exchanger"));
          parameter Modelica.Units.SI.PressureDifference dp2Hex_nominal(displayUnit=
                "Pa") "Nominal pressure drop across heat exchanger on building side"
            annotation (Dialog(group="District heat exchanger"));
          parameter Modelica.Units.SI.HeatFlowRate QHex_flow_nominal
            "Nominal heat flow rate through heat exchanger (from district to building)"
            annotation (Dialog(group="District heat exchanger"));
          parameter Modelica.Units.SI.Temperature T_a1Hex_nominal
            "Nominal water inlet temperature on district side"
            annotation (Dialog(group="District heat exchanger"));
          parameter Modelica.Units.SI.Temperature T_b1Hex_nominal
            "Nominal water outlet temperature on district side"
            annotation (Dialog(group="District heat exchanger"));
          parameter Modelica.Units.SI.Temperature T_a2Hex_nominal
            "Nominal water inlet temperature on building side"
            annotation (Dialog(group="District heat exchanger"));
          parameter Modelica.Units.SI.Temperature T_b2Hex_nominal
            "Nominal water outlet temperature on building side"
            annotation (Dialog(group="District heat exchanger"));
          parameter Real spePum1HexMin(
            final unit="1",
            min=0)=0.1
            "Heat exchanger primary pump minimum speed (fractional)"
            annotation (Dialog(group="District heat exchanger",enable=not have_val1Hex));
          parameter Real spePum2HexMin(
            final unit="1",
            min=0.01)=0.1
            "Heat exchanger secondary pump minimum speed (fractional)"
            annotation (Dialog(group="District heat exchanger"));
          replaceable parameter Buildings.Fluid.Movers.Data.Generic perPum1Hex(
            motorCooledByFluid=false)
            constrainedby Buildings.Fluid.Movers.Data.Generic
            "Record with performance data for primary pump"
            annotation (Dialog(group="District heat exchanger", enable=not have_val1Hex),
              choicesAllMatching=true,Placement(transformation(extent={{-80,222},{-60,242}})));
          replaceable parameter Buildings.Fluid.Movers.Data.Generic perPum2Hex(
            motorCooledByFluid=false)
            constrainedby Buildings.Fluid.Movers.Data.Generic
            "Record with performance data for secondary pump"
            annotation (Dialog(group="District heat exchanger"),
              choicesAllMatching=true,Placement(transformation(extent={{-40,222},{-20,242}})));
          parameter Modelica.Units.SI.Volume VTanHeaWat "Heating water tank volume"
            annotation (Dialog(group="Buffer Tank"));
          parameter Modelica.Units.SI.Length hTanHeaWat=(VTanHeaWat*16/Modelica.Constants.pi)
              ^(1/3) "Heating water tank height (assuming twice the diameter)"
            annotation (Dialog(group="Buffer Tank"));
          parameter Modelica.Units.SI.Length dInsTanHeaWat=0.1
            "Heating water tank insulation thickness"
            annotation (Dialog(group="Buffer Tank"));
          parameter Modelica.Units.SI.Volume VTanChiWat "Chilled water tank volume"
            annotation (Dialog(group="Buffer Tank"));
          parameter Modelica.Units.SI.Length hTanChiWat=(VTanChiWat*16/Modelica.Constants.pi)
              ^(1/3) "Chilled water tank height (without insulation)"
            annotation (Dialog(group="Buffer Tank"));
          parameter Modelica.Units.SI.Length dInsTanChiWat=0.1
            "Chilled water tank insulation thickness"
            annotation (Dialog(group="Buffer Tank"));
          parameter Integer nSegTan=3
            "Number of volume segments for tanks"
            annotation (Dialog(group="Buffer Tank"));
          // IO VARIABLES
          Buildings.Controls.OBC.CDL.Interfaces.BooleanInput uHea
            "Heating enable signal"
            annotation (Placement(transformation(extent={{-340,80},{-300,120}}),iconTransformation(extent={{-380,40},{-300,120}})));
          Buildings.Controls.OBC.CDL.Interfaces.BooleanInput uCoo
            "Cooling enable signal"
            annotation (Placement(transformation(extent={{-340,40},{-300,80}}),iconTransformation(extent={{-380,-20},{-300,60}})));
          Buildings.Controls.OBC.CDL.Interfaces.RealInput THeaWatSupSet(
            final unit="K",
            displayUnit="degC")
            "Heating water supply temperature set point"
            annotation (Placement(transformation(extent={{-340,-40},{-300,0}}),iconTransformation(extent={{-380,-80},{-300,0}})));
          Buildings.Controls.OBC.CDL.Interfaces.RealInput TChiWatSupSet(
            final unit="K",
            displayUnit="degC")
            "Chilled water supply temperature set point"
            annotation (Placement(transformation(extent={{-340,-80},{-300,-40}}),iconTransformation(extent={{-380,-140},{-300,-60}})));
          // COMPONENTS
          replaceable
            estcp.DHC.EnergyTransferStations.Combined.Controls.BaseClasses.PartialSupervisory
            conSup constrainedby
            estcp.DHC.EnergyTransferStations.Combined.Controls.BaseClasses.PartialSupervisory(
              final nSouAmb=nSouAmb) "Supervisory controller" annotation (
              Placement(transformation(extent={{-260,12},{-240,32}})));
          Buildings.Fluid.Actuators.Valves.TwoWayLinear valIsoEva(
            redeclare final package Medium = MediumBui,
            final dpValve_nominal=dpValIso_nominal,
            final m_flow_nominal=colAmbWat.mDis_flow_nominal,
            use_inputFilter=false) "Evaporator to ambient loop isolation valve"
            annotation (Placement(transformation(extent={{70,-130},{50,-110}})));
          Buildings.Fluid.Actuators.Valves.TwoWayLinear valIsoCon(
            redeclare final package Medium = MediumBui,
            final dpValve_nominal=dpValIso_nominal,
            final m_flow_nominal=colAmbWat.mDis_flow_nominal,
            use_inputFilter=false) "Condenser to ambient loop isolation valve"
            annotation (Placement(transformation(extent={{-70,-130},{-50,-110}})));
          estcp.DHC.EnergyTransferStations.Combined.Subsystems.HeatExchanger hex(
            redeclare final package Medium1 = MediumSer,
            redeclare final package Medium2 = MediumBui,
            final perPum1=perPum1Hex,
            final perPum2=perPum2Hex,
            final allowFlowReversal1=allowFlowReversalSer,
            final allowFlowReversal2=allowFlowReversalBui,
            final conCon=conCon,
            final dp1Hex_nominal=dp1Hex_nominal,
            final dp2Hex_nominal=dp2Hex_nominal,
            final Q_flow_nominal=QHex_flow_nominal,
            final T_a1_nominal=T_a1Hex_nominal,
            final T_b1_nominal=T_b1Hex_nominal,
            final T_a2_nominal=T_a2Hex_nominal,
            final T_b2_nominal=T_b2Hex_nominal,
            final spePum1Min=spePum1HexMin,
            final spePum2Min=spePum2HexMin) "District heat exchanger"
            annotation (Placement(transformation(extent={{-10,-244},{10,-264}})));
          estcp.DHC.EnergyTransferStations.BaseClasses.StratifiedTank tanChiWat(
            redeclare final package Medium = MediumBui,
            final m_flow_nominal=colChiWat.mDis_flow_nominal,
            final VTan=VTanChiWat,
            final hTan=hTanChiWat,
            final dIns=dInsTanChiWat,
            final nSeg=nSegTan) "Chilled water tank"
            annotation (Placement(transformation(extent={{180,96},{200,116}})));
          estcp.DHC.EnergyTransferStations.BaseClasses.StratifiedTank tanHeaWat(
            redeclare final package Medium = MediumBui,
            final m_flow_nominal=colHeaWat.mDis_flow_nominal,
            final VTan=VTanHeaWat,
            final hTan=hTanHeaWat,
            final dIns=dInsTanHeaWat,
            final nSeg=nSegTan) "Heating water tank" annotation (Placement(
                transformation(extent={{-220,96},{-200,116}})));
          estcp.DHC.EnergyTransferStations.BaseClasses.CollectorDistributor colChiWat(
            redeclare final package Medium = MediumBui,
            final nCon=1 + nSysCoo,
            mCon_flow_nominal={colAmbWat.mDis_flow_nominal})
            "Collector/distributor for chilled water" annotation (Placement(
                transformation(
                extent={{-20,10},{20,-10}},
                rotation=180,
                origin={120,-34})));
          estcp.DHC.EnergyTransferStations.BaseClasses.CollectorDistributor colHeaWat(
            redeclare final package Medium = MediumBui,
            final nCon=1 + nSysHea,
            mCon_flow_nominal={colAmbWat.mDis_flow_nominal})
            "Collector/distributor for heating water" annotation (Placement(
                transformation(
                extent={{20,10},{-20,-10}},
                rotation=180,
                origin={-120,-34})));
          estcp.DHC.EnergyTransferStations.BaseClasses.CollectorDistributor colAmbWat(
            redeclare final package Medium = MediumBui,
            final nCon=nSouAmb,
            mCon_flow_nominal={hex.m2_flow_nominal})
            "Collector/distributor for ambient water" annotation (Placement(
                transformation(
                extent={{20,-10},{-20,10}},
                rotation=180,
                origin={0,-106})));
          Buildings.Controls.OBC.CDL.Reals.MultiSum totPPum(
            nin=1)
            "Total pump power"
            annotation (Placement(transformation(extent={{260,-70},{280,-50}})));
          Buildings.Controls.OBC.CDL.Reals.MultiSum totPHea(
            nin=1)
            "Total power drawn by heating system"
            annotation (Placement(transformation(extent={{260,50},{280,70}})));
          Buildings.Controls.OBC.CDL.Reals.MultiSum totPCoo(
            nin=1)
            "Total power drawn by cooling system"
            annotation (Placement(transformation(extent={{260,10},{280,30}})));
          Buildings.Fluid.Sources.Boundary_pT bou(redeclare final package
              Medium =
                MediumBui, nPorts=1)
            "Pressure boundary condition representing expansion vessel (common to HHW and CHW)"
            annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=180,
                origin={190,-34})));
        protected
          parameter Boolean have_val1Hex=
            conCon ==DHC.EnergyTransferStations.Types.ConnectionConfiguration.TwoWayValve
            "True in case of control valve on district side, false in case of a pump";
        equation
          connect(hex.PPum,totPPum.u[1])
            annotation (Line(points={{12,-254},{36,-254},{36,-60},{258,-60}},color={0,0,127}));
          connect(THeaWatSupSet,conSup.THeaWatSupPreSet)
            annotation (Line(points={{-320,-20},{-292,-20},{-292,27},{-262,27}},color={0,0,127}));
          connect(tanHeaWat.TTop,conSup.THeaWatTop)
            annotation (Line(points={{-199,115},{-190,115},{-190,80},{-274,80},{-274,25},{-262,25}},color={0,0,127}));
          connect(tanChiWat.TBot,conSup.TChiWatBot)
            annotation (Line(points={{201,97},{206,97},{206,0},{-274,0},{-274,19},{-262,19}},  color={0,0,127}));
          connect(hex.port_b2,colAmbWat.ports_aCon[1])
            annotation (Line(points={{-10,-248},{-20,-248},{-20,-160},{12,-160},{12,-116}},color={0,127,255}));
          connect(hex.port_a2,colAmbWat.ports_bCon[1])
            annotation (Line(points={{10,-248},{20,-248},{20,-140},{-12,-140},{-12,-116}},color={0,127,255}));
          connect(totPPum.y,PPum)
            annotation (Line(points={{282,-60},{290,-60},{290,-40},{320,-40}},
                                                          color={0,0,127}));
          connect(hex.yValIso_actual[1],valIsoCon.y_actual)
            annotation (Line(points={{-12,-251.5},{-40,-251.5},{-40,-113},{-55,
                  -113}},                                                         color={0,0,127}));
          connect(hex.yValIso_actual[2],valIsoEva.y_actual)
            annotation (Line(points={{-12,-252.5},{-16,-252.5},{-16,-240},{40,
                  -240},{40,-113},{55,-113}},                                                        color={0,0,127}));
          connect(valIsoEva.port_b,colAmbWat.port_bDisSup)
            annotation (Line(points={{50,-120},{30,-120},{30,-106},{20,-106}},color={0,127,255}));
          connect(valIsoCon.port_b,colAmbWat.port_aDisSup)
            annotation (Line(points={{-50,-120},{-30,-120},{-30,-106},{-20,-106}},color={0,127,255}));
          connect(TChiWatSupSet,conSup.TChiWatSupPreSet)
            annotation (Line(points={{-320,-60},{-290,-60},{-290,21},{-262,21}},color={0,0,127}));
          connect(uCoo,conSup.uCoo)
            annotation (Line(points={{-320,60},{-292,60},{-292,29},{-262,29}},color={255,0,255}));
          connect(uHea,conSup.uHea)
            annotation (Line(points={{-320,100},{-290,100},{-290,31},{-262,31}},color={255,0,255}));
          connect(valIsoEva.port_a,colChiWat.ports_aCon[1])
            annotation (Line(points={{70,-120},{90,-120},{90,-24},{108,-24}},
                                                                     color={0,127,255}));
          connect(colAmbWat.port_aDisRet,colChiWat.ports_bCon[1])
            annotation (Line(points={{20,-100},{150,-100},{150,-24},{132,-24}},
                                                                     color={0,127,255}));
          connect(conSup.yValIsoEva,valIsoEva.y)
            annotation (Line(points={{-238,21},{-220,21},{-220,-80},{60,-80},{60,-108}},color={0,0,127}));
          connect(conSup.yValIsoCon,valIsoCon.y)
            annotation (Line(points={{-238,23},{-218,23},{-218,-76},{-60,-76},{-60,-108}},color={0,0,127}));
          connect(conSup.yAmb[nSouAmb],hex.u)
            annotation (Line(points={{-238,25},{-200,25},{-200,-256},{-12,-256}},color={0,0,127}));
          connect(colChiWat.port_bDisRet,tanChiWat.port_aBot)
            annotation (Line(points={{140,-40},{170,-40},{170,100},{180,100}},color={0,127,255}));
          connect(colChiWat.port_aDisSup,tanChiWat.port_bTop)
            annotation (Line(points={{140,-34},{160,-34},{160,112},{180,112}},color={0,127,255}));
          connect(colHeaWat.port_bDisRet,tanHeaWat.port_aTop)
            annotation (Line(points={{-140,-40},{-160,-40},{-160,112},{-200,112}},color={0,127,255}));
          connect(tanHeaWat.port_bBot,colHeaWat.port_aDisSup)
            annotation (Line(points={{-200,100},{-180,100},{-180,-34},{-140,-34}},color={0,127,255}));
          connect(valIsoCon.port_a,colHeaWat.ports_aCon[1])
            annotation (Line(points={{-70,-120},{-90,-120},{-90,-24},{-108,-24}},
                                                                        color={0,127,255}));
          connect(colAmbWat.port_bDisRet,colHeaWat.ports_bCon[1])
            annotation (Line(points={{-20,-100},{-150,-100},{-150,-24},{-132,-24}},
                                                                        color={0,127,255}));
          connect(totPHea.y,PHea)
            annotation (Line(points={{282,60},{290,60},{290,80},{320,80}},
                                                        color={0,0,127}));
          connect(totPCoo.y,PCoo)
            annotation (Line(points={{282,20},{290,20},{290,40},{320,40}},
                                                        color={0,0,127}));
          connect(bou.ports[1], colChiWat.port_aDisSup)
            annotation (Line(points={{180,-34},{140,-34}},            color={0,127,255}));
          annotation (
            Icon(
              coordinateSystem(
                preserveAspectRatio=false)),
            Diagram(
              coordinateSystem(
                preserveAspectRatio=false,
                extent={{-300,-300},{300,300}}),
              graphics={
                Line(
                  points={{86,92}},
                  color={28,108,200},
                  pattern=LinePattern.Dash)}),
            defaultComponentName="ets",
            Documentation(
              info="<html>
<p>
This is a base model providing the hydronic configuration for an energy transfer
station as described in the schematics below.
It is typically used to integrate systems providing both heating water and chilled
water, such as heat recovery chillers.
Furthermore, it can be connected to an adjustable number (<code>nSouAmb</code>)
of systems serving as ambient sources (including the district heat exchanger).
</p>
<ul>
<li>
The connection to the district loop is realized with a heat exchanger, according
to the operating principles described in
<a href=\"modelica://Buildings.Experimental.DHC.EnergyTransferStations.Combined.Subsystems.HeatExchanger\">
Buildings.Experimental.DHC.EnergyTransferStations.Combined.Subsystems.HeatExchanger</a>.
</li>
<li>
The connection of the heating water and chilled water production systems
to the systems serving as ambient sources is realized in parallel.
</li>
<li>
A replaceable partial class is used to represent a supervisory controller, which
must be replaced by a control block providing at least the control signals
listed in
<a href=\"modelica://Buildings.Experimental.DHC.EnergyTransferStations.Combined.Controls.BaseClasses.PartialSupervisory\">
Buildings.Experimental.DHC.EnergyTransferStations.Combined.Controls.BaseClasses.PartialSupervisory</a>.
</li>
</ul>
<p>
Models that extend this base class must
</p>
<ul>
<li>
specify the number of systems serving as ambient sources <code>nSouAmb</code>,
the number of heating water production systems <code>nSysHea</code>, and
the number of chilled water production systems <code>nSysCoo</code>
(by default <code>nSysCoo=nSysHea</code> which corresponds to a
configuration where both productions are ensured by the same system, such
as a heat recovery chiller),
</li>
<li>
modify the parameter binding with the nominal mass flow rate of each connection
to each collector/distributor model, namely the parameter
<code>mCon_flow_nominal</code> (array) of the components <code>colChiWat</code>,
<code>colHeaWat</code> and <code>colAmbWat</code>.
The connection index <code>1</code> for the components <code>colChiWat</code> and
<code>colHeaWat</code> is reserved for the connection with the ambient source
circuit. It increases with the distance from the buffer tank.
The connection index <code>1</code> for  the component <code>colAmbWat</code> is
reserved for the connection with the district heat exchanger.
Note that the order of the connections has no impact on the flow distribution
as the connections are in parallel.
</li>
</ul>
<p>
Note that the model includes a pressure boundary condition which
is shared between the hot water and chilled water circuits, the two circuits
being hydronically connected.
<br/>
</p>
<p>
<img alt=\"Sequence chart\"
src=\"modelica://Buildings/Resources/Images/Experimental/DHC/EnergyTransferStations/Combined/BaseClasses/PartialParallel.png\"/>
</p>
</html>",
        revisions="<html>
<ul>
<li>
July 14, 2021, by Antoine Gautier:<br/>
Added pressure boundary condition.<br/>
This is for <a href=\"https://github.com/lbl-srg/modelica-buildings/issues/2561\">issue #2561</a>.
</li>
<li>
December 21, 2020, by Antoine Gautier:<br/>
Added outputs for distributed energy flow rate.
</li>
<li>
July 31, 2020, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>"));
        end PartialParallel;
        annotation (
          Documentation(
            info="<html>
<p>
This package contains base classes that are used to construct the classes in
<a href=\"modelica://Buildings.Experimental.DHC.EnergyTransferStations.Combined\">
Buildings.Experimental.DHC.EnergyTransferStations.Combined</a>.
</p>
</html>"));
      end BaseClasses;
      annotation (
        preferredView="info",
        Documentation(
          info="<html>
<p>
This package contains models for energy transfer stations used in
district heating and cooling systems.
</p>
</html>"));
    end Combined;

    package Cooling "This package contains models for energy transfer stations used in district cooling systems"
      extends Modelica.Icons.VariantsPackage;

      model Direct "Direct cooling ETS model for district energy systems with in-building 
  pumping and deltaT control"
        extends estcp.DHC.EnergyTransferStations.BaseClasses.PartialDirect(
          final typ=DHC.Types.DistrictSystemType.Cooling,
          final have_chiWat=true,
          final have_heaWat=false,
          con(reverseActing=false),
          nPorts_aChiWat=1,
          nPorts_bChiWat=1);
      equation
        connect(port_aSerCoo, senTDisSup.port_a)
          annotation (Line(points={{-300,-280},{-180,-280}}, color={0,127,255}));
        connect(ports_aChiWat[1], senTBuiRet.port_a)
          annotation (Line(points={{-300,200},{-220,200}}, color={0,127,255}));
        connect(senTDisRet.port_b, port_bSerCoo) annotation (Line(points={{50,200},{160,
                200},{160,-240},{260,-240},{260,-280},{300,-280}}, color={0,127,255}));
        connect(senTBuiSup.port_b, ports_bChiWat[1])
          annotation (Line(points={{250,200},{300,200}}, color={0,127,255}));
       annotation (
          defaultComponentName="etsCoo",
          Documentation(info="<html>
<p>
Direct cooling energy transfer station (ETS) model with in-building pumping and 
deltaT control. The design is based on a typical district cooling ETS described 
in ASHRAE's <a href=\"https://www.ashrae.org/technical-resources/bookstore/district-heating-and-cooling-guides\">District Cooling Guide</a>. 
As shown in the figure below, the district and building piping are hydronically 
coupled. The control valve ensures that the return temperature to the district 
cooling network is at or above the minimum specified value. This configuration 
naturally results in a fluctuating building supply tempearture. 
</p>
<p align=\"center\">
<img src=\"modelica://Buildings/Resources/Images/Experimental/DHC/EnergyTransferStations/Cooling/Direct.PNG\" alt=\"DC ETS Direct\"/> 
</p>
<h4>
Reference
</h4>
<p>American Society of Heating, Refrigeration and Air-Conditioning Engineers. (2019). 
Chapter 5: End User Interface. In <i>District Cooling Guide</i>, Second Edition and 
<i>Owner's Guide for Buildings Served by District Cooling</i>. 
</p>
</html>",   revisions="<html>
<ul>
<li>
May 5, 2023, by David Blum:<br/>
Removed assignment of check valve <code>allowFlowReversal=false</code>.<br/>
This is for <a href=\"https://github.com/lbl-srg/modelica-buildings/issues/3389\">#3389</a>.
</li>
<li>
April 7, 2023, by David Blum:<br/>
Change to extend from <code>Buildings.Experimental.DHC.EnergyTransferStations.BaseClasses.PartialDirect</code>.
</li>
<li>
January 11, 2023, by Michael Wetter:<br/>
Changed controls to use CDL. Changed PID to PI as default for controller.
</li>
<li>
January 2, 2023, by Kathryn Hinkelman:<br/>
Set pressure drops at junctions to 0 and removed parameter <code>dp_nominal</code>
</li>
<li>
December 28, 2022, by Kathryn Hinkelman:<br/>
Simplified the control implementation for the district return stream. Improved default control parameters.
</li>
<li>
December 23, 2022, by Kathryn Hinkelman:<br/>
Removed extraneous <code>m*_flow_nominal</code> parameters because 
<code>mBui_flow_nominal</code> can be used across all components.
This is for <a href=\"https://github.com/lbl-srg/modelica-buildings/issues/2912\">#2912</a>.
</li> 
<li>
November 11, 2022, by Michael Wetter:<br/>
Changed check valve to use version of <code>Buildings</code> library, and hence no outer <code>system</code> is needed.
</li>      
<li>March 20, 2022, by Chengnan Shi:<br/>Update with base class partial model and standard PI control.</li>
<li>Novermber 13, 2019, by Kathryn Hinkelman:<br/>First implementation. </li>
</ul>
</html>"));
      end Direct;

      model Indirect
        "Indirect cooling energy transfer station for district energy systems"
        extends estcp.DHC.EnergyTransferStations.BaseClasses.PartialIndirect(
          QChiWat_flow_nominal=-Q_flow_nominal,
          final typ=DHC.Types.DistrictSystemType.Cooling,
          final have_chiWat=true,
          final have_heaWat=false,
          Q_flow_nominal(max=0),
          nPorts_aChiWat=1,
          nPorts_bChiWat=1,
          con(reverseActing=false));
      equation
        connect(senTBuiRet.port_a, ports_aChiWat[1])
          annotation (Line(points={{-218,200},{-300,200}}, color={0,127,255}));
        connect(senTBuiSup.port_b, ports_bChiWat[1]) annotation (Line(points={{-36,
                -204},{-80,-204},{-80,160},{180,160},{180,200},{300,200}}, color={0,
                127,255}));
        connect(senTDisRet.port_b, port_bSerCoo)
          annotation (Line(points={{200,-280},{300,-280}}, color={0,127,255}));
        connect(port_aSerCoo, senTDisSup.port_a)
          annotation (Line(points={{-300,-280},{-220,-280}}, color={0,127,255}));
        annotation (
          defaultComponentName="etsCoo",
          Documentation(info="<html>
<p>
Indirect cooling energy transfer station (ETS) model that controls the
building chilled water supply temperature by modulating a primary control valve 
on the district supply side. The design is based on a typical district cooling 
ETS described in ASHRAE's <a href=\"https://www.ashrae.org/technical-resources/bookstore/district-heating-and-cooling-guides\">District Cooling Guide</a>. 
As shown in the figure below, the building pumping design (constant/variable) 
is specified on the building side and not within the ETS. 
</p>
<p align=\"center\">
<img src=\"modelica://Buildings/Resources/Images/Experimental/DHC/EnergyTransferStations/Cooling/Indirect.png\" alt=\"DHC.ETS.Indirect\"/>
</p>
<h4>Reference</h4>
<p>
American Society of Heating, Refrigeration and Air-Conditioning Engineers. (2019).
Chapter 5: End User Interface. In <i>District Cooling Guide</i>, Second Edition and 
<i>Owner's Guide for Buildings Served by District Cooling</i>. 
</p>
</html>",   revisions="<html>
<ul>
<li>
May 30, 2023, by David Blum:<br/>
Change to extend from <code>Buildings.Experimental.DHC.EnergyTransferStations.BaseClasses.PartialDirect</code>.
</li>
<li>
March 16, 2023, by David Blum:<br/>
Fixed building supply temperature controller parameter <code>reverseActing</code>
by changing from <code>true</code> to <code>false</code>.<br/>
This is for
<a href=\"https://github.com/lbl-srg/modelica-buildings/issues/3299\">
issue 3299</a>.
</li>
<li>
January 11, 2023, by Michael Wetter:<br/>
Changed controls to use CDL. Changed PID to PI as default for controller.
</li>
<li>
March 21, 2022, by Chengnan Shi:<br/>
Update with base class partial model.
</li>
<li>Novermber 13, 2019, by Kathryn Hinkelman:<br/>
First implementation.
</li>
</ul>
</html>"));
      end Indirect;

      package Examples
        extends Modelica.Icons.ExamplesPackage;

        model Direct "Example model for direct cooling energy transfer station 
  with in-building pumping and controlled district return temperature"
          extends Modelica.Icons.Example;
          package Medium=Buildings.Media.Water
            "Water medium";
          parameter Modelica.Units.SI.HeatFlowRate Q_flow_nominal=-18000
            "Nominal cooling load (negative for cooling)"
            annotation(Dialog(group="Nominal condition"));
          parameter Modelica.Units.SI.MassFlowRate mBui_flow_nominal=-Q_flow_nominal/(cp*(18-7))
            "Nominal mass flow rate of building cooling supply"
            annotation(Dialog(group="Nominal condition"));
          parameter Modelica.Units.SI.SpecificHeatCapacity cp=Medium.specificHeatCapacityCp(
            Medium.setState_pTX(
              Medium.p_default,
              Medium.T_default,
              Medium.X_default))
            "Default specific heat capacity of medium";
          estcp.DHC.EnergyTransferStations.Cooling.Direct cooETS(
            mBui_flow_nominal=mBui_flow_nominal,
            QChiWat_flow_nominal=Q_flow_nominal,
            dpConVal_nominal=50,
            dpCheVal_nominal=6000,
            nPorts_bChiWat=1,
            nPorts_aChiWat=1) "Energy transfer station"
            annotation (Placement(transformation(extent={{0,-20},{20,0}})));
          Modelica.Blocks.Sources.Constant TSetDisRet_min(k=273.15 + 16)
            "Minimum setpoint temperature for district return"
            annotation (Placement(transformation(extent={{-120,-20},{-100,0}})));
          Buildings.Fluid.Sources.Boundary_pT sinDis(
            redeclare package Medium = Medium,
            p=340000,
            nPorts=1)
            "District-side sink"
            annotation (Placement(transformation(extent={{80,-80},{60,-60}})));
          Buildings.Fluid.Sources.Boundary_pT souDis(
            redeclare package Medium = Medium,
            p=350000,
            use_T_in=true,
            T=280.15,
            nPorts=1)
            "District-side source"
            annotation (Placement(transformation(extent={{-60,-80},{-40,-60}})));
          Modelica.Blocks.Sources.RealExpression TDisSupNoi(
            y=(273.15 + 7) + 2*sin(time*4*3.14/86400))
            "Sinusoidal noise signal for district supply temperature"
            annotation (Placement(transformation(extent={{-120,-76},{-100,-56}})));
          Buildings.Fluid.Movers.FlowControlled_m_flow pum(
            redeclare replaceable package Medium = Medium,
            energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,
            m_flow_nominal=mBui_flow_nominal,
            addPowerToMedium=false,
            nominalValuesDefineDefaultPressureCurve=true,
            constantMassFlowRate=mBui_flow_nominal)
            "Building primary pump"
            annotation (Placement(transformation(extent={{40,20},{60,40}})));
          Buildings.Fluid.HeatExchangers.HeaterCooler_u loa(
            redeclare package Medium = Medium,
            allowFlowReversal=false,
            m_flow_nominal=mBui_flow_nominal,
            show_T=true,
            from_dp=false,
            dp_nominal=100,
            linearizeFlowResistance=true,
            energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,
            Q_flow_nominal=-1)
            "Aggregate building cooling load"
            annotation (Placement(transformation(extent={{20,40},{0,60}})));
          Modelica.Blocks.Sources.Ramp ram(
            height=1,
            duration(displayUnit="h") = 3600,
            startTime(displayUnit="h"))
            "Ramp load from zero"
            annotation (Placement(transformation(extent={{-120,80},{-100,100}})));
          Modelica.Blocks.Sources.CombiTimeTable QCoo(
            table=[
            0,-100E3;
            6,-80E3;
            6,-50E3;
            12,-20E3;
            18,-150E3;
            24,-100E3],
            extrapolation=Modelica.Blocks.Types.Extrapolation.Periodic,
            timeScale=3600)
            "Cooling demand"
            annotation (Placement(transformation(extent={{-120,40},{-100,60}})));
          Modelica.Blocks.Math.Product pro
            "Multiplier to ramp load from zero"
            annotation (Placement(transformation(extent={{-80,60},{-60,80}})));
          Modelica.Blocks.Math.Gain gai(k=-1/(cp*(16 - 7)))
            "Multiplier gain for calculating m_flow"
            annotation (Placement(transformation(extent={{0,80},{20,100}})));
        equation
          connect(TSetDisRet_min.y, cooETS.TSetDisRet)
            annotation (Line(points={{-99,-10},{-0.6,-10}}, color={0,0,127}));
          connect(TDisSupNoi.y, souDis.T_in)
            annotation (Line(points={{-99,-66},{-62,-66}}, color={0,0,127}));
          connect(souDis.ports[1], cooETS.port_aSerCoo)
            annotation (Line(points={{-40,-70},{-20,-70},{-20,-19.3333},{0,-19.3333}},
              color={0,127,255}));
          connect(cooETS.port_bSerCoo, sinDis.ports[1])
            annotation (Line(points={{20,-19.3333},{40,-19.3333},{40,-70},{60,-70}},
              color={0,127,255}));
          connect(cooETS.ports_bChiWat[1], pum.port_a)
            annotation (Line(points={{20,-4.66667},{30,-4.66667},{30,30},{40,30}},
              color={0,127,255}));
          connect(pum.port_b, loa.port_a)
            annotation (Line(points={{60,30},{80,30},{80,50},{20,50}},
              color={0,127,255}));
          connect(loa.port_b, cooETS.ports_aChiWat[1])
            annotation (Line(points={{0,50},{-40,50},{-40,-4.66667},{0,-4.66667}},
              color={0,127,255}));
          connect(ram.y, pro.u1)
            annotation (Line(points={{-99,90},{-92,90},{-92,76},{-82,76}},
              color={0,0,127}));
          connect(QCoo.y[1], pro.u2)
            annotation (Line(points={{-99,50},{-92,50},{-92,64},{-82,64}},
              color={0,0,127}));
          connect(pro.y, loa.u)
            annotation (Line(points={{-59,70},{32,70},{32,56},{22,56}},
              color={0,0,127}));
          connect(pro.y, gai.u)
            annotation (Line(points={{-59,70},{-40,70},{-40,90},{-2,90}},
              color={0,0,127}));
          connect(gai.y, pum.m_flow_in)
            annotation (Line(points={{21,90},{50,90},{50,42}}, color={0,0,127}));
          annotation (
            Icon(
              coordinateSystem(
                preserveAspectRatio=false)),
            Diagram(
                coordinateSystem(
                preserveAspectRatio=false,
                extent={{-160,-120},{160,120}})),
            __Dymola_Commands(
              file="modelica://Buildings/Resources/Scripts/Dymola/Experimental/DHC/EnergyTransferStations/Cooling/Examples/Direct.mos" "Simulate and plot"),
            experiment(
              StartTime=0,
              StopTime=86400,
              Tolerance=1e-06),
            Documentation(info="<html>
<p>This model provides an example for the direct cooling energy transfer station 
model, which contains in-building pumping and controls the district return 
temperature. The building's primary variable speed pump is modulated depending 
on the total cooling load and prescribed deltaT. Variation in the district 
supply temperature is modeled as a sinusoidal signal to test the response of system.
</p>
</html>",     revisions="<html>
<ul>
<li>
December 23, 2022, by Kathryn Hinkelman:<br/>
Removed extraneous <code>m*_flow_nominal</code> parameters because 
<code>mBui_flow_nominal</code> can be used across all components.
This is for <a href=\"https://github.com/lbl-srg/modelica-buildings/issues/2912\">#2912</a>.
</li> 
<li>November 15, 2022, by Kathryn Hinkelman:<br/>
Corrected pressure balance across bypass leg and system.
</li>
<li>March 20, 2022, by Chengnan Shi:<br/>First implementation.</li>
</ul>
</html>"));
        end Direct;

        model Indirect "Example model for indirect cooling energy transfer station 
  with a closed chilled water loop on the building side"
          extends Modelica.Icons.Example;
          package Medium=Buildings.Media.Water
            "Water medium";
          parameter Modelica.Units.SI.HeatFlowRate QCoo_flow_nominal = -19000
            "Cooling design flow rate";
          parameter Modelica.Units.SI.TemperatureDifference dT_nominal = 16-7
            "Design temperature difference";
          parameter Modelica.Units.SI.MassFlowRate mBui_flow_nominal=-QCoo_flow_nominal/dT_nominal/cp
            "Nominal mass flow rate of building cooling supply"
            annotation(Dialog(group="Nominal condition"));
          parameter Modelica.Units.SI.SpecificHeatCapacity cp=Medium.specificHeatCapacityCp(
            Medium.setState_pTX(
              Medium.p_default,
              Medium.T_default,
              Medium.X_default))
            "Default specific heat capacity of medium";
          estcp.DHC.EnergyTransferStations.Cooling.Indirect cooETS(
            QChiWat_flow_nominal=QCoo_flow_nominal,
            mDis_flow_nominal=mBui_flow_nominal,
            mBui_flow_nominal=mBui_flow_nominal,
            dpConVal_nominal=9000,
            dp1_nominal=9000,
            dp2_nominal=9000,
            Q_flow_nominal=QCoo_flow_nominal,
            T_a1_nominal=278.15,
            T_a2_nominal=289.15,
            k=0.1,
            Ti=40,
            yMax=1,
            yMin=0.01,
            controllerType=Modelica.Blocks.Types.SimpleController.PI,
            nPorts_bChiWat=1,
            nPorts_aChiWat=1) "Direct cooling energy transfer station"
            annotation (Placement(transformation(extent={{20,-40},{40,-20}})));
          Buildings.Fluid.Sources.Boundary_pT souDis(
            redeclare package Medium = Medium,
            p(displayUnit="Pa") = 300000 + 2*9000,
            use_T_in=false,
            T=278.15,
            nPorts=1)
            "District (primary) source"
            annotation (Placement(transformation(extent={{-40,-80},{-20,-60}})));
          Buildings.Fluid.Sources.Boundary_pT sinDis(
            redeclare package Medium = Medium,
            T=287.15,
            nPorts=1)
            "District (primary) sink"
            annotation (Placement(transformation(extent={{100,-80},{80,-60}})));
          Modelica.Blocks.Sources.Constant TSetCHWS(
            k=273.15+7)
            "Setpoint temperature for building chilled water supply"
            annotation (Placement(transformation(extent={{-80,-40},{-60,-20}})));
          Buildings.Fluid.HeatExchangers.HeaterCooler_u loa(
            redeclare package Medium = Medium,
            allowFlowReversal=false,
            m_flow_nominal=mBui_flow_nominal,
            show_T=true,
            from_dp=false,
            dp_nominal=6000,
            linearizeFlowResistance=true,
            energyDynamics=Modelica.Fluid.Types.Dynamics.SteadyStateInitial,
            Q_flow_nominal=-1)
            "Aggregate building cooling load"
            annotation (Placement(transformation(extent={{40,40},{20,60}})));
          Buildings.Fluid.Movers.FlowControlled_m_flow pumBui(
            redeclare replaceable package Medium = Medium,
            energyDynamics=Modelica.Fluid.Types.Dynamics.SteadyState,
            allowFlowReversal=false,
            m_flow_nominal=mBui_flow_nominal,
            nominalValuesDefineDefaultPressureCurve=true,
            dp_nominal=6000+9000)
            "Building-side (secondary) pump"
            annotation (Placement(transformation(extent={{80,40},{60,60}})));
          Modelica.Blocks.Sources.CombiTimeTable QCoo(
            table=[
              0,-10E3;
              6,-8E3;
              6,-5E3;
              12,-2E3;
              18,-15E3;
              24,-10E3],
            extrapolation=Modelica.Blocks.Types.Extrapolation.Periodic,
            timeScale=3600)
            "Cooling demand"
            annotation (Placement(transformation(extent={{-100,100},{-80,120}})));
          Modelica.Blocks.Math.Product pro
            "Multiplier to ramp load from zero"
            annotation (Placement(transformation(extent={{-40,60},{-20,80}})));
          Modelica.Blocks.Sources.Ramp ram(
            height=1,
            duration(displayUnit="h")=18000,
            startTime(displayUnit="h")=3600) "Ramp load from zero"
            annotation (Placement(transformation(extent={{-100,60},{-80,80}})));
          Modelica.Blocks.Math.Gain gai(
            k=-1/(cp*dT_nominal))
            "Multiplier gain for calculating m_flow"
            annotation (Placement(transformation(extent={{-40,100},{-20,120}})));
          Buildings.Fluid.Sources.Boundary_pT souBui(
            redeclare package Medium = Medium,
            nPorts=1)
            "Building (secondary) source"
            annotation (Placement(transformation(extent={{128,64},{108,84}})));
        equation
          connect(cooETS.ports_bChiWat[1], pumBui.port_a) annotation (Line(points={{40,
                  -24.6667},{100,-24.6667},{100,50},{80,50}},
                                                    color={0,127,255}));
          connect(pumBui.port_b, loa.port_a)
            annotation (Line(points={{60,50},{40,50}}, color={0,127,255}));
          connect(loa.port_b, cooETS.ports_aChiWat[1]) annotation (Line(points={{20,50},
                  {-20,50},{-20,-24.6667},{20,-24.6667}},
                                                    color={0,127,255}));
          connect(QCoo.y[1], gai.u)
            annotation (Line(points={{-79,110},{-42,110}}, color={0,0,127}));
          connect(gai.y, pumBui.m_flow_in)
            annotation (Line(points={{-19,110},{70,110},{70,62}}, color={0,0,127}));
          connect(ram.y, pro.u2) annotation (Line(points={{-79,70},{-60,70},{-60,64},{-42,
                  64}}, color={0,0,127}));
          connect(QCoo.y[1], pro.u1) annotation (Line(points={{-79,110},{-60,110},{-60,76},
                  {-42,76}}, color={0,0,127}));
          connect(pro.y, loa.u) annotation (Line(points={{-19,70},{50,70},{50,56},{42,56}},
                color={0,0,127}));
          connect(souDis.ports[1], cooETS.port_aSerCoo) annotation (Line(points={{-20,-70},
                  {0,-70},{0,-39.3333},{20,-39.3333}}, color={0,127,255}));
          connect(cooETS.port_bSerCoo, sinDis.ports[1]) annotation (Line(points={{40,
                  -39.3333},{60,-39.3333},{60,-70},{80,-70}},
                                                    color={0,127,255}));
          connect(TSetCHWS.y, cooETS.TSetBuiSup)
            annotation (Line(points={{-59,-30},{19.3333,-30}}, color={0,0,127}));
          connect(pumBui.port_a, souBui.ports[1]) annotation (Line(points={{80,50},{94,50},
                  {94,74},{108,74}}, color={0,127,255}));
          annotation (
            Icon(
              coordinateSystem(
                preserveAspectRatio=false,
                extent={{-100,-100},{100,100}})),
            Diagram(
                coordinateSystem(
                preserveAspectRatio=false,
                extent={{-140,-140},{140,140}})),
            __Dymola_Commands(
              file="modelica://Buildings/Resources/Scripts/Dymola/Experimental/DHC/EnergyTransferStations/Cooling/Examples/Indirect.mos" "Simulate and plot"),
            experiment(
              StartTime=0,
              StopTime=86400,
              Tolerance=1e-06),
            Documentation(info="<html>
<p>
This model provides an example for the indirect cooling energy transfer station model. 
The cooling load ramps up from zero and is modulated according to the QCoo table specification. 
The mass flow rate of chilled water in the building side is varied based on the building load/demand.
</p>
</html>",     revisions="<html>
<ul>
<li>
January 30, 2023:<br/>
Corrected parameterization.
</li>
<li>
March 20, 2022, by Chengnan Shi:<br/>
First implementation.
</li>
</ul>
</html>"));
        end Indirect;
      annotation (Documentation(revisions="<html>
</html>",       info="<html>
<p>This package contains advanced examples illustrating the use of the models in 
<a href=\"modelica://Buildings.Experimental.DHC.EnergyTransferStations.Cooling\">
Buildings.Experimental.DHC.EnergyTransferStations.Cooling</a>.
</p>
</html>"));
      end Examples;
    annotation (Documentation(info="<html>
<p>
This package contains models for energy transfer stations used 
in district cooling systems.
</p>
</html>"));
    end Cooling;

    package Heating "This package contains models for energy transfer stations used in district heating systems"
      extends Modelica.Icons.VariantsPackage;

      model Direct "Direct cooling ETS model for district energy systems with in-building 
  pumping and deltaT control"
        extends estcp.DHC.EnergyTransferStations.BaseClasses.PartialDirect(
          final typ=DHC.Types.DistrictSystemType.HeatingGeneration2to4,
          final have_chiWat=false,
          final have_heaWat=true,
          nPorts_aHeaWat=1,
          nPorts_bHeaWat=1);
      equation
        connect(senTDisRet.port_b, port_bSerHea) annotation (Line(points={{50,200},{160,
                200},{160,-240},{300,-240}}, color={0,127,255}));
        connect(port_aSerHea, senTDisSup.port_a) annotation (Line(points={{-300,-240},
                {-220,-240},{-220,-280},{-180,-280}}, color={0,127,255}));
        connect(ports_aHeaWat[1], senTBuiRet.port_a) annotation (Line(points={{-300,260},
                {-240,260},{-240,200},{-220,200}}, color={0,127,255}));
        connect(senTBuiSup.port_b, ports_bHeaWat[1]) annotation (Line(points={{250,200},
                {260,200},{260,260},{300,260}}, color={0,127,255}));
       annotation (
          defaultComponentName="etsCoo",
          Documentation(info="<html>
<p>
Direct cooling energy transfer station (ETS) model with in-building pumping and 
deltaT control. The design is based on a typical district cooling ETS described 
in ASHRAE's <a href=\"https://www.ashrae.org/technical-resources/bookstore/district-heating-and-cooling-guides\">District Cooling Guide</a>. 
As shown in the figure below, the district and building piping are hydronically 
coupled. The control valve ensures that the return temperature to the district 
cooling network is at or above the minimum specified value. This configuration 
naturally results in a fluctuating building supply tempearture. 
</p>
<p align=\"center\">
<img src=\"modelica://Buildings/Resources/Images/Experimental/DHC/EnergyTransferStations/Cooling/Direct.PNG\" alt=\"DC ETS Direct\"/> 
</p>
<h4>
Reference
</h4>
<p>American Society of Heating, Refrigeration and Air-Conditioning Engineers. (2019). 
Chapter 5: End User Interface. In <i>District Cooling Guide</i>, Second Edition and 
<i>Owner's Guide for Buildings Served by District Cooling</i>. 
</p>
</html>",   revisions="<html>
<ul>
<li>
April 7, 2023, by David Blum:<br/>
First implementation.
</li>
</ul>
</html>"));
      end Direct;

      model Indirect
        "Indirect cooling energy transfer station for district energy systems"
        extends estcp.DHC.EnergyTransferStations.BaseClasses.PartialIndirect(
          QHeaWat_flow_nominal=Q_flow_nominal,
          final typ=DHC.Types.DistrictSystemType.HeatingGeneration2to4,
          final have_chiWat=false,
          final have_heaWat=true,
          Q_flow_nominal(min=0),
          nPorts_aHeaWat=1,
          nPorts_bHeaWat=1);
      equation
        connect(ports_aHeaWat[1], senTBuiRet.port_a) annotation (Line(points={{-300,260},
                {-240,260},{-240,200},{-218,200}}, color={0,127,255}));
        connect(port_aSerHea, senTDisSup.port_a) annotation (Line(points={{-300,-240},
                {-260,-240},{-260,-280},{-220,-280}}, color={0,127,255}));
        connect(senTBuiSup.port_b, ports_bHeaWat[1]) annotation (Line(points={{-36,-204},
                {-60,-204},{-60,180},{220,180},{220,260},{300,260}}, color={0,127,255}));
        connect(senTDisRet.port_b, port_bSerHea) annotation (Line(points={{200,-280},
                {242,-280},{242,-240},{300,-240}}, color={0,127,255}));
        annotation (
          defaultComponentName="etsCoo",
          Documentation(info="<html>
<p>
Indirect cooling energy transfer station (ETS) model that controls the
building chilled water supply temperature by modulating a primary control valve 
on the district supply side. The design is based on a typical district cooling 
ETS described in ASHRAE's <a href=\"https://www.ashrae.org/technical-resources/bookstore/district-heating-and-cooling-guides\">District Cooling Guide</a>. 
As shown in the figure below, the building pumping design (constant/variable) 
is specified on the building side and not within the ETS. 
</p>
<p align=\"center\">
<img src=\"modelica://Buildings/Resources/Images/Experimental/DHC/EnergyTransferStations/Cooling/Indirect.png\" alt=\"DHC.ETS.Indirect\"/>
</p>
<h4>Reference</h4>
<p>
American Society of Heating, Refrigeration and Air-Conditioning Engineers. (2019).
Chapter 5: End User Interface. In <i>District Cooling Guide</i>, Second Edition and 
<i>Owner's Guide for Buildings Served by District Cooling</i>. 
</p>
</html>",   revisions="<html>
<ul>
<li>
April 7, 2023, by David Blum:<br/>
First implementation.
</li>
</ul>
</html>"));
      end Indirect;

      package Examples
        extends Modelica.Icons.ExamplesPackage;

        model Direct "Example model for direct heating energy transfer station 
  with in-building pumping and controlled district return temperature"
          extends Modelica.Icons.Example;
          package Medium=Buildings.Media.Water
            "Water medium";
          parameter Modelica.Units.SI.HeatFlowRate Q_flow_nominal=18000
            "Nominal heating load"
            annotation(Dialog(group="Nominal condition"));
          parameter Modelica.Units.SI.MassFlowRate mBui_flow_nominal=Q_flow_nominal/(cp*(50-40))
            "Nominal mass flow rate of building heating supply"
            annotation(Dialog(group="Nominal condition"));
          parameter Modelica.Units.SI.SpecificHeatCapacity cp=Medium.specificHeatCapacityCp(
            Medium.setState_pTX(
              Medium.p_default,
              Medium.T_default,
              Medium.X_default))
            "Default specific heat capacity of medium";
          estcp.DHC.EnergyTransferStations.Heating.Direct heaETS(
            mBui_flow_nominal=mBui_flow_nominal,
            QHeaWat_flow_nominal=Q_flow_nominal,
            dpConVal_nominal=50,
            dpCheVal_nominal=6000,
            nPorts_bHeaWat=1,
            nPorts_aHeaWat=1) "Energy transfer station"
            annotation (Placement(transformation(extent={{0,-20},{20,0}})));
          Modelica.Blocks.Sources.Constant TSetDisRet_max(k=273.15 + 40)
            "Maximum setpoint temperature for district return"
            annotation (Placement(transformation(extent={{-120,-20},{-100,0}})));
          Buildings.Fluid.Sources.Boundary_pT sinDis(
            redeclare package Medium = Medium,
            p=340000,
            nPorts=1)
            "District-side sink"
            annotation (Placement(transformation(extent={{80,-80},{60,-60}})));
          Buildings.Fluid.Sources.Boundary_pT souDis(
            redeclare package Medium = Medium,
            p=350000,
            use_T_in=true,
            T=280.15,
            nPorts=1)
            "District-side source"
            annotation (Placement(transformation(extent={{-60,-80},{-40,-60}})));
          Modelica.Blocks.Sources.RealExpression TDisSupNoi(y=(273.15 + 50) + 2*sin(
                time*4*3.14/86400))
            "Sinusoidal noise signal for district supply temperature"
            annotation (Placement(transformation(extent={{-120,-76},{-100,-56}})));
          Buildings.Fluid.Movers.FlowControlled_m_flow pum(
            redeclare replaceable package Medium = Medium,
            energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,
            m_flow_nominal=mBui_flow_nominal,
            addPowerToMedium=false,
            nominalValuesDefineDefaultPressureCurve=true,
            constantMassFlowRate=mBui_flow_nominal)
            "Building primary pump"
            annotation (Placement(transformation(extent={{40,20},{60,40}})));
          Buildings.Fluid.HeatExchangers.HeaterCooler_u loa(
            redeclare package Medium = Medium,
            allowFlowReversal=false,
            m_flow_nominal=mBui_flow_nominal,
            show_T=true,
            from_dp=false,
            dp_nominal=100,
            linearizeFlowResistance=true,
            energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,
            Q_flow_nominal=-1)
            "Aggregate building heating load"
            annotation (Placement(transformation(extent={{20,40},{0,60}})));
          Modelica.Blocks.Sources.Ramp ram(
            height=1,
            duration(displayUnit="h") = 3600,
            startTime(displayUnit="h"))
            "Ramp load from zero"
            annotation (Placement(transformation(extent={{-120,80},{-100,100}})));
          Modelica.Blocks.Sources.CombiTimeTable QHea(
            table=[0,100E3; 6,80E3; 6,50E3; 12,20E3; 18,150E3; 24,100E3],
            extrapolation=Modelica.Blocks.Types.Extrapolation.Periodic,
            timeScale=3600) "Heating demand"
            annotation (Placement(transformation(extent={{-120,40},{-100,60}})));
          Modelica.Blocks.Math.Product pro
            "Multiplier to ramp load from zero"
            annotation (Placement(transformation(extent={{-80,60},{-60,80}})));
          Modelica.Blocks.Math.Gain gai(k=1/(cp*(50 - 40)))
            "Multiplier gain for calculating m_flow"
            annotation (Placement(transformation(extent={{0,80},{20,100}})));
        equation
          connect(TSetDisRet_max.y,heaETS. TSetDisRet)
            annotation (Line(points={{-99,-10},{-0.6,-10}}, color={0,0,127}));
          connect(TDisSupNoi.y, souDis.T_in)
            annotation (Line(points={{-99,-66},{-62,-66}}, color={0,0,127}));
          connect(pum.port_b, loa.port_a)
            annotation (Line(points={{60,30},{80,30},{80,50},{20,50}},
              color={0,127,255}));
          connect(ram.y, pro.u1)
            annotation (Line(points={{-99,90},{-92,90},{-92,76},{-82,76}},
              color={0,0,127}));
          connect(QHea.y[1], pro.u2)
            annotation (Line(points={{-99,50},{-92,50},{-92,64},{-82,64}},
              color={0,0,127}));
          connect(pro.y, loa.u)
            annotation (Line(points={{-59,70},{32,70},{32,56},{22,56}},
              color={0,0,127}));
          connect(pro.y, gai.u)
            annotation (Line(points={{-59,70},{-40,70},{-40,90},{-2,90}},
              color={0,0,127}));
          connect(gai.y, pum.m_flow_in)
            annotation (Line(points={{21,90},{50,90},{50,42}}, color={0,0,127}));
          connect(heaETS.ports_bHeaWat[1], pum.port_a) annotation (Line(points={{20,-1.33333},
                  {34,-1.33333},{34,30},{40,30}}, color={0,127,255}));
          connect(heaETS.ports_aHeaWat[1], loa.port_b) annotation (Line(points={{0,-1.33333},
                  {-26,-1.33333},{-26,0},{-40,0},{-40,50},{0,50}}, color={0,127,255}));
          connect(heaETS.port_aSerHea, souDis.ports[1]) annotation (Line(points={{0,-18},
                  {-20,-18},{-20,-70},{-40,-70}}, color={0,127,255}));
          connect(sinDis.ports[1], heaETS.port_bSerHea) annotation (Line(points={{60,-70},
                  {40,-70},{40,-18},{20,-18}}, color={0,127,255}));
          annotation (
            Icon(
              coordinateSystem(
                preserveAspectRatio=false)),
            Diagram(
                coordinateSystem(
                preserveAspectRatio=false,
                extent={{-160,-120},{160,120}})),
            __Dymola_Commands(
              file="modelica://Buildings/Resources/Scripts/Dymola/Experimental/DHC/EnergyTransferStations/Heating/Examples/Direct.mos" "Simulate and plot"),
            experiment(
              StartTime=0,
              StopTime=86400,
              Tolerance=1e-06),
            Documentation(info="<html>
<p>This model provides an example for the direct heating energy transfer station 
model, which contains in-building pumping and controls the district return 
temperature. The building's primary variable speed pump is modulated depending 
on the total heating load and prescribed deltaT. Variation in the district 
supply temperature is modeled as a sinusoidal signal to test the response of system.
</p>
</html>",     revisions="<html>
<ul>
<li>
April 7, 2023, by David Blum:<br/>
First implementation.
</li>
</ul>
</html>"));
        end Direct;

        model Indirect "Example model for indirect heating energy transfer station 
  with a closed chilled water loop on the building side"
          extends Modelica.Icons.Example;
          package Medium=Buildings.Media.Water
            "Water medium";
          parameter Modelica.Units.SI.HeatFlowRate QHea_flow_nominal = 19000
            "Heating design flow rate";
          parameter Modelica.Units.SI.TemperatureDifference dT_nominal = 50-40
            "Design temperature difference";
          parameter Modelica.Units.SI.MassFlowRate mBui_flow_nominal=QHea_flow_nominal/dT_nominal/cp
            "Nominal mass flow rate of building heating supply"
            annotation(Dialog(group="Nominal condition"));
          parameter Modelica.Units.SI.SpecificHeatCapacity cp=Medium.specificHeatCapacityCp(
            Medium.setState_pTX(
              Medium.p_default,
              Medium.T_default,
              Medium.X_default))
            "Default specific heat capacity of medium";
          estcp.DHC.EnergyTransferStations.Heating.Indirect heaETS(
            QHeaWat_flow_nominal=QHea_flow_nominal,
            mDis_flow_nominal=mBui_flow_nominal,
            mBui_flow_nominal=mBui_flow_nominal,
            dpConVal_nominal=9000,
            dp1_nominal=9000,
            dp2_nominal=9000,
            Q_flow_nominal=QHea_flow_nominal,
            T_a1_nominal=328.15,
            T_a2_nominal=313.15,
            k=0.1,
            Ti=40,
            yMax=1,
            yMin=0.01,
            controllerType=Modelica.Blocks.Types.SimpleController.PI,
            nPorts_aHeaWat=1,
            nPorts_bHeaWat=1) "Direct heating energy transfer station"
            annotation (Placement(transformation(extent={{20,-40},{40,-20}})));
          Buildings.Fluid.Sources.Boundary_pT souDis(
            redeclare package Medium = Medium,
            p(displayUnit="Pa") = 300000 + 2*9000,
            use_T_in=false,
            T=328.15,
            nPorts=1)
            "District (primary) source"
            annotation (Placement(transformation(extent={{-40,-80},{-20,-60}})));
          Buildings.Fluid.Sources.Boundary_pT sinDis(
            redeclare package Medium = Medium,
            T=314.15,
            nPorts=1)
            "District (primary) sink"
            annotation (Placement(transformation(extent={{100,-80},{80,-60}})));
          Modelica.Blocks.Sources.Constant TSetHWS(k=273.15 + 50)
            "Setpoint temperature for building heating water supply"
            annotation (Placement(transformation(extent={{-80,-40},{-60,-20}})));
          Buildings.Fluid.HeatExchangers.HeaterCooler_u loa(
            redeclare package Medium = Medium,
            allowFlowReversal=false,
            m_flow_nominal=mBui_flow_nominal,
            show_T=true,
            from_dp=false,
            dp_nominal=6000,
            linearizeFlowResistance=true,
            energyDynamics=Modelica.Fluid.Types.Dynamics.SteadyStateInitial,
            Q_flow_nominal=-1) "Aggregate building heating load"
            annotation (Placement(transformation(extent={{40,40},{20,60}})));
          Buildings.Fluid.Movers.FlowControlled_m_flow pumBui(
            redeclare replaceable package Medium = Medium,
            energyDynamics=Modelica.Fluid.Types.Dynamics.SteadyState,
            allowFlowReversal=false,
            m_flow_nominal=mBui_flow_nominal,
            nominalValuesDefineDefaultPressureCurve=true,
            dp_nominal=6000+9000)
            "Building-side (secondary) pump"
            annotation (Placement(transformation(extent={{80,40},{60,60}})));
          Modelica.Blocks.Sources.CombiTimeTable QHea(
            table=[0,10E3; 6,8E3; 6,5E3; 12,2E3; 18,15E3; 24,10E3],
            extrapolation=Modelica.Blocks.Types.Extrapolation.Periodic,
            timeScale=3600) "Heating demand"
            annotation (Placement(transformation(extent={{-100,100},{-80,120}})));
          Modelica.Blocks.Math.Product pro
            "Multiplier to ramp load from zero"
            annotation (Placement(transformation(extent={{-40,60},{-20,80}})));
          Modelica.Blocks.Sources.Ramp ram(
            height=1,
            duration(displayUnit="h")=18000,
            startTime(displayUnit="h")=3600) "Ramp load from zero"
            annotation (Placement(transformation(extent={{-100,60},{-80,80}})));
          Modelica.Blocks.Math.Gain gai(k=1/(cp*dT_nominal))
            "Multiplier gain for calculating m_flow"
            annotation (Placement(transformation(extent={{-40,100},{-20,120}})));
          Buildings.Fluid.Sources.Boundary_pT souBui(
            redeclare package Medium = Medium,
            nPorts=1)
            "Building (secondary) source"
            annotation (Placement(transformation(extent={{128,64},{108,84}})));
        equation
          connect(pumBui.port_b, loa.port_a)
            annotation (Line(points={{60,50},{40,50}}, color={0,127,255}));
          connect(QHea.y[1], gai.u)
            annotation (Line(points={{-79,110},{-42,110}}, color={0,0,127}));
          connect(gai.y, pumBui.m_flow_in)
            annotation (Line(points={{-19,110},{70,110},{70,62}}, color={0,0,127}));
          connect(ram.y, pro.u2) annotation (Line(points={{-79,70},{-60,70},{-60,64},{-42,
                  64}}, color={0,0,127}));
          connect(QHea.y[1], pro.u1) annotation (Line(points={{-79,110},{-60,110},{-60,76},
                  {-42,76}}, color={0,0,127}));
          connect(pro.y, loa.u) annotation (Line(points={{-19,70},{50,70},{50,56},{42,56}},
                color={0,0,127}));
          connect(pumBui.port_a, souBui.ports[1]) annotation (Line(points={{80,50},{94,50},
                  {94,74},{108,74}}, color={0,127,255}));
          connect(TSetHWS.y, heaETS.TSetBuiSup)
            annotation (Line(points={{-59,-30},{19.3333,-30}}, color={0,0,127}));
          connect(souDis.ports[1], heaETS.port_aSerHea) annotation (Line(points={{-20,-70},
                  {14,-70},{14,-38},{20,-38}}, color={0,127,255}));
          connect(sinDis.ports[1], heaETS.port_bSerHea) annotation (Line(points={{80,-70},
                  {60,-70},{60,-38},{40,-38}}, color={0,127,255}));
          connect(loa.port_b, heaETS.ports_aHeaWat[1]) annotation (Line(points={{20,50},
                  {-20,50},{-20,-21.3333},{20,-21.3333}}, color={0,127,255}));
          connect(heaETS.ports_bHeaWat[1], pumBui.port_a) annotation (Line(points={{40,
                  -21.3333},{62,-21.3333},{62,-22},{100,-22},{100,50},{80,50}},
                                                                      color={0,127,255}));
          annotation (
            Icon(
              coordinateSystem(
                preserveAspectRatio=false,
                extent={{-100,-100},{100,100}})),
            Diagram(
                coordinateSystem(
                preserveAspectRatio=false,
                extent={{-140,-140},{140,140}})),
            __Dymola_Commands(
              file="modelica://Buildings/Resources/Scripts/Dymola/Experimental/DHC/EnergyTransferStations/Heating/Examples/Indirect.mos" "Simulate and plot"),
            experiment(
              StartTime=0,
              StopTime=86400,
              Tolerance=1e-06),
            Documentation(info="<html>
<p>
This model provides an example for the indirect heating energy transfer station model. 
The heating load ramps up from zero and is modulated according to the QHea table specification. 
The mass flow rate of heating water in the building side is varied based on the building load/demand.
</p>
</html>",     revisions="<html>
<ul>
<li>
April 7, 2023, by David Blum:<br/>
First implementation.
</li>
</ul>
</html>"));
        end Indirect;
      annotation (Documentation(revisions="<html>
</html>",       info="<html>
<p>This package contains advanced examples illustrating the use of the models in 
<a href=\"modelica://Buildings.Experimental.DHC.EnergyTransferStations.Cooling\">
Buildings.Experimental.DHC.EnergyTransferStations.Cooling</a>.
</p>
</html>"));
      end Examples;
    annotation (Documentation(info="<html>
<p>
This package contains models for energy transfer stations used 
in district heating systems.
</p>
</html>"));
    end Heating;

    package Types
      "Package with type definitions"
      extends Modelica.Icons.TypesPackage;
      type ConnectionConfiguration = enumeration(
          TwoWayValve
        "Two-way valve on district side",
          Pump
        "Pump on district side")
        "Enumeration for the type of connection with the district network"
        annotation (Documentation(info="<html>
<p>
Enumeration to define the type of connection with the district network.
<br/>
</p>
<table border=\"1\" summary=\"Explanation of the enumeration\">
<tr>
  <th>
  Enumeration
  </th>
  <th>
  Description
  </th>
</tr>
<tr>
  <td>
  TwoWayValve
  </td>
  <td>
  Use this setting in case of an active network with a two-way valve on
  the district side.
  </td>
</tr>
<tr>
  <td>
  Pump
  </td>
  <td>
  Use this setting in case of a passive network with a pump on the
  district side.
  </td>
</tr>
</table>
</html>",    revisions="<html>
<ul>
<li>
September 2, 2020, by Jianjun Hu:<br/>
First implementation.
</li>
</ul>
</html>"));
      annotation (
        preferredView="info",
        Documentation(
          info="<html>
<p>
This package contains type definitions.
</p>
</html>"));
    end Types;

    package BaseClasses "Package with base classes"
      extends Modelica.Icons.BasesPackage;

      model CollectorDistributor
        "Model of a collector/distributor with zero pressure drop between connections"
        extends estcp.DHC.Networks.BaseClasses.PartialDistribution2Pipe(
          mDis_flow_nominal=sum(mCon_flow_nominal),
          final mDisCon_flow_nominal=fill(mDis_flow_nominal, nCon),
          final mEnd_flow_nominal=mDis_flow_nominal,
          final allowFlowReversal=true,
          final iConDpSen=-1,
          redeclare Connection2PipeLossless con[nCon],
          redeclare model Model_pipDis =
              Buildings.Fluid.FixedResistances.LosslessPipe);
        annotation (
          defaultComponentName="colDis",
          Documentation(
            info="<html>
<p>
This model represents a collector/distributor which connects
<code>nCon</code> hydronic circuits in parallel.
The pressure drop between each connection is assumed negligible
compared to the pressure drop in each circuit, and is set to zero
in the model.
By default,
</p>
<ul>
<li>
there is no bypass flow (which can be added later by connecting
the ports <code>port_bDisSup</code> and <code>port_aDisRet</code>),
</li>
<li>
the nominal distribution mass flow rate
<code>mDis_flow_nominal</code> is equal to the sum
of the nominal mass flow rate in each circuit.
However, this parameter assigment is not final and it can be set
for instance to a higher value to represent a primary overflow
in a supply through loop.
</li>
</ul>
</html>",   revisions="<html>
<ul>
<li>
July 31, 2020, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>"));
      end CollectorDistributor;

      model Connection2PipeLossless
        "Model of a lossless connection to a collector/distributor"
        extends estcp.DHC.Networks.BaseClasses.PartialConnection2Pipe(
          redeclare model Model_pipDisSup =
              Buildings.Fluid.FixedResistances.LosslessPipe,
          redeclare model Model_pipDisRet =
              Buildings.Fluid.FixedResistances.LosslessPipe,
          redeclare model Model_pipCon =
              Buildings.Fluid.FixedResistances.LosslessPipe);
        annotation (
          Documentation(
            info="<html>
<p>
This is a model of a connection for a two-pipe system using 
a pipe model with no flow resistance, no heat loss and no transport delay. 
</p>
</html>",   revisions="<html>
<ul>
<li>
February 21, 2020, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>"));
      end Connection2PipeLossless;

      model Junction
        "Fluid junction with zero pressure drop"
        extends Buildings.Fluid.FixedResistances.Junction(
          energyDynamics=Modelica.Fluid.Types.Dynamics.SteadyState,
          final dp_nominal=fill(0, 3),
          final from_dp=false);
        annotation (
          Icon(
            coordinateSystem(
              preserveAspectRatio=false)),
          Diagram(
            coordinateSystem(
              preserveAspectRatio=false)),
          Documentation(
            info="<html>
<p>
This is a model of a fluid junction with zero pressure drop.
By default the model is configured in steady-state. 
</p>
</html>"));
      end Junction;

      model PartialDirect
        "Partial direct ETS model for district energy systems with in-building pumping and deltaT control"
        extends estcp.DHC.EnergyTransferStations.BaseClasses.PartialETS(
          final have_weaBus=false,
          final have_hotWat=false,
          final have_eleHea=false,
          final nFue=0,
          final have_eleCoo=false,
          final have_pum=false,
          final have_fan=false);
        // Mass flow rate
        parameter Modelica.Units.SI.MassFlowRate mBui_flow_nominal(
          final min=0)
          "Nominal mass flow rate of building side"
          annotation(Dialog(group="Nominal condition"));
        // Pressure drops
        parameter Modelica.Units.SI.PressureDifference dpConVal_nominal(
          final min=0,
          displayUnit="Pa")=50
          "Nominal pressure drop in the control valve"
          annotation(Dialog(group="Nominal condition"));
        parameter Modelica.Units.SI.PressureDifference dpCheVal_nominal(
          final min=0,
          displayUnit="Pa")=6000
          "Nominal pressure drop in the check valve"
          annotation(Dialog(group="Nominal condition"));
        // Controller parameters
        parameter Modelica.Blocks.Types.SimpleController controllerType=Modelica.Blocks.Types.SimpleController.PI
          "Type of controller"
          annotation (Dialog(group="PID controller"));
        parameter Real k(
          final min=0,
          final unit="1")=0.1
          "Gain of controller"
          annotation (Dialog(group="PID controller"));
        parameter Modelica.Units.SI.Time Ti(
          final min=Modelica.Constants.small)=60
          "Time constant of integrator block"
          annotation (Dialog(group="PID controller",enable=controllerType == Buildings.Controls.OBC.CDL.Types.SimpleController.PI or controllerType == Buildings.Controls.OBC.CDL.Types.SimpleController.PID));
        parameter Modelica.Units.SI.Time Td(
          final min=0)=0.1
          "Time constant of derivative block"
          annotation (Dialog(group="PID controller",enable=controllerType == Buildings.Controls.OBC.CDL.Types.SimpleController.PD or controllerType == Buildings.Controls.OBC.CDL.Types.SimpleController.PID));
        parameter Real yMax=1
          "Upper limit of output"
          annotation (Dialog(group="PID controller"));
        parameter Real yMin=0
          "Lower limit of output"
          annotation (Dialog(group="PID controller"));
        // Advanced parameters
        parameter Modelica.Fluid.Types.Dynamics energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial
          "Type of energy balance: dynamic (3 initialization options) or steady state"
          annotation (Dialog(tab="Advanced"));
        parameter Real bandwidth=0.2
          "Bandwidth around reference signal for on/off controller"
          annotation (Dialog(tab="Advanced"));

        Modelica.Blocks.Interfaces.RealInput TSetDisRet(
           final unit="K",
           displayUnit="degC")
          "Setpoint for the district return temperature (min for cooling, max for heating)"
          annotation (Placement(transformation(extent={{-338,-20},{-298,20}})));
        Modelica.Blocks.Interfaces.RealOutput Q_flow(
          final quantity="HeatFlowRate",
          final unit="W",
          displayUnit="kW")
          "Measured heating demand at the ETS"
          annotation (Placement(
              transformation(extent={{300,-140},{340,-100}}),iconTransformation(
                extent={{300,-140},{340,-100}})));
        Modelica.Blocks.Interfaces.RealOutput Q(
          final quantity="Energy",
          final unit="J",
          displayUnit="kWh")
          "Measured energy consumption at the ETS"
           annotation (Placement(transformation(
                extent={{300,-180},{340,-140}}), iconTransformation(extent={{300,-130},
                  {340,-90}})));
        Buildings.Fluid.Sensors.TemperatureTwoPort senTDisSup(
          redeclare final package Medium=MediumSer,
          final m_flow_nominal=mBui_flow_nominal)
          "District supply temperature sensor"
          annotation (Placement(transformation(extent={{-180,-290},{-160,-270}})));
        Buildings.Fluid.Sensors.MassFlowRate senMasFlo(
          redeclare final package Medium=MediumSer)
          "District supply mass flow rate sensor"
          annotation (Placement(transformation(extent={{-120,-290},{-100,-270}})));
        Buildings.Fluid.FixedResistances.Junction jun(
          redeclare final package Medium=MediumSer,
          final energyDynamics=energyDynamics,
          final m_flow_nominal=mBui_flow_nominal*{1,-1,1},
          final dp_nominal={0,0,0})
          "Bypass junction"
          annotation (Placement(transformation(extent={{-60,-270},{-40,-290}})));
        Buildings.Fluid.Sensors.TemperatureTwoPort senTDisRet(
          redeclare final package Medium=MediumSer,
          final m_flow_nominal=mBui_flow_nominal)
          "District return temperature sensor"
          annotation (Placement(transformation(extent={{30,190},{50,210}})));
        Buildings.Fluid.FixedResistances.Junction spl(
          redeclare final package Medium=MediumSer,
          final energyDynamics=energyDynamics,
          final m_flow_nominal=mBui_flow_nominal*{1,-1,-1},
          final dp_nominal={0,0,0})
          "Bypass junction, splitter"
          annotation (Placement(transformation(extent={{-60,190},{-40,210}})));
        Buildings.Fluid.Actuators.Valves.TwoWayEqualPercentage conVal(
          redeclare final package Medium=MediumSer,
          final m_flow_nominal=mBui_flow_nominal,
          final dpValve_nominal=dpConVal_nominal,
          use_inputFilter=true,
          riseTime(displayUnit="s") = 60)
          "Control valve"
          annotation (Placement(transformation(extent={{-10,190},{10,210}})));
        Buildings.Fluid.Sensors.TemperatureTwoPort senTBuiRet(
          redeclare final package Medium = MediumSer,
          final m_flow_nominal=mBui_flow_nominal)
          "Building return temperature sensor"
          annotation (Placement(transformation(extent={{-220,190},{-200,210}})));
        Buildings.Fluid.FixedResistances.CheckValve cheVal(
          redeclare final package Medium = MediumSer,
          final m_flow_nominal=mBui_flow_nominal,
          final dpValve_nominal=dpCheVal_nominal)
          "Check valve (backflow preventer)" annotation (Placement(
              transformation(
              extent={{10,-10},{-10,10}},
              rotation=90,
              origin={-50,-10})));
        Modelica.Blocks.Math.Add dTDis(
          final k1=-1)
          "Temperature difference on the district side"
          annotation (Placement(transformation(extent={{80,-114},{100,-94}})));
        Modelica.Blocks.Math.Product pro
          "Product"
          annotation (Placement(transformation(extent={{120,-120},{140,-100}})));
        Modelica.Blocks.Math.Gain cp(
          final k=cp_default)
          "Specific heat multiplier to calculate heat flow rate"
          annotation (Placement(transformation(extent={{180,-120},{200,-100}})));
        Modelica.Blocks.Continuous.Integrator int(
          final k=1)
          "Integration"
          annotation (Placement(transformation(extent={{260,-170},{280,-150}})));
        Buildings.Controls.OBC.CDL.Reals.PID con(
          final controllerType=controllerType,
          final k=k,
          final Ti=Ti,
          final Td=Td,
          final yMax=yMax,
          final yMin=yMin) "District return temperature controller" annotation
          (Placement(transformation(extent={{-220,240},{-200,260}})));
        Buildings.Fluid.Sensors.TemperatureTwoPort senTBuiSup(
          redeclare final package Medium = MediumSer,
          final m_flow_nominal=mBui_flow_nominal)
          "Building supply temperature sensor"
          annotation (Placement(transformation(extent={{230,190},{250,210}})));
      protected
        final parameter MediumSer.ThermodynamicState sta_default=MediumSer.setState_pTX(
          T=MediumSer.T_default,
          p=MediumSer.p_default,
          X=MediumSer.X_default)
          "Medium state at default properties";
        final parameter Modelica.Units.SI.SpecificHeatCapacity cp_default=MediumSer.specificHeatCapacityCp(
          sta_default)
          "Specific heat capacity of the fluid";
      equation
        connect(senTDisSup.port_b, senMasFlo.port_a)
          annotation (Line(points={{-160,-280},{-120,-280}}, color={0,127,255}));
        connect(senMasFlo.port_b, jun.port_1)
          annotation (Line(points={{-100,-280},{-60,-280}}, color={0,127,255}));
        connect(senTBuiRet.port_b, spl.port_1)
          annotation (Line(points={{-200,200},{-60,200}}, color={0,127,255}));
        connect(spl.port_2, conVal.port_a)
          annotation (Line(points={{-40,200},{-10,200}}, color={0,127,255}));
        connect(senMasFlo.m_flow, pro.u2)
          annotation (Line(points={{-110,-269},{-110,-192},
                {90,-192},{90,-116},{118,-116}}, color={0,0,127}));
        connect(pro.y, cp.u)
          annotation (Line(points={{141,-110},{178,-110}}, color={0,0,127}));
        connect(cp.y, Q_flow)
          annotation (Line(points={{201,-110},{248,-110},{248,-120},{320,-120}},
                                                           color={0,0,127}));
        connect(cp.y, int.u)
          annotation (Line(points={{201,-110},{248,-110},{248,-160},{258,-160}},
                             color={0,0,127}));
        connect(int.y, Q)
          annotation (Line(points={{281,-160},{320,-160}}, color={0,0,127}));
        connect(dTDis.y, pro.u1)
          annotation (Line(points={{101,-104},{118,-104}},color={0,0,127}));
        connect(conVal.port_b, senTDisRet.port_a)
          annotation (Line(points={{10,200},{30,200}}, color={0,127,255}));
        connect(senTDisRet.T,dTDis. u1)
          annotation (Line(points={{40,211},{40,226},{60,226},{60,-98},{78,-98}},
                                                                color={0,0,127}));
        connect(senTDisSup.T,dTDis. u2)
          annotation (Line(points={{-170,-269},{-172,-269},{-172,-184},{60,-184},{60,-110},
                {78,-110}},                                            color={0,0,127}));
        connect(TSetDisRet, con.u_s)
          annotation (Line(points={{-318,0},{-272,0},{-272,250},{-222,250}},
                                                                           color={0,0,127}));
        connect(senTBuiRet.T, con.u_m)
          annotation (Line(points={{-210,211},{-210,238}},color={0,0,127}));
        connect(jun.port_2, senTBuiSup.port_a)
          annotation (Line(points={{-40,-280},{220,-280},{220,200},{230,200}}, color={0,127,255}));
        connect(spl.port_3, cheVal.port_a)
          annotation (Line(points={{-50,190},{-50,0}}, color={0,127,255}));
        connect(cheVal.port_b, jun.port_3)
          annotation (Line(points={{-50,-20},{-50,-270}}, color={0,127,255}));
        connect(con.y, conVal.y)
          annotation (Line(points={{-198,250},{0,250},{0,212}},
                                                              color={0,0,127}));
       annotation (
          defaultComponentName="etsCoo",
          Documentation(info="<html>
<p>
Direct cooling energy transfer station (ETS) model with in-building pumping and
deltaT control. The design is based on a typical district cooling ETS described
in ASHRAE's <a href=\"https://www.ashrae.org/technical-resources/bookstore/district-heating-and-cooling-guides\">District Cooling Guide</a>.
As shown in the figure below, the district and building piping are hydronically
coupled. The control valve ensures that the return temperature to the district
cooling network is at or above the minimum specified value. This configuration
naturally results in a fluctuating building supply tempearture.
</p>
<p align=\"center\">
<img src=\"modelica://Buildings/Resources/Images/Experimental/DHC/EnergyTransferStations/Cooling/Direct.PNG\" alt=\"DC ETS Direct\"/>
</p>
<h4>
Reference
</h4>
<p>American Society of Heating, Refrigeration and Air-Conditioning Engineers. (2019).
Chapter 5: End User Interface. In <i>District Cooling Guide</i>, Second Edition and
<i>Owner's Guide for Buildings Served by District Cooling</i>.
</p>
</html>",   revisions="<html>
<ul>
<li>
April 7, 2023, by David Blum:<br/>
Changed to partial base class for direct so can extend to heating and cooling ETS.
</li>
<li>
January 11, 2023, by Michael Wetter:<br/>
Changed controls to use CDL. Changed PID to PI as default for controller.
</li>
<li>
January 2, 2023, by Kathryn Hinkelman:<br/>
Set pressure drops at junctions to 0 and removed parameter <code>dp_nominal</code>
</li>
<li>
December 28, 2022, by Kathryn Hinkelman:<br/>
Simplified the control implementation for the district return stream. Improved default control parameters.
</li>
<li>
December 23, 2022, by Kathryn Hinkelman:<br/>
Removed extraneous <code>m*_flow_nominal</code> parameters because
<code>mBui_flow_nominal</code> can be used across all components.
This is for <a href=\"https://github.com/lbl-srg/modelica-buildings/issues/2912\">#2912</a>.
</li>
<li>
November 11, 2022, by Michael Wetter:<br/>
Changed check valve to use version of <code>Buildings</code> library, and hence no outer <code>system</code> is needed.
</li>
<li>March 20, 2022, by Chengnan Shi:<br/>Update with base class partial model and standard PI control.</li>
<li>Novermber 13, 2019, by Kathryn Hinkelman:<br/>First implementation. </li>
</ul>
</html>"));
      end PartialDirect;

      partial model PartialETS
        "Partial class for modeling an energy transfer station"
        import TypDisSys=estcp.DHC.Types.DistrictSystemType
          "District system type enumeration";
        replaceable package MediumSer=Buildings.Media.Water
          constrainedby Modelica.Media.Interfaces.PartialMedium
          "Service side medium";
        replaceable package MediumSerHea_a=Buildings.Media.Water
          constrainedby Modelica.Media.Interfaces.PartialMedium
          "Service side medium at heating inlet"
          annotation(Dialog(enable=
            typ == TypDisSys.CombinedGeneration1 or
            typ == TypDisSys.HeatingGeneration1));
        replaceable package MediumBui=Buildings.Media.Water
          constrainedby Modelica.Media.Interfaces.PartialMedium
          "Building side medium";
        parameter TypDisSys typ = TypDisSys.CombinedGeneration2to4
          "Type of district system"
          annotation (Evaluate=true, Dialog(group="Configuration"));
        parameter Integer nPorts_aHeaWat=0
          "Number of heating water return ports"
          annotation (Evaluate=true,Dialog(group="Configuration", connectorSizing=true));
        parameter Integer nPorts_bHeaWat=0
          "Number of heating water supply ports"
          annotation (Evaluate=true,Dialog(group="Configuration", connectorSizing=true));
        parameter Integer nPorts_aChiWat=0
          "Number of chilled water return ports"
          annotation (Evaluate=true,Dialog(group="Configuration", connectorSizing=true));
        parameter Integer nPorts_bChiWat=0
          "Number of chilled water supply ports"
          annotation (Evaluate=true,Dialog(group="Configuration", connectorSizing=true));
        parameter Boolean have_heaWat=false
          "Set to true if the ETS supplies heating water"
          annotation (Evaluate=true, Dialog(group="Configuration"));
        parameter Boolean have_hotWat=false
          "Set to true if the ETS supplies hot water"
          annotation (Evaluate=true, Dialog(group="Configuration"));
        parameter Boolean have_chiWat=false
          "Set to true if the ETS supplies chilled water"
          annotation (Evaluate=true, Dialog(group="Configuration"));
        parameter Boolean have_fan=false
          "Set to true if fan power is computed"
          annotation (Evaluate=true, Dialog(group="Configuration"));
        parameter Boolean have_pum=false
          "Set to true if pump power is computed"
          annotation (Evaluate=true, Dialog(group="Configuration"));
        parameter Boolean have_eleHea=false
          "Set to true if the ETS has electric heating system"
          annotation (Evaluate=true, Dialog(group="Configuration"));
        parameter Integer nFue=0
          "Number of fuel types (0 means no combustion system)"
          annotation (Evaluate=true, Dialog(group="Configuration"));
        parameter Boolean have_eleCoo=false
          "Set to true if the ETS has electric cooling system"
          annotation (Evaluate=true, Dialog(group="Configuration"));
        parameter Boolean have_weaBus=false
          "Set to true to use a weather bus"
          annotation (Evaluate=true, Dialog(group="Configuration"));
        parameter Boolean allowFlowReversalSer=false
          "Set to true to allow flow reversal on service side"
          annotation (Dialog(tab="Assumptions"),Evaluate=true);
        parameter Boolean allowFlowReversalBui=false
          "Set to true to allow flow reversal on building side"
          annotation (Dialog(tab="Assumptions"),Evaluate=true);
        parameter Modelica.Units.SI.HeatFlowRate QHeaWat_flow_nominal(min=0) = 0
          "Nominal capacity of heating system (>=0)"
          annotation (Dialog(group="Nominal condition", enable=have_heaWat));
        parameter Modelica.Units.SI.HeatFlowRate QHotWat_flow_nominal(min=0) = 0
          "Nominal capacity of hot water production system (>=0)"
          annotation (Dialog(group="Nominal condition", enable=have_hotWat));
        parameter Modelica.Units.SI.HeatFlowRate QChiWat_flow_nominal(max=0) = 0
          "Nominal capacity of cooling system (<=0)"
          annotation (Dialog(group="Nominal condition", enable=have_chiWat));
        parameter Buildings.Fluid.Data.Fuels.Generic fue[nFue]
          "Fuel type"
           annotation (choicesAllMatching = true, Dialog(enable=nFue>0));
        // IO CONNECTORS
        Modelica.Fluid.Interfaces.FluidPorts_a ports_aHeaWat[nPorts_aHeaWat](
          redeclare each package Medium=MediumBui,
          each m_flow(
            min=
              if allowFlowReversalBui then
                -Modelica.Constants.inf
              else
                0),
          each h_outflow(
            start=MediumBui.h_default,
            nominal=MediumBui.h_default)) if have_heaWat
          "Fluid connectors for heating water return (from building)"
          annotation (Placement(transformation(extent={{-310,220},{-290,300}}),
            iconTransformation(extent={{-310,220},{-290,300}})));
        Modelica.Fluid.Interfaces.FluidPorts_b ports_bHeaWat[nPorts_bHeaWat](
          redeclare each package Medium=MediumBui,
          each m_flow(
            max=
              if allowFlowReversalBui then
                +Modelica.Constants.inf
              else
                0),
          each h_outflow(
            start=MediumBui.h_default,
            nominal=MediumBui.h_default)) if have_heaWat
          "Fluid connectors for heating water supply (to building)"
          annotation (Placement(transformation(extent={{290,220},{310,300}}),
            iconTransformation(extent={{290,220},{310,300}})));
        Modelica.Fluid.Interfaces.FluidPorts_a ports_aChiWat[nPorts_aChiWat](
          redeclare each package Medium=MediumBui,
          each m_flow(
            min=
              if allowFlowReversalBui then
                -Modelica.Constants.inf
              else
                0),
          each h_outflow(
            start=MediumBui.h_default,
            nominal=MediumBui.h_default)) if have_chiWat
          "Fluid connectors for chilled water return (from building)"
          annotation (Placement(transformation(extent={{-310,160},{-290,240}}),
            iconTransformation(extent={{-310,120},{-290,200}})));
        Modelica.Fluid.Interfaces.FluidPorts_b ports_bChiWat[nPorts_bChiWat](
          redeclare each package Medium=MediumBui,
          each m_flow(
            max=
              if allowFlowReversalBui then
                +Modelica.Constants.inf
              else
                0),
          each h_outflow(
            start=MediumBui.h_default,
            nominal=MediumBui.h_default)) if have_chiWat
          "Fluid connectors for chilled water supply (to building)"
          annotation (Placement(transformation(extent={{290,160},{310,240}}),
            iconTransformation(extent={{290,120},{310,200}})));
        Modelica.Fluid.Interfaces.FluidPort_a port_aSerAmb(
          redeclare package Medium = MediumSer,
          m_flow(min=if allowFlowReversalSer then -Modelica.Constants.inf else 0),
          h_outflow(start=MediumSer.h_default, nominal=MediumSer.h_default))
       if typ == TypDisSys.CombinedGeneration5
          "Fluid connector for ambient water service supply line"
          annotation (
            Placement(transformation(extent={{-310,-210},{-290,-190}}),
              iconTransformation(extent={{-310,-210},{-290,-190}})));
        Modelica.Fluid.Interfaces.FluidPort_b port_bSerAmb(
          redeclare package Medium = MediumSer,
          m_flow(max=if allowFlowReversalSer then +Modelica.Constants.inf else 0),
          h_outflow(start=MediumSer.h_default, nominal=MediumSer.h_default))
       if typ == TypDisSys.CombinedGeneration5
          "Fluid connector for ambient water service return line"
          annotation (
            Placement(transformation(extent={{290,-210},{310,-190}}),
              iconTransformation(extent={{290,-210},{310,-190}})));
        Modelica.Fluid.Interfaces.FluidPort_a port_aSerHea(
          redeclare package Medium = MediumSerHea_a,
          m_flow(min=if allowFlowReversalSer then -Modelica.Constants.inf else 0),
          h_outflow(start=MediumSerHea_a.h_default, nominal=MediumSerHea_a.h_default))
       if typ <> TypDisSys.Cooling and
          typ <> TypDisSys.CombinedGeneration5
          "Fluid connector for heating service supply line"
          annotation (Placement(
            transformation(extent={{-310,-250},{-290,-230}}), iconTransformation(
              extent={{-310,-250},{-290,-230}})));
        Modelica.Fluid.Interfaces.FluidPort_b port_bSerHea(
          redeclare package Medium = MediumSer,
          m_flow(max=if allowFlowReversalSer then +Modelica.Constants.inf else 0),
          h_outflow(start=MediumSer.h_default, nominal=MediumSer.h_default))
       if typ <> TypDisSys.Cooling and
          typ <> TypDisSys.CombinedGeneration5
          "Fluid connector for heating service return line"
          annotation (Placement(
              transformation(extent={{290,-250},{310,-230}}), iconTransformation(
                extent={{290,-250},{310,-230}})));
        Modelica.Fluid.Interfaces.FluidPort_a port_aSerCoo(
          redeclare package Medium = MediumSer,
          m_flow(min=if allowFlowReversalSer then -Modelica.Constants.inf else 0),
          h_outflow(start=MediumSer.h_default, nominal=MediumSer.h_default))
       if typ == TypDisSys.CombinedGeneration1 or
          typ == TypDisSys.CombinedGeneration2to4 or
          typ == TypDisSys.Cooling
          "Fluid connector for cooling service supply line"
          annotation (Placement(transformation(extent={{-310,-290},{-290,-270}})));
        Modelica.Fluid.Interfaces.FluidPort_b port_bSerCoo(
          redeclare package Medium = MediumSer,
          m_flow(max=if allowFlowReversalSer then +Modelica.Constants.inf else 0),
          h_outflow(start=MediumSer.h_default, nominal=MediumSer.h_default))
       if typ == TypDisSys.CombinedGeneration1 or
          typ == TypDisSys.CombinedGeneration2to4 or
          typ == TypDisSys.Cooling
          "Fluid connector for cooling service return line"
          annotation (Placement(
            transformation(extent={{290,-290},{310,-270}}), iconTransformation(
              extent={{290,-290},{310,-270}})));
        Buildings.Controls.OBC.CDL.Interfaces.RealOutput PHea(
          final unit="W") if have_eleHea
          "Power drawn by heating system"
          annotation (Placement(transformation(extent={{300,60},{340,100}}),
            iconTransformation(extent={{300,40},{380,120}})));
        Buildings.Controls.OBC.CDL.Interfaces.RealOutput PCoo(
          final unit="W") if have_eleCoo
          "Power drawn by cooling system"
          annotation (Placement(transformation(extent={{300,20},{340,60}}),
            iconTransformation(extent={{300,0},{380,80}})));
        Buildings.Controls.OBC.CDL.Interfaces.RealOutput PFan(
          final unit="W") if have_fan
          "Power drawn by fan motors"
          annotation (Placement(transformation(extent={{300,-20},{340,20}}),
            iconTransformation(extent={{300,-40},{380,40}})));
        Buildings.Controls.OBC.CDL.Interfaces.RealOutput PPum(
          final unit="W") if have_pum
          "Power drawn by pump motors"
          annotation (Placement(transformation(extent={{300,-60},{340,-20}}),
            iconTransformation(extent={{300,-80},{380,0}})));
        Buildings.Controls.OBC.CDL.Interfaces.RealOutput QFue_flow[nFue](
          each final unit="W") if nFue>0
          "Fuel energy input rate"
          annotation (
            Placement(transformation(extent={{300,-100},{340,-60}}),
              iconTransformation(extent={{300,-120},{380,-40}})));
        Buildings.BoundaryConditions.WeatherData.Bus weaBus if have_weaBus
          "Weather data bus" annotation (Placement(transformation(extent={{-20,
                  260},{20,300}}), iconTransformation(extent={{-18,284},{18,318}})));
      initial equation
        assert(
          nPorts_aHeaWat == nPorts_bHeaWat,
          "In "+getInstanceName()+": The numbers of heating water supply ports ("+String(
            nPorts_bHeaWat)+") and return ports ("+String(
            nPorts_aHeaWat)+") must be equal.");
        assert(
          nPorts_aChiWat == nPorts_bChiWat,
          "In "+getInstanceName()+": The numbers of chilled water supply ports ("+String(
            nPorts_bChiWat)+") and return ports ("+String(
            nPorts_aChiWat)+") must be equal.");
        if have_chiWat then
          assert(
            QChiWat_flow_nominal <-Modelica.Constants.eps,
            "In "+getInstanceName()+": Design heat flow rate for chilled water production must be strictly
      negative. Obtained QChiWat_flow_nominal = "      +String(
              QChiWat_flow_nominal));
        end if;
        if have_heaWat then
          assert(
            QHeaWat_flow_nominal > Modelica.Constants.eps,
            "In "+getInstanceName()+": Design heat flow rate for heating water production must be strictly
      positive. Obtained QHeaWat_flow_nominal = "      +String(
              QHeaWat_flow_nominal));
        end if;
        if have_hotWat then
          assert(
            QHotWat_flow_nominal > Modelica.Constants.eps,
            "In "+getInstanceName()+": Design heat flow rate for heating water production must be strictly
      positive. Obtained QHotWat_flow_nominal = "      +String(
              QHotWat_flow_nominal));
        end if;
        annotation (
          defaultComponentName="ets",
          Documentation(
            info="<html>
<p>
Partial class to be used for modeling an energy transfer station
and optional in-building primary systems.
</p>
<p>
The connectors to the service lines are configured based on an enumeration
defining the type of district system (<code>CombinedGeneration2to4</code>
by default), see
<a href=\"modelica://Buildings.Experimental.DHC.Types.DistrictSystemType\">
Buildings.Experimental.DHC.Types.DistrictSystemType</a>.
In case of a heating service line, the model allows for using two
different media at the inlet port <code>port_aSerHea</code> and at the oulet
port <code>port_bSerHea</code> to represent a steam supply and condensate
return.
</p>
<p>
The connectors to the building distribution systems are configured based
on the Boolean parameters <code>have_heaWat</code> and <code>have_chiWat</code>.
</p>
</html>",
      revisions="<html>
<ul>
<li>
December 21, 2020, by Antoine Gautier:<br/>
Refactored to support all DHC system types.<br/>
This is for <a href=\"https://github.com/lbl-srg/modelica-buildings/issues/2291\">issue 2291</a>.
</li>
<li>
July 31, 2020, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>"),Icon(
            coordinateSystem(
              extent={{-300,-300},{300,300}},
              preserveAspectRatio=false),
            graphics={
              Rectangle(
                extent={{-300,-300},{300,300}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{18,-38},{46,-10}},
                lineColor={255,255,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-148,-326},{152,-366}},
                textColor={0,0,255},
                textString="%name"),
              Line(
                points={{-142,300},{-140,372}},
                color={0,0,255},
                pattern=LinePattern.None),
              Line(
                points={{-142,354},{-138,274}},
                color={0,0,255},
                pattern=LinePattern.None),
              Rectangle(
                extent={{-300,-248},{-58,-232}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={255,0,0},
                fillPattern=FillPattern.Solid,
                visible=typ <> TypDisSys.Cooling and typ <> TypDisSys.CombinedGeneration5),
              Rectangle(
                extent={{20,-288},{300,-272}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,0,255},
                fillPattern=FillPattern.Solid,
                visible=typ == TypDisSys.CombinedGeneration1 or typ == TypDisSys.CombinedGeneration2to4
                     or typ == TypDisSys.Cooling),
              Rectangle(
                extent={{-300,-208},{-100,-192}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,255,255},
                fillPattern=FillPattern.Solid,
                visible=typ == TypDisSys.CombinedGeneration5),
              Rectangle(
                extent={{100,-208},{300,-192}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,255,255},
                fillPattern=FillPattern.Solid,
                visible=typ == TypDisSys.CombinedGeneration5),
              Rectangle(
                extent={{-25,-8},{25,8}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,255,255},
                fillPattern=FillPattern.Solid,
                visible=typ == TypDisSys.CombinedGeneration5,
                origin={108,-167},
                rotation=90),
              Rectangle(
                extent={{-25,-8},{25,8}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,255,255},
                fillPattern=FillPattern.Solid,
                visible=typ == TypDisSys.CombinedGeneration5,
                origin={-108,-167},
                rotation=90),
              Rectangle(
                extent={{-140,140},{140,-142}},
                lineColor={27,0,55},
                fillColor={170,213,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{58,-248},{300,-232}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={255,0,0},
                fillPattern=FillPattern.Solid,
                visible=typ <> TypDisSys.Cooling and typ <> TypDisSys.CombinedGeneration5),
              Rectangle(
                extent={{-45,-8},{45,8}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={255,0,0},
                fillPattern=FillPattern.Solid,
                visible=typ <> TypDisSys.Cooling and typ <> TypDisSys.CombinedGeneration5,
                origin={66,-187},
                rotation=90),
              Rectangle(
                extent={{-45,-8},{45,8}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={255,0,0},
                fillPattern=FillPattern.Solid,
                visible=typ <> TypDisSys.Cooling and typ <> TypDisSys.CombinedGeneration5,
                origin={-66,-187},
                rotation=90),
              Rectangle(
                extent={{-65,-8},{65,8}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,0,255},
                fillPattern=FillPattern.Solid,
                visible=typ == TypDisSys.CombinedGeneration1 or typ == TypDisSys.CombinedGeneration2to4
                     or typ == TypDisSys.Cooling,
                origin={28,-207},
                rotation=90),
              Rectangle(
                extent={{-302,-288},{-22,-272}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,0,255},
                fillPattern=FillPattern.Solid,
                visible=typ == TypDisSys.CombinedGeneration1 or typ == TypDisSys.CombinedGeneration2to4
                     or typ == TypDisSys.Cooling),
              Rectangle(
                extent={{-65,-8},{65,8}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,0,255},
                fillPattern=FillPattern.Solid,
                visible=typ == TypDisSys.CombinedGeneration1 or typ == TypDisSys.CombinedGeneration2to4
                     or typ == TypDisSys.Cooling,
                origin={-30,-207},
                rotation=90),
              Rectangle(
                extent={{-6,-8},{6,8}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,0,255},
                fillPattern=FillPattern.Solid,
                visible=have_chiWat,
                origin={104,146},
                rotation=90),
              Rectangle(
                extent={{-102,-8},{102,8}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,0,255},
                fillPattern=FillPattern.Solid,
                visible=have_chiWat,
                origin={198,160},
                rotation=0),
              Rectangle(
                extent={{-130,-8},{130,8}},
                lineColor={255,0,0},
                pattern=LinePattern.None,
                fillColor={255,0,0},
                fillPattern=FillPattern.Solid,
                visible=have_heaWat,
                origin={-170,260},
                rotation=0),
              Rectangle(
                extent={{-102,-8},{102,8}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,0,255},
                fillPattern=FillPattern.Solid,
                origin={-198,160},
                rotation=0,
                visible=have_chiWat),
              Rectangle(
                extent={{-6,-8},{6,8}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,0,255},
                fillPattern=FillPattern.Solid,
                origin={-104,146},
                rotation=90,
                visible=have_chiWat),
              Rectangle(
                extent={{-130,-8},{130,8}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={255,0,0},
                fillPattern=FillPattern.Solid,
                origin={170,260},
                rotation=0,
                visible=have_heaWat),
              Rectangle(
                extent={{-56,-9},{56,9}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={255,0,0},
                fillPattern=FillPattern.Solid,
                origin={49,196},
                rotation=90,
                visible=have_heaWat),
              Rectangle(
                extent={{-56,-9},{56,9}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={255,0,0},
                fillPattern=FillPattern.Solid,
                origin={-49,196},
                rotation=90,
                visible=have_heaWat)}),
          Diagram(
            coordinateSystem(
              preserveAspectRatio=false,
              extent={{-300,-300},{300,300}})));
      end PartialETS;

      model PartialIndirect
        "Partial indirect energy transfer station for district energy systems"
        extends estcp.DHC.EnergyTransferStations.BaseClasses.PartialETS(
          final have_weaBus=false,
          final have_hotWat=false,
          final have_eleHea=false,
          final nFue=0,
          final have_eleCoo=false,
          final have_pum=false,
          final have_fan=false);
        // mass flow rates
        parameter Modelica.Units.SI.MassFlowRate mDis_flow_nominal(
          final min=0)
          "Nominal mass flow rate of district side"
          annotation(Dialog(group="Nominal condition"));
        parameter Modelica.Units.SI.MassFlowRate mBui_flow_nominal(
          final min=0)
          "Nominal mass flow rate of building side"
          annotation(Dialog(group="Nominal condition"));
        // Primary supply control valve
        parameter Modelica.Units.SI.PressureDifference dpConVal_nominal(
          final min=0,
          displayUnit="Pa")=6000
          "Nominal pressure drop of fully open control valve"
          annotation(Dialog(group="Nominal condition"));
        // Heat exchanger
        parameter Modelica.Units.SI.PressureDifference dp1_nominal(
          final min=0,
          displayUnit="Pa")
          "Nominal pressure difference on primary side"
          annotation (Dialog(group="Heat exchanger"));
        parameter Modelica.Units.SI.PressureDifference dp2_nominal(
          final min=0,
          displayUnit="Pa")
          "Nominal pressure difference on secondary side"
          annotation (Dialog(group="Heat exchanger"));
        parameter Boolean use_Q_flow_nominal=true
          "Set to true to specify Q_flow_nominal and temeratures, or to false to specify effectiveness"
          annotation (Dialog(group="Heat exchanger"));
        parameter Modelica.Units.SI.HeatFlowRate Q_flow_nominal
          "Nominal heat transfer (positive for heat transfer from district to building)"
          annotation (Dialog(group="Heat exchanger"));
        parameter Modelica.Units.SI.Temperature T_a1_nominal(
          final min=273.15,
          final max=373.15)
          "Nominal temperature at port a1 (district supply)"
          annotation (Dialog(group="Heat exchanger"));
        parameter Modelica.Units.SI.Temperature T_a2_nominal(
          final min=273.15,
          final max=373.15)
          "Nominal temperature at port a2 (building return)"
          annotation (Dialog(group="Heat exchanger"));
        parameter Modelica.Units.SI.Efficiency eta(
          final min=0,
          final max=1)=0.8
          "Constant effectiveness"
          annotation (Dialog(group="Heat exchanger"));
         //Controller parameters
        parameter Modelica.Blocks.Types.SimpleController controllerType=Modelica.Blocks.Types.SimpleController.PI
          "Type of controller"
          annotation (Dialog(group="PID controller"));
        parameter Real k(
          final min=0,
          final unit="1")=1
          "Gain of controller"
          annotation (Dialog(group="PID controller"));
        parameter Modelica.Units.SI.Time Ti(
          final min=Modelica.Constants.small)=120
          "Time constant of integrator block"
          annotation (Dialog(group="PID controller",enable=
                controllerType == Modelica.Blocks.Types.SimpleController.PI or
                controllerType == Modelica.Blocks.Types.SimpleController.PID));
        parameter Modelica.Units.SI.Time Td(
          final min=0)=0.1
          "Time constant of derivative block"
          annotation (Dialog(group="PID controller",enable=
                controllerType == Modelica.Blocks.Types.SimpleController.PD or
                controllerType == Modelica.Blocks.Types.SimpleController.PID));
        parameter Real yMax=1
          "Upper limit of output"
          annotation (Dialog(group="PID controller"));
        parameter Real yMin=0.01
          "Lower limit of output"
          annotation (Dialog(group="PID controller"));
        Modelica.Blocks.Interfaces.RealInput TSetBuiSup
          "Setpoint temperature for building supply"
          annotation (Placement(transformation(extent={{-340,-20},{-300,20}})));
        Modelica.Blocks.Interfaces.RealOutput Q_flow(
          final quantity="HeatFlowRate",
          final unit="W",
          displayUnit="kW")
          "Measured heating demand at the ETS"
          annotation (Placement(
              transformation(extent={{300,-140},{340,-100}}),iconTransformation(extent={{300,
                  -140},{340,-100}})));
        Modelica.Blocks.Interfaces.RealOutput Q(
          final quantity="Energy",
          final unit="J",
          displayUnit="kWh")
          "Measured energy consumption at the ETS"
           annotation (Placement(transformation(extent={{300,-180},{340,-140}}),
           iconTransformation(extent={{300,-130},{340,-90}})));
        Buildings.Fluid.Sensors.TemperatureTwoPort senTDisSup(
          redeclare final package Medium=MediumSer,
          final m_flow_nominal=mDis_flow_nominal)
          "District supply temperature sensor"
          annotation (Placement(transformation(extent={{-220,-290},{-200,-270}})));
        Buildings.Fluid.Sensors.MassFlowRate senMasFlo(
          redeclare final package Medium=MediumSer)
          "District supply mass flow rate sensor"
          annotation (Placement(transformation(extent={{-160,-290},{-140,-270}})));
        Buildings.Fluid.Actuators.Valves.TwoWayEqualPercentage conVal(
          redeclare final package Medium=MediumSer,
          final m_flow_nominal=mDis_flow_nominal,
          final dpValve_nominal=dpConVal_nominal,
          riseTime(displayUnit="s") = 10,
          y_start=0)
          "Control valve"
          annotation (Placement(transformation(extent={{-100,-290},{-80,-270}})));
        Buildings.Fluid.HeatExchangers.PlateHeatExchangerEffectivenessNTU hex(
          redeclare package Medium1 = MediumSer,
          redeclare package Medium2 = MediumBui,
          final m1_flow_nominal=mDis_flow_nominal,
          final m2_flow_nominal=mBui_flow_nominal,
          final dp1_nominal=dp1_nominal,
          final dp2_nominal=dp2_nominal,
          final configuration=Buildings.Fluid.Types.HeatExchangerConfiguration.CounterFlow,
          final Q_flow_nominal=Q_flow_nominal,
          final T_a1_nominal=T_a1_nominal,
          final T_a2_nominal=T_a2_nominal)
          "Heat exchanger"
          annotation (Placement(transformation(extent={{0,-200},{20,-220}})));
        Buildings.Fluid.Sensors.TemperatureTwoPort senTDisRet(
          redeclare final package Medium=MediumSer,
          final m_flow_nominal=mDis_flow_nominal)
          "District return temperature sensor"
          annotation (Placement(transformation(extent={{180,-290},{200,-270}})));
        Buildings.Fluid.Sensors.TemperatureTwoPort senTBuiRet(
          redeclare final package Medium=MediumBui,
          final m_flow_nominal=mBui_flow_nominal)
          "Building return temperature sensor"
          annotation (Placement(transformation(extent={{-218,190},{-198,210}})));
        Buildings.Fluid.Sensors.TemperatureTwoPort senTBuiSup(
          redeclare final package Medium=MediumBui,
          final m_flow_nominal=mBui_flow_nominal)
          "Building supply temperature sensor"
          annotation (Placement(transformation(extent={{-16,-214},{-36,-194}})));
        Buildings.Controls.OBC.CDL.Reals.PID con(
          final controllerType=controllerType,
          final k=k,
          final Ti=Ti,
          final Td=Td,
          final yMax=yMax,
          final yMin=yMin) "Building supply temperature controller" annotation
          (Placement(transformation(extent={{-130,-230},{-110,-210}})));

        Modelica.Blocks.Math.Add dTDis(
          final k1=-1)
        "Temperature difference on the district side"
          annotation (Placement(transformation(extent={{20,-124},{40,-104}})));
        Modelica.Blocks.Math.Product pro
        "product"
          annotation (Placement(transformation(extent={{120,-130},{140,-110}})));
        Modelica.Blocks.Math.Gain cp(
          final k=cp_default)
          "Specific heat multiplier to calculate heat flow rate"
          annotation (Placement(transformation(extent={{180,-130},{200,-110}})));
        Modelica.Blocks.Continuous.Integrator int(
          final k=1)
          "Integration"
          annotation (Placement(transformation(extent={{240,-170},{260,-150}})));
      protected
        final parameter MediumSer.ThermodynamicState sta_default=MediumSer.setState_pTX(
          T=MediumSer.T_default,
          p=MediumSer.p_default,
          X=MediumSer.X_default)
          "Medium state at default properties";
        final parameter Modelica.Units.SI.SpecificHeatCapacity cp_default=MediumSer.specificHeatCapacityCp(
          sta_default)
          "Specific heat capacity of the fluid";
      equation
        connect(senTDisSup.port_b, senMasFlo.port_a)
          annotation (Line(points={{-200,-280},{-160,-280}}, color={0,127,255}));
        connect(senMasFlo.port_b, conVal.port_a)
          annotation (Line(points={{-140,-280},{-100,-280}}, color={0,127,255}));
        connect(conVal.port_b, hex.port_a1)
          annotation (Line(points={{-80,-280},{-10,-280},{-10,-216},{0,-216}},
                                      color={0,127,255}));
        connect(hex.port_b1, senTDisRet.port_a)
          annotation (Line(points={{20,-216},{60,
                -216},{60,-280},{180,-280}}, color={0,127,255}));
        connect(senTBuiRet.port_b, hex.port_a2)
          annotation (Line(points={{-198,200},{60,
                200},{60,-204},{20,-204}}, color={0,127,255}));
        connect(hex.port_b2, senTBuiSup.port_a)
          annotation (Line(points={{0,-204},{-16,-204}},        color={0,127,255}));
        connect(senTBuiSup.T, con.u_m)
          annotation (Line(points={{-26,-193},{-26,-180},{-140,-180},{-140,-240},{-120,
                -240},{-120,-232}},
                                color={0,0,127}));
        connect(TSetBuiSup, con.u_s)
          annotation (Line(points={{-320,0},{-240,0},{-240,-220},{-132,-220}},
                                                       color={0,0,127}));
        connect(con.y, conVal.y)
          annotation (Line(points={{-108,-220},{-90,-220},{-90,-268}},
                                                                 color={0,0,127}));
        connect(senTDisSup.T,dTDis. u2)
          annotation (Line(points={{-210,-269},{-210,-120},{18,-120}},
                            color={0,0,127}));
        connect(senTBuiRet.T,dTDis. u1)
          annotation (Line(points={{-208,211},{-208,240},{0,240},{0,-108},{18,-108}},
                                        color={0,0,127}));
        connect(senMasFlo.m_flow, pro.u2)
          annotation (Line(points={{-150,-269},{-150,-140},{100,-140},{100,-126},{118,
                -126}},                                        color={0,0,127}));
        connect(dTDis.y, pro.u1)
          annotation (Line(points={{41,-114},{118,-114}},
                             color={0,0,127}));
        connect(pro.y, cp.u)
          annotation (Line(points={{141,-120},{178,-120}}, color={0,0,127}));
        connect(cp.y, Q_flow)
          annotation (Line(points={{201,-120},{320,-120}}, color={0,0,127}));
        connect(cp.y, int.u)
          annotation (Line(points={{201,-120},{228,-120},{228,-160},{238,-160}},
                             color={0,0,127}));
        connect(int.y, Q)
          annotation (Line(points={{261,-160},{320,-160}},
                             color={0,0,127}));
        annotation (
          defaultComponentName="etsCoo",
          Documentation(info="<html>
<p>
Indirect cooling energy transfer station (ETS) model that controls the
building chilled water supply temperature by modulating a primary control valve 
on the district supply side. The design is based on a typical district cooling 
ETS described in ASHRAE's <a href=\"https://www.ashrae.org/technical-resources/bookstore/district-heating-and-cooling-guides\">District Cooling Guide</a>. 
As shown in the figure below, the building pumping design (constant/variable) 
is specified on the building side and not within the ETS. 
</p>
<p align=\"center\">
<img src=\"modelica://Buildings/Resources/Images/Experimental/DHC/EnergyTransferStations/Cooling/Indirect.png\" alt=\"DHC.ETS.Indirect\"/>
</p>
<h4>Reference</h4>
<p>
American Society of Heating, Refrigeration and Air-Conditioning Engineers. (2019).
Chapter 5: End User Interface. In <i>District Cooling Guide</i>, Second Edition and 
<i>Owner's Guide for Buildings Served by District Cooling</i>. 
</p>
</html>",   revisions="<html>
<ul>
<li>
April 7, 2023, by David Blum:<br/>
Changed to partial base class for indirect so can extend to heating and cooling ETS.
</li>
<li>
January 11, 2023, by Michael Wetter:<br/>
Changed controls to use CDL. Changed PID to PI as default for controller.
</li>
<li>
March 21, 2022, by Chengnan Shi:<br/>
Update with base class partial model.
</li>
<li>Novermber 13, 2019, by Kathryn Hinkelman:<br/>
First implementation.
</li>
</ul>
</html>"));
      end PartialIndirect;

      model Pump_m_flow
        "Pump with prescribed mass flow rate"
        extends Buildings.Fluid.Movers.FlowControlled_m_flow(
          per(
            motorCooledByFluid=false),
          inputType=Buildings.Fluid.Types.InputType.Continuous,
          addPowerToMedium=false,
          energyDynamics=Modelica.Fluid.Types.Dynamics.SteadyState,
          nominalValuesDefineDefaultPressureCurve=true,
          use_inputFilter=false);
        annotation (
          Icon(
            graphics={
              Ellipse(
                extent={{-58,58},{58,-58}},
                lineColor={0,0,0},
                fillPattern=FillPattern.Sphere,
                fillColor={0,0,0}),
              Polygon(
                points={{-2,52},{-2,-48},{52,2},{-2,52}},
                lineColor={0,0,0},
                pattern=LinePattern.None,
                fillPattern=FillPattern.HorizontalCylinder,
                fillColor={255,255,255})}),
          Documentation(
            info="<html>
<p>
This is a steady-state model of a pump with ideally controlled 
mass flow rate as input signal, and no heat added to the medium.
</p>
</html>"));
      end Pump_m_flow;

      model StratifiedTank
        "Stratified buffer tank model"
        replaceable package Medium=Modelica.Media.Interfaces.PartialMedium
          "Medium model"
          annotation (choices(
            choice(redeclare package Medium=Buildings.Media.Water "Water"),
            choice(redeclare package Medium =
                  Buildings.Media.Antifreeze.PropyleneGlycolWater (                            property_T=293.15,X_a=0.40)
              "Propylene glycol water, 40% mass fraction")));
        final parameter Boolean allowFlowReversal=true
          "= true to allow flow reversal, false restricts to design direction (port_a -> port_b)"
          annotation (Dialog(tab="Assumptions"),Evaluate=true);
        parameter Modelica.Units.SI.Volume VTan "Tank volume";
        parameter Modelica.Units.SI.Length hTan "Height of tank (without insulation)";
        parameter Modelica.Units.SI.Length dIns "Thickness of insulation";
        parameter Modelica.Units.SI.ThermalConductivity kIns=0.04
          "Specific heat conductivity of insulation";
        parameter Integer nSeg(
          min=2)=3
          "Number of volume segments";
        parameter Modelica.Units.SI.MassFlowRate m_flow_nominal
          "Nominal mass flow rate" annotation (Dialog(group="Nominal condition"));
        // IO CONNECTORS
        Modelica.Fluid.Interfaces.FluidPort_a port_aTop(
          redeclare final package Medium=Medium,
          m_flow(
            min=
              if allowFlowReversal then
                -Modelica.Constants.inf
              else
                0),
          h_outflow(
            start=Medium.h_default,
            nominal=Medium.h_default))
          "Inlet fluid port at tank top"
          annotation (Placement(transformation(extent={{90,50},{110,70}}),iconTransformation(extent={{90,50},{110,70}})));
        Modelica.Fluid.Interfaces.FluidPort_b port_bBot(
          redeclare final package Medium=Medium,
          m_flow(
            max=
              if allowFlowReversal then
                +Modelica.Constants.inf
              else
                0),
          h_outflow(
            start=Medium.h_default,
            nominal=Medium.h_default))
          "Outlet fluid port at tank bottom"
          annotation (Placement(transformation(extent={{90,-70},{110,-50}}),iconTransformation(extent={{90,-70},{110,-50}})));
        Modelica.Fluid.Interfaces.FluidPort_a port_aBot(
          redeclare final package Medium=Medium,
          m_flow(
            min=
              if allowFlowReversal then
                -Modelica.Constants.inf
              else
                0),
          h_outflow(
            start=Medium.h_default,
            nominal=Medium.h_default))
          "Inlet fluid port at tank bottom"
          annotation (Placement(transformation(extent={{-110,-70},{-90,-50}}),iconTransformation(extent={{-110,-70},{-90,-50}})));
        Modelica.Fluid.Interfaces.FluidPort_b port_bTop(
          redeclare final package Medium=Medium,
          m_flow(
            max=
              if allowFlowReversal then
                +Modelica.Constants.inf
              else
                0),
          h_outflow(
            start=Medium.h_default,
            nominal=Medium.h_default))
          "Outlet fluid port at tank top"
          annotation (Placement(transformation(extent={{-110,50},{-90,70}}),iconTransformation(extent={{-110,50},{-90,70}})));
        Modelica.Blocks.Interfaces.RealOutput Ql_flow(
          final unit="W")
          "Heat loss of tank (positive if heat flows from tank to ambient)"
          annotation (Placement(transformation(extent={{100,-20},{140,20}}),iconTransformation(extent={{100,-10},{120,10}})));
        Modelica.Blocks.Interfaces.RealOutput TTop(
          final unit="K",
          displayUnit="degC")
          "Fluid temperature at tank top"
          annotation (Placement(transformation(extent={{100,20},{140,60}}),iconTransformation(extent={{100,80},{120,100}})));
        Modelica.Blocks.Interfaces.RealOutput TBot(
          final unit="K",
          displayUnit="degC")
          "Fluid temperature at tank bottom"
          annotation (Placement(transformation(extent={{100,-60},{140,-20}}),iconTransformation(extent={{100,-100},{120,-80}})));
        Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_a heaPorAmb
          "Heat port at interface with ambient (outside insulation)"
          annotation (Placement(transformation(extent={{-106,-6},{-94,6}})));
        // COMPONENTS
        Buildings.Fluid.Storage.Stratified tan(
          redeclare final package Medium = Medium,
          final m_flow_nominal=m_flow_nominal,
          final VTan=VTan,
          final hTan=hTan,
          final dIns=dIns,
          final kIns=kIns,
          final nSeg=nSeg) "Stratified tank"
          annotation (Placement(transformation(extent={{-10,-10},{10,10}})));
        Modelica.Thermal.HeatTransfer.Sensors.TemperatureSensor senTBot
          "Tank bottom temperature"
          annotation (Placement(transformation(extent={{30,-50},{50,-30}})));
        Modelica.Thermal.HeatTransfer.Sensors.TemperatureSensor senTTop
          "Tank top temperature"
          annotation (Placement(transformation(extent={{30,30},{50,50}})));
      protected
        Modelica.Thermal.HeatTransfer.Components.ThermalCollector theCol(
          m=3)
          "Connector to assign multiple heat ports to one heat port"
          annotation (Placement(transformation(extent={{-6,-6},{6,6}},rotation=-90,origin={-60,0})));
      equation
        connect(port_aTop,tan.port_a)
          annotation (Line(points={{100,60},{-20,60},{-20,0},{-10,0}},color={0,127,255}));
        connect(port_bTop,tan.fluPorVol[1])
          annotation (Line(points={{-100,60},{-40,60},{-40,20},{0,20},{0,-0.666667},{-2.6,-0.666667}},color={0,127,255}));
        connect(tan.port_b,port_bBot)
          annotation (Line(points={{10,0},{20,0},{20,-60},{100,-60}},color={0,127,255}));
        connect(port_aBot,tan.fluPorVol[nSeg])
          annotation (Line(points={{-100,-60},{0,-60},{0,0},{-2.6,0}},color={0,127,255}));
        connect(tan.Ql_flow,Ql_flow)
          annotation (Line(points={{11,7.2},{24.5,7.2},{24.5,0},{120,0}},color={0,0,127}));
        connect(tan.heaPorVol[nSeg],senTBot.port)
          annotation (Line(points={{0,0},{16,0},{16,-40},{30,-40}},color={191,0,0}));
        connect(tan.heaPorVol[1],senTTop.port)
          annotation (Line(points={{0,-0.4},{16,-0.4},{16,40},{30,40}},color={191,0,0}));
        connect(senTTop.T,TTop)
          annotation (Line(points={{50,40},{78,40},{78,40},{120,40}},color={0,0,127}));
        connect(senTBot.T,TBot)
          annotation (Line(points={{50,-40},{80,-40},{80,-40},{120,-40}},color={0,0,127}));
        connect(heaPorAmb,theCol.port_b)
          annotation (Line(points={{-100,0},{-66,0}},color={191,0,0}));
        connect(theCol.port_a[1],tan.heaPorTop)
          annotation (Line(points={{-53.6,0},{-26,0},{-26,7.4},{2,7.4}},color={191,0,0}));
        connect(theCol.port_a[2],tan.heaPorSid)
          annotation (Line(points={{-54,0},{5.6,0}},color={191,0,0}));
        connect(theCol.port_a[3],tan.heaPorBot)
          annotation (Line(points={{-54.4,0},{-26,0},{-26,-7.4},{2,-7.4}},color={191,0,0}));
        annotation (
          Icon(
            coordinateSystem(
              extent={{-100,-100},{100,100}}),
            graphics={
              Rectangle(
                extent={{-100,-100},{100,100}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-40,64},{40,20}},
                lineColor={255,0,0},
                fillColor={255,0,0},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-40,-20},{40,-64}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-40,20},{40,-20}},
                lineColor={255,0,0},
                pattern=LinePattern.None,
                fillColor={0,0,127},
                fillPattern=FillPattern.CrossDiag),
              Rectangle(
                extent={{50,68},{40,-66}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-40,66},{-50,-68}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-50,72},{50,64}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-50,-64},{50,-72}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-50,64},{-100,56}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{100,64},{50,56}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{100,-56},{50,-64}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-50,-56},{-100,-64}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-139,-106},{161,-146}},
                textColor={0,0,255},
                textString="%name")}),
          defaultComponentName="tan",
          Diagram(
            coordinateSystem(
              extent={{-100,-100},{100,100}})),
          Documentation(
            revisions="<html>
<ul>
<li>
July 31, 2020, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>",   info="<html>
<p>
This is a four-port tank model based on
<a href=\"modelica://Buildings.Fluid.Storage.Stratified\">
Buildings.Fluid.Storage.Stratified</a>
which includes the following features.
</p>
<ul>
<li>
The two fluid ports suffixed with <code>Top</code> are connected
to the fluid volume at the top of the tank.
</li>
<li>
The two fluid ports suffixed with <code>Bot</code> are connected
to the fluid volume at the bottom of the tank.
</li>
<li>
A unique heat port is exposed as an external connector. It is
meant to provide a uniform temperature boundary condition at
the external surface of the tank (outside insulation).
</li>
<li>
The model outputs the temperature of the fluid volumes at the top
and at the bottom of the tank.
</li>
</ul>
</html>"));
      end StratifiedTank;

      function computeCoordinates
        "Coordinates of evenly distributed boreholes given the number of boreholes"
        extends Modelica.Icons.Function;

        input Integer nBorHol
          "Number of boreholes";
        input Modelica.Units.SI.Distance dxy=6
          "Distance in x-axis (and y-axis) between borehole axes";
        output Modelica.Units.SI.Distance cooBor[nBorHol,2]
          "Coordinates of boreholes";
      protected
        Integer k=1
          "Iteration index";
      algorithm
        for i in 0:sqrt(
          nBorHol)-1 loop
          for j in 0:sqrt(
            nBorHol)-1 loop
            cooBor[k,1] := i*dxy;
            cooBor[k,2] := j*dxy;
            k := k+1;
          end for;
        end for;
        annotation (
          Documentation(
            revisions="<html>
<ul>
<li>
July 31, 2020, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>",   info="<html>
<p>
This function computes the coordinates of boreholes evenly
distributed along the <code>x</code> and <code>y</code> axis,
given the number of boreholes (which must be the square of
an integer).
</p>
</html>"));
      end computeCoordinates;

      package Validation "Collection of validation models"
        extends Modelica.Icons.ExamplesPackage;

        model CollectorDistributor
          "Validation of collector distributor model"
          extends Modelica.Icons.Example;
          package Medium=Buildings.Media.Water
            "Source side medium";
          parameter Modelica.Units.SI.MassFlowRate m_flow_nominal=1
            "Nominal mass flow rate";
          Buildings.Fluid.Movers.FlowControlled_m_flow sou1(
            redeclare package Medium = Medium,
            energyDynamics=Modelica.Fluid.Types.Dynamics.SteadyState,
            T_start=273.15 + 40,
            m_flow_nominal=m_flow_nominal,
            addPowerToMedium=false,
            nominalValuesDefineDefaultPressureCurve=true) "Primary supply"
            annotation (Placement(transformation(extent={{-170,330},{-150,350}})));
          Buildings.Fluid.Movers.FlowControlled_m_flow sou2_1(
            redeclare package Medium = Medium,
            energyDynamics=Modelica.Fluid.Types.Dynamics.SteadyState,
            T_start=273.15 + 30,
            m_flow_nominal=m_flow_nominal,
            addPowerToMedium=false,
            nominalValuesDefineDefaultPressureCurve=true) "Secondary pump"
            annotation (Placement(transformation(extent={{190,290},{170,310}})));
          Buildings.Fluid.Sources.Boundary_pT bou1(
            redeclare package Medium = Medium,
            use_T_in=true,
            nPorts=2) "Boundary pressure" annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={-190,320})));
          Buildings.Controls.OBC.CDL.Reals.Sources.Ramp m1(
            height=1.1,
            duration=1000,
            startTime=0)
            "Primary flow"
            annotation (Placement(transformation(extent={{-240,370},{-220,390}})));
          Buildings.Controls.OBC.CDL.Reals.Sources.Constant T1(
            k=40+273.15)
            "Primary supply temperature"
            annotation (Placement(transformation(extent={{-240,270},{-220,290}})));
          Buildings.Fluid.Sensors.TemperatureTwoPort senT2_1Sup(redeclare
              final package Medium = Medium, m_flow_nominal=m_flow_nominal)
            "Secondary supply temperature (measured)" annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={60,340})));
          Buildings.Fluid.Sensors.TemperatureTwoPort senT1_1Sup(redeclare
              final package Medium = Medium, m_flow_nominal=m_flow_nominal)
            "Primary supply temperature (measured)" annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={-100,340})));
          Buildings.Fluid.Sensors.TemperatureTwoPort senT1_1Ret(redeclare
              final package Medium = Medium, m_flow_nominal=m_flow_nominal)
            "Primary return temperature (measured)" annotation (Placement(
                transformation(
                extent={{10,-10},{-10,10}},
                rotation=0,
                origin={-100,300})));
          Buildings.Fluid.Sensors.TemperatureTwoPort senT2_1Ret(redeclare
              final package Medium = Medium, m_flow_nominal=m_flow_nominal)
            "Secondary return temperature (measured)" annotation (Placement(
                transformation(
                extent={{10,-10},{-10,10}},
                rotation=0,
                origin={60,300})));
          Buildings.Fluid.Sensors.MassFlowRate senMasFlo1_1(redeclare final
              package Medium = Medium) "Primary mass flow rate (measured)"
            annotation (Placement(transformation(extent={{-140,330},{-120,350}})));
          Buildings.Fluid.Sensors.MassFlowRate senMasFlo2_1(redeclare final
              package Medium = Medium) "Secondary mass flow rate (measured)"
            annotation (Placement(transformation(extent={{130,330},{150,350}})));
          Buildings.Fluid.MixingVolumes.MixingVolume vol2_1(
            energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,
            T_start=273.15 + 30,
            final prescribedHeatFlowRate=true,
            redeclare final package Medium = Medium,
            V=1,
            final mSenFac=1,
            final m_flow_nominal=m_flow_nominal,
            nPorts=2) "Volume for fluid stream" annotation (Placement(
                transformation(extent={{209,300},{229,280}})));
          Buildings.Fluid.HeatExchangers.HeaterCooler_u coo(
            redeclare final package Medium = Medium,
            dp_nominal=1,
            m_flow_nominal=m_flow_nominal,
            energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,
            Q_flow_nominal=-1E5) "Heat exchange with water stream"
            annotation (Placement(transformation(extent={{100,290},{80,310}})));
          Buildings.Controls.OBC.CDL.Reals.Sources.Constant T2_1Ret(
            k=30+273.15)
            "First secondary return temperature"
            annotation (Placement(transformation(extent={{60,370},{80,390}})));
          Buildings.Controls.OBC.CDL.Reals.PID conTChiWat1(
            k=0.1,
            Ti=10,
            yMax=1,
            controllerType=Buildings.Controls.OBC.CDL.Types.SimpleController.PI,
            yMin=0,
            reverseActing=false)
            "PI controller for chilled water supply"
            annotation (Placement(transformation(extent={{90,370},{110,390}})));
          Buildings.Controls.OBC.CDL.Reals.Sources.Ramp m2_1(
            height=0.5,
            duration=1000,
            offset=0.5,
            startTime=2000)
            "First secondary flow signal"
            annotation (Placement(transformation(extent={{220,370},{200,390}})));
          Buildings.Fluid.Movers.FlowControlled_m_flow sou2_2(
            redeclare package Medium = Medium,
            energyDynamics=Modelica.Fluid.Types.Dynamics.SteadyState,
            T_start=273.15 + 30,
            m_flow_nominal=m_flow_nominal,
            addPowerToMedium=false,
            nominalValuesDefineDefaultPressureCurve=true) "Secondary pump"
            annotation (Placement(transformation(extent={{190,150},{170,170}})));
          Buildings.Fluid.Sensors.TemperatureTwoPort senT2_2Sup(redeclare
              final package Medium = Medium, m_flow_nominal=m_flow_nominal)
            "Secondary supply temperature (measured)" annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={60,200})));
          Buildings.Fluid.Sensors.TemperatureTwoPort senT2_2Ret(redeclare
              final package Medium = Medium, m_flow_nominal=m_flow_nominal)
            "Secondary return temperature (measured)" annotation (Placement(
                transformation(
                extent={{10,-10},{-10,10}},
                rotation=0,
                origin={60,160})));
          Buildings.Fluid.Sensors.MassFlowRate senMasFlo2_2(redeclare final
              package Medium = Medium) "Secondary mass flow rate (measured)"
            annotation (Placement(transformation(extent={{130,190},{150,210}})));
          Buildings.Fluid.MixingVolumes.MixingVolume vol2(
            energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,
            T_start=273.15 + 30,
            final prescribedHeatFlowRate=true,
            redeclare final package Medium = Medium,
            V=1,
            final mSenFac=1,
            final m_flow_nominal=m_flow_nominal,
            nPorts=2) "Volume for fluid stream" annotation (Placement(
                transformation(extent={{209,160},{229,140}})));
          Buildings.Fluid.HeatExchangers.HeaterCooler_u coo1(
            redeclare final package Medium = Medium,
            dp_nominal=1,
            m_flow_nominal=m_flow_nominal,
            energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,
            Q_flow_nominal=-1E5) "Heat exchange with water stream"
            annotation (Placement(transformation(extent={{100,150},{80,170}})));
          Buildings.Controls.OBC.CDL.Reals.Sources.Constant T2_2Ret(
            k=35+273.15)
            "Second secondary return temperature"
            annotation (Placement(transformation(extent={{60,230},{80,250}})));
          Buildings.Controls.OBC.CDL.Reals.PID conTChiWat2(
            k=0.1,
            Ti=10,
            yMax=1,
            controllerType=Buildings.Controls.OBC.CDL.Types.SimpleController.PI,
            yMin=0,
            reverseActing=false)
            "PI controller for chilled water supply"
            annotation (Placement(transformation(extent={{90,230},{110,250}})));
          Buildings.Controls.OBC.CDL.Reals.Sources.Constant m2_2(
            k=0.5)
            "Second secondary mass flow rate signal"
            annotation (Placement(transformation(extent={{220,230},{200,250}})));
          estcp.DHC.EnergyTransferStations.BaseClasses.CollectorDistributor colDis(
            redeclare final package Medium = Medium,
            mCon_flow_nominal=fill(m_flow_nominal, 2),
            nCon=2) "Collector/distributor" annotation (Placement(
                transformation(extent={{-60,310},{-20,330}})));
          Buildings.Fluid.Movers.FlowControlled_m_flow sou2(
            redeclare package Medium = Medium,
            energyDynamics=Modelica.Fluid.Types.Dynamics.SteadyState,
            T_start=273.15 + 40,
            m_flow_nominal=m_flow_nominal,
            addPowerToMedium=false,
            nominalValuesDefineDefaultPressureCurve=true,
            dp_nominal=50E3) "Primary supply" annotation (Placement(
                transformation(extent={{-170,50},{-150,70}})));
          Buildings.Fluid.Sources.Boundary_pT bou2(
            redeclare package Medium = Medium,
            use_T_in=true,
            nPorts=2) "Boundary pressure" annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={-190,40})));
          Buildings.Controls.OBC.CDL.Reals.Sources.Constant T2(
            k=40+273.15)
            "Primary supply temperature"
            annotation (Placement(transformation(extent={{-240,-10},{-220,10}})));
          Buildings.Fluid.Sensors.TemperatureTwoPort senT2_3Sup(redeclare
              final package Medium = Medium, m_flow_nominal=m_flow_nominal)
            "Secondary supply temperature (measured)" annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={60,60})));
          Buildings.Fluid.Sensors.TemperatureTwoPort senT1_2Sup(redeclare
              final package Medium = Medium, m_flow_nominal=m_flow_nominal)
            "Primary supply temperature (measured)" annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={-100,60})));
          Buildings.Fluid.Sensors.TemperatureTwoPort senT1_2Ret(redeclare
              final package Medium = Medium, m_flow_nominal=m_flow_nominal)
            "Primary return temperature (measured)" annotation (Placement(
                transformation(
                extent={{10,-10},{-10,10}},
                rotation=0,
                origin={-100,20})));
          Buildings.Fluid.Sensors.TemperatureTwoPort senT2_3Ret(redeclare
              final package Medium = Medium, m_flow_nominal=m_flow_nominal)
            "Secondary return temperature (measured)" annotation (Placement(
                transformation(
                extent={{10,-10},{-10,10}},
                rotation=0,
                origin={60,20})));
          Buildings.Fluid.Sensors.MassFlowRate senMasFlo1_2(redeclare final
              package Medium = Medium) "Primary mass flow rate (measured)"
            annotation (Placement(transformation(extent={{-140,50},{-120,70}})));
          Buildings.Fluid.Sensors.MassFlowRate senMasFlo2_3(redeclare final
              package Medium = Medium) "Secondary mass flow rate (measured)"
            annotation (Placement(transformation(extent={{130,50},{150,70}})));
          Buildings.Fluid.MixingVolumes.MixingVolume vol2_2(
            energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,
            T_start=273.15 + 30,
            final prescribedHeatFlowRate=true,
            redeclare final package Medium = Medium,
            V=1,
            final mSenFac=1,
            final m_flow_nominal=m_flow_nominal,
            nPorts=2) "Volume for fluid stream"
            annotation (Placement(transformation(extent={{209,20},{229,0}})));
          Buildings.Fluid.HeatExchangers.HeaterCooler_u coo2(
            redeclare final package Medium = Medium,
            dp_nominal=1,
            m_flow_nominal=m_flow_nominal,
            energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,
            Q_flow_nominal=-1E5) "Heat exchange with water stream"
            annotation (Placement(transformation(extent={{100,10},{80,30}})));
          Buildings.Controls.OBC.CDL.Reals.Sources.Constant T2_1Ret1(
            k=30+273.15)
            "First secondary return temperature"
            annotation (Placement(transformation(extent={{60,90},{80,110}})));
          Buildings.Controls.OBC.CDL.Reals.PID conTChiWat3(
            k=0.1,
            Ti=10,
            yMax=1,
            controllerType=Buildings.Controls.OBC.CDL.Types.SimpleController.PI,
            yMin=0,
            reverseActing=false)
            "PI controller for chilled water supply"
            annotation (Placement(transformation(extent={{90,90},{110,110}})));
          Buildings.Controls.OBC.CDL.Reals.Sources.Ramp m2_3(
            height=0.5,
            duration=1000,
            offset=0.5,
            startTime=2000)
            "First secondary flow signal"
            annotation (Placement(transformation(extent={{220,90},{200,110}})));
          Buildings.Fluid.Sensors.TemperatureTwoPort senT2_4Sup(redeclare
              final package Medium = Medium, m_flow_nominal=m_flow_nominal)
            "Secondary supply temperature (measured)" annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={60,-80})));
          Buildings.Fluid.Sensors.TemperatureTwoPort senT2_4Ret(redeclare
              final package Medium = Medium, m_flow_nominal=m_flow_nominal)
            "Secondary return temperature (measured)" annotation (Placement(
                transformation(
                extent={{10,-10},{-10,10}},
                rotation=0,
                origin={60,-120})));
          Buildings.Fluid.Sensors.MassFlowRate senMasFlo2_4(redeclare final
              package Medium = Medium) "Secondary mass flow rate (measured)"
            annotation (Placement(transformation(extent={{130,-90},{150,-70}})));
          Buildings.Fluid.MixingVolumes.MixingVolume vol1(
            energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,
            T_start=273.15 + 30,
            final prescribedHeatFlowRate=true,
            redeclare final package Medium = Medium,
            V=1,
            final mSenFac=1,
            final m_flow_nominal=m_flow_nominal,
            nPorts=2) "Volume for fluid stream" annotation (Placement(
                transformation(extent={{209,-120},{229,-140}})));
          Buildings.Fluid.HeatExchangers.HeaterCooler_u coo3(
            redeclare final package Medium = Medium,
            dp_nominal=1,
            m_flow_nominal=m_flow_nominal,
            energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,
            Q_flow_nominal=-1E5) "Heat exchange with water stream" annotation (
              Placement(transformation(extent={{100,-130},{80,-110}})));
          Buildings.Controls.OBC.CDL.Reals.Sources.Constant T2_2Ret1(
            k=35+273.15)
            "Second secondary return temperature"
            annotation (Placement(transformation(extent={{60,-50},{80,-30}})));
          Buildings.Controls.OBC.CDL.Reals.PID conTChiWat4(
            k=0.1,
            Ti=10,
            yMax=1,
            controllerType=Buildings.Controls.OBC.CDL.Types.SimpleController.PI,
            yMin=0,
            reverseActing=false)
            "PI controller for chilled water supply"
            annotation (Placement(transformation(extent={{90,-50},{110,-30}})));
          Buildings.Controls.OBC.CDL.Reals.Sources.Constant m2_4(
            k=0.5)
            "Second secondary mass flow rate signal"
            annotation (Placement(transformation(extent={{220,-50},{200,-30}})));
          estcp.DHC.EnergyTransferStations.BaseClasses.CollectorDistributor colDis1(
            redeclare final package Medium = Medium,
            mCon_flow_nominal=fill(m_flow_nominal, 2),
            nCon=2) "Collector/distributor"
            annotation (Placement(transformation(extent={{-60,30},{-20,50}})));
          Buildings.Fluid.Actuators.Valves.TwoWayEqualPercentage val2_1(
            redeclare package Medium = Medium,
            m_flow_nominal=m_flow_nominal,
            dpValve_nominal=3000,
            dpFixed_nominal=7000) "Secondary control valve"
            annotation (Placement(transformation(extent={{190,10},{170,30}})));
          Buildings.Fluid.Actuators.Valves.TwoWayEqualPercentage val2_2(
            redeclare package Medium = Medium,
            m_flow_nominal=m_flow_nominal,
            dpValve_nominal=3000,
            dpFixed_nominal=7000) "Secondary control valve" annotation (
              Placement(transformation(extent={{190,-130},{170,-110}})));
          Buildings.Fluid.Movers.FlowControlled_m_flow sou2_3(
            redeclare package Medium = Medium,
            energyDynamics=Modelica.Fluid.Types.Dynamics.SteadyState,
            T_start=273.15 + 30,
            m_flow_nominal=m_flow_nominal,
            addPowerToMedium=false,
            nominalValuesDefineDefaultPressureCurve=true) "Secondary pump"
            annotation (Placement(transformation(extent={{190,-270},{170,-250}})));
          Buildings.Fluid.Sources.Boundary_pT bou3(
            redeclare package Medium = Medium,
            use_T_in=true,
            nPorts=2) "Boundary pressure" annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={-190,-240})));
          Buildings.Controls.OBC.CDL.Reals.Sources.Constant T3(
            k=40+273.15)
            "Primary supply temperature"
            annotation (Placement(transformation(extent={{-240,-290},{-220,-270}})));
          Buildings.Fluid.Sensors.TemperatureTwoPort senT2_5Sup(redeclare
              final package Medium = Medium, m_flow_nominal=m_flow_nominal)
            "Secondary supply temperature (measured)" annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={60,-220})));
          Buildings.Fluid.Sensors.TemperatureTwoPort senT1_3Sup(redeclare
              final package Medium = Medium, m_flow_nominal=m_flow_nominal)
            "Primary supply temperature (measured)" annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={-100,-220})));
          Buildings.Fluid.Sensors.TemperatureTwoPort senT1_3Ret(redeclare
              final package Medium = Medium, m_flow_nominal=m_flow_nominal)
            "Primary return temperature (measured)" annotation (Placement(
                transformation(
                extent={{10,-10},{-10,10}},
                rotation=0,
                origin={-100,-260})));
          Buildings.Fluid.Sensors.TemperatureTwoPort senT2_5Ret(redeclare
              final package Medium = Medium, m_flow_nominal=m_flow_nominal)
            "Secondary return temperature (measured)" annotation (Placement(
                transformation(
                extent={{10,-10},{-10,10}},
                rotation=0,
                origin={60,-260})));
          Buildings.Fluid.Sensors.MassFlowRate senMasFlo1_3(redeclare final
              package Medium = Medium) "Primary mass flow rate (measured)"
            annotation (Placement(transformation(extent={{-140,-230},{-120,-210}})));
          Buildings.Fluid.Sensors.MassFlowRate senMasFlo2_5(redeclare final
              package Medium = Medium) "Secondary mass flow rate (measured)"
            annotation (Placement(transformation(extent={{130,-230},{150,-210}})));
          Buildings.Fluid.MixingVolumes.MixingVolume vol2_3(
            energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,
            T_start=273.15 + 30,
            final prescribedHeatFlowRate=true,
            redeclare final package Medium = Medium,
            V=1,
            final mSenFac=1,
            final m_flow_nominal=m_flow_nominal,
            nPorts=2) "Volume for fluid stream" annotation (Placement(
                transformation(extent={{209,-260},{229,-280}})));
          Buildings.Fluid.HeatExchangers.HeaterCooler_u coo4(
            redeclare final package Medium = Medium,
            dp_nominal=1,
            m_flow_nominal=m_flow_nominal,
            energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,
            Q_flow_nominal=-1E5) "Heat exchange with water stream" annotation (
              Placement(transformation(extent={{100,-270},{80,-250}})));
          Buildings.Controls.OBC.CDL.Reals.Sources.Constant T2_1Ret2(
            k=30+273.15)
            "First secondary return temperature"
            annotation (Placement(transformation(extent={{60,-190},{80,-170}})));
          Buildings.Controls.OBC.CDL.Reals.PID conTChiWat5(
            k=0.1,
            Ti=10,
            yMax=1,
            controllerType=Buildings.Controls.OBC.CDL.Types.SimpleController.PI,
            yMin=0,
            reverseActing=false)
            "PI controller for chilled water supply"
            annotation (Placement(transformation(extent={{90,-190},{110,-170}})));
          Buildings.Controls.OBC.CDL.Reals.Sources.Ramp m2_5(
            height=0.5,
            duration=1000,
            offset=0.5,
            startTime=2000)
            "First secondary flow signal"
            annotation (Placement(transformation(extent={{220,-190},{200,-170}})));
          Buildings.Fluid.Movers.FlowControlled_m_flow sou2_4(
            redeclare package Medium = Medium,
            energyDynamics=Modelica.Fluid.Types.Dynamics.SteadyState,
            T_start=273.15 + 30,
            m_flow_nominal=m_flow_nominal,
            addPowerToMedium=false,
            nominalValuesDefineDefaultPressureCurve=true) "Secondary pump"
            annotation (Placement(transformation(extent={{190,-410},{170,-390}})));
          Buildings.Fluid.Sensors.TemperatureTwoPort senT2_6Sup(redeclare
              final package Medium = Medium, m_flow_nominal=m_flow_nominal)
            "Secondary supply temperature (measured)" annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={60,-360})));
          Buildings.Fluid.Sensors.TemperatureTwoPort senT2_6Ret(redeclare
              final package Medium = Medium, m_flow_nominal=m_flow_nominal)
            "Secondary return temperature (measured)" annotation (Placement(
                transformation(
                extent={{10,-10},{-10,10}},
                rotation=0,
                origin={60,-400})));
          Buildings.Fluid.Sensors.MassFlowRate senMasFlo2_6(redeclare final
              package Medium = Medium) "Secondary mass flow rate (measured)"
            annotation (Placement(transformation(extent={{130,-370},{150,-350}})));
          Buildings.Fluid.MixingVolumes.MixingVolume vol3(
            energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,
            T_start=273.15 + 30,
            final prescribedHeatFlowRate=true,
            redeclare final package Medium = Medium,
            V=1,
            final mSenFac=1,
            final m_flow_nominal=m_flow_nominal,
            nPorts=2) "Volume for fluid stream" annotation (Placement(
                transformation(extent={{209,-400},{229,-420}})));
          Buildings.Fluid.HeatExchangers.HeaterCooler_u coo5(
            redeclare final package Medium = Medium,
            dp_nominal=1,
            m_flow_nominal=m_flow_nominal,
            energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,
            Q_flow_nominal=-1E5) "Heat exchange with water stream" annotation (
              Placement(transformation(extent={{100,-410},{80,-390}})));
          Buildings.Controls.OBC.CDL.Reals.Sources.Constant T2_2Ret2(
            k=35+273.15)
            "Second secondary return temperature"
            annotation (Placement(transformation(extent={{60,-330},{80,-310}})));
          Buildings.Controls.OBC.CDL.Reals.PID conTChiWat6(
            k=0.1,
            Ti=10,
            yMax=1,
            controllerType=Buildings.Controls.OBC.CDL.Types.SimpleController.PI,
            yMin=0,
            reverseActing=false)
            "PI controller for chilled water supply"
            annotation (Placement(transformation(extent={{90,-330},{110,-310}})));
          Buildings.Controls.OBC.CDL.Reals.Sources.Constant m2_6(
            k=0.5)
            "Second secondary mass flow rate signal"
            annotation (Placement(transformation(extent={{220,-330},{200,-310}})));
          estcp.DHC.EnergyTransferStations.BaseClasses.CollectorDistributor colDis2(
            redeclare final package Medium = Medium,
            mCon_flow_nominal=fill(m_flow_nominal, 2),
            nCon=2) "Collector/distributor" annotation (Placement(
                transformation(extent={{-60,-250},{-20,-230}})));
        equation
          connect(m1.y,sou1.m_flow_in)
            annotation (Line(points={{-218,380},{-160,380},{-160,352}},color={0,0,127}));
          connect(senMasFlo1_1.port_b,senT1_1Sup.port_a)
            annotation (Line(points={{-120,340},{-110,340}},color={0,127,255}));
          connect(senT2_1Sup.port_b,senMasFlo2_1.port_a)
            annotation (Line(points={{70,340},{130,340}},color={0,127,255}));
          connect(sou1.port_b,senMasFlo1_1.port_a)
            annotation (Line(points={{-150,340},{-140,340}},color={0,127,255}));
          connect(coo.port_b,senT2_1Ret.port_a)
            annotation (Line(points={{80,300},{70,300}},color={0,127,255}));
          connect(T2_1Ret.y,conTChiWat1.u_s)
            annotation (Line(points={{82,380},{74,380},{74,384},{76,384},{76,380},{88,380}},color={0,0,127}));
          connect(conTChiWat1.y,coo.u)
            annotation (Line(points={{112,380},{120,380},{120,306},{102,306}},color={0,0,127}));
          connect(senT2_1Ret.T,conTChiWat1.u_m)
            annotation (Line(points={{60,311},{60,320},{100,320},{100,368}},color={0,0,127}));
          connect(vol2_1.ports[1],sou2_1.port_a)
            annotation (Line(points={{217,300},{190,300}},color={0,127,255}));
          connect(senMasFlo2_1.port_b,vol2_1.ports[2])
            annotation (Line(points={{150,340},{221,340},{221,300}},color={0,127,255}));
          connect(m2_1.y,sou2_1.m_flow_in)
            annotation (Line(points={{198,380},{180,380},{180,312}},color={0,0,127}));
          connect(bou1.ports[1],sou1.port_a)
            annotation (Line(points={{-180,322},{-180,340},{-170,340}},color={0,127,255}));
          connect(T1.y,bou1.T_in)
            annotation (Line(points={{-218,280},{-212,280},{-212,324},{-202,324}},color={0,0,127}));
          connect(senT2_2Sup.port_b,senMasFlo2_2.port_a)
            annotation (Line(points={{70,200},{130,200}},color={0,127,255}));
          connect(coo1.port_b,senT2_2Ret.port_a)
            annotation (Line(points={{80,160},{70,160}},color={0,127,255}));
          connect(T2_2Ret.y,conTChiWat2.u_s)
            annotation (Line(points={{82,240},{78,240},{78,244},{80,244},{80,240},{88,240}},color={0,0,127}));
          connect(conTChiWat2.y,coo1.u)
            annotation (Line(points={{112,240},{120,240},{120,166},{102,166}},color={0,0,127}));
          connect(senT2_2Ret.T,conTChiWat2.u_m)
            annotation (Line(points={{60,171},{60,180},{100,180},{100,228}},color={0,0,127}));
          connect(vol2.ports[1],sou2_2.port_a)
            annotation (Line(points={{217,160},{190,160}},color={0,127,255}));
          connect(senMasFlo2_2.port_b,vol2.ports[2])
            annotation (Line(points={{150,200},{221,200},{221,160}},color={0,127,255}));
          connect(sou2_2.port_b,coo1.port_a)
            annotation (Line(points={{170,160},{100,160}},color={0,127,255}));
          connect(senT1_1Ret.port_b,bou1.ports[2])
            annotation (Line(points={{-110,300},{-180,300},{-180,318}},color={0,127,255}));
          connect(sou2_1.port_b,coo.port_a)
            annotation (Line(points={{170,300},{100,300}},color={0,127,255}));
          connect(m2_2.y,sou2_2.m_flow_in)
            annotation (Line(points={{198,240},{180,240},{180,172}},color={0,0,127}));
          connect(senT1_1Sup.port_b,colDis.port_aDisSup)
            annotation (Line(points={{-90,340},{-80,340},{-80,320},{-60,320}},color={0,127,255}));
          connect(senT1_1Ret.port_a,colDis.port_bDisRet)
            annotation (Line(points={{-90,300},{-80,300},{-80,314},{-60,314}},color={0,127,255}));
          connect(colDis.ports_bCon[1],senT2_1Sup.port_a)
            annotation (Line(points={{-48,330},{-40,330},{-40,360},{44,360},{44,340},{50,340}},color={0,127,255}));
          connect(colDis.ports_bCon[2],senT2_2Sup.port_a)
            annotation (Line(points={{-56,330},{-56,356},{40,356},{40,200},{50,200}},color={0,127,255}));
          connect(senT2_1Ret.port_b,colDis.ports_aCon[1])
            annotation (Line(points={{50,300},{24,300},{24,340},{-14,340},{-14,330},{-24,330}},color={0,127,255}));
          connect(senT2_2Ret.port_b,colDis.ports_aCon[2])
            annotation (Line(points={{50,160},{20,160},{20,336},{-32,336},{-32,330}},color={0,127,255}));
          connect(colDis.port_bDisSup,colDis.port_aDisRet)
            annotation (Line(points={{-20,320},{0,320},{0,314},{-20,314}},color={0,127,255}));
          connect(senMasFlo1_2.port_b,senT1_2Sup.port_a)
            annotation (Line(points={{-120,60},{-110,60}},color={0,127,255}));
          connect(senT2_3Sup.port_b,senMasFlo2_3.port_a)
            annotation (Line(points={{70,60},{130,60}},color={0,127,255}));
          connect(sou2.port_b,senMasFlo1_2.port_a)
            annotation (Line(points={{-150,60},{-140,60}},color={0,127,255}));
          connect(coo2.port_b,senT2_3Ret.port_a)
            annotation (Line(points={{80,20},{70,20}},color={0,127,255}));
          connect(T2_1Ret1.y,conTChiWat3.u_s)
            annotation (Line(points={{82,100},{74,100},{74,104},{76,104},{76,100},{88,100}},color={0,0,127}));
          connect(conTChiWat3.y,coo2.u)
            annotation (Line(points={{112,100},{120,100},{120,26},{102,26}},color={0,0,127}));
          connect(senT2_3Ret.T,conTChiWat3.u_m)
            annotation (Line(points={{60,31},{60,40},{100,40},{100,88}},color={0,0,127}));
          connect(senMasFlo2_3.port_b,vol2_2.ports[1])
            annotation (Line(points={{150,60},{217,60},{217,20}},color={0,127,255}));
          connect(bou2.ports[1],sou2.port_a)
            annotation (Line(points={{-180,42},{-180,60},{-170,60}},color={0,127,255}));
          connect(T2.y,bou2.T_in)
            annotation (Line(points={{-218,0},{-212,0},{-212,44},{-202,44}},color={0,0,127}));
          connect(senT2_4Sup.port_b,senMasFlo2_4.port_a)
            annotation (Line(points={{70,-80},{130,-80}},color={0,127,255}));
          connect(coo3.port_b,senT2_4Ret.port_a)
            annotation (Line(points={{80,-120},{70,-120}},color={0,127,255}));
          connect(T2_2Ret1.y,conTChiWat4.u_s)
            annotation (Line(points={{82,-40},{78,-40},{78,-36},{80,-36},{80,-40},{88,-40}},color={0,0,127}));
          connect(conTChiWat4.y,coo3.u)
            annotation (Line(points={{112,-40},{120,-40},{120,-114},{102,-114}},color={0,0,127}));
          connect(senT2_4Ret.T,conTChiWat4.u_m)
            annotation (Line(points={{60,-109},{60,-100},{100,-100},{100,-52}},color={0,0,127}));
          connect(senMasFlo2_4.port_b,vol1.ports[1])
            annotation (Line(points={{150,-80},{217,-80},{217,-120}},color={0,127,255}));
          connect(senT1_2Ret.port_b,bou2.ports[2])
            annotation (Line(points={{-110,20},{-180,20},{-180,38}},color={0,127,255}));
          connect(senT1_2Sup.port_b,colDis1.port_aDisSup)
            annotation (Line(points={{-90,60},{-80,60},{-80,40},{-60,40}},color={0,127,255}));
          connect(senT1_2Ret.port_a,colDis1.port_bDisRet)
            annotation (Line(points={{-90,20},{-80,20},{-80,34},{-60,34}},color={0,127,255}));
          connect(colDis1.ports_bCon[1],senT2_3Sup.port_a)
            annotation (Line(points={{-48,50},{-40,50},{-40,80},{44,80},{44,60},{50,60}},color={0,127,255}));
          connect(colDis1.ports_bCon[2],senT2_4Sup.port_a)
            annotation (Line(points={{-56,50},{-56,76},{40,76},{40,-80},{50,-80}},color={0,127,255}));
          connect(senT2_3Ret.port_b,colDis1.ports_aCon[1])
            annotation (Line(points={{50,20},{24,20},{24,60},{-14,60},{-14,50},{-24,50}},color={0,127,255}));
          connect(senT2_4Ret.port_b,colDis1.ports_aCon[2])
            annotation (Line(points={{50,-120},{20,-120},{20,56},{-32,56},{-32,50}},color={0,127,255}));
          connect(vol2_2.ports[2],val2_1.port_a)
            annotation (Line(points={{221,20},{190,20}},color={0,127,255}));
          connect(val2_1.port_b,coo2.port_a)
            annotation (Line(points={{170,20},{100,20}},color={0,127,255}));
          connect(m2_3.y,val2_1.y)
            annotation (Line(points={{198,100},{180,100},{180,32}},color={0,0,127}));
          connect(vol1.ports[2],val2_2.port_a)
            annotation (Line(points={{221,-120},{190,-120}},color={0,127,255}));
          connect(val2_2.port_b,coo3.port_a)
            annotation (Line(points={{170,-120},{100,-120}},color={0,127,255}));
          connect(m2_4.y,val2_2.y)
            annotation (Line(points={{198,-40},{180,-40},{180,-108}},color={0,0,127}));
          connect(senMasFlo1_3.port_b,senT1_3Sup.port_a)
            annotation (Line(points={{-120,-220},{-110,-220}},color={0,127,255}));
          connect(senT2_5Sup.port_b,senMasFlo2_5.port_a)
            annotation (Line(points={{70,-220},{130,-220}},color={0,127,255}));
          connect(coo4.port_b,senT2_5Ret.port_a)
            annotation (Line(points={{80,-260},{70,-260}},color={0,127,255}));
          connect(T2_1Ret2.y,conTChiWat5.u_s)
            annotation (Line(points={{82,-180},{74,-180},{74,-176},{76,-176},{76,-180},{88,-180}},color={0,0,127}));
          connect(conTChiWat5.y,coo4.u)
            annotation (Line(points={{112,-180},{120,-180},{120,-254},{102,-254}},color={0,0,127}));
          connect(senT2_5Ret.T,conTChiWat5.u_m)
            annotation (Line(points={{60,-249},{60,-240},{100,-240},{100,-192}},color={0,0,127}));
          connect(vol2_3.ports[1],sou2_3.port_a)
            annotation (Line(points={{217,-260},{190,-260}},color={0,127,255}));
          connect(senMasFlo2_5.port_b,vol2_3.ports[2])
            annotation (Line(points={{150,-220},{221,-220},{221,-260}},color={0,127,255}));
          connect(m2_5.y,sou2_3.m_flow_in)
            annotation (Line(points={{198,-180},{180,-180},{180,-248}},color={0,0,127}));
          connect(T3.y,bou3.T_in)
            annotation (Line(points={{-218,-280},{-212,-280},{-212,-236},{-202,-236}},color={0,0,127}));
          connect(senT2_6Sup.port_b,senMasFlo2_6.port_a)
            annotation (Line(points={{70,-360},{130,-360}},color={0,127,255}));
          connect(coo5.port_b,senT2_6Ret.port_a)
            annotation (Line(points={{80,-400},{70,-400}},color={0,127,255}));
          connect(T2_2Ret2.y,conTChiWat6.u_s)
            annotation (Line(points={{82,-320},{78,-320},{78,-316},{80,-316},{80,-320},{88,-320}},color={0,0,127}));
          connect(conTChiWat6.y,coo5.u)
            annotation (Line(points={{112,-320},{120,-320},{120,-394},{102,-394}},color={0,0,127}));
          connect(senT2_6Ret.T,conTChiWat6.u_m)
            annotation (Line(points={{60,-389},{60,-380},{100,-380},{100,-332}},color={0,0,127}));
          connect(vol3.ports[1],sou2_4.port_a)
            annotation (Line(points={{217,-400},{190,-400}},color={0,127,255}));
          connect(senMasFlo2_6.port_b,vol3.ports[2])
            annotation (Line(points={{150,-360},{221,-360},{221,-400}},color={0,127,255}));
          connect(sou2_4.port_b,coo5.port_a)
            annotation (Line(points={{170,-400},{100,-400}},color={0,127,255}));
          connect(sou2_3.port_b,coo4.port_a)
            annotation (Line(points={{170,-260},{100,-260}},color={0,127,255}));
          connect(m2_6.y,sou2_4.m_flow_in)
            annotation (Line(points={{198,-320},{180,-320},{180,-388}},color={0,0,127}));
          connect(colDis2.ports_bCon[1],senT2_5Sup.port_a)
            annotation (Line(points={{-48,-230},{-40,-230},{-40,-200},{44,-200},{44,-220},{50,-220}},color={0,127,255}));
          connect(colDis2.ports_bCon[2],senT2_6Sup.port_a)
            annotation (Line(points={{-56,-230},{-56,-204},{40,-204},{40,-360},{50,-360}},color={0,127,255}));
          connect(senT2_5Ret.port_b,colDis2.ports_aCon[1])
            annotation (Line(points={{50,-260},{24,-260},{24,-220},{-14,-220},{-14,-230},{-24,-230}},color={0,127,255}));
          connect(senT2_6Ret.port_b,colDis2.ports_aCon[2])
            annotation (Line(points={{50,-400},{20,-400},{20,-224},{-32,-224},{-32,-230}},color={0,127,255}));
          connect(bou3.ports[1],senMasFlo1_3.port_a)
            annotation (Line(points={{-180,-238},{-180,-220},{-140,-220}},color={0,127,255}));
          connect(senT1_3Sup.port_b,colDis2.port_aDisSup)
            annotation (Line(points={{-90,-220},{-80,-220},{-80,-240},{-60,-240}},color={0,127,255}));
          connect(senT1_3Ret.port_a,colDis2.port_bDisRet)
            annotation (Line(points={{-90,-260},{-80,-260},{-80,-246},{-60,-246}},color={0,127,255}));
          connect(m1.y,sou2.m_flow_in)
            annotation (Line(points={{-218,380},{-140,380},{-140,80},{-160,80},{-160,72}},color={0,0,127}));
          connect(bou3.ports[2],senT1_3Ret.port_b)
            annotation (Line(points={{-180,-242},{-180,-260},{-110,-260}},color={0,127,255}));
          annotation (
            Documentation(
              info="<html>
<p>
This model validates
<a href=\"modelica://Buildings.Experimental.DHC.EnergyTransferStations.BaseClasses.CollectorDistributor\">
Buildings.Experimental.DHC.EnergyTransferStations.BaseClasses.CollectorDistributor</a>
in a configuration where the model is used to connect
</p>
<ol>
<li>
an active primary circuit which mass flow rate varies from 0 to 1.1 times
<code>m_flow_nominal</code> and two active secondary circuits,
one with a mass flow rate varying from 0.5 to 1 times
<code>m_flow_nominal</code>,
another with a constant mass flow rate, equal to 0.5 times
<code>m_flow_nominal</code>: this case illustrates a typical supply-through
loop and the supply temperature drop in one secondary circuit resulting
from flow recirculation when the sum of the secondary mass flow rates
exceeds the primary mass flow rate;
</li>
<li>
an active primary circuit which mass flow rate varies from 0 to 1.1 times
<code>m_flow_nominal</code> (similar to the previous case) and
two passive secondary circuits, with no recirculation loop at the
end of the distribution line,
</li>
<li>
a passive primary circuit and two active secondary circuits,
both with a varying mass flow rate, with no recirculation loop at the
end of the distribution line.
</li>
</ol>
</html>",     revisions="<html>
<ul>
<li>
November 15, 2022, by Michael Wetter:<br/>
Set pump head.
</li>
<li>
July 31, 2020, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>"),  Diagram(
              coordinateSystem(
                preserveAspectRatio=false,
                extent={{-260,-440},{260,440}})),
            __Dymola_Commands(
              file="modelica://Buildings/Resources/Scripts/Dymola/Experimental/DHC/EnergyTransferStations/BaseClasses/Validation/CollectorDistributor.mos" "Simulate and plot"),
            experiment(
              StopTime=5000,
              Tolerance=1e-06));
        end CollectorDistributor;
        annotation (
          Documentation(
            info="<html>
<p>
This package contains validation models for the classes in
<a href=\"modelica://Buildings.Experimental.DHC.EnergyTransferStations.BaseClasses\">
Buildings.Experimental.DHC.EnergyTransferStations.BaseClasses</a>.
</p>
</html>"));
      end Validation;
      annotation (
        preferredView="info",
        Documentation(
          info="<html>
<p>
This package contains base classes that are used to construct the classes in
<a href=\"modelica://Buildings.Experimental.DHC.EnergyTransferStations\">
Buildings.Experimental.DHC.EnergyTransferStations</a>.
</p>
</html>"));
    end BaseClasses;
    annotation (
      preferredView="info",
      Documentation(
        info="<html>
<p>
This package contains models for energy transfer stations (ETS), also called
end user interfaces or customer/consumer interfaces.
</p>
</html>"));
  end EnergyTransferStations;

  package Loads "Models for computing thermal loads served by the DES"
    extends Modelica.Icons.VariantsPackage;

    package Combined "Package with models for loads"
      extends Modelica.Icons.VariantsPackage;

      model BuildingTimeSeriesWithETS
        "Model of a building with loads provided as time series, connected to an ETS"
        extends estcp.DHC.Loads.Combined.BaseClasses.PartialBuildingWithETS(
            redeclare
            estcp.DHC.Loads.BaseClasses.Examples.BaseClasses.BuildingTimeSeries
            bui(
            final filNam=filNam,
            have_hotWat=true,
            T_aHeaWat_nominal=ets.THeaWatSup_nominal,
            T_bHeaWat_nominal=ets.THeaWatRet_nominal,
            T_aChiWat_nominal=ets.TChiWatSup_nominal,
            T_bChiWat_nominal=ets.TChiWatRet_nominal), ets(
            have_hotWat=true,
            QChiWat_flow_nominal=QCoo_flow_nominal,
            QHeaWat_flow_nominal=QHea_flow_nominal,
            QHotWat_flow_nominal=QHot_flow_nominal));
        parameter String filNam
          "Library path of the file with thermal loads as time series";
        final parameter Modelica.Units.SI.HeatFlowRate QCoo_flow_nominal(
          max=-Modelica.Constants.eps)=
          bui.facMul * bui.QCoo_flow_nominal
          "Space cooling design load (<=0)"
          annotation (Dialog(group="Design parameter"));
        final parameter Modelica.Units.SI.HeatFlowRate QHea_flow_nominal(
          min=Modelica.Constants.eps)=
          bui.facMul * bui.QHea_flow_nominal
          "Space heating design load (>=0)"
          annotation (Dialog(group="Design parameter"));
        final parameter Modelica.Units.SI.HeatFlowRate QHot_flow_nominal(
          min=Modelica.Constants.eps)=
          bui.facMul * estcp.DHC.Loads.BaseClasses.getPeakLoad(
            string="#Peak water heating load",
            filNam=Modelica.Utilities.Files.loadResource(filNam))
          "Hot water design load (>=0)"
          annotation (Dialog(group="Design parameter"));
        Buildings.Controls.OBC.CDL.Interfaces.RealInput THotWatSupSet(
          final unit="K",
          displayUnit="degC")
          "Service hot water supply temperature set point"
          annotation (Placement(
              transformation(
              extent={{-20,-20},{20,20}},
              rotation=0,
              origin={-320,40}),  iconTransformation(
              extent={{-20,-20},{20,20}},
              rotation=0,
              origin={-120,30})));
        Buildings.Controls.OBC.CDL.Interfaces.RealInput TColWat(
          final unit="K",
          displayUnit="degC")
          "Cold water temperature"
          annotation (Placement(transformation(
              extent={{-20,-20},{20,20}},
              rotation=0,
              origin={-320,0}),   iconTransformation(
              extent={{-20,-20},{20,20}},
              rotation=90,
              origin={-80,-120})));
        Buildings.Controls.OBC.CDL.Reals.MultiplyByParameter loaHeaNor(
          k=1/QHea_flow_nominal) "Normalized heating load"
          annotation (Placement(transformation(extent={{-200,-110},{-180,-90}})));
        Buildings.Controls.OBC.CDL.Reals.GreaterThreshold enaHeaCoo[2](each t=1e-4)
          "Threshold comparison to enable heating and cooling"
          annotation (Placement(transformation(extent={{-110,-130},{-90,-110}})));
        Modelica.Blocks.Sources.BooleanConstant enaSHW(
          final k=true) if have_hotWat
          "SHW production enable signal"
          annotation (Placement(transformation(extent={{0,-130},{-20,-110}})));
        Buildings.Controls.OBC.CDL.Reals.MultiplyByParameter loaCooNor(k=1/
              QCoo_flow_nominal) "Normalized cooling load"
          annotation (Placement(transformation(extent={{-200,-150},{-180,-130}})));
      equation
        connect(bui.QReqHotWat_flow, ets.loaSHW) annotation (Line(points={{28,4},{28,
                -10},{-64,-10},{-64,-74},{-34,-74}}, color={0,0,127}));
        connect(THotWatSupSet, ets.THotWatSupSet) annotation (Line(points={{-320,40},
                {-136,40},{-136,-66},{-34,-66}},  color={0,0,127}));
        connect(TColWat, ets.TColWat) annotation (Line(points={{-320,0},{-148,0},{
                -148,-70},{-34,-70}},  color={0,0,127}));
        connect(enaHeaCoo[1].y, ets.uHea) annotation (Line(points={{-88,-120},{-40,
                -120},{-40,-46},{-34,-46}}, color={255,0,255}));
        connect(enaHeaCoo[2].y, ets.uCoo) annotation (Line(points={{-88,-120},{-40,
                -120},{-40,-50},{-34,-50}}, color={255,0,255}));
        connect(enaSHW.y, ets.uSHW) annotation (Line(points={{-21,-120},{-38,-120},{-38,
                -54},{-34,-54}}, color={255,0,255}));
        connect(loaHeaNor.y, enaHeaCoo[1].u) annotation (Line(points={{-178,-100},{
                -120,-100},{-120,-120},{-112,-120}}, color={0,0,127}));
        connect(loaCooNor.y, enaHeaCoo[2].u) annotation (Line(points={{-178,-140},{
                -120,-140},{-120,-120},{-112,-120}}, color={0,0,127}));
        connect(bui.QReqHea_flow, loaHeaNor.u) annotation (Line(points={{20,4},{20,-6},
                {-218,-6},{-218,-100},{-202,-100}}, color={0,0,127}));
        connect(bui.QReqCoo_flow, loaCooNor.u) annotation (Line(points={{24,4},{24,-4},
                {-220,-4},{-220,-140},{-202,-140}}, color={0,0,127}));
        connect(loaHeaNor.y, resTHeaWatSup.u) annotation (Line(points={{-178,-100},{
                -120,-100},{-120,-40},{-112,-40}},  color={0,0,127}));
        annotation (
          Documentation(info="<html>
<p>
This model is composed of a heat pump based energy transfer station model
<a href=\"modelica://Buildings.Experimental.DHC.EnergyTransferStations.Combined.HeatPumpHeatExchanger\">
Buildings.Experimental.DHC.EnergyTransferStations.Combined.HeatPumpHeatExchanger</a>
connected to a simplified building model where the space heating, cooling
and hot water loads are provided as time series.
</p>
<h4>Scaling</h4>
<p>
The parameter <code>bui.facMul</code> is the multiplier factor
applied to the building loads that are provided as time series.
It is used to represent multiple identical buildings served by
a unique energy transfer station.
The parameter <code>facMul</code> is the multiplier factor
applied to the whole system composed of the building(s) and the
energy transfer station.
It is used to represent multiple identical ETSs served by
the DHC system.
So, if for instance the overall heating and cooling efficiency is
equal to <i>1</i>, then the load on the district loop
is the load provided as time series multiplied by <i>facMul * bui.facMul</i>.
</p>
<p>
Note that the parameters <code>QCoo_flow_nominal</code>, <code>QHea_flow_nominal</code>
and <code>QHot_flow_nominal</code> are the <i>ETS</i> design values. They include
the building loads multiplier factor <code>bui.facMul</code> but not
the building and ETS multiplier factor <code>facMul</code>.
</p>
</html>",       revisions="<html>
<ul>
<li>
November 21, 2022, by David Blum:<br/>
Change <code>bui.facMulHea</code> and <code>bui.facMulCoo</code> to be default.<br/>
This is for
<a href=\"https://github.com/lbl-srg/modelica-buildings/issues/2302\">
issue 2302</a>.
</li>
<li>
February 23, 2021, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>"),Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-300,-300},{
                  300,300}})));
      end BuildingTimeSeriesWithETS;

      model BuildingTimeSeriesWithETS_borefield
        "Model of a building with loads provided as time series, connected to an ETS"
        extends estcp.DHC.Loads.Combined.BaseClasses.PartialBuildingWithETS_borefield(
            redeclare
            estcp.DHC.Loads.BaseClasses.Examples.BaseClasses.BuildingTimeSeries bui(
            final filNam=filNam,
            have_hotWat=true,
            T_aHeaWat_nominal=ets.THeaWatSup_nominal,
            T_bHeaWat_nominal=ets.THeaWatRet_nominal,
            T_aChiWat_nominal=ets.TChiWatSup_nominal,
            T_bChiWat_nominal=ets.TChiWatRet_nominal), ets(
            have_hotWat=true,
            QChiWat_flow_nominal=QCoo_flow_nominal,
            QHeaWat_flow_nominal=QHea_flow_nominal,
            QHotWat_flow_nominal=QHot_flow_nominal));
        parameter String filNam
          "Library path of the file with thermal loads as time series";
        final parameter Modelica.Units.SI.HeatFlowRate QCoo_flow_nominal(
          max=-Modelica.Constants.eps)=
          bui.facMul * bui.QCoo_flow_nominal
          "Space cooling design load (<=0)"
          annotation (Dialog(group="Design parameter"));
        final parameter Modelica.Units.SI.HeatFlowRate QHea_flow_nominal(
          min=Modelica.Constants.eps)=
          bui.facMul * bui.QHea_flow_nominal
          "Space heating design load (>=0)"
          annotation (Dialog(group="Design parameter"));
        final parameter Modelica.Units.SI.HeatFlowRate QHot_flow_nominal(
          min=Modelica.Constants.eps)=
          bui.facMul * estcp.DHC.Loads.BaseClasses.getPeakLoad(
            string="#Peak water heating load",
            filNam=Modelica.Utilities.Files.loadResource(filNam))
          "Hot water design load (>=0)"
          annotation (Dialog(group="Design parameter"));
        Buildings.Controls.OBC.CDL.Interfaces.RealInput THotWatSupSet(
          final unit="K",
          displayUnit="degC")
          "Service hot water supply temperature set point"
          annotation (Placement(
              transformation(
              extent={{-20,-20},{20,20}},
              rotation=0,
              origin={-320,40}),  iconTransformation(
              extent={{-20,-20},{20,20}},
              rotation=0,
              origin={-120,30})));
        Buildings.Controls.OBC.CDL.Interfaces.RealInput TColWat(
          final unit="K",
          displayUnit="degC")
          "Cold water temperature"
          annotation (Placement(transformation(
              extent={{-20,-20},{20,20}},
              rotation=0,
              origin={-320,0}),   iconTransformation(
              extent={{-20,-20},{20,20}},
              rotation=90,
              origin={-80,-120})));
        Buildings.Controls.OBC.CDL.Reals.MultiplyByParameter loaHeaNor(
          k=1/QHea_flow_nominal) "Normalized heating load"
          annotation (Placement(transformation(extent={{-200,-110},{-180,-90}})));
        Buildings.Controls.OBC.CDL.Reals.GreaterThreshold enaHeaCoo[2](each t=1e-4)
          "Threshold comparison to enable heating and cooling"
          annotation (Placement(transformation(extent={{-110,-130},{-90,-110}})));
        Buildings.Controls.OBC.CDL.Reals.MultiplyByParameter loaCooNor(k=1/
              QCoo_flow_nominal) "Normalized cooling load"
          annotation (Placement(transformation(extent={{-200,-150},{-180,-130}})));
      equation
        connect(bui.QReqHotWat_flow, ets.loaSHW) annotation (Line(points={{28,4},{28,
                -10},{-64,-10},{-64,-74},{-34,-74}}, color={0,0,127}));
        connect(THotWatSupSet, ets.THotWatSupSet) annotation (Line(points={{-320,40},
                {-136,40},{-136,-66},{-34,-66}},  color={0,0,127}));
        connect(TColWat, ets.TColWat) annotation (Line(points={{-320,0},{-148,0},{
                -148,-70},{-34,-70}},  color={0,0,127}));
        connect(enaHeaCoo[1].y, ets.uHea) annotation (Line(points={{-88,-120},{-40,-120},
                {-40,-48},{-34,-48}},       color={255,0,255}));
        connect(enaHeaCoo[2].y, ets.uCoo) annotation (Line(points={{-88,-120},{-40,-120},
                {-40,-54},{-34,-54}},       color={255,0,255}));
        connect(loaHeaNor.y, enaHeaCoo[1].u) annotation (Line(points={{-178,-100},{
                -120,-100},{-120,-120},{-112,-120}}, color={0,0,127}));
        connect(loaCooNor.y, enaHeaCoo[2].u) annotation (Line(points={{-178,-140},{
                -120,-140},{-120,-120},{-112,-120}}, color={0,0,127}));
        connect(bui.QReqHea_flow, loaHeaNor.u) annotation (Line(points={{20,4},{20,-6},
                {-218,-6},{-218,-100},{-202,-100}}, color={0,0,127}));
        connect(bui.QReqCoo_flow, loaCooNor.u) annotation (Line(points={{24,4},{24,-4},
                {-220,-4},{-220,-140},{-202,-140}}, color={0,0,127}));
        connect(loaHeaNor.y, resTHeaWatSup.u) annotation (Line(points={{-178,-100},{
                -120,-100},{-120,-40},{-112,-40}},  color={0,0,127}));
        annotation (
          Documentation(info="<html>
<p>
This model is composed of a heat pump based energy transfer station model
<a href=\"modelica://Buildings.Experimental.DHC.EnergyTransferStations.Combined.HeatPumpHeatExchanger\">
Buildings.Experimental.DHC.EnergyTransferStations.Combined.HeatPumpHeatExchanger</a>
connected to a simplified building model where the space heating, cooling
and hot water loads are provided as time series.
</p>
<h4>Scaling</h4>
<p>
The parameter <code>bui.facMul</code> is the multiplier factor
applied to the building loads that are provided as time series.
It is used to represent multiple identical buildings served by
a unique energy transfer station.
The parameter <code>facMul</code> is the multiplier factor
applied to the whole system composed of the building(s) and the
energy transfer station.
It is used to represent multiple identical ETSs served by
the DHC system.
So, if for instance the overall heating and cooling efficiency is
equal to <i>1</i>, then the load on the district loop
is the load provided as time series multiplied by <i>facMul * bui.facMul</i>.
</p>
<p>
Note that the parameters <code>QCoo_flow_nominal</code>, <code>QHea_flow_nominal</code>
and <code>QHot_flow_nominal</code> are the <i>ETS</i> design values. They include
the building loads multiplier factor <code>bui.facMul</code> but not
the building and ETS multiplier factor <code>facMul</code>.
</p>
</html>",       revisions="<html>
<ul>
<li>
November 21, 2022, by David Blum:<br/>
Change <code>bui.facMulHea</code> and <code>bui.facMulCoo</code> to be default.<br/>
This is for
<a href=\"https://github.com/lbl-srg/modelica-buildings/issues/2302\">
issue 2302</a>.
</li>
<li>
February 23, 2021, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>"),Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-300,-300},{
                  300,300}})));
      end BuildingTimeSeriesWithETS_borefield;

      package Examples "This package contains example models"
        extends Modelica.Icons.ExamplesPackage;
        model BuildingTimeSeriesWithETS
          "Example model of a building with loads provided as time series for heat pump heating and free cooling in an ambient district network"
          extends Modelica.Icons.Example;
          package Medium=Buildings.Media.Water
            "Medium model";
          Buildings.Fluid.Sources.Boundary_pT supAmbWat(
            redeclare package Medium = Medium,
            p(displayUnit="bar"),
            use_T_in=true,
            T=280.15,
            nPorts=1) "Ambient water supply"
            annotation (Placement(transformation(extent={{-10,-10},{10,10}},rotation=0,origin={-50,-10})));
          Buildings.Fluid.Sources.Boundary_pT sinAmbWat(
            redeclare package Medium = Medium,
            p(displayUnit="bar"),
            nPorts=1) "Sink for ambient water"
            annotation (Placement(transformation(extent={{-10,-10},{10,10}},rotation=0,origin={-50,-70})));
          Buildings.Fluid.Sensors.MassFlowRate senMasFlo(redeclare package
              Medium =                                                              Medium)
            "Mass flow rate sensor"
            annotation (Placement(transformation(extent={{-20,-20},{0,0}})));
          Modelica.Blocks.Sources.Constant TDisSup(k(
              unit="K",
              displayUnit="degC") = 288.15)
            "District supply temperature"
            annotation (Placement(transformation(extent={{-92,-16},{-72,4}})));
          estcp.DHC.Loads.Combined.BuildingTimeSeriesWithETS bui(
            redeclare package MediumSer = Medium,
            redeclare package MediumBui = Medium,
            bui(facMul=10),
            allowFlowReversalSer=true,
            filNam=
                "modelica://Buildings/Resources/Data/Experimental/DHC/Loads/Examples/SwissOffice_20190916.mos")
            annotation (Placement(transformation(extent={{40,-20},{60,0}})));
          Buildings.Controls.OBC.CDL.Reals.Sources.Constant TColWat(k=bui.ets.TColWat_nominal)
            "Cold water temperature"
            annotation (Placement(transformation(extent={{-20,-50},{0,-30}})));
          Buildings.Controls.OBC.CDL.Reals.Sources.Constant THotWatSupSet(k=bui.ets.THotWatSup_nominal)
            "Hot water supply temperature set point"
            annotation (Placement(transformation(extent={{-90,20},{-70,40}})));
         Buildings.Controls.OBC.CDL.Reals.Sources.Constant TChiWatSupSet(k=bui.TChiWatSup_nominal)
            "Chilled water supply temperature set point"
            annotation (Placement(transformation(extent={{-90,60},{-70,80}})));
         Buildings.Controls.OBC.CDL.Reals.Sources.Constant THeaWatSupMaxSet(k=bui.THeaWatSup_nominal)
            "Heating water supply temperature set point - Maximum value"
            annotation (Placement(transformation(extent={{-40,60},{-20,80}})));
         Buildings.Controls.OBC.CDL.Reals.Sources.Constant THeaWatSupMinSet(
           k(final unit="K",
             displayUnit="degC") = 301.15)
           "Heating water supply temperature set point - Minimum value"
            annotation (Placement(transformation(extent={{0,60},{20,80}})));
        equation
          connect(supAmbWat.ports[1], senMasFlo.port_a)
            annotation (Line(points={{-40,-10},{-20,-10}},
                                                         color={0,127,255}));
          connect(TDisSup.y,supAmbWat. T_in)
            annotation (Line(points={{-71,-6},{-62,-6}}, color={0,0,127}));
          connect(senMasFlo.port_b, bui.port_aSerAmb) annotation (Line(points={{0,-10},
                  {40,-10}},              color={0,127,255}));
          connect(sinAmbWat.ports[1], bui.port_bSerAmb) annotation (Line(points={{-40,-70},
                  {70,-70},{70,-10},{60,-10}}, color={0,127,255}));
          connect(THeaWatSupMinSet.y, bui.THeaWatSupMinSet) annotation (Line(points={{22,70},
                  {34,70},{34,0},{38,0},{38,-1}},                 color={0,0,127}));
          connect(THeaWatSupMaxSet.y, bui.THeaWatSupMaxSet) annotation (Line(points={{-18,70},
                  {-10,70},{-10,34},{32,34},{32,-3},{38,-3}},     color={0,0,127}));
          connect(TChiWatSupSet.y, bui.TChiWatSupSet) annotation (Line(points={{-68,70},
                  {-52,70},{-52,32},{30,32},{30,-5},{38,-5}},
                                                        color={0,0,127}));
          connect(THotWatSupSet.y, bui.THotWatSupSet) annotation (Line(points={{-68,30},
                  {26,30},{26,-7},{38,-7}},                color={0,0,127}));
          connect(TColWat.y, bui.TColWat) annotation (Line(points={{2,-40},{34,-40},{34,
                  -22},{42,-22}},                      color={0,0,127}));
          annotation (
            Icon(
              coordinateSystem(
                preserveAspectRatio=false)),
            Diagram(
                coordinateSystem(
                preserveAspectRatio=false)),
            __Dymola_Commands(
              file="modelica://Buildings/Resources/Scripts/Dymola/Experimental/DHC/Loads/Combined/Examples/BuildingTimeSeriesWithETS.mos" "Simulate and plot"),
            experiment(
              StopTime=864000,
              Tolerance=1e-06),
            Documentation(info="<html>
<p>
Example model of a building with loads provided as time series for heat
pump space heating, heat pump domestic hot water heating,
and free cooling in an ambient district network.
</p>
</html>",         revisions="<html>
<ul>
<li>
May 3, 2023, by David Blum:<br/>
First implementation.
</li>
</ul>
</html>"));
        end BuildingTimeSeriesWithETS;
        annotation (Documentation(info="<html>
<p>
This package contains an example illustrating the use of the model in
<a href=\"modelica://Buildings.Experimental.DHC.Loads.Combined\">
Buildings.Experimental.DHC.Loads.Combined</a>.
</p>
</html>"));
      end Examples;

      package BaseClasses "Package with base classes that are used by multiple models"
        extends Modelica.Icons.BasesPackage;

        model PartialBuildingWithETS
          "Partial model with ETS model and partial building model"
          extends estcp.DHC.Loads.BaseClasses.PartialBuildingWithPartialETS(
            nPorts_heaWat=1,
            nPorts_chiWat=1,
            redeclare
              estcp.DHC.EnergyTransferStations.Combined.HeatPumpHeatExchanger
              ets(
              final dT_nominal=dT_nominal,
              final TDisWatMin=datDes.TLooMin,
              final TDisWatMax=datDes.TLooMax,
              final TChiWatSup_nominal=TChiWatSup_nominal,
              final THeaWatSup_nominal=THeaWatSup_nominal,
              final dp_nominal=dp_nominal,
              final COPHeaWat_nominal=COPHeaWat_nominal,
              final COPHotWat_nominal=COPHotWat_nominal));
          outer parameter
            estcp.DHC.Examples.Combined.BaseClasses.DesignDataSeries datDes
            "DHC system design data" annotation (Placement(transformation(
                  extent={{-250,262},{-230,282}})));
          parameter Modelica.Units.SI.TemperatureDifference dT_nominal(min=0) = 4
            "Water temperature drop/increase accross load and source-side HX (always positive)"
            annotation (Dialog(group="ETS model parameters"));
          parameter Modelica.Units.SI.Temperature TChiWatSup_nominal=18 + 273.15
            "Chilled water supply temperature"
            annotation (Dialog(group="ETS model parameters"));
          parameter Modelica.Units.SI.Temperature THeaWatSup_nominal=38 + 273.15
            "Heating water supply temperature"
            annotation (Dialog(group="ETS model parameters"));
          parameter Modelica.Units.SI.Pressure dp_nominal=50000
            "Pressure difference at nominal flow rate (for each flow leg)"
            annotation (Dialog(group="ETS model parameters"));
          parameter Real COPHeaWat_nominal(final unit="1") = 4.0
            "COP of heat pump for heating water production"
            annotation (Dialog(group="ETS model parameters"));
          parameter Real COPHotWat_nominal(final unit="1") = 2.3
            "COP of heat pump for hot water production"
            annotation (Dialog(group="ETS model parameters", enable=have_hotWat));
          // IO CONNECTORS
          Buildings.Controls.OBC.CDL.Interfaces.RealInput TChiWatSupSet(
            final unit="K",
            displayUnit="degC")
            "Chilled water supply temperature set point"
            annotation (Placement(
                transformation(
                extent={{-20,-20},{20,20}},
                rotation=0,
                origin={-320,80}), iconTransformation(
                extent={{-20,-20},{20,20}},
                rotation=0,
                origin={-120,50})));
          Buildings.Controls.OBC.CDL.Interfaces.RealInput THeaWatSupMaxSet(
            final unit="K",
            displayUnit="degC")
            "Heating water supply temperature set point - Maximum value"
            annotation (
              Placement(transformation(
                extent={{-20,-20},{20,20}},
                rotation=0,
                origin={-320,120}), iconTransformation(
                extent={{-20,-20},{20,20}},
                rotation=0,
                origin={-120,70})));
          Buildings.Controls.OBC.CDL.Interfaces.RealInput THeaWatSupMinSet(
            final unit="K",
            displayUnit="degC")
            "Heating water supply temperature set point - Minimum value"
            annotation (
              Placement(transformation(
                extent={{-20,-20},{20,20}},
                rotation=0,
                origin={-320,160}), iconTransformation(
                extent={{-20,-20},{20,20}},
                rotation=0,
                origin={-120,90})));
          // COMPONENTS
          Buildings.Controls.OBC.CDL.Reals.Line resTHeaWatSup
            "HW supply temperature reset"
            annotation (Placement(transformation(extent={{-110,-50},{-90,-30}})));
          Buildings.Controls.OBC.CDL.Reals.Sources.Constant zer(k=0)
            "Zero"
            annotation (Placement(transformation(extent={{-180,-30},{-160,-10}})));
          Buildings.Controls.OBC.CDL.Reals.Sources.Constant one(k=1)
            "One"
            annotation (Placement(transformation(extent={{-180,-70},{-160,-50}})));
          Buildings.Controls.OBC.CDL.Reals.MultiplyByParameter mulPPumETS(u(final
                unit="W"), final k=facMul) if have_pum "Scaling"
            annotation (Placement(transformation(extent={{270,-10},{290,10}})));
          Buildings.Controls.OBC.CDL.Interfaces.RealOutput PPumETS(
            final unit="W") if have_pum
            "ETS pump power"
            annotation (Placement(
                transformation(extent={{300,-20},{340,20}}),iconTransformation(
                extent={{-20,-20},{20,20}},
                rotation=90,
                origin={70,120})));
        equation
          connect(TChiWatSupSet, ets.TChiWatSupSet) annotation (Line(points={{-320,80},{
                  -132,80},{-132,-62},{-34,-62}},color={0,0,127}));
          connect(resTHeaWatSup.y, ets.THeaWatSupSet) annotation (Line(points={{-88,-40},
                  {-60,-40},{-60,-58},{-34,-58}}, color={0,0,127}));
          connect(THeaWatSupMaxSet, resTHeaWatSup.f2) annotation (Line(points={{-320,120},
                  {-280,120},{-280,-48},{-112,-48}}, color={0,0,127}));
          connect(THeaWatSupMinSet, resTHeaWatSup.f1) annotation (Line(points={{-320,160},
                  {-276,160},{-276,-36},{-112,-36}}, color={0,0,127}));
          connect(one.y, resTHeaWatSup.x2) annotation (Line(points={{-158,-60},{-126,-60},
                  {-126,-44},{-112,-44}}, color={0,0,127}));
          connect(zer.y, resTHeaWatSup.x1) annotation (Line(points={{-158,-20},{-116,-20},
                  {-116,-32},{-112,-32}}, color={0,0,127}));
          connect(mulPPumETS.y, PPumETS)
            annotation (Line(points={{292,0},{320,0}},   color={0,0,127}));
          connect(ets.PPum, mulPPumETS.u) annotation (Line(points={{34,-60},{240,-60},{
                  240,0},{268,0}},   color={0,0,127}));
          annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
                coordinateSystem(preserveAspectRatio=false)),
            Documentation(info="<html>
<p>
This model is composed of a heat pump based energy transfer station model 
<a href=\"modelica://Buildings.Experimental.DHC.EnergyTransferStations.Combined.HeatPumpHeatExchanger\">
Buildings.Experimental.DHC.EnergyTransferStations.Combined.HeatPumpHeatExchanger</a>
connected to a repleacable building load model. 
</p>
</html>",         revisions="<html>
<ul>
<li>
February 23, 2021, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>"));
        end PartialBuildingWithETS;

        model PartialBuildingWithETS_borefield
          "Partial model with ETS model and partial building model"
          extends estcp.DHC.Loads.BaseClasses.PartialBuildingWithPartialETS(
            nPorts_heaWat=1,
            nPorts_chiWat=1,
            redeclare estcp.DHC.EnergyTransferStations.Combined.ChillerBorefield ets(
            hex(show_T=true),
              WSE(show_T=true),
              conCon=estcp.DHC.EnergyTransferStations.Types.ConnectionConfiguration.TwoWayValve,
              dp1Hex_nominal=20E3,
              dp2Hex_nominal=20E3,
              QHex_flow_nominal=abs(QChiWat_flow_nominal),
              T_a1Hex_nominal=282.15,
              T_b1Hex_nominal=278.15,
              T_a2Hex_nominal=276.15,
              T_b2Hex_nominal=280.15,
              have_WSE=true,
              QWSE_flow_nominal=QChiWat_flow_nominal,
              dpCon_nominal=15E3,
              dpEva_nominal=15E3,
              final datChi=datChi,
              T_a1WSE_nominal=281.15,
              T_b1WSE_nominal=286.15,
              T_a2WSE_nominal=288.15,
              T_b2WSE_nominal=283.15));
          parameter Modelica.Units.SI.TemperatureDifference dT_nominal(min=0) = 4
            "Water temperature drop/increase accross load and source-side HX (always positive)"
            annotation (Dialog(group="ETS model parameters"));
          parameter Modelica.Units.SI.Temperature TChiWatSup_nominal=18 + 273.15
            "Chilled water supply temperature"
            annotation (Dialog(group="ETS model parameters"));
          parameter Modelica.Units.SI.Temperature THeaWatSup_nominal=38 + 273.15
            "Heating water supply temperature"
            annotation (Dialog(group="ETS model parameters"));
          parameter Modelica.Units.SI.Pressure dp_nominal=50000
            "Pressure difference at nominal flow rate (for each flow leg)"
            annotation (Dialog(group="ETS model parameters"));
          parameter Real COPHeaWat_nominal(final unit="1") = 4.0
            "COP of heat pump for heating water production"
            annotation (Dialog(group="ETS model parameters"));
          parameter Real COPHotWat_nominal(final unit="1") = 2.3
            "COP of heat pump for hot water production"
            annotation (Dialog(group="ETS model parameters", enable=have_hotWat));
          // IO CONNECTORS
          Buildings.Controls.OBC.CDL.Interfaces.RealInput TChiWatSupSet(
            final unit="K",
            displayUnit="degC")
            "Chilled water supply temperature set point"
            annotation (Placement(
                transformation(
                extent={{-20,-20},{20,20}},
                rotation=0,
                origin={-320,80}), iconTransformation(
                extent={{-20,-20},{20,20}},
                rotation=0,
                origin={-120,50})));
          Buildings.Controls.OBC.CDL.Interfaces.RealInput THeaWatSupMaxSet(
            final unit="K",
            displayUnit="degC")
            "Heating water supply temperature set point - Maximum value"
            annotation (
              Placement(transformation(
                extent={{-20,-20},{20,20}},
                rotation=0,
                origin={-320,120}), iconTransformation(
                extent={{-20,-20},{20,20}},
                rotation=0,
                origin={-120,70})));
          Buildings.Controls.OBC.CDL.Interfaces.RealInput THeaWatSupMinSet(
            final unit="K",
            displayUnit="degC")
            "Heating water supply temperature set point - Minimum value"
            annotation (
              Placement(transformation(
                extent={{-20,-20},{20,20}},
                rotation=0,
                origin={-320,160}), iconTransformation(
                extent={{-20,-20},{20,20}},
                rotation=0,
                origin={-120,90})));
          // COMPONENTS
          Buildings.Controls.OBC.CDL.Reals.Line resTHeaWatSup
            "HW supply temperature reset"
            annotation (Placement(transformation(extent={{-110,-50},{-90,-30}})));
          Buildings.Controls.OBC.CDL.Reals.Sources.Constant zer(k=0)
            "Zero"
            annotation (Placement(transformation(extent={{-180,-30},{-160,-10}})));
          Buildings.Controls.OBC.CDL.Reals.Sources.Constant one(k=1)
            "One"
            annotation (Placement(transformation(extent={{-180,-70},{-160,-50}})));
          Buildings.Controls.OBC.CDL.Reals.MultiplyByParameter mulPPumETS(u(final
                unit="W"), final k=facMul) if have_pum "Scaling"
            annotation (Placement(transformation(extent={{270,-10},{290,10}})));
          Buildings.Controls.OBC.CDL.Interfaces.RealOutput PPumETS(
            final unit="W") if have_pum
            "ETS pump power"
            annotation (Placement(
                transformation(extent={{300,-20},{340,20}}),iconTransformation(
                extent={{-20,-20},{20,20}},
                rotation=90,
                origin={70,120})));
          parameter Buildings.Fluid.Chillers.Data.ElectricEIR.Generic datChi(
            QEva_flow_nominal=QChiWat_flow_nominal,
            COP_nominal=3.8,
            PLRMax=1,
            PLRMinUnl=0.3,
            PLRMin=0.3,
            etaMotor=1,
            mEva_flow_nominal=abs(QChiWat_flow_nominal)/4186/4,
            mCon_flow_nominal=abs(QChiWat_flow_nominal)*(1+1/datChi.COP_nominal)/4186/8,
            TEvaLvg_nominal=276.15,
            capFunT={1.72,0.02,0,-0.02,0,0},
            EIRFunT={0.28,-0.02,0,0.02,0,0},
            EIRFunPLR={0.1,0.9,0},
            TEvaLvgMin=276.15,
            TEvaLvgMax=288.15,
            TConEnt_nominal=315.15,
            TConEntMin=291.15,
            TConEntMax=328.15)
            "Chiller performance data"
            annotation (Placement(transformation(extent={{-250,260},{-230,280}})));
        equation
          connect(TChiWatSupSet, ets.TChiWatSupSet) annotation (Line(points={{-320,80},{
                  -132,80},{-132,-66},{-34,-66}},color={0,0,127}));
          connect(resTHeaWatSup.y, ets.THeaWatSupSet) annotation (Line(points={{-88,-40},
                  {-60,-40},{-60,-60},{-34,-60}}, color={0,0,127}));
          connect(THeaWatSupMaxSet, resTHeaWatSup.f2) annotation (Line(points={{-320,120},
                  {-280,120},{-280,-48},{-112,-48}}, color={0,0,127}));
          connect(THeaWatSupMinSet, resTHeaWatSup.f1) annotation (Line(points={{-320,160},
                  {-276,160},{-276,-36},{-112,-36}}, color={0,0,127}));
          connect(one.y, resTHeaWatSup.x2) annotation (Line(points={{-158,-60},{-126,-60},
                  {-126,-44},{-112,-44}}, color={0,0,127}));
          connect(zer.y, resTHeaWatSup.x1) annotation (Line(points={{-158,-20},{-116,-20},
                  {-116,-32},{-112,-32}}, color={0,0,127}));
          connect(mulPPumETS.y, PPumETS)
            annotation (Line(points={{292,0},{320,0}},   color={0,0,127}));
          connect(ets.PPum, mulPPumETS.u) annotation (Line(points={{34,-60},{240,-60},{
                  240,0},{268,0}},   color={0,0,127}));
          annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
                coordinateSystem(preserveAspectRatio=false)),
            Documentation(info="<html>
<p>
This model is composed of a heat pump based energy transfer station model 
<a href=\"modelica://Buildings.Experimental.DHC.EnergyTransferStations.Combined.HeatPumpHeatExchanger\">
Buildings.Experimental.DHC.EnergyTransferStations.Combined.HeatPumpHeatExchanger</a>
connected to a repleacable building load model. 
</p>
</html>",         revisions="<html>
<ul>
<li>
February 23, 2021, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>"));
        end PartialBuildingWithETS_borefield;
      annotation (Documentation(info="<html>
<p>
This package contains base classes that are used to construct the classes in
<a href=\"modelica://Buildings.Experimental.DHC.Loads.Combined\">
Buildings.Experimental.DHC.Loads.Combined</a>.
</p>
</html>"));
      end BaseClasses;
    annotation (Documentation(info="<html>
<p>
This package contains models of building loads that are used to
build example models of DHC systems.
</p>
</html>"));
    end Combined;

    package Cooling "This package contains models for energy transfer stations used in district cooling system."
      extends Modelica.Icons.VariantsPackage;

      model BuildingTimeSeriesWithETS
        "Model of a building with loads provided as time series, connected to an ETS for cooling"
        extends BaseClasses.PartialBuildingWithETS(
          redeclare
            estcp.DHC.Loads.BaseClasses.Examples.BaseClasses.BuildingTimeSeries
            bui(
            final have_heaWat=false,
            final have_chiWat=true,
            final have_hotWat=false,
            final filNam=filNam,
            T_aChiWat_nominal=TChiWatSup_nominal,
            T_bChiWat_nominal=TChiWatRet_nominal),
            mBui_flow_nominal=-QCoo_flow_nominal/(cp*dT_nominal),
                ets(
            QChiWat_flow_nominal=QCoo_flow_nominal));

        final parameter Modelica.Units.SI.HeatFlowRate QCoo_flow_nominal=
          bui.facMul * bui.QCoo_flow_nominal
          "Space cooling design load (<=0)";
        parameter Modelica.Units.SI.TemperatureDifference dT_nominal(min=0)=9
          "Water temperature drop/increase accross load and source-side HX (always positive)"
          annotation (Dialog(group="Nominal condition"));
        parameter Modelica.Units.SI.Temperature TChiWatSup_nominal=7 + 273.15
          "Chilled water supply temperature"
          annotation (Dialog(group="Nominal conditions"));
        final parameter Modelica.Units.SI.Temperature TChiWatRet_nominal=
          TChiWatSup_nominal + dT_nominal
          "Chilled water return temperature"
          annotation (Dialog(group="Nominal condition"));
        parameter Modelica.Fluid.Types.Dynamics energyDynamics=Modelica.Fluid.Types.Dynamics.SteadyState
          "Type of energy balance"
          annotation (Evaluate=true,Dialog(tab="Dynamics",group="Conservation equations"));
        parameter Boolean use_inputFilter=false
          "= true, if pump speed is filtered with a 2nd order CriticalDamping filter"
          annotation(Dialog(tab="Dynamics", group="Pump"));
        parameter String filNam
          "Library path of the file with thermal loads as time series";
      protected
        parameter Modelica.Units.SI.SpecificHeatCapacity cp=MediumSer.specificHeatCapacityCp(
          MediumSer.setState_pTX(
            MediumSer.p_default,
            MediumSer.T_default,
            MediumSer.X_default))
          "Default specific heat capacity of medium";
        annotation (
        defaultComponentName="loa",
        Documentation(info="<html>
<p>
This model is composed of a direct controlled energy transfer station model for cooling
<a href=\"modelica://Buildings/Experimental/DHC/EnergyTransferStations/Cooling/Direct.mo\">
Buildings.Experimental.DHC.EnergyTransferStations.Cooling.Direct</a> 
connected to a simplified building model <a href=\"modelica://Buildings/Experimental/DHC/Loads/Cooling/BaseClasses/BuildingTimeSeries.mo\">
Buildings.Experimental.DHC.Loads.Cooling.BaseClasses.BuildingTimeSeries</a> 
where the space cooling loads are provided as time series. 
</p>
</html>",       revisions="<html>
<ul>
<li>
January 12, 2023, by Michael Wetter:<br/>
Removed unused parameter <code>riseTime</code>.
</li>
<li>
January 2, 2023, by Kathryn Hinkelman:<br/>
Propagated energy dynamics and a filter for the (variable) secondary pumps.
</li>
<li>
December 23, 2022, by Kathryn Hinkelman:<br>
Revised ETS from direct uncontrolled to direct controlled. 
This is for <a href=\"https://github.com/lbl-srg/modelica-buildings/issues/2912\">#2912</a>.
</li>
<li>
December 21, 2022 by Kathryn Hinkelman:<br>
Removed in-building pumping because of coupling with the direct/uncontrolled ETS.<br> 
This is for <a href=\"https://github.com/lbl-srg/modelica-buildings/issues/2912\">#2912</a>.
</li>
</ul>
<ul>
<li>March 20, 2022 by Chengnan Shi:<br>First implementation. </li>
</ul>
</html>"));
      end BuildingTimeSeriesWithETS;

      package Examples
        extends Modelica.Icons.ExamplesPackage;

        model BuildingTimeSeriesWithETS
          "Example model of a building with loads provided as time series and
  connected to an ETS for cooling"
          extends Modelica.Icons.Example;
          package Medium=Buildings.Media.Water
            "Medium model";
          estcp.DHC.Loads.Cooling.BuildingTimeSeriesWithETS buiWitETS(filNam=
                "modelica://Buildings/Resources/Data/Experimental/DHC/Loads/Examples/MediumOffice-90.1-2010-5A.mos")
            "Building Time Series load coupled with ETS"
            annotation (Placement(transformation(extent={{40,-20},{60,0}})));
          Buildings.Fluid.Sources.Boundary_pT supChiWat(
            redeclare package Medium = Medium,
            p(displayUnit="bar") = 350000,
            use_T_in=true,
            T=280.15,
            nPorts=1)
            "Chilled water supply"
            annotation (Placement(transformation(extent={{-10,-10},{10,10}},rotation=0,origin={-50,10})));
          Buildings.Fluid.Sources.Boundary_pT sinChiWat(
            redeclare package Medium = Medium,
            p(displayUnit="bar") = 340000,
            nPorts=1)
            "Sink for chilled water"
            annotation (Placement(transformation(extent={{-10,-10},{10,10}},rotation=0,origin={-50,-50})));
          Buildings.Fluid.Sensors.MassFlowRate senMasFlo(redeclare package
              Medium =                                                              Medium)
            "Mass flow rate sensor"
            annotation (Placement(transformation(extent={{-20,0},{0,20}})));
          Modelica.Blocks.Sources.Constant TDisRetSet(k=273.15 + 16)
            "Setpoint for district return temperature"
            annotation (Placement(transformation(extent={{0,40},{20,60}})));
          Modelica.Blocks.Sources.Constant TDisSup(k(
              unit="K",
              displayUnit="degC") = 280.15)
            "District supply temperature"
            annotation (Placement(transformation(extent={{-90,4},{-70,24}})));
        equation
          connect(supChiWat.ports[1], senMasFlo.port_a)
            annotation (Line(points={{-40,10},{-20,10}}, color={0,127,255}));
          connect(senMasFlo.port_b, buiWitETS.port_aSerCoo) annotation (Line(points={{0,
                  10},{20,10},{20,-18},{40,-18}}, color={0,127,255}));
          connect(buiWitETS.port_bSerCoo, sinChiWat.ports[1]) annotation (Line(points={
                  {60,-18},{80,-18},{80,-50},{-40,-50}}, color={0,127,255}));
          connect(TDisSup.y, supChiWat.T_in)
            annotation (Line(points={{-69,14},{-62,14}}, color={0,0,127}));
          connect(TDisRetSet.y, buiWitETS.TSetDisRet) annotation (Line(points={{21,50},
                  {30,50},{30,-3},{39,-3}}, color={0,0,127}));
          annotation (
            Icon(
              coordinateSystem(
                preserveAspectRatio=false)),
            Diagram(
                coordinateSystem(
                preserveAspectRatio=false)),
            __Dymola_Commands(
              file="modelica://Buildings/Resources/Scripts/Dymola/Experimental/DHC/Loads/Cooling/Examples/BuildingTimeSeriesWithETS.mos" "Simulate and plot"),
            experiment(
              StartTime=2592000,
              StopTime=3628800,
              Tolerance=1e-06),
            Documentation(info="<html>
<p>
This model provides an example for a building with loads provided
as time series and connected to a direct ETS for cooling with the
return chilled water temperature controlled above a minimum threshold.
</p>
</html>",         revisions="<html>
<ul>
<li>
March 20, 2022, by Chengnan Shi:<br/>
First implementation.
</li>
</ul>
</html>"));
        end BuildingTimeSeriesWithETS;
      annotation (Documentation(info="<html>
<p>This package contains an example illustrating the use of the model in 
<a href=\"modelica://Buildings.Experimental.DHC.Loads.Cooling\">
Buildings.Experimental.DHC.Loads.Cooling</a>.
</p>
</html>"));
      end Examples;

      package BaseClasses "Package with base classes that are used by multiple models"
        extends Modelica.Icons.BasesPackage;

        model PartialBuildingWithETS
          "Partial model with ETS model for cooling and partial building model"
          extends estcp.DHC.Loads.BaseClasses.PartialBuildingWithPartialETS(
              nPorts_chiWat=1, redeclare
              estcp.DHC.EnergyTransferStations.Cooling.Direct ets(
              final mBui_flow_nominal=mBui_flow_nominal,
              final controllerType=controllerType,
              final k=k,
              final Ti=Ti,
              final Td=Td,
              final yMax=yMax,
              final yMin=yMin));

          parameter Modelica.Units.SI.MassFlowRate mBui_flow_nominal(
            final min=0,
            final start=0.5)
            "Nominal mass flow rate"
            annotation (Dialog(group="Nominal condition"));
          parameter Modelica.Units.SI.PressureDifference dpSup(
            final min=0,
            displayUnit="Pa")=5000
            "Pressure drop in the ETS supply side";
          parameter Modelica.Units.SI.PressureDifference dpRet(
            final min=0,
            displayUnit="Pa")=5000
            "Pressure drop in the ETS return side";
          // Controller parameters
          parameter Modelica.Blocks.Types.SimpleController controllerType=Modelica.Blocks.Types.SimpleController.PI
            "Type of controller"
            annotation (Dialog(group="PID controller"));
          parameter Real k(
            final min=0,
            final unit="1")=0.1
            "Gain of controller"
            annotation (Dialog(group="PID controller"));
          parameter Modelica.Units.SI.Time Ti(
            final min=Modelica.Constants.small)=60
            "Time constant of integrator block"
            annotation (Dialog(group="PID controller",enable=controllerType == Buildings.Controls.OBC.CDL.Types.SimpleController.PI or controllerType == Buildings.Controls.OBC.CDL.Types.SimpleController.PID));
          parameter Modelica.Units.SI.Time Td(
            final min=0)=0.1
            "Time constant of derivative block"
            annotation (Dialog(group="PID controller",enable=controllerType == Buildings.Controls.OBC.CDL.Types.SimpleController.PD or controllerType == Buildings.Controls.OBC.CDL.Types.SimpleController.PID));
          parameter Real yMax(
            final start=1)=1
            "Upper limit of output"
            annotation (Dialog(group="PID controller"));
          parameter Real yMin=0
            "Lower limit of output"
            annotation (Dialog(group="PID controller"));
          Modelica.Blocks.Interfaces.RealInput TSetDisRet(
             final unit="K",
             displayUnit="degC")
            "Setpoint for the minimum district return temperature"
            annotation (Placement(transformation(extent={{-340,20},{-300,-20}}),
                iconTransformation(extent={{-120,60},{-100,80}})));
        equation
          connect(TSetDisRet, ets.TSetDisRet) annotation (Line(points={{-320,0},{-64,0},
                  {-64,-56},{-31.8,-56}}, color={0,0,127}));
          annotation (Documentation(info="<html>
<p>
This model is composed of a direct controlled energy transfer station model for cooling
<a href=\"modelica://Buildings.Experimental.DHC.EnergyTransferStations.Cooling.Direct\">
Buildings.Experimental.DHC.EnergyTransferStations.Cooling.Direct</a>
connected to a repleacable building load model.
</p>
</html>",         revisions="<html>
<ul>
<li>
December 23, 2022, by Kathryn Hinkelman:<br>
Revised ETS from direct uncontrolled to direct controlled.
This is for <a href=\"https://github.com/lbl-srg/modelica-buildings/issues/2912\">#2912</a>.
</li>
</ul>
<ul>
<li>March 20, 2022, by Chengnan Shi:<br>First implementation. </li>
</ul>
</html>"));
        end PartialBuildingWithETS;
      annotation (Documentation(info="<html>
<p>
This package contains base classes that are used to construct the classes in
<a href=\"modelica://Buildings.Experimental.DHC.Loads.Cooling\">
Buildings.Experimental.DHC.Loads.Cooling</a>.
</p>
</html>"));
      end BaseClasses;
    annotation (Documentation(info="<html>
<p>
This package contains models of building loads that are used to
build example models of district cooling systems.
</p>
</html>"));
    end Cooling;

    package Heating "This package contains models for loads used in district heating systems."
      extends Modelica.Icons.VariantsPackage;

      model BuildingTimeSeriesWithETS
        "Model of a building with loads provided as time series, connected to an ETS for heating"
        extends BaseClasses.PartialBuildingWithETS(
          redeclare
            estcp.DHC.Loads.BaseClasses.Examples.BaseClasses.BuildingTimeSeries
            bui(
            final have_heaWat=true,
            final have_chiWat=false,
            final have_hotWat=false,
            final filNam=filNam,
            T_aHeaWat_nominal=THeaWatSup_nominal,
            T_bHeaWat_nominal=THeaWatRet_nominal),
            mBui_flow_nominal=QHea_flow_nominal/(cp*dT_nominal),
                ets(
            QHeaWat_flow_nominal=QHea_flow_nominal));

        final parameter Modelica.Units.SI.HeatFlowRate QHea_flow_nominal=
          bui.facMul * bui.QHea_flow_nominal
          "Space heating design load (>=0)";
        parameter Modelica.Units.SI.TemperatureDifference dT_nominal(min=0)=10
          "Water temperature drop/increase accross load and source-side HX (always positive)"
          annotation (Dialog(group="Nominal condition"));
        parameter Modelica.Units.SI.Temperature THeaWatSup_nominal=50 + 273.15
          "Heating water supply temperature"
          annotation (Dialog(group="Nominal conditions"));
        final parameter Modelica.Units.SI.Temperature THeaWatRet_nominal=
          THeaWatSup_nominal - dT_nominal
          "Heating water return temperature"
          annotation (Dialog(group="Nominal condition"));
        parameter Modelica.Fluid.Types.Dynamics energyDynamics=Modelica.Fluid.Types.Dynamics.SteadyState
          "Type of energy balance"
          annotation (Evaluate=true,Dialog(tab="Dynamics",group="Conservation equations"));
        parameter Boolean use_inputFilter=false
          "= true, if pump speed is filtered with a 2nd order CriticalDamping filter"
          annotation(Dialog(tab="Dynamics", group="Pump"));
        parameter String filNam
          "Library path of the file with thermal loads as time series";
      protected
        parameter Modelica.Units.SI.SpecificHeatCapacity cp=MediumSer.specificHeatCapacityCp(
          MediumSer.setState_pTX(
            MediumSer.p_default,
            MediumSer.T_default,
            MediumSer.X_default))
          "Default specific heat capacity of medium";
        annotation (
        defaultComponentName="loa",
        Documentation(info="<html>
<p>
This model is composed of a direct controlled energy transfer station model for heating
<a href=\"modelica://Buildings/Experimental/DHC/EnergyTransferStations/Heating/Direct.mo\">
Buildings.Experimental.DHC.EnergyTransferStations.Heating.Direct</a> 
connected to a simplified building model <a href=\"modelica://Buildings/Experimental/DHC/Loads/Heating/BaseClasses/BuildingTimeSeries.mo\">
Buildings.Experimental.DHC.Loads.Heating.BaseClasses.BuildingTimeSeries</a> 
where the space heating loads are provided as time series. 
</p>
</html>",       revisions="<html>
<ul>
<li>
January 12, 2023, by Michael Wetter:<br/>
Removed unused parameter <code>riseTime</code>.
</li>
<li>
January 2, 2023, by Kathryn Hinkelman:<br/>
Propagated energy dynamics and a filter for the (variable) secondary pumps.
</li>
<li>
December 23, 2022, by Kathryn Hinkelman:<br>
Revised ETS from direct uncontrolled to direct controlled. 
This is for <a href=\"https://github.com/lbl-srg/modelica-buildings/issues/2912\">#2912</a>.
</li>
<li>
December 21, 2022 by Kathryn Hinkelman:<br>
Removed in-building pumping because of coupling with the direct/uncontrolled ETS.<br> 
This is for <a href=\"https://github.com/lbl-srg/modelica-buildings/issues/2912\">#2912</a>.
</li>
</ul>
<ul>
<li>March 20, 2022 by Chengnan Shi:<br>First implementation. </li>
</ul>
</html>"));
      end BuildingTimeSeriesWithETS;

      package Examples
        extends Modelica.Icons.ExamplesPackage;

        model BuildingTimeSeriesWithETS
          "Example model of a building with loads provided as time series and
  connected to an ETS for cooling"
          extends Modelica.Icons.Example;
          package Medium=Buildings.Media.Water
            "Medium model";
          estcp.DHC.Loads.Heating.BuildingTimeSeriesWithETS buiWitETS(filNam=
                "modelica://Buildings/Resources/Data/Experimental/DHC/Loads/Examples/MediumOffice-90.1-2010-5A.mos")
            "Building Time Series load coupled with ETS"
            annotation (Placement(transformation(extent={{40,-20},{60,0}})));
          Buildings.Fluid.Sources.Boundary_pT supHeaWat(
            redeclare package Medium = Medium,
            p(displayUnit="bar") = 350000,
            use_T_in=true,
            nPorts=1) "Heating water supply"
            annotation (Placement(transformation(extent={{-10,-10},{10,10}},rotation=0,origin={-50,10})));
          Buildings.Fluid.Sources.Boundary_pT sinHeaWat(
            redeclare package Medium = Medium,
            p(displayUnit="bar") = 340000,
            nPorts=1) "Sink for heating water"
            annotation (Placement(transformation(extent={{-10,-10},{10,10}},rotation=0,origin={-50,-50})));
          Buildings.Fluid.Sensors.MassFlowRate senMasFlo(redeclare package
              Medium =                                                              Medium)
            "Mass flow rate sensor"
            annotation (Placement(transformation(extent={{-20,0},{0,20}})));
          Modelica.Blocks.Sources.Constant TDisRetSet(k=273.15 + 45)
            "Setpoint for district return temperature"
            annotation (Placement(transformation(extent={{0,40},{20,60}})));
          Modelica.Blocks.Sources.Constant TDisSup(k(
              unit="K",
              displayUnit="degC") = 323.15)
            "District supply temperature"
            annotation (Placement(transformation(extent={{-90,4},{-70,24}})));
        equation
          connect(supHeaWat.ports[1], senMasFlo.port_a)
            annotation (Line(points={{-40,10},{-20,10}}, color={0,127,255}));
          connect(TDisSup.y,supHeaWat. T_in)
            annotation (Line(points={{-69,14},{-62,14}}, color={0,0,127}));
          connect(TDisRetSet.y, buiWitETS.TSetDisRet) annotation (Line(points={{21,50},
                  {30,50},{30,-3},{39,-3}}, color={0,0,127}));
          connect(senMasFlo.port_b, buiWitETS.port_aSerHea) annotation (Line(points={{0,
                  10},{20,10},{20,-14},{40,-14}}, color={0,127,255}));
          connect(buiWitETS.port_bSerHea, sinHeaWat.ports[1]) annotation (Line(points={{
                  60,-14},{80,-14},{80,-50},{-40,-50}}, color={0,127,255}));
          annotation (
            Icon(
              coordinateSystem(
                preserveAspectRatio=false)),
            Diagram(
                coordinateSystem(
                preserveAspectRatio=false)),
            __Dymola_Commands(
              file="modelica://Buildings/Resources/Scripts/Dymola/Experimental/DHC/Loads/Heating/Examples/BuildingTimeSeriesWithETS.mos" "Simulate and plot"),
            experiment(
              StartTime=2592000,
              StopTime=3628800,
              Tolerance=1e-06),
            Documentation(info="<html>
<p>
This model provides an example for a building with loads provided
as time series and connected to a direct ETS for heating with the
return heating water temperature controlled below a maximum threshold.
</p>
</html>",         revisions="<html>
<ul>
<li>
March 20, 2022, by Chengnan Shi:<br/>
First implementation.
</li>
</ul>
</html>"));
        end BuildingTimeSeriesWithETS;
      annotation (Documentation(info="<html>
<p>This package contains an example illustrating the use of the model in 
<a href=\"modelica://Buildings.Experimental.DHC.Loads.Cooling\">
Buildings.Experimental.DHC.Loads.Cooling</a>.
</p>
</html>"));
      end Examples;

      package BaseClasses "Package with base classes that are used by multiple models"
        extends Modelica.Icons.BasesPackage;

        model PartialBuildingWithETS
          "Partial model with ETS model for heating and partial building model"
          extends estcp.DHC.Loads.BaseClasses.PartialBuildingWithPartialETS(
              nPorts_heaWat=1, redeclare
              estcp.DHC.EnergyTransferStations.Heating.Direct ets(
              final mBui_flow_nominal=mBui_flow_nominal,
              final controllerType=controllerType,
              final k=k,
              final Ti=Ti,
              final Td=Td,
              final yMax=yMax,
              final yMin=yMin));

          parameter Modelica.Units.SI.MassFlowRate mBui_flow_nominal(
            final min=0,
            final start=0.5)
            "Nominal mass flow rate"
            annotation (Dialog(group="Nominal condition"));
          parameter Modelica.Units.SI.PressureDifference dpSup(
            final min=0,
            displayUnit="Pa")=5000
            "Pressure drop in the ETS supply side";
          parameter Modelica.Units.SI.PressureDifference dpRet(
            final min=0,
            displayUnit="Pa")=5000
            "Pressure drop in the ETS return side";
          // Controller parameters
          parameter Modelica.Blocks.Types.SimpleController controllerType=Modelica.Blocks.Types.SimpleController.PI
            "Type of controller"
            annotation (Dialog(group="PID controller"));
          parameter Real k(
            final min=0,
            final unit="1")=0.1
            "Gain of controller"
            annotation (Dialog(group="PID controller"));
          parameter Modelica.Units.SI.Time Ti(
            final min=Modelica.Constants.small)=60
            "Time constant of integrator block"
            annotation (Dialog(group="PID controller",enable=controllerType == Buildings.Controls.OBC.CDL.Types.SimpleController.PI or controllerType == Buildings.Controls.OBC.CDL.Types.SimpleController.PID));
          parameter Modelica.Units.SI.Time Td(
            final min=0)=0.1
            "Time constant of derivative block"
            annotation (Dialog(group="PID controller",enable=controllerType == Buildings.Controls.OBC.CDL.Types.SimpleController.PD or controllerType == Buildings.Controls.OBC.CDL.Types.SimpleController.PID));
          parameter Real yMax(
            final start=1)=1
            "Upper limit of output"
            annotation (Dialog(group="PID controller"));
          parameter Real yMin=0
            "Lower limit of output"
            annotation (Dialog(group="PID controller"));
          Modelica.Blocks.Interfaces.RealInput TSetDisRet(
             final unit="K",
             displayUnit="degC")
            "Setpoint for the maximum district return temperature"
            annotation (Placement(transformation(extent={{-340,20},{-300,-20}}),
                iconTransformation(extent={{-120,60},{-100,80}})));
        equation
          connect(TSetDisRet, ets.TSetDisRet) annotation (Line(points={{-320,0},{-64,0},
                  {-64,-56},{-31.8,-56}}, color={0,0,127}));
          annotation (Documentation(info="<html>
<p>
This model is composed of a direct controlled energy transfer station model for cooling
<a href=\"modelica://Buildings.Experimental.DHC.EnergyTransferStations.Cooling.Direct\">
Buildings.Experimental.DHC.EnergyTransferStations.Cooling.Direct</a>
connected to a repleacable building load model.
</p>
</html>",         revisions="<html>
<ul>
<li>
December 23, 2022, by Kathryn Hinkelman:<br>
Revised ETS from direct uncontrolled to direct controlled.
This is for <a href=\"https://github.com/lbl-srg/modelica-buildings/issues/2912\">#2912</a>.
</li>
</ul>
<ul>
<li>March 20, 2022, by Chengnan Shi:<br>First implementation. </li>
</ul>
</html>"));
        end PartialBuildingWithETS;
      annotation (Documentation(info="<html>
<p>
This package contains base classes that are used to construct the classes in
<a href=\"modelica://Buildings.Experimental.DHC.Loads.Cooling\">
Buildings.Experimental.DHC.Loads.Cooling</a>.
</p>
</html>"));
      end BaseClasses;
    annotation (Documentation(info="<html>
<p>
This package contains models of building loads that are used to
build example models of district cooling systems.
</p>
</html>"));
    end Heating;

    package Steam "Package with models for loads involving steam systems"
      extends Modelica.Icons.VariantsPackage;

      model BuildingTimeSeriesAtETS
        "Steam heating building interconnection with the district piping only
  and the load at the ETS provided as a time series."
        replaceable package MediumSte = Buildings.Media.Steam constrainedby
          Modelica.Media.Interfaces.PartialMedium
           "Steam medium";
        replaceable package MediumWat =
         Buildings.Media.Specialized.Water.TemperatureDependentDensity
         constrainedby Modelica.Media.Interfaces.PartialMedium
          "Water medium";

        constant Boolean allowFlowReversal = false
          "= false to simplify equations, assuming, but not enforcing, no flow reversal. Set to false because the flow rate is prescribed."
          annotation(Dialog(tab="Assumptions"), Evaluate=true);

        parameter Boolean have_prv = false
          "Set to true if the building has a pressure reducing valve (PRV) station";
        // Nominal conditions
        parameter Modelica.Units.SI.Power Q_flow_nominal
          "Nominal heat flow rate"
          annotation(Dialog(group = "Nominal condition"));
        parameter Modelica.Units.SI.PressureDifference dp_nominal(displayUnit="Pa")
          "Pressure drop at nominal mass flow rate"
          annotation(Dialog(group = "Nominal condition"));
        parameter Modelica.Units.SI.AbsolutePressure pSte_nominal=MediumSte.p_default
          "Nominal pressure of steam entering the building"
          annotation(Dialog(group = "Nominal condition"));
        parameter Modelica.Units.SI.AbsolutePressure pLow_nominal=0.8*MediumSte.p_default
          "Nominal low pressure setpoint, downstream of PRV (if present)"
          annotation(Dialog(group = "Nominal condition"));
        parameter Modelica.Units.SI.Temperature TSte_nominal=
           MediumSte.saturationTemperature(pSte_nominal)
           "Nominal temperature of steam entering the building"
          annotation(Dialog(group = "Nominal condition"));
        parameter Modelica.Units.SI.Temperature TLow_nominal=
           MediumSte.temperature(
             MediumSte.setState_phX(
               p=pLow_nominal,
               h=MediumSte.specificEnthalpy(MediumSte.setState_pTX(
                  p=pSte_nominal,
                  T=TSte_nominal,
                  X=MediumSte.X_default)),
               X=MediumSte.X_default))
           "Nominal temperature of steam entering heat exchanger, if PRV present"
          annotation(Dialog(group = "Nominal condition"));
        parameter Modelica.Units.SI.SpecificEnthalpy dh_nominal=
          MediumSte.specificEnthalpy(MediumSte.setState_pTX(
              p=if have_prv then pLow_nominal else pSte_nominal,
              T=if have_prv then TLow_nominal else TSte_nominal,
              X=MediumSte.X_default)) -
            MediumWat.specificEnthalpy(MediumWat.setState_pTX(
              p=if have_prv then pLow_nominal else pSte_nominal,
              T=if have_prv then TLow_nominal else TSte_nominal,
              X=MediumWat.X_default))
          "Nominal change in enthalpy across the heat exchanger"
          annotation(Dialog(group = "Nominal condition"));
        final parameter Modelica.Units.SI.MassFlowRate m_flow_nominal=
          Q_flow_nominal/dh_nominal
          "Nominal mass flow rate"
          annotation(Dialog(group = "Nominal condition"));

        parameter Modelica.Units.SI.Volume V=1
          "Total volume of the steam side of the heat exchanger";

        // Assumptions
        parameter Modelica.Fluid.Types.Dynamics energyDynamics=
          Modelica.Fluid.Types.Dynamics.DynamicFreeInitial
          "Type of energy balance: dynamic (3 initialization options) or steady state"
          annotation(Evaluate=true, Dialog(tab = "Dynamics", group="Equations"));

        // Initialization
        parameter MediumSte.AbsolutePressure p_start=MediumSte.p_default
          "Start value of pressure"
          annotation(Dialog(tab = "Initialization"));
        parameter MediumSte.Temperature T_start=MediumSte.T_default
          "Start value of temperature"
          annotation(Dialog(tab = "Initialization"));
        parameter Modelica.Units.SI.MassFlowRate m_flow_start=0
          "Initial value of mass flow rate"
          annotation(Dialog(tab = "Initialization"));

        // Heating load time series
        parameter Boolean tableOnFile=false
          "= true, if table is defined on file or in function usertab"
          annotation (Dialog(tab = "Load Profile", group="Table data definition"));
        parameter Real QHeaLoa[:, :] = fill(0.0, 0, 2)
          "Table matrix (time = first column; e.g., table=[0, 0; 1, 1; 2, 4])"
          annotation (Dialog(tab = "Load Profile", group="Table data definition",enable=not tableOnFile));
        parameter String tableName="NoName"
          "Table name on file or in function usertab (see docu)"
          annotation (Dialog(tab = "Load Profile", group="Table data definition",enable=tableOnFile));
        parameter String fileName="NoName" "File where matrix is stored"
          annotation (Dialog(
            tab = "Load Profile",
            group="Table data definition",
            enable=tableOnFile,
            loadSelector(filter="Text files (*.txt);;MATLAB MAT-files (*.mat)",
                caption="Open file in which table is present")));
        parameter Integer columns[:]=2:size(QHeaLoa, 2)
          "Columns of table to be interpolated"
          annotation (Dialog(tab = "Load Profile", group="Table data interpretation"));
        parameter Modelica.Blocks.Types.Smoothness smoothness=
          Modelica.Blocks.Types.Smoothness.LinearSegments
          "Smoothness of table interpolation"
          annotation (Dialog(tab = "Load Profile", group="Table data interpretation"));
        parameter Modelica.Units.SI.Time timeScale(
          min=Modelica.Constants.eps)=1 "Time scale of first table column"
          annotation (Dialog(tab = "Load Profile", group="Table data interpretation"), Evaluate=true);

        // Diagnostics
         parameter Boolean show_T = false
          "= true, if actual temperature at port is computed"
          annotation(Dialog(tab="Advanced",group="Diagnostics"));

        MediumSte.ThermodynamicState sta_a=
            MediumSte.setState_phX(port_a.p,
                                noEvent(actualStream(port_a.h_outflow)),
                                noEvent(actualStream(port_a.Xi_outflow))) if show_T
          "Medium properties in port_a";

        MediumWat.ThermodynamicState sta_b=
            MediumWat.setState_phX(port_b.p,
                                noEvent(actualStream(port_b.h_outflow)),
                                noEvent(actualStream(port_b.Xi_outflow))) if show_T
          "Medium properties in port_b";

        // Advanced
        parameter Modelica.Units.SI.Density rho_a_default=
          MediumSte.density(MediumSte.setState_pTX(
            p=pSte_nominal,T=TSte_nominal,X=MediumSte.X_default))
          "Default steam density"
          annotation(Dialog(tab="Advanced",group="Nominal condition"));
        parameter Modelica.Units.SI.Density rho_b_default=
          MediumWat.density(MediumWat.setState_pTX(
            p=101325,T=273.15+90,X=MediumWat.X_default))
          "Default water density"
          annotation(Dialog(tab="Advanced",group="Nominal condition"));

        Modelica.Blocks.Interfaces.RealOutput Q_flow(
          final quantity="HeatFlowRate",
          final unit="W",
          displayUnit="kW")
          "Total heat transfer rate"
          annotation (Placement(transformation(extent={{100,70},{120,90}})));
        Modelica.Blocks.Interfaces.RealOutput EHea(
          final quantity="HeatFlow",
          final unit="J",
          displayUnit="kWh")
          "Total heating energy"
          annotation (Placement(transformation(extent={{100,40},{120,60}})));
        Modelica.Fluid.Interfaces.FluidPort_a port_a(
          redeclare final package Medium = MediumSte)
          "Inlet port"
          annotation (Placement(transformation(extent={{90,-10},{110,10}})));
        Modelica.Fluid.Interfaces.FluidPort_b port_b(
          redeclare final package Medium = MediumWat)
          "Outlet port"
          annotation (Placement(transformation(extent={{90,-70},{110,-50}})));
        Modelica.Blocks.Sources.CombiTimeTable QHea(
          final tableOnFile=tableOnFile,
          final table=QHeaLoa,
          final tableName=tableName,
          final fileName=fileName,
          final columns=columns,
          final smoothness=smoothness,
          final extrapolation=Modelica.Blocks.Types.Extrapolation.Periodic,
          final timeScale=timeScale)
          "Heating demand"
          annotation (Placement(transformation(extent={{-80,70},{-60,90}})));
        Modelica.Blocks.Continuous.Integrator IntEHea(y(unit="J"))
          "Integrator for heating energy of building"
          annotation (Placement(transformation(extent={{60,40},{80,60}})));
        Buildings.Fluid.Movers.FlowControlled_m_flow pumCNR(
          redeclare final package Medium = MediumWat,
          final energyDynamics=energyDynamics,
          p_start=steTra.pAtm,
          T_start=steTra.TSat,
          final allowFlowReversal=allowFlowReversal,
          final m_flow_nominal=m_flow_nominal,
          final show_T=show_T,
          addPowerToMedium=false,
          nominalValuesDefineDefaultPressureCurve=true,
          init=Modelica.Blocks.Types.Init.InitialOutput,
          final m_flow_start=m_flow_start)
          "Condensate return pump"
          annotation (Placement(transformation(extent={{50,-70},{70,-50}})));
        estcp.DHC.Loads.Steam.BaseClasses.ControlVolumeCondensation vol(
          redeclare final package MediumSte = MediumSte,
          redeclare final package MediumWat = MediumWat,
          final allowFlowReversal=allowFlowReversal,
          final energyDynamics=Modelica.Fluid.Types.Dynamics.SteadyState,
          final p_start=if have_prv then pLow_nominal else pSte_nominal,
          final m_flow_nominal=m_flow_nominal,
          final show_T=show_T,
          final V=V)
          "Steam side of the heat exchanger, modeled as a steady state control volume"
          annotation (Placement(transformation(extent={{-60,-50},{-40,-70}})));
        estcp.DHC.Loads.Steam.BaseClasses.SteamTrap steTra(
          redeclare final package Medium = MediumWat,
          final allowFlowReversal=allowFlowReversal,
          final m_flow_nominal=m_flow_nominal,
          final show_T=show_T) "Steam trap"
          annotation (Placement(transformation(extent={{20,-70},{40,-50}})));
        Buildings.Fluid.Sensors.SpecificEnthalpyTwoPort hIn(
          redeclare final package Medium = MediumSte,
          final m_flow_nominal=m_flow_nominal)
          "Enthalpy in"
          annotation (Placement(transformation(extent={{0,10},{-20,-10}})));
        Buildings.Fluid.Sensors.SpecificEnthalpyTwoPort hOut(
          redeclare final package Medium = MediumWat,
          final m_flow_nominal=m_flow_nominal)
          "Enthalpy out"
          annotation (Placement(transformation(extent={{-20,-70},{0,-50}})));
        Modelica.Blocks.Math.Add dh(final k2=-1)
          "Change in enthalpy with building-side fluid"
          annotation (Placement(transformation(extent={{0,-40},{20,-20}})));
        Modelica.Blocks.Math.Division m_flow "Mass flow"
          annotation (Placement(transformation(extent={{32,-34},{52,-14}})));
        estcp.DHC.Loads.Steam.BaseClasses.ValveSelfActing prv(
          redeclare final package Medium = MediumSte,
          final m_flow_nominal=m_flow_nominal,
          final show_T=show_T,
          final pb_nominal=pLow_nominal) if have_prv
          "Optional pressure reducing valve"
          annotation (Placement(transformation(extent={{60,10},{40,30}})));
      equation
        connect(Q_flow, Q_flow) annotation (Line(points={{110,80},{107,80},{107,80},{
                110,80}}, color={0,0,127}));
        connect(IntEHea.y, EHea) annotation (Line(points={{81,50},{96,50},{96,50},{
                110,50}}, color={0,0,127}));
        connect(QHea.y[1], Q_flow) annotation (Line(points={{-59,80},{110,80}},
                          color={0,0,127}));
        connect(IntEHea.u, Q_flow) annotation (Line(points={{58,50},{20,50},{20,80},{110,
                80}}, color={0,0,127}));
        connect(pumCNR.port_b, port_b)
          annotation (Line(points={{70,-60},{100,-60}}, color={0,127,255}));
        connect(steTra.port_b, pumCNR.port_a)
          annotation (Line(points={{40,-60},{50,-60}}, color={0,127,255}));
        connect(hIn.port_b, vol.port_a) annotation (Line(points={{-20,0},{-80,0},{-80,
                -60},{-60,-60}}, color={0,127,255}));
        connect(vol.port_b, hOut.port_a)
          annotation (Line(points={{-40,-60},{-20,-60}}, color={0,127,255}));
        connect(hOut.port_b, steTra.port_a)
          annotation (Line(points={{0,-60},{20,-60}}, color={0,127,255}));
        connect(dh.y, m_flow.u2)
          annotation (Line(points={{21,-30},{30,-30}}, color={0,0,127}));
        connect(QHea.y[1], m_flow.u1) annotation (Line(points={{-59,80},{20,80},{20,-18},
                {30,-18}},      color={0,0,127}));
        connect(m_flow.y, pumCNR.m_flow_in)
          annotation (Line(points={{53,-24},{60,-24},{60,-48}}, color={0,0,127}));
        connect(hIn.h_out, dh.u1)
          annotation (Line(points={{-10,-11},{-10,-24},{-2,-24}}, color={0,0,127}));
        connect(hOut.h_out, dh.u2)
          annotation (Line(points={{-10,-49},{-10,-36},{-2,-36}}, color={0,0,127}));
        connect(port_a, prv.port_a) annotation (Line(points={{100,0},{70,0},{70,20},{60,
                20}}, color={0,127,255}));
        if have_prv then
          connect(prv.port_b, hIn.port_a)
           annotation (Line(points={{40,20},{30,20},{30,0},{0,0}}, color={0,127,255}));
        else
        connect(port_a, hIn.port_a)
          annotation (Line(points={{100,0},{0,0}}, color={0,127,255}));
        end if;

        annotation (
          defaultComponentName="bui",
          Icon(coordinateSystem(preserveAspectRatio=false), graphics={
            Polygon(
              points={{20,-70},{60,-85},{20,-100},{20,-70}},
              lineColor={0,128,255},
              fillColor={0,128,255},
              fillPattern=FillPattern.Solid,
              visible=not allowFlowReversal),
            Line(
              points={{55,-85},{-60,-85}},
              color={0,128,255},
              visible=not allowFlowReversal),
            Rectangle(
              extent={{-100,-100},{100,100}},
              lineColor={0,0,127},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid),
            Polygon(
              points={{0,80},{-78,38},{80,38},{0,80}},
              lineColor={95,95,95},
              smooth=Smooth.None,
              fillPattern=FillPattern.Solid,
              fillColor={95,95,95}),
            Rectangle(
                extent={{-64,38},{64,-70}},
                lineColor={150,150,150},
                fillPattern=FillPattern.Sphere,
                fillColor={255,0,0}),
            Rectangle(
              extent={{-42,-4},{-14,24}},
              lineColor={255,255,255},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid),
            Rectangle(
              extent={{16,-4},{44,24}},
              lineColor={255,255,255},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid),
            Rectangle(
              extent={{16,-54},{44,-26}},
              lineColor={255,255,255},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid),
            Rectangle(
              extent={{-42,-54},{-14,-26}},
              lineColor={255,255,255},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid),
            Text(
              extent={{-149,-114},{151,-154}},
              textxColor={0,0,255},
              textString="%name")}),
            Diagram(coordinateSystem(preserveAspectRatio=false)),
          Documentation(info="<html>
<p>
This model is intended for existing steam district heating systems
where the heating load at the energy transfer station (ETS) is
availble as a time series data input. Thus, the building-side piping and equipement
is not included in this model, as depicted below.
</p>
<p>
<img src=\"modelica://Buildings/Resources/Images/Experimental/DHC/Loads/Steam/BuildingTimeSeriesAtETS.png\" alt=\"steamBuilding\"/>.
</p>
<h4> Implementation</h4>
<p>
With the time series input, this model is configured such that the control
volume (representing the steam side of the heat exchanger) has steady state
energy and mass balances. The steam trap also has steady state balances by
design. Meanwhile, the condensate return pump allows either dynamic or steady
state balances. The mass flow rate at the pump is prescribed ideally such that
the heat flow rate input from the time series is rejected at the control volume
based on the physical laws.
</p>
<h4>References </h4>
<p>
Kathryn Hinkelman, Saranya Anbarasu, Michael Wetter, Antoine Gautier, Wangda Zuo. 2022.
&ldquo;A Fast and Accurate Modeling Approach for Water and Steam
Thermodynamics with Practical Applications in District Heating System Simulation,&rdquo;
<i>Energy</i>, 254(A), pp. 124227.
<a href=\"https://doi.org/10.1016/j.energy.2022.124227\">10.1016/j.energy.2022.124227</a>
</p>
<p>
Kathryn Hinkelman, Saranya Anbarasu, Michael Wetter, Antoine Gautier, Baptiste Ravache, Wangda Zuo 2022.
&ldquo;Towards Open-Source Modelica Models For Steam-Based District Heating Systems.&rdquo;
<i>Proc. of the 1st International Workshop On Open Source Modelling And Simulation Of
Energy Systems (OSMSES 2022)</i>, Aachen, German, April 4-5, 2022.
<a href=\"https://doi.org/10.1109/OSMSES54027.2022.9769121\">10.1109/OSMSES54027.2022.9769121</a>
</p>
</html>",       revisions="<html>
<ul>
<li>
September 15, 2023, by Kathryn Hinkelman:<br/>
Added publication references.
</li>
<li>
March 28, 2022, by Kathryn Hinkelman:<br/>
Removed <code>massDynamics</code>.<br/>
This is for
<a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1542\">issue 1542</a>.
</li>
<li>
March 2, 2022, by Kathryn Hinkelman:<br/>
First implementation.
</li>
</ul>
</html>"));
      end BuildingTimeSeriesAtETS;

      package Examples "Collection of models that illustrate model use and test models"
        extends Modelica.Icons.ExamplesPackage;

        model BuildingTimeSeriesAtETS
          "Example model for time series load with external read-in file."
          extends Modelica.Icons.Example;

          package MediumSte = Buildings.Media.Steam (p_default=400000,
            T_default=273.15+143.61,
            h_default=2738100) "Steam medium";
          package MediumWat =
            Buildings.Media.Specialized.Water.TemperatureDependentDensity
            "Water medium";

          parameter Modelica.Units.SI.AbsolutePressure pSat=400000
            "Saturation pressure";
          parameter Modelica.Units.SI.Temperature TSat=
             MediumSte.saturationTemperature(pSat)
             "Saturation temperature";
          parameter Modelica.Units.SI.Power Q_flow_nominal= 2e4
            "Nominal heat flow rate";

          estcp.DHC.Loads.Steam.BuildingTimeSeriesAtETS bui(
            redeclare package MediumSte = MediumSte,
            redeclare package MediumWat = MediumWat,
            have_prv=true,
            pLow_nominal=200000,
            energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,
            dp_nominal=3000,
            tableOnFile=false,
            final Q_flow_nominal=Q_flow_nominal,
            final pSte_nominal=pSat,
            QHeaLoa=[0,Q_flow_nominal*0.2; 6,Q_flow_nominal; 16,Q_flow_nominal*
                0.1; 24,Q_flow_nominal*0.2],
            columns={2},
            smoothness=Modelica.Blocks.Types.Smoothness.ContinuousDerivative,
            timeScale(displayUnit="h") = 3600,
            show_T=true) "Building model with time series load at the ETS"
            annotation (Placement(transformation(extent={{-60,0},{-40,20}})));
          Buildings.Fluid.Sources.Boundary_pT souSte(
            redeclare final package Medium = MediumSte,
            p(displayUnit="Pa") = pSat,
            T=TSat,
            nPorts=1)
            "Steam source"
            annotation (Placement(transformation(extent={{42,30},{22,50}})));
          Buildings.Fluid.Sources.Boundary_pT watSin(
            redeclare final package Medium = MediumWat,
            p=101325,
            nPorts=1)
            "Water sink"
            annotation (Placement(transformation(extent={{42,-6},{22,14}})));
        equation
          connect(souSte.ports[1], bui.port_a)
            annotation (Line(points={{22,40},{10,40},{10,10},{-40,10}},
                                                      color={0,127,255}));
          connect(bui.port_b, watSin.ports[1]) annotation (Line(points={{-40,4},{22,4}},
                                   color={0,127,255}));
          annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
                coordinateSystem(preserveAspectRatio=false)),
          experiment(
              StartTime=1728000,
              StopTime=1814400,
              Tolerance=1e-06),
        __Dymola_Commands(file=
          "modelica://Buildings/Resources/Scripts/Dymola/Experimental/DHC/Loads/Steam/Examples/BuildingTimeSeriesAtETS.mos"
          "Simulate and plot"),
            Documentation(info="<html>
<p>
Example model for the steam building model with heat flow 
rate prescribed as a time series at the district-side 
of the energy transfer station (ETS).
</p>
</html>",         revisions="<html>
<ul>
<li>
March 2, 2022, by Kathryn Hinkelman:<br/>
First implementation.
</li>
</ul>
</html>"));
        end BuildingTimeSeriesAtETS;
      annotation (Documentation(info="<html>
<p>
This package contains examples illustrating the use of the models in
<a href=\"modelica://Buildings.Experimental.DHC.Loads.Steam\">
Buildings.Experimental.DHC.Loads.Steam</a>.
</p>
</html>"));
      end Examples;

      package BaseClasses "Package with base classes for Buildings.Experimental.DHC.Loads.Steam"
        extends Modelica.Icons.BasesPackage;

        model ControlVolumeCondensation
          "Control volume model exhibiting the condensation process of water"
          extends estcp.DHC.BaseClasses.Steam.PartialSaturatedControlVolume(
              redeclare final package Medium_a = MediumSte, redeclare final
              package Medium_b = MediumWat);
        equation
          // boundary conditions at the ports
          port_a.m_flow = mSte_flow;
          port_a.h_outflow = hSte;
          port_b.m_flow = mWat_flow;
          port_b.h_outflow = hWat;

        annotation (defaultComponentName="vol",
            Icon(coordinateSystem(
                preserveAspectRatio=false,
                extent={{-100,-100},{100,100}}), graphics={
              Line(
                points={{38,40},{-2,20},{38,-20},{-2,-40}},
                color={0,0,255},
                smooth=Smooth.Bezier),
              Line(
                points={{-2,40},{-42,20},{-2,-20},{-42,-40}},
                color={0,0,255},
                smooth=Smooth.Bezier)}),
            Documentation(revisions="<html>
<ul>
<li>
September 15, 2023, by Kathryn Hinkelman:<br/>
Added publication references.
</li>
<li>
February 26, 2022 by Kathryn Hinkelman:<br/>
First implementation.
</li>
</ul>
</html>",         info="<html>
<p>
This model represents a condensation process of water with
liquid and vapor phases in equilibrium and at a saturated state.
Further information regarding the model formulation and assumptions
are in the base class
<a href=\"modelica://Buildings.Experimental.DHC.BaseClasses.Steam.PartialSaturatedControlVolume\">
Buildings.Experimental.DHC.BaseClasses.Steam.PartialSaturatedControlVolume</a>.

<h4>References </h4>
<p>
Kathryn Hinkelman, Saranya Anbarasu, Michael Wetter, Antoine Gautier, Wangda Zuo. 2022.
&ldquo;A Fast and Accurate Modeling Approach for Water and Steam
Thermodynamics with Practical Applications in District Heating System Simulation,&rdquo;
<i>Energy</i>, 254(A), pp. 124227.
<a href=\"https://doi.org/10.1016/j.energy.2022.124227\">10.1016/j.energy.2022.124227</a>
</p>
<p>
Kathryn Hinkelman, Saranya Anbarasu, Michael Wetter, Antoine Gautier, Baptiste Ravache, Wangda Zuo 2022.
&ldquo;Towards Open-Source Modelica Models For Steam-Based District Heating Systems.&rdquo;
<i>Proc. of the 1st International Workshop On Open Source Modelling And Simulation Of
Energy Systems (OSMSES 2022)</i>, Aachen, German, April 4-5, 2022.
<a href=\"https://doi.org/10.1109/OSMSES54027.2022.9769121\">10.1109/OSMSES54027.2022.9769121</a>
</p>
</html>"));
        end ControlVolumeCondensation;

        model SteamTrap "Steam trap with isenthalpic expansion from high to atmospheric
  pressure, followed by a isobaric condensation process as flashed steam
  is brought back to a liquid state"
          extends Buildings.Fluid.Interfaces.PartialTwoPortInterface(
              redeclare replaceable package Medium=Buildings.Media.Water);

          constant Modelica.Units.SI.AbsolutePressure pAtm=101325
             "Atmospheric pressure discharge state";
          constant Modelica.Units.SI.Temperature TSat=
            Buildings.Media.Steam.saturationTemperature(pAtm)
            "Saturation temperature at atmospheric pressure";

          Modelica.Blocks.Interfaces.RealOutput QLos_flow(unit="W")
            "Heat transfer loss rate"
            annotation (Placement(transformation(extent={{100,60},{120,80}})));

          Medium.SpecificEnthalpy dh
            "Change in enthalpy";
        equation
          // Pressure setpoints
          port_b.p = pAtm;

          // Flashed steam condenses
          port_b.h_outflow = Medium.specificEnthalpy(
            state=Medium.setState_pTX(
              p=pAtm,
              T=TSat,
              X=inStream(port_a.Xi_outflow)));
          dh = port_b.h_outflow - inStream(port_a.h_outflow);

          // Return reverse flow as the inStream value
          port_a.h_outflow = inStream(port_a.h_outflow);

          // Steady state conservation of mass
          port_a.m_flow + port_b.m_flow = 0;

          // Steady state conservation of energy
          port_a.m_flow*dh = QLos_flow;

          annotation (
            defaultComponentName="tra",
            Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                Rectangle(
                  extent={{-80,80},{80,-80}},
                  lineColor={0,0,0},
                  lineThickness=0.5,
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Ellipse(
                  extent={{-40,-40},{40,40}},
                  lineColor={0,0,0},
                  lineThickness=1),
                Ellipse(
                  extent={{-40,40},{40,-40}},
                  lineColor={0,0,0},
                  lineThickness=1,
                  startAngle=-45,
                  endAngle=135,
                  fillColor={0,0,0},
                  fillPattern=FillPattern.Solid)}),
                                         Diagram(coordinateSystem(preserveAspectRatio=false)),
            Documentation(info="<html>
<p>
The steam trap ensures that only liquid condensate leaves
the component, while any flashed steam is returned to a liquid
state before discharge. The model assumes a steady state isenthalpic
thermodynamic process that transforms water from an upstream
high pressure state to atmospheric pressure, followed by an
isobaric condensation process as flashed steam vapor is returned to
a liquid state. This implementation is consistent with
physical valves that vent to the atmosphere.
</p>
<h4>References </h4>
<p>
Kathryn Hinkelman, Saranya Anbarasu, Michael Wetter, Antoine Gautier, Wangda Zuo. 2022.
&ldquo;A Fast and Accurate Modeling Approach for Water and Steam
Thermodynamics with Practical Applications in District Heating System Simulation,&rdquo;
<i>Energy</i>, 254(A), pp. 124227.
<a href=\"https://doi.org/10.1016/j.energy.2022.124227\">10.1016/j.energy.2022.124227</a>
</p>
<p>
Kathryn Hinkelman, Saranya Anbarasu, Michael Wetter, Antoine Gautier, Baptiste Ravache, Wangda Zuo 2022.
&ldquo;Towards Open-Source Modelica Models For Steam-Based District Heating Systems.&rdquo;
<i>Proc. of the 1st International Workshop On Open Source Modelling And Simulation Of
Energy Systems (OSMSES 2022)</i>, Aachen, German, April 4-5, 2022.
<a href=\"https://doi.org/10.1109/OSMSES54027.2022.9769121\">10.1109/OSMSES54027.2022.9769121</a>
</p>
</html>",         revisions="<html>
<ul>
<li>
September 15, 2023, by Kathryn Hinkelman:<br/>
Added publication references.
</li>
<li>
March 2, 2022, by Kathryn Hinkelman:<br/>
First implementation.
</li>
</ul>
</html>"));
        end SteamTrap;

        model ValveSelfActing "Ideal pressure reducing valve for steam heating systems"
          extends Buildings.Fluid.Interfaces.PartialTwoPortInterface(
            final allowFlowReversal=false);
          parameter Modelica.Units.SI.Pressure pb_nominal(
            displayUnit="Pa",
            min=101325)
            "Nominal outlet pressure"
            annotation (Dialog(group="Nominal condition"));

          parameter Modelica.Units.SI.PressureDifference dp_start(displayUnit="Pa")=pb_nominal
            "Guess value of dp = port_a.p - port_b.p"
            annotation (Dialog(tab="Advanced"));

          Buildings.Fluid.Sensors.Pressure pUp(redeclare final package Medium
              =                                                                 Medium)
            "Pressure sensor"
            annotation (Placement(transformation(extent={{-90,50},{-70,70}})));
          Buildings.Utilities.Math.SmoothMax dpSet(final deltaX=0.5) "Pressure drop setpoint"
            annotation (Placement(transformation(extent={{20,40},{40,60}})));

        protected
          Buildings.Fluid.Movers.BaseClasses.IdealSource ideSou(
            redeclare final package Medium = Medium,
            final allowFlowReversal=allowFlowReversal,
            final dp_start=dp_start,
            m_flow_start=m_flow_nominal,
            final m_flow_small=m_flow_small,
            final show_T=show_T,
            final control_m_flow=false,
            final control_dp=true) "Ideal source controlling dp"
            annotation (Placement(transformation(extent={{40,-10},{60,10}})));
          Modelica.Blocks.Sources.RealExpression pbSet(final y=pb_nominal)
            "Downstream pressure setpoint"
            annotation (Placement(transformation(extent={{-60,30},{-40,50}})));

          Buildings.Controls.OBC.CDL.Reals.Sources.Constant zer(final k=0) "Zero"
            annotation (Placement(transformation(extent={{-60,70},{-40,90}})));
          Buildings.Controls.OBC.CDL.Reals.Subtract dpReq "Calculating dp required"
            annotation (Placement(transformation(extent={{-20,40},{0,60}})));

        equation
          assert(dpReq.y > 0, "pb_nominal is set higher than the upstream pressure in "
          + getInstanceName() + ", which results in a negative pressure drop.
  This is not typical of real systems and should be verified.",         AssertionLevel.warning);

          connect(ideSou.port_b, port_b)
            annotation (Line(points={{60,0},{100,0}}, color={0,127,255}));
          connect(pUp.port, ideSou.port_a)
            annotation (Line(points={{-80,50},{-80,0},{40,0}}, color={0,127,255}));
          connect(zer.y, dpSet.u1) annotation (Line(points={{-38,80},{12,80},{12,56},{
                  18,56}},
                        color={0,0,127}));
          connect(dpSet.y, ideSou.dp_in)
            annotation (Line(points={{41,50},{56,50},{56,8}}, color={0,0,127}));
          connect(port_a, ideSou.port_a)
            annotation (Line(points={{-100,0},{40,0}}, color={0,127,255}));
          connect(pUp.p, dpReq.u1) annotation (Line(points={{-69,60},{-28,60},{-28,56},{
                  -22,56}}, color={0,0,127}));
          connect(pbSet.y, dpReq.u2) annotation (Line(points={{-39,40},{-28,40},{-28,44},
                  {-22,44}}, color={0,0,127}));
          connect(dpReq.y, dpSet.u2) annotation (Line(points={{2,50},{10,50},{10,44},{
                  18,44}}, color={0,0,127}));
            annotation (
            defaultComponentName="prv",
            Documentation(info="<html>
<p>
This is the model of self-acting control valve that automatically adjusts
the diameter of valve  orifice to reduce the unregulated inlet pressure to a
constant, reduced outlet pressure.
</p>
<h4>Implementation</h4>
<p>
To simplify the complex relationships of the valve opening (<code>y_actual</code>),
mass flow rate (<code>m_flow</code>), and change in pressure (<code>dp</code>)
for compressible medium (such as steam), this model is implemented using an ideal source
<a href=\"modelica://Buildings.Fluid.Movers.BaseClasses.IdealSource\">
Buildings.Fluid.Movers.BaseClasses.IdealSource</a>, that allows the pressure drop
to be prescribed independently of mass flow rate.
</p>
<p>
The model maintains <code>dp</code> based on the user specified downstream pressure
value (<code>pb_nominal</code>), except for instances where the upstream pressure
falls below <code>pb_nominal</code>. In these instances, the valve exibits no
pressure drop (<code>dpSet = 0</code>) and asserts a warning.
This model assumes that <code>dp</code> across the valve is independent of
<code>m_flow</code>. This generally leads to a simplier set of equations.
</p>
<h4>References </h4>
<p>
Kathryn Hinkelman, Saranya Anbarasu, Michael Wetter, Antoine Gautier, Wangda Zuo. 2022.
&ldquo;A Fast and Accurate Modeling Approach for Water and Steam
Thermodynamics with Practical Applications in District Heating System Simulation,&rdquo;
<i>Energy</i>, 254(A), pp. 124227.
<a href=\"https://doi.org/10.1016/j.energy.2022.124227\">10.1016/j.energy.2022.124227</a>
</p>
<p>
Kathryn Hinkelman, Saranya Anbarasu, Michael Wetter, Antoine Gautier, Baptiste Ravache, Wangda Zuo 2022.
&ldquo;Towards Open-Source Modelica Models For Steam-Based District Heating Systems.&rdquo;
<i>Proc. of the 1st International Workshop On Open Source Modelling And Simulation Of
Energy Systems (OSMSES 2022)</i>, Aachen, German, April 4-5, 2022.
<a href=\"https://doi.org/10.1109/OSMSES54027.2022.9769121\">10.1109/OSMSES54027.2022.9769121</a>
</p>
</html>",         revisions="<html>
<ul>
<li>
September 15, 2023, by Kathryn Hinkelman:<br/>
Added publication references.
</li>
<li>
March 2, 2022 by Saranya Anbarasu:<br/>
First implementation.
</li>
</ul>
</html>"),  Icon(graphics={
                Rectangle(
                  extent={{-52,40},{68,-40}},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid,
                  pattern=LinePattern.None),
                Rectangle(
                  extent={{-100,40},{100,-40}},
                  lineColor={0,0,0},
                  fillPattern=FillPattern.HorizontalCylinder,
                  fillColor={192,192,192}),
                Rectangle(
                  extent={{-100,22},{100,-24}},
                  lineColor={0,0,0},
                  fillPattern=FillPattern.HorizontalCylinder,
                  fillColor={0,127,255}),
                Rectangle(
                  extent={{-52,40},{68,-40}},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid,
                  pattern=LinePattern.None),
                Ellipse(
                  extent={{-32,80},{30,34}},
                  lineColor={0,0,0},
                  fillColor={160,160,160},
                  fillPattern=FillPattern.Solid),
                Rectangle(
                  extent={{-32,56},{34,8}},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid,
                  pattern=LinePattern.None),
                Polygon(
                  points={{0,0},{-76,60},{-76,-60},{0,0}},
                  lineColor={0,0,0},
                  fillColor=DynamicSelect({0,0,0}, max(0, min(1, dpSet.y/pb_nominal))*{255,255,255}),
                  fillPattern=FillPattern.Solid),
                Polygon(
                  points={{0,0},{76,60},{76,-60},{0,0}},
                  lineColor={0,0,0},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Line(points={{-32,56},{30,56}}, color={0,0,0}),
                Line(points={{0,0},{0,56}}, color={0,0,0}),
                Line(points={{0,80},{0,100}}, color={0,0,0}),
                Line(points={{0,100},{56,100}}, color={0,0,0}),
                Line(points={{56,100},{0,0}}, color={0,0,0})}));
        end ValveSelfActing;

        package Examples "Collection of models that illustrate model use and test models"
          extends Modelica.Icons.ExamplesPackage;

          model ControlVolumeCondensation
            "Example model for heat transfer with the condensation control volume"
            extends Modelica.Icons.Example;

          package MediumSte = Buildings.Media.Steam (
            T_default=273.15+180,
            p_default=1e6)
              "Steam medium - Medium model for port_a (inlet)";
          package MediumWat =
                Buildings.Media.Specialized.Water.TemperatureDependentDensity
              "Water medium - Medium model for port_b (outlet)";

            estcp.DHC.Loads.Steam.BaseClasses.ControlVolumeCondensation volDyn(
              V=1,
              redeclare package MediumWat = MediumWat,
              redeclare package MediumSte = MediumSte,
              m_flow_nominal=0.01,
              energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,
              allowFlowReversal=true) "Dynamic volume"
              annotation (Placement(transformation(extent={{20,0},{40,-20}})));
            estcp.DHC.Loads.Steam.BaseClasses.ControlVolumeCondensation volSte(
              V=1,
              redeclare package MediumWat = MediumWat,
              redeclare package MediumSte = MediumSte,
              m_flow_nominal=0.01,
              energyDynamics=Modelica.Fluid.Types.Dynamics.SteadyState,
              allowFlowReversal=true) "Steady volume" annotation (Placement(
                  transformation(extent={{20,-40},{40,-60}})));
            Modelica.Fluid.Sources.MassFlowSource_T sou(
              redeclare package Medium = MediumSte,
              use_m_flow_in=true,
              T=453.15,
              nPorts=1) "Flow source"
              annotation (Placement(transformation(extent={{-18,-20},{2,0}})));
            Modelica.Fluid.Sources.MassFlowSource_T sou1(
              redeclare package Medium = MediumSte,
              use_m_flow_in=true,
              T=453.15,
              nPorts=1) "Flow source"
              annotation (Placement(transformation(extent={{-20,-60},{0,-40}})));
            Modelica.Fluid.Sources.FixedBoundary bou(
              redeclare package Medium = MediumWat,
              p=volDyn.p_start,
              T=293.15,
              nPorts=2) "Boundary condition"
              annotation (Placement(transformation(extent={{80,-22},{60,-2}})));
            Modelica.Blocks.Sources.Ramp ramp(
              duration=1,
              offset=2,
              height=-1) "Ramp signal"
              annotation (Placement(transformation(extent={{-90,-20},{-70,0}})));
            Modelica.Thermal.HeatTransfer.Sensors.HeatFlowSensor heaFlo
              "Heat flow sensor"
              annotation (Placement(transformation(extent={{-20,40},{0,60}})));
            Modelica.Blocks.Sources.Constant const(k=-10000) "Heat loss"
              annotation (Placement(transformation(extent={{-90,40},{-70,60}})));
            Modelica.Thermal.HeatTransfer.Sources.PrescribedHeatFlow preHeaFlo
              "Prescribed heat flow rate"
              annotation (Placement(transformation(extent={{-60,40},{-40,60}})));
          equation
            connect(sou.ports[1], volDyn.port_a)
              annotation (Line(points={{2,-10},{20,-10}}, color={0,127,255}));
            connect(volDyn.port_b, bou.ports[1])
              annotation (Line(points={{40,-10},{60,-10}}, color={0,127,255}));
            connect(preHeaFlo.port,heaFlo. port_a) annotation (Line(
                points={{-40,50},{-20,50}},
                color={191,0,0}));
            connect(preHeaFlo.Q_flow,const. y) annotation (Line(
                points={{-60,50},{-69,50}},
                color={0,0,127}));
            connect(heaFlo.port_b, volDyn.heatPort)
              annotation (Line(points={{0,50},{30,50},{30,0}}, color={191,0,0}));
            connect(sou1.ports[1], volSte.port_a)
              annotation (Line(points={{0,-50},{20,-50}}, color={0,127,255}));
            connect(ramp.y, sou.m_flow_in) annotation (Line(points={{-69,-10},{-40,-10},{-40,-2},{-18,-2}},
                                       color={0,0,127}));
            connect(ramp.y, sou1.m_flow_in) annotation (Line(points={{-69,-10},{-40,-10},
                    {-40,-42},{-20,-42}}, color={0,0,127}));
            connect(volSte.port_b, bou.ports[2]) annotation (Line(points={{40,-50},{50,
                    -50},{50,-14},{60,-14}}, color={0,127,255}));
            annotation (Documentation(
                  info="<html>
<p>
This model demonstrates the use of the control volume with condensation.
The dynamic volume includes heat conduction to the ambient while the
steady volume heat balance is only dependent on the mass flow rate.
</p>
</html>",           revisions="<html>
<ul>
<li>
February 26, 2022 by Kathryn Hinkelman:<br/>
First implementation.
</li>
</ul>
</html>"),experiment(Tolerance=1E-6, StopTime=1.0),
          __Dymola_Commands(file="modelica://Buildings/Resources/Scripts/Dymola/Experimental/DHC/Loads/Steam/BaseClasses/Examples/ControlVolumeCondensation.mos"
                  "Simulate and plot"));
          end ControlVolumeCondensation;

          model SteamTrap "Example model to demonstrate the steam trap"
            extends Modelica.Icons.Example;

            package MediumWat = Buildings.Media.Water "Water medium";

            parameter Modelica.Units.SI.Temperature TSatHig=273.15+110
               "High pressure saturation temperature";
            parameter Modelica.Units.SI.Temperature TSatLow=273.15+100
               "Low pressure saturation temperature";
            parameter Modelica.Units.SI.AbsolutePressure pSat=143380
               "Saturation pressure";
            parameter Modelica.Units.SI.PressureDifference dp=pSat-101325
              "Prescribed pressure change";
            parameter Modelica.Units.SI.MassFlowRate m_flow_nominal=10
              "Nominal mass flow rate";

            Modelica.Blocks.Sources.Ramp ram(
              height=m_flow_nominal,
              duration(displayUnit="min") = 60,
              startTime(displayUnit="min") = 60)
              "Ramp"
              annotation (Placement(transformation(extent={{-80,60},{-60,80}})));
            Buildings.Fluid.Sources.Boundary_pT sou(
              redeclare package Medium = MediumWat,
              p=pSat,
              T=TSatHig,
              nPorts=1)
              "Source"
              annotation (Placement(transformation(extent={{-90,0},{-70,20}})));
            Buildings.Fluid.Sources.Boundary_pT sin(
              redeclare package Medium = MediumWat,
              p=pSat - dp,
              T=TSatLow,
              nPorts=1)
              "Sink"
              annotation (Placement(transformation(extent={{90,0},{70,20}})));
            estcp.DHC.Loads.Steam.BaseClasses.SteamTrap steTra(
              redeclare package Medium = MediumWat,
              m_flow_nominal=m_flow_nominal,
              show_T=true) "Steam trap"
              annotation (Placement(transformation(extent={{-30,0},{-10,20}})));
            Buildings.Fluid.Movers.FlowControlled_m_flow pum(
              redeclare package Medium = MediumWat,
              energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,
              m_flow_nominal=m_flow_nominal,
              nominalValuesDefineDefaultPressureCurve=true)
              "Pump"
              annotation (Placement(transformation(extent={{40,0},{60,20}})));
            Buildings.Fluid.Sensors.SpecificEnthalpyTwoPort hIn(redeclare
                package Medium = MediumWat, m_flow_nominal=m_flow_nominal)
              "Inflowing specific enthalpy"
              annotation (Placement(transformation(extent={{-60,0},{-40,20}})));
            Buildings.Fluid.Sensors.SpecificEnthalpyTwoPort hOut(redeclare
                package Medium = MediumWat, m_flow_nominal=m_flow_nominal)
              "Outflowing specific enthalpy"
              annotation (Placement(transformation(extent={{0,0},{20,20}})));
          equation
            connect(pum.port_b, sin.ports[1])
              annotation (Line(points={{60,10},{70,10}}, color={0,127,255}));
            connect(ram.y, pum.m_flow_in)
              annotation (Line(points={{-59,70},{50,70},{50,22}}, color={0,0,127}));
            connect(sou.ports[1], hIn.port_a)
              annotation (Line(points={{-70,10},{-60,10}}, color={0,127,255}));
            connect(hIn.port_b, steTra.port_a)
              annotation (Line(points={{-40,10},{-30,10}}, color={0,127,255}));
            connect(steTra.port_b, hOut.port_a)
              annotation (Line(points={{-10,10},{0,10}}, color={0,127,255}));
            connect(hOut.port_b, pum.port_a)
              annotation (Line(points={{20,10},{40,10}}, color={0,127,255}));
            annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
                  coordinateSystem(preserveAspectRatio=false)),
            experiment(Tolerance=1e-6, StopTime=180.0),
          __Dymola_Commands(file="modelica://Buildings/Resources/Scripts/Dymola/Experimental/DHC/Loads/Steam/BaseClasses/Examples/SteamTrap.mos"
                  "Simulate and plot"),
              Documentation(info="<html>
<p>
This example model demonstrates the performance of the steam trap with a ramped mass flow rate. 
</p>
</html>",           revisions="<html>
<ul>
<li>
March 2, 2022, by Kathryn Hinkelman:<br/>
First implementation.
</li>
</ul>
</html>"));
          end SteamTrap;

          model ValveSelfActing
            "Example model for self-acting steam valve with a noisy inlet pressure input"
            extends Modelica.Icons.Example;
            package MediumSte = Buildings.Media.Steam(p_default=400000,
              T_default=273.15+143.61,
              h_default=2738100) "Medium model";
            parameter Modelica.Units.SI.MassFlowRate m_flow_nominal=1
              "Nominal mass flow rate";

            estcp.DHC.Loads.Steam.BaseClasses.ValveSelfActing prv(
              redeclare final package Medium = MediumSte,
              m_flow_nominal=m_flow_nominal,
              show_T=true,
              pb_nominal=300000,
              dp_start(displayUnit="Pa")) "Self acting pressure reducing valve"
              annotation (Placement(transformation(extent={{-20,-10},{0,10}})));
            Buildings.Fluid.Sources.Boundary_pT sou(
              redeclare final package Medium = MediumSte,
              use_p_in=true,
              p(displayUnit="Pa"),
              T(displayUnit="K") = MediumSte.saturationTemperature(sou.p),
              nPorts=1) "Source"
              annotation (Placement(transformation(extent={{-80,-10},{-60,10}})));
            Buildings.Fluid.Sensors.SpecificEnthalpyTwoPort speEntIn(
              redeclare final package Medium = MediumSte,
              m_flow_nominal=m_flow_nominal)
              "Upstream specific enthalpy"
              annotation (Placement(transformation(extent={{-50,-10},{-30,10}})));
            Buildings.Fluid.Sensors.SpecificEnthalpyTwoPort speEntOut(
              redeclare final package Medium = MediumSte,
              m_flow_nominal=m_flow_nominal)
              "Downstream specific enthalpy"
              annotation (Placement(transformation(extent={{10,-10},{30,10}})));
            Modelica.Blocks.Noise.UniformNoise pInSig(
              samplePeriod(displayUnit="s") = 1,
              y_min=500000 + 200000,
              y_max=500000 - 200000) "Noisy signal for inlet pressure"
              annotation (Placement(transformation(extent={{-60,40},{-80,60}})));
            Buildings.Fluid.Sources.Boundary_pT sin(
              redeclare final package Medium = MediumSte,
              p=200000,
              T=MediumSte.saturationTemperature(sin.p),
              nPorts=1) "Sink" annotation (Placement(transformation(extent={{
                      100,-10},{80,10}})));
            Buildings.Fluid.FixedResistances.PressureDrop res(
              redeclare final package Medium = MediumSte,
              m_flow_nominal=m_flow_nominal,
              dp_nominal=1000) "Pressure drop"
              annotation (Placement(transformation(extent={{40,-10},{60,10}})));
            inner Modelica.Blocks.Noise.GlobalSeed globalSeed
              "Setting for sublibrary noise"
              annotation (Placement(transformation(extent={{80,-60},{100,-40}})));
          equation
            connect(sou.ports[1], speEntIn.port_a)
              annotation (Line(points={{-60,0},{-50,0}}, color={0,127,255}));
            connect(speEntIn.port_b, prv.port_a)
              annotation (Line(points={{-30,0},{-20,0}},
                                                       color={0,127,255}));
            connect(prv.port_b, speEntOut.port_a)
              annotation (Line(points={{0,0},{10,0}},  color={0,127,255}));
            connect(pInSig.y, sou.p_in) annotation (Line(points={{-81,50},{-90,50},{-90,8},
                    {-82,8}}, color={0,0,127}));
            connect(sin.ports[1], res.port_b)
              annotation (Line(points={{80,0},{60,0}}, color={0,127,255}));
            connect(res.port_a, speEntOut.port_b)
              annotation (Line(points={{40,0},{30,0}}, color={0,127,255}));
            annotation (Icon(coordinateSystem(preserveAspectRatio=false)),
              Diagram(coordinateSystem(preserveAspectRatio=false)),
              __Dymola_Commands(file="modelica://Buildings/Resources/Scripts/Dymola/Experimental/DHC/Loads/Steam/BaseClasses/Examples/ValveSelfActing.mos"
              "Simulate and plot"),
              experiment(StopTime=15, Tolerance=1e-06),
              Documentation(info="<html>
<p>
This example model demonstrates the performance of self-acting steam pressure 
regulator with a noisy/varying inlet pressure signal. The inlet pressure 
conditions are selected to demonstrate how the downstream pressure is maintained 
at the setpoint, unless the inlet pressure drops below the setpoint 
(pressure drop is then zero).
</p>
</html>",          revisions="<html>
<ul>
<li>
March 2, 2022 by Saranya Anbarasu:<br/>
First implementation.
</li>
</ul>
</html>"));
          end ValveSelfActing;
        annotation (preferredView="info", Documentation(info="<html>
<p>
This package contains examples for the use of models that can be found in
<a href=\"modelica://Buildings.Experimental.DHC.Loads.Steam.BaseClasses\">
Buildings.Experimental.DHC.Loads.Steam.BaseClasses</a>.
</p>
</html>"));
        end Examples;
      annotation (preferredView="info", Documentation(info="<html>
<p>
This package contains base classes that are used to construct the models in
<a href=\"modelica://Buildings.Experimental.DHC.Loads.Steam\">
Buildings.Experimental.DHC.Loads.Steam</a>.
</p>
</html>"));
      end BaseClasses;
    annotation (preferredView="info", Documentation(info="<html>
<p>
This package contains models of building loads that are used to
build example models of steam district heating systems.
</p>
</html>"));
    end Steam;

    package BaseClasses "Package with base classes"
      extends Modelica.Icons.BasesPackage;

      block ConstraintViolation
        "Block that outputs the fraction of time when a constraint is violated"

        parameter Real uMin "Minimum value for input";
        parameter Real uMax "Maximum value for input";
        parameter Integer nu(min=0) = 0
          "Number of input connections"
          annotation (Dialog(connectorSizing=true));
        Buildings.Controls.OBC.CDL.Interfaces.RealInput u[nu]
          "Variables of interest"
          annotation (Placement(transformation(extent={{-140,-20},{-100,20}}),
          iconTransformation(extent={{-140,-20},{-100,20}})));
        Buildings.Controls.OBC.CDL.Interfaces.RealOutput y(
          final unit="1",
          start=0,
          fixed=true)
          "Fraction of time when the constraint is violated"
          annotation (Placement(transformation(extent={{100,-20},{140,20}}),
          iconTransformation(extent={{100,-20},{140,20}})));
        Modelica.Units.SI.Time t(final start=0, final fixed=true)
          "Integral of violated time";
      protected
        parameter Modelica.Units.SI.Time t0(fixed=false) "First sample time instant";
        Boolean vioMin "Flag, true if minimum is violated";
        Boolean vioMax "Flag, true if maximum is violated";
      initial equation
        t0 = time - 1E-6;
      equation
        vioMin = Modelica.Math.BooleanVectors.anyTrue({u[i] < uMin for i in 1:nu});
        vioMax = Modelica.Math.BooleanVectors.anyTrue({u[i] > uMax for i in 1:nu});
        if vioMin or vioMax then
          der(t) = 1;
        else
          der(t) = 0;
        end if;
        y = t / (time - t0);

        annotation (
        defaultComponentName="conVio",
        Icon(graphics={Rectangle(
              extent={{-100,-100},{100,100}},
              lineColor={0,0,127},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid),
                                   Ellipse(
                extent={{-10,74},{10,-30}},
                lineColor={238,46,47},
                fillColor={238,46,47},
                fillPattern=FillPattern.Solid), Ellipse(
                extent={{-14,-48},{12,-74}},
                lineColor={238,46,47},
                fillColor={238,46,47},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-150,-112},{150,-152}},
                textString="%name",
                textColor={0,0,255})}),
      Documentation(info="<html>
<p>
Block that outputs the running fractional time during which any element
<i>u<sub>i</sub></i> of the input signal
is not within <i>u<sub>min</sub> &le; u<sub>i</sub> &le; u<sub>max</sub></i>.
</p>
</html>",
      revisions="<html>
<ul>
<li>
January 12, 2020, by Michael Wetter:<br/>
Added documentation.
</li>
</ul>
</html>"));
      end ConstraintViolation;

      model FlowDistribution
        "Model of a building hydraulic distribution system"
        extends Buildings.Fluid.Interfaces.PartialTwoPortInterface(
          redeclare replaceable package Medium=Buildings.Media.Water,
          allowFlowReversal=false);
        import Type_dis=estcp.DHC.Loads.BaseClasses.Types.DistributionType
          "Types of distribution system";
        import Type_ctr=estcp.DHC.Loads.BaseClasses.Types.PumpControlType
          "Types of distribution pump control";
        parameter Integer nPorts_a1=0
          "Number of terminal units return ports"
          annotation (Dialog(connectorSizing=true),Evaluate=true);
        parameter Integer nPorts_b1=0
          "Number of terminal units supply ports"
          annotation (Dialog(connectorSizing=true),Evaluate=true);
        final parameter Integer nUni=nPorts_a1
          "Number of served units"
          annotation (Evaluate=true);
        parameter Boolean have_pum=false
          "Set to true if the system has a pump"
          annotation (Evaluate=true);
        parameter Boolean have_val=false
          "Set to true if the system has a mixing valve"
          annotation (Dialog(enable=have_pum),Evaluate=true);
        parameter Type_dis typDis=Type_dis.HeatingWater
          "Type of distribution system"
          annotation (Dialog(enable=have_val),Evaluate=true);
        parameter Type_ctr typCtr=Type_ctr.ConstantHead
          "Type of distribution pump control"
          annotation (Dialog(enable=have_pum),Evaluate=true);
        parameter Real spePum_nominal(
          final unit="1",
          final min=0,
          final max=1)=1
          "Pump speed at nominal conditions"
          annotation (Dialog(group="Nominal condition"));
        parameter Modelica.Units.SI.PressureDifference dp_nominal(final min=0,
            displayUnit="Pa") "Pressure drop at nominal conditions"
          annotation (Dialog(group="Nominal condition"));
        final parameter Modelica.Units.SI.PressureDifference dpVal_nominal(
          final min=0,
          displayUnit="Pa") = if have_val then 0.1*dp_nominal else 0
          "Mixing valve pressure drop at nominal conditions"
          annotation (Dialog(group="Nominal condition"));
        parameter Modelica.Units.SI.PressureDifference dpDis_nominal[:](
          each final min=0,
          each displayUnit="Pa") = if nUni == 1 then {1/2*(dp_nominal - dpVal_nominal
           - dpMin)} else 1/2 .* cat(
          1,
          {(dp_nominal - dpVal_nominal - dpMin)*0.2},
          fill((dp_nominal - dpVal_nominal - dpMin)*0.8/(nUni - 1), nUni - 1)) "Pressure drop between each connected unit at nominal conditions (supply line):
    use zero for each connection downstream the differential pressure sensor"
          annotation (Dialog(group="Nominal condition", enable=typCtr == Type_ctr.ConstantDp));
        parameter Modelica.Units.SI.PressureDifference dpMin(
          final min=0,
          displayUnit="Pa") = dp_nominal/2
          "Pressure difference set point for ConstantDp or at zero flow for LinearHead"
          annotation (Dialog(enable=typCtr == Type_ctr.ConstantDp));
        parameter Modelica.Units.SI.MassFlowRate mUni_flow_nominal[:](each final min=
              0) = fill(m_flow_nominal/nUni, nUni)
          "Mass flow rate of each connected unit at nominal conditions" annotation (
            Dialog(group="Nominal condition", enable=typCtr == Type_ctr.ConstantDp));
        parameter Modelica.Fluid.Types.Dynamics energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial
          "Type of energy balance (except for the pump always modeled in steady state)"
          annotation (Evaluate=true,Dialog(tab="Dynamics",group="Conservation equations"));
        final parameter Modelica.Fluid.Types.Dynamics massDynamics=energyDynamics
          "Type of mass balance (except for the pump always modeled in steady state)"
          annotation (Evaluate=true,Dialog(tab="Dynamics",group="Conservation equations"));
        parameter Modelica.Units.SI.Time tau=120
          "Time constant of fluid temperature variation at nominal flow rate"
          annotation (Dialog(
            tab="Dynamics",
            group="Nominal condition",
            enable=energyDynamics <> Modelica.Fluid.Types.Dynamics.SteadyState));
        // IO CONNECTORS
        Modelica.Fluid.Interfaces.FluidPorts_a ports_a1[nPorts_a1](
          redeclare each final package Medium=Medium,
          each m_flow(
            min=
              if allowFlowReversal then
                -Modelica.Constants.inf
              else
                0),
          each h_outflow(
            start=Medium.h_default,
            nominal=Medium.h_default))
          "Terminal units return ports"
          annotation (Placement(transformation(extent={{-110,160},{-90,240}}),
            iconTransformation(extent={{90,20},{110,100}})));
        Modelica.Fluid.Interfaces.FluidPorts_b ports_b1[nPorts_b1](
          redeclare each final package Medium=Medium,
          each m_flow(
            max=
              if allowFlowReversal then
                +Modelica.Constants.inf
              else
                0),
          each h_outflow(
            start=Medium.h_default,
            nominal=Medium.h_default))
          "Terminal units supply ports"
          annotation (Placement(transformation(extent={{90,160},{110,240}}),
            iconTransformation(extent={{-110,20},{-90,100}})));
        Modelica.Blocks.Interfaces.RealInput mReq_flow[nUni](
          each final quantity="MassFlowRate")
          "Heating or chilled water flow rate required to meet the load"
          annotation (Placement(transformation(extent={{-20,-20},{20,20}},rotation=0,origin={-120,260}),
            iconTransformation(extent={{-10,-10},{10,10}},rotation=0,origin={-110,-40})));
        Modelica.Blocks.Interfaces.IntegerInput modChaOve if have_val and typDis == Type_dis.ChangeOver
          "Operating mode in change-over (1 for heating, 2 for cooling)"
          annotation (Placement(transformation(extent={{-20,-20},{20,20}},rotation=0,origin={-120,-60}),
            iconTransformation(extent={{-120,-70},{-100,-50}})));
        Modelica.Blocks.Interfaces.RealInput TSupSet(
          final quantity="ThermodynamicTemperature",
          final unit="K",
          displayUnit="degC") if have_val
          "Supply temperature set point"
          annotation (Placement(transformation(extent={{-20,-20},{20,20}},rotation=0,origin={-120,-100}),
            iconTransformation(extent={{-10,-10},{10,10}},rotation=0,origin={-110,-80})));
        Modelica.Blocks.Interfaces.RealOutput mReqTot_flow(
          final quantity="MassFlowRate",
          final unit="kg/s")
          "Total heating or chilled water flow rate required to meet the loads"
          annotation (Placement(transformation(extent={{100,240},{140,280}}),
            iconTransformation(extent={{100,-50},{120,-30}})));
        Modelica.Blocks.Interfaces.RealOutput QActTot_flow(
          final quantity="HeatFlowRate",
          final unit="W")
          "Total heat flow rate transferred to the loads (>=0 for heating)"
          annotation (Placement(transformation(extent={{100,120},{140,160}}),
            iconTransformation(extent={{100,-70},{120,-50}})));
        Modelica.Blocks.Interfaces.RealOutput PPum(
          final quantity="Power",
          final unit="W") if have_pum
          "Power drawn by pump motor"
          annotation (Placement(transformation(extent={{100,60},{140,100}}),
            iconTransformation(extent={{100,-90},{120,-70}})));
        // COMPONENTS
        Buildings.Controls.OBC.CDL.Reals.MultiSum sumMasFloReq(
          final k=fill(
            1,
            nUni),
          final nin=nUni)
          "Total required mass flow rate"
          annotation (Placement(transformation(extent={{-80,250},{-60,270}})));
        Buildings.Fluid.Sources.MassFlowSource_T sou_m_flow[nUni](
          redeclare each final package Medium=Medium,
          each final use_m_flow_in=true,
          each final use_T_in=true,
          each final nPorts=1)
          "Source for terminal units supplied flow rate"
          annotation (Placement(transformation(extent={{60,190},{80,210}})));
        Buildings.Fluid.Sources.Boundary_pT sin(
          redeclare final package Medium=Medium,
          final nPorts=nUni)
          "Sink for terminal units return flow rate"
          annotation (Placement(transformation(extent={{-60,190},{-80,210}})));
        Buildings.Controls.OBC.CDL.Reals.MultiSum Q_flowSum(
          final nin=nUni)
          "Total heat flow rate"
          annotation (Placement(transformation(extent={{-50,130},{-30,150}})));
        Modelica.Blocks.Sources.RealExpression mAct_flow[nUni](
          final y(
            each final unit="kg/s")=
            if have_pum then
              mReq_flow
            else
              mReq_flow .* senMasFlo.m_flow/Buildings.Utilities.Math.Functions.smoothLimit(
                x=mReqTot_flow,
                l=m_flow_small,
                u=senMasFlo.m_flow,
                deltaX=m_flow_small))
          "Actual supplied mass flow rate"
          annotation (Placement(transformation(extent={{-90,150},{-70,170}})));
        Modelica.Blocks.Sources.RealExpression QAct_flow[nUni](
          final y(
            each final unit="W")=mAct_flow.y .*(ports_b1.h_outflow-inStream(
            ports_a1.h_outflow)))
          "Actual heat flow rate transferred to each load"
          annotation (Placement(transformation(extent={{-90,130},{-70,150}})));
        Buildings.Fluid.Actuators.Valves.ThreeWayEqualPercentageLinear val(
          redeclare final package Medium=Medium,
          final portFlowDirection_1=
            if allowFlowReversal then
              Modelica.Fluid.Types.PortFlowDirection.Bidirectional
            else
              Modelica.Fluid.Types.PortFlowDirection.Entering,
          final portFlowDirection_2=
            if allowFlowReversal then
              Modelica.Fluid.Types.PortFlowDirection.Bidirectional
            else
              Modelica.Fluid.Types.PortFlowDirection.Leaving,
          final portFlowDirection_3=
            if allowFlowReversal then
              Modelica.Fluid.Types.PortFlowDirection.Bidirectional
            else
              Modelica.Fluid.Types.PortFlowDirection.Entering,
          final dpValve_nominal=dpVal_nominal,
          final use_inputFilter=false,
          final m_flow_nominal=m_flow_nominal,
          final linearized={true,true},
          energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial) if have_val
          "Mixing valve"
          annotation (Placement(transformation(extent={{-10,10},{10,-10}},origin={-80,40})));
        Buildings.Fluid.Movers.BaseClasses.IdealSource pipPre(
          redeclare final package Medium=Medium,
          final dp_start=dp_nominal-dpVal_nominal,
          final m_flow_start=m_flow_nominal,
          final show_T=false,
          final show_V_flow=false,
          final control_m_flow=typCtr == Type_ctr.ConstantSpeed,
          final control_dp=typCtr <> Type_ctr.ConstantSpeed,
          final allowFlowReversal=allowFlowReversal,
          final m_flow_small=m_flow_small)
          "Fictitious pipe used to prescribe pump head or flow rate"
          annotation (Placement(transformation(extent={{-4,-10},{16,10}})));
        Buildings.Fluid.HeatExchangers.HeaterCooler_u heaCoo(
          redeclare final package Medium=Medium,
          final dp_nominal=0,
          final m_flow_nominal=m_flow_nominal,
          final Q_flow_nominal=-1,
          final allowFlowReversal=allowFlowReversal,
          final energyDynamics=energyDynamics,
          final tau=tau)
          "Heat transfer from the terminal units to the distribution system"
          annotation (Placement(transformation(extent={{46,-10},{66,10}})));
        Buildings.Fluid.FixedResistances.Junction spl(
          redeclare final package Medium=Medium,
          final portFlowDirection_1=
            if allowFlowReversal then
              Modelica.Fluid.Types.PortFlowDirection.Bidirectional
            else
              Modelica.Fluid.Types.PortFlowDirection.Entering,
          final portFlowDirection_2=
            if allowFlowReversal then
              Modelica.Fluid.Types.PortFlowDirection.Bidirectional
            else
              Modelica.Fluid.Types.PortFlowDirection.Leaving,
          final portFlowDirection_3=
            if allowFlowReversal then
              Modelica.Fluid.Types.PortFlowDirection.Bidirectional
            else
              Modelica.Fluid.Types.PortFlowDirection.Leaving,
          final m_flow_nominal=m_flow_nominal*{1,1,1},
          final dp_nominal=0*{1,1,1},
          energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial) if have_val
          "Flow splitter"
          annotation (Placement(transformation(extent={{-10,10},{10,-10}},origin={80,20})));
        Buildings.Fluid.Sensors.MassFlowRate senMasFlo(
          redeclare final package Medium=Medium,
          final allowFlowReversal=allowFlowReversal)
          "Supply mass flow rate sensor"
          annotation (Placement(transformation(extent={{20,-10},{40,10}})));
        Buildings.Controls.OBC.CDL.Routing.RealScalarReplicator reaRep(
          final nout=nUni)
          "Repeat input to output an array"
          annotation (Placement(transformation(extent={{20,150},{40,170}})));
        estcp.DHC.Loads.BaseClasses.Controls.MixingValveControl conVal(final
            typDis=typDis) if have_val "Mixing valve controller"
          annotation (Placement(transformation(extent={{-48,-106},{-28,-86}})));
        Modelica.Blocks.Sources.RealExpression dpNetVal(
          final y(
            final unit="Pa")=dpPum-dpVal_nominal)
          "Pressure drop over the distribution network (excluding mixing valve)"
          annotation (Placement(transformation(extent={{10,10},{-10,-10}},rotation=180,origin={-80,120})));
        Modelica.Blocks.Sources.RealExpression masFloPum(
          final y(
            final unit="kg/s")=mPum_flow)
          "Pump mass flow rate value"
          annotation (Placement(transformation(extent={{10,10},{-10,-10}},rotation=180,origin={-80,100})));
        Modelica.Blocks.Sources.RealExpression spePum(
          final y(
            final unit="1")=spePum_nominal)
          "Pump speed (fractional)"
          annotation (Placement(transformation(extent={{10,10},{-10,-10}},rotation=180,origin={-80,80})));
        Buildings.Fluid.Movers.Preconfigured.FlowControlled_m_flow pumFlo(
          redeclare final package Medium=Medium,
          final m_flow_nominal=m_flow_nominal,
          final dp_nominal=dp_nominal,
          final allowFlowReversal=allowFlowReversal,
          addPowerToMedium=false,
          use_inputFilter=false,
          energyDynamics=Modelica.Fluid.Types.Dynamics.SteadyState) if have_pum and typCtr <> Type_ctr.ConstantSpeed
          "Distribution pump with prescribed mass flow rate"
          annotation (Placement(transformation(extent={{-50,30},{-30,50}})));
        Buildings.Fluid.Movers.Preconfigured.SpeedControlled_y pumSpe(
          redeclare final package Medium=Medium,
          final m_flow_nominal=m_flow_nominal,
          final dp_nominal=dp_nominal,
          final allowFlowReversal=allowFlowReversal,
          addPowerToMedium=false,
          use_inputFilter=false,
          energyDynamics=Modelica.Fluid.Types.Dynamics.SteadyState) if have_pum and typCtr == Type_ctr.ConstantSpeed
          "Distribution pump with prescribed speed (fractional)"
          annotation (Placement(transformation(extent={{-50,-50},{-30,-30}})));
        Buildings.Fluid.Sensors.TemperatureTwoPort senTSup(
          redeclare final package Medium = Medium,
          final allowFlowReversal=allowFlowReversal,
          final m_flow_nominal=m_flow_nominal,
          initType=Modelica.Blocks.Types.Init.InitialState)
          "Supply temperature"
          annotation (Placement(transformation(extent={{-30,-10},{-10,10}})));
      protected
        final parameter Modelica.Units.SI.MassFlowRate mDis_flow_nominal[nUni]={sum(
            mUni_flow_nominal[i:nUni]) for i in 1:nUni}
          "Distribution flow rate between each connected unit at nominal conditions";
        final parameter Real kDis[nUni]={
          if dpDis_nominal[i] > Modelica.Constants.eps then
            mDis_flow_nominal[i]/sqrt(dpDis_nominal[i])
          else
            Modelica.Constants.inf for i in 1:nUni}
          "Flow coefficient between each connected unit at nominal conditions";
        Modelica.Units.SI.MassFlowRate mDis_flow[nUni]={sum(mReq_flow[i:nUni]) for i in
                1:nUni} "Distribution flow rate between each connected unit";
        Modelica.Units.SI.PressureDifference dpDis[nUni]=(mDis_flow ./ kDis) .^ 2
          "Pressure drop between each connected unit (supply line)";
        Modelica.Units.SI.PressureDifference dpPum(displayUnit="Pa") = if typCtr ==
          Type_ctr.LinearHead then dpMin + mPum_flow/m_flow_nominal*dp_nominal
           elseif typCtr == Type_ctr.ConstantDp then 2*sum(dpDis) + dpMin +
          dpVal_nominal else dp_nominal "Pump head";
        Modelica.Units.SI.MassFlowRate mPum_flow=if typCtr == Type_ctr.ConstantFlow
             then m_flow_nominal else sum(mReq_flow) "Pump mass flow rate";
        parameter Medium.ThermodynamicState sta_default=Medium.setState_pTX(
          T=Medium.T_default,
          p=Medium.p_default,
          X=Medium.X_default);
        parameter Modelica.Units.SI.Density rho_default=Medium.density(sta_default)
          "Density, used to compute fluid volume";
      initial equation
        assert(
          nPorts_a1 == nPorts_b1,
          "In "+getInstanceName()+": The numbers of terminal units return ports ("+String(
            nPorts_a1)+") and supply ports ("+String(
            nPorts_b1)+") must be equal.");
        assert(
          if have_val then
            have_pum
          else
            true,
          "In "+getInstanceName()+": The configuration where have_val is true and have_pum is false is not allowed.");
      equation
        // Connect statements involving conditionally removed components are
        // removed at translation time by Modelica specification.
        // Only obsolete statements corresponding to the default model structure need
        // to be programmatically removed.
        if not have_val then
          connect(heaCoo.port_b,port_b)
            annotation (Line(points={{66,0},{100,0}},color={0,127,255}));
          connect(port_a,pumFlo.port_a)
            annotation (Line(points={{-100,0},{-60,0},{-60,40},{-50,40}},color={0,127,255}));
          connect(port_a,pumSpe.port_a)
            annotation (Line(points={{-100,0},{-60,0},{-60,-40},{-50,-40}},color={0,127,255}));
        end if;
        if not have_pum then
          connect(port_a,senTSup.port_a)
            annotation (Line(points={{-100,0},{-30,0}},color={0,127,255}));
        end if;
        connect(sumMasFloReq.y,mReqTot_flow)
          annotation (Line(points={{-58,260},{120,260}},color={0,0,127}));
        connect(mReq_flow,sumMasFloReq.u)
          annotation (Line(points={{-120,260},{-82,260}},color={0,0,127}));
        connect(mAct_flow.y,sou_m_flow.m_flow_in)
          annotation (Line(points={{-69,160},{-40,160},{-40,208},{58,208}},color={0,0,127}));
        connect(ports_a1,sin.ports)
          annotation (Line(points={{-100,200},{-80,200}},color={0,127,255}));
        connect(sou_m_flow.ports[1],ports_b1)
          annotation (Line(points={{80,200},{100,200}},color={0,127,255}));
        connect(senMasFlo.port_b,heaCoo.port_a)
          annotation (Line(points={{40,0},{46,0}},color={0,127,255}));
        connect(Q_flowSum.y,QActTot_flow)
          annotation (Line(points={{-28,140},{120,140}},color={0,0,127}));
        connect(QAct_flow.y,Q_flowSum.u)
          annotation (Line(points={{-69,140},{-52,140}},color={0,0,127}));
        connect(Q_flowSum.y,heaCoo.u)
          annotation (Line(points={{-28,140},{40,140},{40,6},{44,6}},color={0,0,127}));
        connect(reaRep.y,sou_m_flow.T_in)
          annotation (Line(points={{42,160},{54,160},{54,204},{58,204}},color={0,0,127}));
        connect(port_a,val.port_1)
          annotation (Line(points={{-100,0},{-96,0},{-96,40},{-90,40}},color={0,127,255}));
        connect(heaCoo.port_b,spl.port_1)
          annotation (Line(points={{66,0},{68,0},{68,20},{70,20}},color={0,127,255}));
        connect(spl.port_2,port_b)
          annotation (Line(points={{90,20},{96,20},{96,0},{100,0}},color={0,127,255}));
        connect(spl.port_3,val.port_3)
          annotation (Line(points={{80,30},{80,60},{-80,60},{-80,50}},color={0,127,255}));
        connect(TSupSet,conVal.TSupSet)
          annotation (Line(points={{-120,-100},{-80,-100},{-80,-92},{-49,-92}},color={0,0,127}));
        connect(conVal.yVal,val.y)
          annotation (Line(points={{-27,-96},{-20,-96},{-20,-60},{-80,-60},{-80,28}},color={0,0,127}));
        connect(modChaOve,conVal.modChaOve)
          annotation (Line(points={{-120,-60},{-90,-60},{-90,-88},{-49,-88}},color={255,127,0}));
        connect(val.port_2,pumFlo.port_a)
          annotation (Line(points={{-70,40},{-50,40}},color={0,127,255}));
        connect(val.port_2,pumSpe.port_a)
          annotation (Line(points={{-70,40},{-60,40},{-60,-40},{-50,-40}},color={0,127,255}));
        connect(pumFlo.P,PPum)
          annotation (Line(points={{-29,49},{-14,49},{-14,80},{120,80}},color={0,0,127}));
        connect(pumSpe.P,PPum)
          annotation (Line(points={{-29,-31},{-14,-31},{-14,80},{120,80}},color={0,0,127}));
        connect(dpNetVal.y,pipPre.dp_in)
          annotation (Line(points={{-69,120},{12,120},{12,8}},color={0,0,127}));
        connect(masFloPum.y,pipPre.m_flow_in)
          annotation (Line(points={{-69,100},{0,100},{0,8}},color={0,0,127}));
        connect(masFloPum.y,pumFlo.m_flow_in)
          annotation (Line(points={{-69,100},{-40,100},{-40,52}},color={0,0,127}));
        connect(spePum.y,pumSpe.y)
          annotation (Line(points={{-69,80},{-52,80},{-52,-24},{-40,-24},{-40,-28}},color={0,0,127}));
        connect(pipPre.port_a,senTSup.port_b)
          annotation (Line(points={{-4,0},{-10,0}},color={0,127,255}));
        connect(pumSpe.port_b,senTSup.port_a)
          annotation (Line(points={{-30,-40},{-24,-40},{-24,-20},{-40,-20},{-40,0},{-30,0}},color={0,127,255}));
        connect(pumFlo.port_b,senTSup.port_a)
          annotation (Line(points={{-30,40},{-24,40},{-24,20},{-40,20},{-40,0},{-30,0}},color={0,127,255}));
        connect(senTSup.T,reaRep.u)
          annotation (Line(points={{-20,11},{-20,160},{18,160}},color={0,0,127}));
        connect(senTSup.T,conVal.TSupMes)
          annotation (Line(points={{-20,11},{-20,20},{-8,20},{-8,-112},{-60,-112},{-60,-100},{-49,-100}},color={0,0,127}));
        connect(pipPre.port_b,senMasFlo.port_a)
          annotation (Line(points={{16,0},{20,0}},color={0,127,255}));
        annotation (
          defaultComponentName="dis",
          Documentation(
            info="<html>
<p>
This model represents a two-pipe hydraulic distribution system serving multiple
terminal units.
It is primarily intended to be used in conjunction with models that extend
<a href=\"modelica://Buildings.Experimental.DHC.Loads.BaseClasses.PartialTerminalUnit\">
Buildings.Experimental.DHC.Loads.BaseClasses.PartialTerminalUnit</a>.
The typical model structure for a whole building connected to an energy
transfer station (or a dedicated plant) is illustrated in the schematics in
the info section of
<a href=\"modelica://Buildings.Experimental.DHC.Loads.BaseClasses.PartialBuilding\">
Buildings.Experimental.DHC.Loads.BaseClasses.PartialBuilding</a>.
</p>
<p>
The pipe network modeling is decoupled between a main distribution
loop and several terminal branch circuits:
</p>
<ul>
<li>
The mass flow rate in each branch circuit is equal to the mass flow rate demand yielded
by the terminal unit model, constrained by the condition that the sum of all
demands is lower or equal to the flow rate in the main loop.
Additionally if the total flow rate demand exceeds the nominal mass flow rate
the model generates an error.
</li>
<li>
The inlet temperature in each branch circuit is equal to the supply temperature
in the main loop.
The outlet temperature in the main loop results from transferring the enthalpy
flow rate of each individual fluid stream to the main fluid stream.
</li>
<li>
The pressure drop in the main distribution loop corresponds to the pressure drop
over the whole distribution system (the pump head). It is governed by an equation
representing the control logic of the distribution pump.
</li>
</ul>
<p>
Optionally:
</p>
<ul>
<li>
A distribution pump can be modeled with a prescribed flow rate corresponding
to the total flow rate demand.
</li>
<li>
A mixing valve can be modeled (together with a distribution pump) with a
control loop tracking the supply temperature. Note that the nominal pressure
drop of the valve is not an exposed parameter: it is set by default to 10%
of the nominal total pressure drop.
</li>
</ul>
<h4>Implementation</h4>
<p>
The modeling approach aims to minimize the number of algebraic
equations by avoiding an explicit modeling of the terminal actuators and
the whole flow network.
In addition, the assumption <code>allowFlowReversal=false</code> is used
systematically together with boundary conditions which actually ensure that
no reverse flow conditions are encountered in simulation.
This allows directly accessing the inlet enthalpy value of a component from
the fluid port <code>port_a</code> with the built-in function <code>inStream</code>.
This approach is preferred to the use of two-port sensors which introduce a
state to ensure a smooth transition at flow reversal.
All connected components must meet the same requirements.
The impact on the computational performance is illustrated
<a href=\"#my_comp\">below</a>.
</p>
<h4>Pump head computation</h4>
<p>
The pump head is computed as follows (see also
<a href=\"modelica://Buildings.Experimental.DHC.Loads.BaseClasses.Validation.FlowDistributionPumpControl\">
Buildings.Experimental.DHC.Loads.BaseClasses.Validation.FlowDistributionPumpControl</a>
for a comparison with an explicit modeling of the piping network).
</p>
<ul>
<li>
In case of a constant pump head,
<p style=\"font-style:italic;\">
dpPum = dp_nominal.
</p>
</li>
<li>
In case of a constant flow rate (three-way valves) the network flow
characteristics is considered independent from the actuator positions.
Hence,
<p style=\"font-style:italic;\">
dpPum = dp_nominal.
</p>
</li>
<li>
In case of a linear head,
<p style=\"font-style:italic;\">
dpPum = dpMin + (dp_nominal - dpMin) * m_flow / m_flow_nominal.
</p>
</li>
<li>
In case of a constant speed, the pump head is computed based on the pump pressure
curve and the total required mass flow rate.
</li>
<li>
In case of a constant pressure difference at a given location, the pump head
is computed according to the schematics hereunder, under the
assumption of a two-pipe distribution system,
<p style=\"font-style:italic;\">
dpPum = dpMin + dpVal + 2 * &Sigma;<sub>i</sub> dpDis[i],
</p>
<p>
where
</p>
<ul>
<li>
<i>dpMin</i> is the differential pressure set point.
</li>
<li>
<i>dpVal</i> is the pressure drop across the optional mixing valve.
It is considered independent from the valve position, i.e.,
<i>dpVal = dpVal_nominal</i>,
</li>
<li>
<i>dpDis[i]</i> is the pressure drop in the supply pipe segment directly
upstream the i<sup>th</sup> connection,
<p>
<i>dpDis[i] = 1 / K[i]<sup>2</sup> * mDis_flow[i] <sup>2</sup></i>,
</p>
<p>
where
<i>mDis_flow[i]  = &Sigma;<sub>i to nUni</sub> mReq_flow[i]</i>
is the mass flow rate in the same pipe segment, and
<i>K[i] = (&Sigma;<sub>i to nUni</sub> mUni_flow_nominal[i]) /
dpDis_nominal[i]<sup>0.5</sup></i>
is the corresponding flow coefficient (constant).
</p>
</li>
</ul>
</li>
<li>
<p>
The pressure drop in the corresponding pipe segment of the return line
is considered equal, hence the factor of 2 in the above equation.
</p>
<p>
The default value for <code>dpDis_nominal</code> corresponds to a configuration
where the differential pressure sensor is located before the most remote
connected unit, 20% of the nominal pressure drop in the distribution network
occurs between the pump and the first connected unit (supply and return),
the remaining pressure drop is evenly distributed over each pipe segment
between the other connected units.
The user can override these default values with the requirement that the
nominal pressure drop of each pipe segment downstream of the differential pressure
sensor must be set to zero.
</p>
</li>
</ul>
<p>
<img alt=\"image\"
src=\"modelica://Buildings/Resources/Images/Experimental/DHC/Loads/FlowDistribution1.png\"/>
</p>
<h4>Energy and mass dynamics</h4>
<p>
The energy dynamics and the time constant used in the ideal heater and cooler
model are exposed as advanced parameters.
They are used to represent the typical dynamics over the whole
piping network, from supply to return.
The mass dynamics are by default identical to the energy dynamics.
</p>
<p>
Simplifying assumptions are used otherwise, namely
</p>
<ul>
<li>
the pump is modeled in steady-state, and
</li>
<li>
the valve and the flow splitter are modeled with fixed initial conditions.
This is because the temperature of the fluid leaving the valve is used
as a control input signal. If a steady-state model is used, that temperature
is computed by assuming ideal mixing at the inner fluid ports of the valve.
In case of zero flow rate, the temperature value results from regularizing
the corresponding equation that is not well defined in that domain.
That triggers non-physical temperature variations which themselves lead to
control transients when the flow rate gets reestablished. Those effects
turn out to be detrimental to computational performance.
</li>
</ul>
<h4 id=\"my_comp\">Computational performance</h4>
<p>
The figure below compares the computational performance of this model
(labelled <code>simple</code>, see model
<a href=\"modelica://Buildings.Experimental.DHC.Loads.BaseClasses.Validation.BenchmarkFlowDistribution1\">
Buildings.Experimental.DHC.Loads.BaseClasses.Validation.BenchmarkFlowDistribution1</a>)
with an explicit modeling of the distribution network and
the terminal unit actuators (labelled <code>detailed</code>, see model
<a href=\"modelica://Buildings.Experimental.DHC.Loads.BaseClasses.Validation.BenchmarkFlowDistribution2\">
Buildings.Experimental.DHC.Loads.BaseClasses.Validation.BenchmarkFlowDistribution2</a>).
The models are simulated with the solver CVODE from Sundials.
The impact of a varying number of connected loads, <code>nLoa</code>, is
assessed on
</p>
<ol>
<li>
the total time for all model evaluations,
</li>
<li>
the total time spent between model evaluations, and
</li>
<li>
the number of continuous state variables.
</li>
</ol>
<p>
A linear, resp. quadratic, regression line and the corresponding confidence interval are
also plotted for the model labelled <code>simple</code>, resp. <code>detailed</code>.
</p>
<p>
<img alt=\"image\"
src=\"modelica://Buildings/Resources/Images/Experimental/DHC/Loads/FlowDistribution2.png\"/>
</p>
</html>",   revisions="<html>
<ul>
<li>
August 30, 2022, by Hongxiang Fu:<br/>
Swapped the pump models for preconfigured versions and removed the pump curve
record <code>per</code>.
This is for
<a href=\"https://github.com/lbl-srg/modelica-buildings/issues/3099\">#3099</a>.
</li>
<li>
December 12, 2021, by Michael Wetter:<br/>
Added parameter assignment for <code>pumFlo.per.V_flow</code> and <code>pumFlo.per.pressure</code>.
This avoids in OPTIMICA a compiler error \"Could not evaluate binding expression for structural parameter 'disFloHea.pumFlo.eff.per.pressure.V_flow'\".
</li>
<li>
February 21, 2020, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>"),Icon(
            coordinateSystem(
              preserveAspectRatio=false,
              extent={{-100,-100},{100,100}}),
            graphics={
              Rectangle(
                extent={{-100,100},{100,-100}},
                lineColor={95,95,95},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-104,6},{6,-6}},
                lineThickness=1,
                fillColor={0,0,255},
                fillPattern=FillPattern.Solid,
                pattern=LinePattern.None,
                lineColor={0,0,0}),
              Rectangle(
                extent={{-49,6},{49,-6}},
                lineThickness=1,
                fillColor={0,0,255},
                fillPattern=FillPattern.Solid,
                pattern=LinePattern.None,
                lineColor={0,0,0},
                origin={66,43},
                rotation=90),
              Rectangle(
                extent={{72,6},{100,-6}},
                lineThickness=1,
                fillColor={0,0,255},
                fillPattern=FillPattern.Solid,
                pattern=LinePattern.None,
                lineColor={0,0,0}),
              Rectangle(
                extent={{-60,92},{-6,80}},
                lineThickness=1,
                fillColor={0,0,255},
                fillPattern=FillPattern.Solid,
                pattern=LinePattern.None,
                lineColor={0,0,0}),
              Rectangle(
                extent={{-43,6},{43,-6}},
                lineThickness=1,
                fillColor={0,0,255},
                fillPattern=FillPattern.Solid,
                pattern=LinePattern.None,
                lineColor={0,0,0},
                origin={-2.66454e-15,49},
                rotation=90),
              Rectangle(
                extent={{-15,20},{15,-20}},
                lineColor={0,0,0},
                lineThickness=1,
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                pattern=LinePattern.None,
                visible=have_val,
                origin={-42,-3},
                rotation=-90),
              Polygon(
                points={{-10,12},{-10,-8},{10,2},{-10,12}},
                lineColor={0,0,0},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                origin={-52,-2},
                rotation=0,
                lineThickness=0.5,
                visible=have_val),
              Polygon(
                points={{-10,12},{-10,-8},{10,2},{-10,12}},
                lineColor={0,0,0},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                origin={-40,-10},
                rotation=90,
                lineThickness=0.5,
                visible=have_val),
              Polygon(
                points={{-10,12},{-10,-8},{10,2},{-10,12}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                origin={-32,2},
                rotation=180,
                lineThickness=0.5,
                visible=have_val),
              Rectangle(
                extent={{-48,-56},{72,-68}},
                lineThickness=1,
                fillColor={0,0,255},
                fillPattern=FillPattern.Solid,
                pattern=LinePattern.None,
                lineColor={0,0,0},
                visible=have_val),
              Rectangle(
                extent={{-32,6},{32,-6}},
                lineThickness=1,
                fillColor={0,0,255},
                fillPattern=FillPattern.Solid,
                pattern=LinePattern.None,
                lineColor={0,0,0},
                origin={-66,60},
                rotation=90),
              Rectangle(
                extent={{-100,92},{-72,80}},
                lineThickness=1,
                fillColor={0,0,255},
                fillPattern=FillPattern.Solid,
                pattern=LinePattern.None,
                lineColor={0,0,0}),
              Rectangle(
                extent={{-100,66},{-72,54}},
                lineThickness=1,
                fillColor={0,0,255},
                fillPattern=FillPattern.Solid,
                pattern=LinePattern.None,
                lineColor={0,0,0}),
              Rectangle(
                extent={{-100,40},{-72,28}},
                lineThickness=1,
                fillColor={0,0,255},
                fillPattern=FillPattern.Solid,
                pattern=LinePattern.None,
                lineColor={0,0,0}),
              Rectangle(
                extent={{72,66},{100,54}},
                lineThickness=1,
                fillColor={0,0,255},
                fillPattern=FillPattern.Solid,
                pattern=LinePattern.None,
                lineColor={0,0,0}),
              Rectangle(
                extent={{72,92},{100,80}},
                lineThickness=1,
                fillColor={0,0,255},
                fillPattern=FillPattern.Solid,
                pattern=LinePattern.None,
                lineColor={0,0,0}),
              Rectangle(
                extent={{72,40},{100,28}},
                lineThickness=1,
                fillColor={0,0,255},
                fillPattern=FillPattern.Solid,
                pattern=LinePattern.None,
                lineColor={0,0,0}),
              Ellipse(
                extent={{-20,68},{20,28}},
                lineColor={0,0,0},
                lineThickness=0.5,
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                startAngle=0,
                endAngle=360,
                visible=have_pum),
              Polygon(
                points={{-16,16},{-16,-16},{16,0},{-16,16}},
                lineColor={0,0,0},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                origin={0,52},
                rotation=90,
                visible=have_pum),
              Rectangle(
                extent={{-18,6},{18,-6}},
                lineThickness=1,
                fillColor={0,0,255},
                fillPattern=FillPattern.Solid,
                pattern=LinePattern.None,
                lineColor={0,0,0},
                origin={-42,-38},
                rotation=90,
                visible=have_val),
              Rectangle(
                extent={{-25,6},{25,-6}},
                lineThickness=1,
                fillColor={0,0,255},
                fillPattern=FillPattern.Solid,
                pattern=LinePattern.None,
                lineColor={0,0,0},
                origin={66,-31},
                rotation=90,
                visible=have_val)}),
          Diagram(
            coordinateSystem(
              preserveAspectRatio=false,
              extent={{-100,-120},{100,280}})));
      end FlowDistribution;

      partial model PartialBuilding
        "Partial class for building model"
        replaceable package Medium=Buildings.Media.Water
          constrainedby Modelica.Media.Interfaces.PartialMedium
          "Medium in the building distribution system";
        parameter Integer nPorts_aHeaWat=0
          "Number of heating water inlet ports"
          annotation (Evaluate=true,Dialog(connectorSizing=true));
        parameter Integer nPorts_bHeaWat=0
          "Number of heating water outlet ports"
          annotation (Evaluate=true,Dialog(connectorSizing=true));
        parameter Integer nPorts_aChiWat=0
          "Number of chilled water inlet ports"
          annotation (Evaluate=true,Dialog(connectorSizing=true));
        parameter Integer nPorts_bChiWat=0
          "Number of chilled water outlet ports"
          annotation (Evaluate=true,Dialog(connectorSizing=true));
        parameter Boolean have_heaWat=false
          "Set to true if the building has heating water system"
          annotation (Evaluate=true, Dialog(group="Configuration"));
        parameter Boolean have_chiWat=false
          "Set to true if the building has chilled water system"
          annotation (Evaluate=true, Dialog(group="Configuration"));
        parameter Boolean have_eleHea=false
          "Set to true if the building has decentralized electric heating system"
          annotation (Evaluate=true, Dialog(group="Configuration"));
        parameter Boolean have_eleCoo=false
          "Set to true if the building has decentralized electric cooling system"
          annotation (Evaluate=true, Dialog(group="Configuration"));
        parameter Boolean have_fan=false
          "Set to true if fan power is computed"
          annotation (Evaluate=true, Dialog(group="Configuration"));
        parameter Boolean have_pum=false
          "Set to true if pump power is computed"
          annotation (Evaluate=true, Dialog(group="Configuration"));
        parameter Boolean have_weaBus=false
          "Set to true to use a weather bus"
          annotation (Evaluate=true, Dialog(group="Configuration"));
        parameter Real facMul(min=Modelica.Constants.eps)=1
          "Multiplier factor"
          annotation (Evaluate=true, Dialog(group="Scaling"));
        parameter Boolean allowFlowReversal=false
          "= true to allow flow reversal, false restricts to design direction (port_a -> port_b)"
          annotation (Dialog(tab="Assumptions"),Evaluate=true);
        final parameter Boolean have_heaLoa=have_heaWat or have_eleHea
          "Set to true if the building has heating loads"
          annotation (Evaluate=true, Dialog(group="Configuration"));
        final parameter Boolean have_cooLoa=have_chiWat or have_eleCoo
          "Set to true if the building has cooling loads"
          annotation (Evaluate=true, Dialog(group="Configuration"));
        // IO CONNECTORS
        Buildings.BoundaryConditions.WeatherData.Bus weaBus if have_weaBus
          "Weather data bus"
          annotation (Placement(transformation(extent={{-16,284},{18,316}}),
            iconTransformation(extent={{-16,198},{18,230}})));
        Modelica.Fluid.Interfaces.FluidPorts_a ports_aHeaWat[nPorts_aHeaWat](
          redeclare each package Medium=Medium,
          each m_flow(
            min=
              if allowFlowReversal then
                -Modelica.Constants.inf
              else
                0),
          each h_outflow(
            start=Medium.h_default,
            nominal=Medium.h_default)) if have_heaWat
          "Heating water inlet ports"
          annotation (Placement(transformation(extent={{-310,-100},{-290,-20}}),
            iconTransformation(extent={{-310,-100},{-290,-20}})));
        Modelica.Fluid.Interfaces.FluidPorts_b ports_bHeaWat[nPorts_bHeaWat](
          redeclare each package Medium=Medium,
          each m_flow(
            max=
              if allowFlowReversal then
                +Modelica.Constants.inf
              else
                0),
          each h_outflow(
            start=Medium.h_default,
            nominal=Medium.h_default)) if have_heaWat
          "Heating water outlet ports"
          annotation (Placement(transformation(extent={{290,-100},{310,-20}}),
            iconTransformation(extent={{290,-100},{310,-20}})));
        Modelica.Fluid.Interfaces.FluidPorts_a ports_aChiWat[nPorts_aChiWat](
          redeclare each package Medium=Medium,
          each m_flow(
            min=
              if allowFlowReversal then
                -Modelica.Constants.inf
              else
                0),
          each h_outflow(
            start=Medium.h_default,
            nominal=Medium.h_default)) if have_chiWat
          "Chilled water inlet ports"
          annotation (Placement(transformation(extent={{-310,-300},{-290,-220}}),
            iconTransformation(extent={{-310,-220},{-290,-140}})));
        Modelica.Fluid.Interfaces.FluidPorts_b ports_bChiWat[nPorts_bChiWat](
          redeclare each package Medium=Medium,
          each m_flow(
            max=
              if allowFlowReversal then
                +Modelica.Constants.inf
              else
                0),
          each h_outflow(
            start=Medium.h_default,
            nominal=Medium.h_default)) if have_chiWat
          "Chilled water outlet ports"
          annotation (Placement(transformation(extent={{290,-300},{310,-220}}),
            iconTransformation(extent={{290,-220},{310,-140}})));
        Modelica.Blocks.Interfaces.RealOutput QHea_flow(
          final unit="W") if have_heaLoa
          "Total heating heat flow rate transferred to the loads (>=0)"
          annotation (Placement(transformation(extent={{300,260},{340,300}}),
            iconTransformation(extent={{300,240},{340,280}})));
        Modelica.Blocks.Interfaces.RealOutput QCoo_flow(
          final unit="W") if have_cooLoa
          "Total cooling heat flow rate transferred to the loads (<=0)"
          annotation (Placement(transformation(extent={{300,220},{340,260}}),
            iconTransformation(extent={{300,200},{340,240}})));
        Modelica.Blocks.Interfaces.RealOutput PHea(
          final unit="W") if have_eleHea
          "Power drawn by decentralized heating system"
          annotation (Placement(transformation(extent={{300,180},{340,220}}),
            iconTransformation(extent={{300,160},{340,200}})));
        Modelica.Blocks.Interfaces.RealOutput PCoo(
          final unit="W") if have_eleCoo
          "Power drawn by decentralized cooling system"
          annotation (Placement(transformation(extent={{300,140},{340,180}}),
            iconTransformation(extent={{300,120},{340,160}})));
        Modelica.Blocks.Interfaces.RealOutput PFan(
          final quantity="Power",
          final unit="W") if have_fan
          "Power drawn by fan motors"
          annotation (Placement(transformation(extent={{300,100},{340,140}}),
            iconTransformation(extent={{300,80},{340,120}})));
        Modelica.Blocks.Interfaces.RealOutput PPum(
          final quantity="Power",
          final unit="W") if have_pum
          "Power drawn by pump motors"
          annotation (Placement(transformation(extent={{300,60},{340,100}}),
            iconTransformation(extent={{300,40},{340,80}})));
        Buildings.Fluid.BaseClasses.MassFlowRateMultiplier mulHeaWatInl[
          nPorts_aHeaWat](
          redeclare each final package Medium = Medium,
          each final k=1/facMul,
          each final allowFlowReversal=allowFlowReversal) if have_heaWat
          "Mass flow rate multiplier" annotation (Placement(transformation(
                extent={{-280,-70},{-260,-50}})));
        Buildings.Fluid.BaseClasses.MassFlowRateMultiplier mulChiWatInl[
          nPorts_aChiWat](
          redeclare each final package Medium = Medium,
          each final k=1/facMul,
          each final allowFlowReversal=allowFlowReversal) if have_chiWat
          "Mass flow rate multiplier" annotation (Placement(transformation(
                extent={{-280,-270},{-260,-250}})));
        Buildings.Fluid.BaseClasses.MassFlowRateMultiplier mulHeaWatOut[
          nPorts_bHeaWat](
          redeclare each final package Medium = Medium,
          each final k=facMul,
          each final allowFlowReversal=allowFlowReversal) if have_heaWat
          "Mass flow rate multiplier"
          annotation (Placement(transformation(extent={{260,-70},{280,-50}})));
        Buildings.Fluid.BaseClasses.MassFlowRateMultiplier mulChiWatOut[
          nPorts_bChiWat](
          redeclare each final package Medium = Medium,
          each final k=facMul,
          each final allowFlowReversal=allowFlowReversal) if have_chiWat
          "Mass flow rate multiplier" annotation (Placement(transformation(
                extent={{260,-270},{280,-250}})));
        Buildings.Controls.OBC.CDL.Reals.MultiplyByParameter mulQHea_flow(u(
              final unit="W"), final k=facMul) if have_heaLoa "Scaling"
          annotation (Placement(transformation(extent={{270,270},{290,290}})));
        Buildings.Controls.OBC.CDL.Reals.MultiplyByParameter mulQCoo_flow(u(
              final unit="W"), final k=facMul) if have_cooLoa "Scaling"
          annotation (Placement(transformation(extent={{270,230},{290,250}})));
        Buildings.Controls.OBC.CDL.Reals.MultiplyByParameter mulPHea(u(final
              unit="W"), final k=facMul) if have_eleHea "Scaling"
          annotation (Placement(transformation(extent={{270,190},{290,210}})));
        Buildings.Controls.OBC.CDL.Reals.MultiplyByParameter mulPCoo(u(final
              unit="W"), final k=facMul) if have_eleCoo "Scaling"
          annotation (Placement(transformation(extent={{270,150},{290,170}})));
        Buildings.Controls.OBC.CDL.Reals.MultiplyByParameter mulPFan(u(final
              unit="W"), final k=facMul) if have_fan "Scaling"
          annotation (Placement(transformation(extent={{270,110},{290,130}})));
        Buildings.Controls.OBC.CDL.Reals.MultiplyByParameter mulPPum(u(final
              unit="W"), final k=facMul) if have_pum "Scaling"
          annotation (Placement(transformation(extent={{270,70},{290,90}})));
      protected
        final parameter Modelica.Units.SI.SpecificHeatCapacity cp_default=
            Medium.specificHeatCapacityCp(Medium.setState_pTX(
            p=Medium.p_default,
            T=Medium.T_default,
            X=Medium.X_default))
          "Specific heat capacity of medium at default medium state";
      initial equation
        assert(
          nPorts_aHeaWat == nPorts_bHeaWat,
          "In "+getInstanceName()+": The numbers of heating water inlet ports ("+String(
            nPorts_aHeaWat)+") and outlet ports ("+String(
            nPorts_bHeaWat)+") must be equal.");
        assert(
          nPorts_aChiWat == nPorts_bChiWat,
          "In "+getInstanceName()+": The numbers of chilled water inlet ports ("+String(
            nPorts_aChiWat)+") and outlet ports ("+String(
            nPorts_bChiWat)+") must be equal.");
      equation
        connect(mulQHea_flow.y, QHea_flow)
          annotation (Line(points={{292,280},{320,280}}, color={0,0,127}));
        connect(mulQCoo_flow.y, QCoo_flow)
          annotation (Line(points={{292,240},{320,240}}, color={0,0,127}));
        connect(mulPHea.y, PHea)
          annotation (Line(points={{292,200},{320,200}}, color={0,0,127}));
        connect(mulPCoo.y, PCoo)
          annotation (Line(points={{292,160},{320,160}}, color={0,0,127}));
        connect(mulPFan.y, PFan)
          annotation (Line(points={{292,120},{320,120}}, color={0,0,127}));
        connect(mulPPum.y, PPum)
          annotation (Line(points={{292,80},{320,80}}, color={0,0,127}));
        connect(ports_aChiWat,mulChiWatInl. port_a)
          annotation (Line(points={{-300,-260},{-280,-260}}, color={0,127,255}));
        connect(ports_aHeaWat,mulHeaWatInl. port_a)
          annotation (Line(points={{-300,-60},{-280,-60}}, color={0,127,255}));
        connect(mulHeaWatOut.port_b, ports_bHeaWat)
          annotation (Line(points={{280,-60},{300,-60}}, color={0,127,255}));
        connect(mulChiWatOut.port_b, ports_bChiWat)
          annotation (Line(points={{280,-260},{300,-260}}, color={0,127,255}));
        annotation (
          Documentation(
            info="<html>
<p>
Partial model to be used for modeling the thermal loads on an energy
transfer station or a dedicated plant.
Models extending this class are typically used in conjunction with
<a href=\"modelica://Buildings.Experimental.DHC.Loads.BaseClasses.FlowDistribution\">
Buildings.Experimental.DHC.Loads.BaseClasses.FlowDistribution</a>
and models extending
<a href=\"modelica://Buildings.Experimental.DHC.Loads.BaseClasses.PartialTerminalUnit\">
Buildings.Experimental.DHC.Loads.BaseClasses.PartialTerminalUnit</a>
as described in the schematics here under.
The fluid ports represent the connection between the production system and
the building distribution system.
</p>
<h4>Scaling</h4>
<p>
Scaling is implemented by means of a multiplier factor <code>facMul</code>.
Each extensive quantity (mass and heat flow rate, electric power)
<i>flowing out</i> through fluid ports, or connected to an
<i>output connector</i> is multiplied by <code>facMul</code>.
Each extensive quantity (mass and heat flow rate, electric power)
<i>flowing in</i> through fluid ports, or connected to an
<i>input connector</i> is multiplied by <code>1/facMul</code>.
This allows modeling, with a single instance,
multiple identical buildings served by the same energy transfer station.
</p>
<h4>Examples</h4>
<p>
See various use cases in
<a href=\"modelica://Buildings.Experimental.DHC.Loads.BaseClasses.Examples\">
Buildings.Experimental.DHC.Loads.BaseClasses.Examples</a>.
</p>
<p>
<br/>
<img alt=\"image\"
src=\"modelica://Buildings/Resources/Images/Experimental/DHC/Loads/PartialBuilding.png\"/>
</p>
</html>",
      revisions="<html>
<ul>
<li>
December 21, 2020, by Antoine Gautier:<br/>
Added multiplier factor.<br/>
This is for <a href=\"https://github.com/lbl-srg/modelica-buildings/issues/2291\">issue 2291</a>.
</li>
<li>
February 21, 2020, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>"),Icon(
            coordinateSystem(
              extent={{-300,-300},{300,300}},
              preserveAspectRatio=false),
            graphics={
              Rectangle(
                extent={{-300,-300},{300,300}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-300,-172},{300,-188}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,0,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{18,-38},{46,-10}},
                lineColor={255,255,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-150,-328},{150,-368}},
                textColor={0,0,255},
                textString="%name"),
              Rectangle(
                extent={{-300,-68},{300,-52}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={255,0,0},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-180,180},{174,-220}},
                lineColor={150,150,150},
                fillPattern=FillPattern.Sphere,
                fillColor={255,255,255}),
              Rectangle(
                extent={{36,42},{108,114}},
                lineColor={255,255,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-124,42},{-52,114}},
                lineColor={255,255,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-126,-122},{-54,-50}},
                lineColor={255,255,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{40,-122},{112,-50}},
                lineColor={255,255,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Polygon(
                points={{0,264},{-218,164},{220,164},{0,264}},
                lineColor={95,95,95},
                smooth=Smooth.None,
                fillPattern=FillPattern.Solid,
                fillColor={95,95,95})}),
          Diagram(
            coordinateSystem(
              preserveAspectRatio=false,
              extent={{-300,-300},{300,300}})));
      end PartialBuilding;

      partial model PartialBuildingWithPartialETS
        "Partial model of a building with an energy transfer station"
        import TypDisSys=estcp.DHC.Types.DistrictSystemType
          "District system type enumeration";
        replaceable package MediumSer=Buildings.Media.Water
          constrainedby Modelica.Media.Interfaces.PartialMedium
          "Service side medium";
        replaceable package MediumSerHea_a=Buildings.Media.Water
          constrainedby Modelica.Media.Interfaces.PartialMedium
          "Service side medium at heating inlet"
          annotation(Dialog(enable=
            typ == TypDisSys.CombinedGeneration1 or
            typ == TypDisSys.HeatingGeneration1));
        replaceable package MediumBui=Buildings.Media.Water
          constrainedby Modelica.Media.Interfaces.PartialMedium
          "Building side medium";
        parameter Integer nPorts_heaWat=0
          "Number of heating water fluid ports"
          annotation (Evaluate=true, Dialog(group="Configuration"));
        parameter Integer nPorts_chiWat=0
          "Number of chilled water fluid ports"
          annotation (Evaluate=true, Dialog(group="Configuration"));
        parameter Real facMul = 1
          "Multiplier factor"
          annotation (Evaluate=true, Dialog(group="Scaling"));
        parameter Boolean allowFlowReversalSer=false
          "Set to true to allow flow reversal on service side"
          annotation (Dialog(tab="Assumptions"),Evaluate=true);
        parameter Boolean allowFlowReversalBui=false
          "Set to true to allow flow reversal on building side"
          annotation (Dialog(tab="Assumptions"),Evaluate=true);
        // The following parameters are propagated up from building and ETS components.
        final parameter TypDisSys typ=ets.typ
          "Type of district system"
          annotation (Evaluate=true, Dialog(group="Configuration"));
        final parameter Boolean have_heaWat=ets.have_heaWat
          "Set to true if the ETS supplies heating water"
          annotation (Evaluate=true, Dialog(group="Configuration"));
        final parameter Boolean have_hotWat=ets.have_hotWat
          "Set to true if the ETS supplies domestic hot water"
          annotation (Evaluate=true, Dialog(group="Configuration"));
        final parameter Boolean have_chiWat=ets.have_chiWat
          "Set to true if the ETS supplies chilled water"
          annotation (Evaluate=true, Dialog(group="Configuration"));
        final parameter Boolean have_eleHea=bui.have_eleHea or ets.have_eleHea
          "Set to true if the building or ETS has electric heating system"
          annotation (Evaluate=true, Dialog(group="Configuration"));
        final parameter Integer nFue=ets.nFue
          "Number of fuel types (0 means no combustion system)"
          annotation (Evaluate=true, Dialog(group="Configuration"));
        final parameter Boolean have_eleCoo=bui.have_eleCoo or ets.have_eleCoo
          "Set to true if the building or ETS has electric cooling system"
          annotation (Evaluate=true, Dialog(group="Configuration"));
        final parameter Boolean have_fan=bui.have_fan or ets.have_fan
          "Set to true if fan power is computed"
          annotation (Evaluate=true, Dialog(group="Configuration"));
        final parameter Boolean have_pum=bui.have_pum or ets.have_pum
          "Set to true if pump power is computed"
          annotation (Evaluate=true, Dialog(group="Configuration"));
        final parameter Boolean have_weaBus=bui.have_weaBus or ets.have_weaBus
          "Set to true to use a weather bus"
          annotation (Evaluate=true, Dialog(group="Configuration"));
        final parameter Modelica.Units.SI.HeatFlowRate QHeaWat_flow_nominal(min=0)=
          ets.QHeaWat_flow_nominal "Nominal capacity of heating system (>=0)"
          annotation (Dialog(group="Nominal condition", enable=have_heaWat));
        final parameter Modelica.Units.SI.HeatFlowRate QHotWat_flow_nominal(min=0)=
          ets.QHotWat_flow_nominal
          "Nominal capacity of hot water production system (>=0)"
          annotation (Dialog(group="Nominal condition", enable=have_hotWat));
        final parameter Modelica.Units.SI.HeatFlowRate QChiWat_flow_nominal(max=0)=
          ets.QChiWat_flow_nominal "Nominal capacity of cooling system (<=0)"
          annotation (Dialog(group="Nominal condition", enable=have_chiWat));
        // Parameters for connect clauses.
        final parameter Integer idxPHeaETS=max(
          Modelica.Math.BooleanVectors.countTrue(
            {bui.have_eleHea,ets.have_eleHea}),
          1)
          "Index for connecting the ETS output connector"
          annotation (Evaluate=true);
        final parameter Integer idxPCooETS=max(
          Modelica.Math.BooleanVectors.countTrue(
            {bui.have_eleCoo,ets.have_eleCoo}),
          1)
          "Index for connecting the ETS output connector"
          annotation (Evaluate=true);
        final parameter Integer idxPFanETS=max(
          Modelica.Math.BooleanVectors.countTrue(
            {bui.have_fan,ets.have_fan}),
          1)
          "Index for connecting the ETS output connector"
          annotation (Evaluate=true);
        final parameter Integer idxPPumETS=max(
          Modelica.Math.BooleanVectors.countTrue(
            {bui.have_pum,ets.have_pum}),
          1)
          "Index for connecting the ETS output connector"
          annotation (Evaluate=true);
        // IO CONNECTORS
        Modelica.Fluid.Interfaces.FluidPort_a port_aSerAmb(
          redeclare package Medium = MediumSer,
          m_flow(min=if allowFlowReversalSer then -Modelica.Constants.inf else 0),
          h_outflow(start=MediumSer.h_default, nominal=MediumSer.h_default))
       if typ == TypDisSys.CombinedGeneration5
          "Fluid connector for ambient water service supply line"
          annotation (
            Placement(transformation(extent={{-310,-210},{-290,-190}}),
              iconTransformation(extent={{-110,-10},{-90,10}})));
        Modelica.Fluid.Interfaces.FluidPort_b port_bSerAmb(
          redeclare package Medium = MediumSer,
          m_flow(max=if allowFlowReversalSer then +Modelica.Constants.inf else 0),
          h_outflow(start=MediumSer.h_default, nominal=MediumSer.h_default))
       if typ == TypDisSys.CombinedGeneration5
          "Fluid connector for ambient water service return line"
          annotation (
            Placement(transformation(extent={{290,-210},{310,-190}}),
              iconTransformation(extent={{90,-10},{110,10}})));
        Modelica.Fluid.Interfaces.FluidPort_a port_aSerHea(
          redeclare package Medium = MediumSerHea_a,
          m_flow(min=if allowFlowReversalSer then -Modelica.Constants.inf else 0),
          h_outflow(start=MediumSerHea_a.h_default, nominal=MediumSerHea_a.h_default))
       if typ <> TypDisSys.Cooling and
          typ <> TypDisSys.CombinedGeneration5
          "Fluid connector for heating service supply line"
          annotation (Placement(
            transformation(extent={{-310,-250},{-290,-230}}), iconTransformation(
              extent={{-110,-50},{-90,-30}})));
        Modelica.Fluid.Interfaces.FluidPort_b port_bSerHea(
          redeclare package Medium = MediumSer,
          m_flow(max=if allowFlowReversalSer then +Modelica.Constants.inf else 0),
          h_outflow(start=MediumSer.h_default, nominal=MediumSer.h_default))
       if typ <> TypDisSys.Cooling and
          typ <> TypDisSys.CombinedGeneration5
          "Fluid connector for heating service return line"
          annotation (Placement(
              transformation(extent={{290,-250},{310,-230}}), iconTransformation(
                extent={{90,-50},{110,-30}})));
        Modelica.Fluid.Interfaces.FluidPort_a port_aSerCoo(
          redeclare package Medium = MediumSer,
          m_flow(min=if allowFlowReversalSer then -Modelica.Constants.inf else 0),
          h_outflow(start=MediumSer.h_default, nominal=MediumSer.h_default))
       if typ == TypDisSys.CombinedGeneration1 or
          typ == TypDisSys.CombinedGeneration2to4 or
          typ == TypDisSys.Cooling
          "Fluid connector for cooling service supply line"
          annotation (Placement(transformation(extent={{-310,-290},{-290,-270}}),
             iconTransformation(extent={{-110,-90},{-90,-70}})));
        Modelica.Fluid.Interfaces.FluidPort_b port_bSerCoo(
          redeclare package Medium = MediumSer,
          m_flow(max=if allowFlowReversalSer then +Modelica.Constants.inf else 0),
          h_outflow(start=MediumSer.h_default, nominal=MediumSer.h_default))
       if typ == TypDisSys.CombinedGeneration1 or
          typ == TypDisSys.CombinedGeneration2to4 or
          typ == TypDisSys.Cooling
          "Fluid connector for cooling service return line"
          annotation (Placement(
            transformation(extent={{290,-290},{310,-270}}), iconTransformation(
              extent={{90,-90},{110,-70}})));
        Buildings.BoundaryConditions.WeatherData.Bus weaBus if have_weaBus
          "Weather data bus" annotation (Placement(transformation(extent={{-20,
                  260},{20,300}}), iconTransformation(extent={{-10,90},{10,110}})));
        Buildings.Controls.OBC.CDL.Interfaces.RealOutput QHea_flow(
          final unit="W") if bui.have_heaLoa
          "Total heating heat flow rate transferred to the loads (>=0)"
          annotation (Placement(transformation(extent={{300,260},{340,300}}),
            iconTransformation(extent={{-20,-20},{20,20}},rotation=-90,origin={50,-120})));
        Buildings.Controls.OBC.CDL.Interfaces.RealOutput QCoo_flow(
          final unit="W") if bui.have_cooLoa
          "Total cooling heat flow rate transferred to the loads (<=0)"
          annotation (Placement(transformation(extent={{300,220},{340,260}}),
            iconTransformation(extent={{-20,-20},{20,20}},rotation=-90,origin={70,-120})));
        Buildings.Controls.OBC.CDL.Interfaces.RealOutput PHea(
          final unit="W") if have_eleHea
          "Power drawn by heating system"
          annotation (Placement(transformation(extent={{300,182},{340,222}}),
            iconTransformation(extent={{100,70},{140,110}})));
        Buildings.Controls.OBC.CDL.Interfaces.RealOutput PCoo(
          final unit="W") if have_eleCoo
          "Power drawn by cooling system"
          annotation (Placement(transformation(extent={{300,140},{340,180}}),
            iconTransformation(extent={{100,50},{140,90}})));
        Buildings.Controls.OBC.CDL.Interfaces.RealOutput PFan(
          final unit="W") if have_fan
          "Power drawn by fan motors"
          annotation (Placement(transformation(extent={{300,100},{340,140}}),
            iconTransformation(extent={{100,30},{140,70}})));
        Buildings.Controls.OBC.CDL.Interfaces.RealOutput PPum(
          final unit="W") if have_pum
          "Power drawn by pump motors"
          annotation (Placement(transformation(extent={{300,60},{340,100}}),
            iconTransformation(extent={{100,10},{140,50}})));
        Buildings.Controls.OBC.CDL.Interfaces.RealOutput QFue_flow[nFue](
          each final unit="W") if nFue>0
          "Fuel energy input rate"
          annotation (
            Placement(transformation(extent={{300,20},{340,60}}),
              iconTransformation(extent={{-20,-20},{20,20}},
              rotation=90,
              origin={90,120})));
        // COMPONENTS
        replaceable estcp.DHC.Loads.BaseClasses.PartialBuilding bui(
          redeclare final package Medium = MediumBui,
          final nPorts_aHeaWat=nPorts_heaWat,
          final nPorts_bHeaWat=nPorts_heaWat,
          final nPorts_aChiWat=nPorts_chiWat,
          final nPorts_bChiWat=nPorts_chiWat,
          final allowFlowReversal=allowFlowReversalBui) "Building model "
          annotation (Placement(transformation(extent={{-30,8},{30,68}})));
        replaceable estcp.DHC.EnergyTransferStations.BaseClasses.PartialETS ets(
          redeclare final package MediumBui = MediumBui,
          redeclare final package MediumSer = MediumSer,
          redeclare final package MediumSerHea_a = MediumSerHea_a,
          final nPorts_aHeaWat=nPorts_heaWat,
          final nPorts_bHeaWat=nPorts_heaWat,
          final nPorts_aChiWat=nPorts_chiWat,
          final nPorts_bChiWat=nPorts_chiWat,
          final allowFlowReversalSer=allowFlowReversalSer,
          final allowFlowReversalBui=allowFlowReversalBui)
          "Energy transfer station model"
          annotation (Placement(transformation(extent={{-30,-86},{30,-26}})));
        Buildings.Controls.OBC.CDL.Reals.MultiSum totPHea(
          final nin=Modelica.Math.BooleanVectors.countTrue(
            {bui.have_eleHea,ets.have_eleHea}))
          "Total power drawn by heating system"
          annotation (Placement(transformation(extent={{242,192},{262,212}})));
        Buildings.Controls.OBC.CDL.Reals.MultiSum totPCoo(
          final nin=Modelica.Math.BooleanVectors.countTrue(
            {bui.have_eleCoo,ets.have_eleCoo}))
          "Total power drawn by cooling system"
          annotation (Placement(transformation(extent={{240,150},{260,170}})));
        Buildings.Controls.OBC.CDL.Reals.MultiSum totPFan(
          final nin=Modelica.Math.BooleanVectors.countTrue(
            {bui.have_fan,ets.have_fan}))
          "Total power drawn by fan motors"
          annotation (Placement(transformation(extent={{240,110},{260,130}})));
        Buildings.Controls.OBC.CDL.Reals.MultiSum totPPum(
          final nin=Modelica.Math.BooleanVectors.countTrue(
            {bui.have_pum,ets.have_pum})) if have_pum
          "Total power drawn by pump motors"
          annotation (Placement(transformation(extent={{240,70},{260,90}})));
        Buildings.Controls.OBC.CDL.Reals.MultiplyByParameter mulQHea_flow(u(
              final unit="W"), final k=facMul) if bui.have_heaLoa "Scaling"
          annotation (Placement(transformation(extent={{270,270},{290,290}})));
        Buildings.Controls.OBC.CDL.Reals.MultiplyByParameter mulQCoo_flow(u(
              final unit="W"), final k=facMul) if bui.have_cooLoa "Scaling"
          annotation (Placement(transformation(extent={{270,230},{290,250}})));
        Buildings.Controls.OBC.CDL.Reals.MultiplyByParameter mulPHea(u(final
              unit="W"), final k=facMul) if have_eleHea "Scaling"
          annotation (Placement(transformation(extent={{270,192},{290,212}})));
        Buildings.Controls.OBC.CDL.Reals.MultiplyByParameter mulPCoo(u(final
              unit="W"), final k=facMul) if have_eleCoo "Scaling"
          annotation (Placement(transformation(extent={{270,150},{290,170}})));
        Buildings.Controls.OBC.CDL.Reals.MultiplyByParameter mulPFan(u(final
              unit="W"), final k=facMul) if have_fan "Scaling"
          annotation (Placement(transformation(extent={{270,110},{290,130}})));
        Buildings.Controls.OBC.CDL.Reals.MultiplyByParameter mulPPum(u(final
              unit="W"), final k=facMul) if have_pum "Scaling"
          annotation (Placement(transformation(extent={{270,70},{290,90}})));
        Buildings.Fluid.BaseClasses.MassFlowRateMultiplier mulSerAmbInl(
          redeclare final package Medium = MediumSer,
          final k=1/facMul,
          final allowFlowReversal=allowFlowReversalSer)
          if typ == TypDisSys.CombinedGeneration5 "Mass flow rate multiplier"
          annotation (Placement(transformation(extent={{-280,-210},{-260,-190}})));
        Buildings.Fluid.BaseClasses.MassFlowRateMultiplier mulSerAmbOut(
          redeclare final package Medium = MediumSer,
          final k=facMul,
          final allowFlowReversal=allowFlowReversalSer)
          if typ == TypDisSys.CombinedGeneration5 "Mass flow rate multiplier"
          annotation (Placement(transformation(extent={{260,-210},{280,-190}})));
        Buildings.Fluid.BaseClasses.MassFlowRateMultiplier mulSerHeaInl(
          redeclare final package Medium = MediumSerHea_a,
          final k=1/facMul,
          final allowFlowReversal=allowFlowReversalSer)
          if typ <> TypDisSys.Cooling and typ <> TypDisSys.CombinedGeneration5
          "Mass flow rate multiplier" annotation (Placement(transformation(
                extent={{-280,-250},{-260,-230}})));
        Buildings.Fluid.BaseClasses.MassFlowRateMultiplier mulSerHeaOut(
          redeclare final package Medium = MediumSer,
          final k=facMul,
          final allowFlowReversal=allowFlowReversalSer)
          if typ <> TypDisSys.Cooling and typ <> TypDisSys.CombinedGeneration5
          "Mass flow rate multiplier" annotation (Placement(transformation(
                extent={{260,-250},{280,-230}})));
        Buildings.Fluid.BaseClasses.MassFlowRateMultiplier mulSerCooInl(
          redeclare final package Medium = MediumSer,
          final k=1/facMul,
          final allowFlowReversal=allowFlowReversalSer) if typ == TypDisSys.CombinedGeneration1
           or typ == TypDisSys.CombinedGeneration2to4 or typ == TypDisSys.Cooling
          "Mass flow rate multiplier" annotation (Placement(transformation(
                extent={{-280,-290},{-260,-270}})));
        Buildings.Fluid.BaseClasses.MassFlowRateMultiplier mulSerCooOut(
          redeclare final package Medium = MediumSer,
          final k=facMul,
          final allowFlowReversal=allowFlowReversalSer) if typ == TypDisSys.CombinedGeneration1
           or typ == TypDisSys.CombinedGeneration2to4 or typ == TypDisSys.Cooling
          "Mass flow rate multiplier" annotation (Placement(transformation(
                extent={{260,-290},{280,-270}})));
        Buildings.Controls.OBC.CDL.Reals.MultiplyByParameter mulQFue_flow[nFue](
            u(each final unit="W"), each final k=facMul) if nFue > 0 "Scaling"
          annotation (Placement(transformation(extent={{270,30},{290,50}})));
      initial equation
        assert(ets.have_heaWat == bui.have_heaWat,
          "In "+getInstanceName()+": The ETS component is configured with have_heaWat="+
          String(ets.have_heaWat)+" whereas the building is configured with have_heaWat="+
          String(bui.have_heaWat));
        assert(ets.have_chiWat == bui.have_chiWat,
          "In "+getInstanceName()+": The ETS component is configured with have_chiWat="+
          String(ets.have_chiWat)+" whereas the building is configured with have_chiWat="+
          String(bui.have_chiWat));
        if have_heaWat then
          assert(nPorts_heaWat > 0,
          "In "+getInstanceName()+": The ETS component is configured with have_heaWat="+
          String(ets.have_heaWat)+" but the number of fluid ports for chilled water
    (nPorts_heaWat) is zero.");
        end if;
        if have_chiWat then
          assert(nPorts_chiWat > 0,
          "In "+getInstanceName()+": The ETS component is configured with have_chiWat="+
          String(ets.have_chiWat)+" but the number of fluid ports for chilled water
    (nPorts_chiWat) is zero.");
        end if;
      equation
        connect(bui.ports_bHeaWat,ets.ports_aHeaWat)
          annotation (Line(points={{30,32},{54,32},{54,-14},{-60,-14},{-60,-30},{-30,-30}},color={0,127,255}));
        connect(ets.ports_bHeaWat,bui.ports_aHeaWat)
          annotation (Line(points={{30,-30},{60,-30},{60,0},{-60,0},{-60,32},{-30,32}},color={0,127,255}));
        connect(bui.ports_bChiWat,ets.ports_aChiWat)
          annotation (Line(points={{30,20},{40,20},{40,-20},{-40,-20},{-40,-40},{-30,-40}},color={0,127,255}));
        connect(ets.ports_bChiWat,bui.ports_aChiWat)
          annotation (Line(points={{30,-40},{46,-40},{46,-8},{-40,-8},{-40,20},{-30,20}},color={0,127,255}));
        connect(weaBus,bui.weaBus)
          annotation (Line(points={{0,280},{0,59.4},{0.1,59.4}},       color={255,204,51},thickness=0.5),
            Text(string="%first",index=-1,extent={{-3,6},{-3,6}},horizontalAlignment=TextAlignment.Right));
        connect(weaBus,ets.weaBus)
          annotation (Line(points={{0,280},{0,72},{4,72},{4,-26},{0,-26},{0,-25.9}},    color={255,204,51},thickness=0.5),
            Text(string="%first",index=-1,extent={{-3,6},{-3,6}},horizontalAlignment=TextAlignment.Right));
        connect(bui.PHea,totPHea.u[1])
          annotation (Line(points={{32,56},{208,56},{208,202},{240,202}},
                                                                     color={0,0,127}));
        connect(ets.PHea,totPHea.u[idxPHeaETS])
          annotation (Line(points={{34,-48},{210,-48},{210,200},{240,200},{240,202}},
                                                                       color={0,0,127}));
        connect(bui.PCoo,totPCoo.u[1])
          annotation (Line(points={{32,52},{218,52},{218,160},{238,160}},
                                                                    color={0,0,127}));
        connect(ets.PCoo,totPCoo.u[idxPCooETS])
          annotation (Line(points={{34,-52},{220,-52},{220,158},{238,158},{238,160}},
                                                                      color={0,0,127}));
        connect(bui.PFan,totPFan.u[1])
          annotation (Line(points={{32,48},{224,48},{224,120},{238,120}},
                                                                     color={0,0,127}));
        connect(ets.PFan,totPFan.u[idxPFanETS])
          annotation (Line(points={{34,-56},{226,-56},{226,118},{238,118},{238,120}},
                                                                       color={0,0,127}));
        connect(bui.PPum,totPPum.u[1])
          annotation (Line(points={{32,44},{232,44},{232,80},{238,80}},
                                                                    color={0,0,127}));
        connect(ets.PPum,totPPum.u[idxPPumETS])
          annotation (Line(points={{34,-60},{230,-60},{230,82},{238,82},{238,80}},
                                                                      color={0,0,127}));
        connect(bui.QHea_flow, mulQHea_flow.u) annotation (Line(points={{32,64},{200,64},
                {200,280},{268,280}}, color={0,0,127}));
        connect(mulQHea_flow.y, QHea_flow)
          annotation (Line(points={{292,280},{320,280}}, color={0,0,127}));
        connect(bui.QCoo_flow, mulQCoo_flow.u) annotation (Line(points={{32,60},{204,60},
                {204,240},{268,240}}, color={0,0,127}));
        connect(mulQCoo_flow.y, QCoo_flow)
          annotation (Line(points={{292,240},{320,240}}, color={0,0,127}));
        connect(totPHea.y, mulPHea.u)
          annotation (Line(points={{264,202},{268,202}}, color={0,0,127}));
        connect(mulPHea.y, PHea)
          annotation (Line(points={{292,202},{320,202}}, color={0,0,127}));
        connect(totPCoo.y, mulPCoo.u)
          annotation (Line(points={{262,160},{268,160}}, color={0,0,127}));
        connect(mulPCoo.y, PCoo)
          annotation (Line(points={{292,160},{320,160}}, color={0,0,127}));
        connect(totPFan.y, mulPFan.u)
          annotation (Line(points={{262,120},{268,120}}, color={0,0,127}));
        connect(mulPFan.y, PFan)
          annotation (Line(points={{292,120},{300,120},{300,122},{306,122},{306,120},{
                320,120}},                               color={0,0,127}));
        connect(totPPum.y, mulPPum.u)
          annotation (Line(points={{262,80},{268,80}},   color={0,0,127}));
        connect(mulPPum.y, PPum)
          annotation (Line(points={{292,80},{320,80}},   color={0,0,127}));
        connect(port_aSerCoo,mulSerCooInl. port_a)
          annotation (Line(points={{-300,-280},{-280,-280}}, color={0,127,255}));
        connect(mulSerCooInl.port_b, ets.port_aSerCoo) annotation (Line(points={{-260,
                -280},{-160,-280},{-160,-84},{-30,-84}}, color={0,127,255}));
        connect(mulSerCooOut.port_b, port_bSerCoo)
          annotation (Line(points={{280,-280},{300,-280}}, color={0,127,255}));
        connect(ets.port_bSerCoo,mulSerCooOut. port_a) annotation (Line(points={{30,-84},
                {160,-84},{160,-280},{260,-280}}, color={0,127,255}));
        connect(port_aSerHea,mulSerHeaInl. port_a)
          annotation (Line(points={{-300,-240},{-280,-240}}, color={0,127,255}));
        connect(mulSerHeaInl.port_b, ets.port_aSerHea) annotation (Line(points={{-260,
                -240},{-164,-240},{-164,-80},{-30,-80}}, color={0,127,255}));
        connect(port_aSerAmb,mulSerAmbInl. port_a)
          annotation (Line(points={{-300,-200},{-280,-200}}, color={0,127,255}));
        connect(mulSerAmbInl.port_b, ets.port_aSerAmb) annotation (Line(points={{-260,
                -200},{-168,-200},{-168,-76},{-30,-76}}, color={0,127,255}));
        connect(ets.port_bSerHea,mulSerHeaOut. port_a) annotation (Line(points={{30,-80},
                {164,-80},{164,-240},{260,-240}}, color={0,127,255}));
        connect(mulSerHeaOut.port_b, port_bSerHea)
          annotation (Line(points={{280,-240},{300,-240}}, color={0,127,255}));
        connect(ets.port_bSerAmb,mulSerAmbOut. port_a) annotation (Line(points={{30,-76},
                {168,-76},{168,-200},{260,-200}}, color={0,127,255}));
        connect(mulSerAmbOut.port_b, port_bSerAmb)
          annotation (Line(points={{280,-200},{300,-200}}, color={0,127,255}));
        connect(mulQFue_flow.y, QFue_flow)
          annotation (Line(points={{292,40},{320,40}}, color={0,0,127}));
        connect(ets.QFue_flow, mulQFue_flow.u) annotation (Line(points={{34,-64},{260,
                -64},{260,40},{268,40}}, color={0,0,127}));
        annotation (
          Icon(
            coordinateSystem(
              preserveAspectRatio=false,
              extent={{-100,-100},{100,100}}),
            graphics={
              Rectangle(
                extent={{-100,6},{-60,-6}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,255,255},
                fillPattern=FillPattern.Solid,
                visible=typ == TypDisSys.CombinedGeneration5),
              Rectangle(
                extent={{-100,-86},{-22,-74}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,0,255},
                fillPattern=FillPattern.Solid,
                visible=typ == TypDisSys.CombinedGeneration1 or typ == TypDisSys.CombinedGeneration2to4
                     or typ == TypDisSys.Cooling),
              Polygon(
                points={{0,74},{-40,54},{40,54},{0,74}},
                lineColor={95,95,95},
                smooth=Smooth.None,
                fillPattern=FillPattern.Solid,
                fillColor={95,95,95}),
              Rectangle(
                extent={{-40,54},{40,-46}},
                lineColor={150,150,150},
                fillPattern=FillPattern.Sphere,
                fillColor={255,255,255}),
              Rectangle(
                extent={{-30,24},{-10,44}},
                lineColor={255,255,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{10,24},{30,44}},
                lineColor={255,255,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-30,-16},{-10,4}},
                lineColor={255,255,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{10,-16},{30,4}},
                lineColor={255,255,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-100,100},{100,-100}},
                lineColor={0,0,0}),
              Rectangle(
                extent={{60,6},{100,-6}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,255,255},
                fillPattern=FillPattern.Solid,
                visible=typ == TypDisSys.CombinedGeneration5),
              Rectangle(
                extent={{-11,6},{11,-6}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,255,255},
                fillPattern=FillPattern.Solid,
                visible=typ == TypDisSys.CombinedGeneration5,
                origin={66,-17},
                rotation=-90),
              Rectangle(
                extent={{40,-16},{60,-28}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,255,255},
                fillPattern=FillPattern.Solid,
                visible=typ == TypDisSys.CombinedGeneration5),
              Rectangle(
                extent={{-11,6},{11,-6}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,255,255},
                fillPattern=FillPattern.Solid,
                visible=typ == TypDisSys.CombinedGeneration5,
                origin={-66,-17},
                rotation=-90),
              Rectangle(
                extent={{-60,-16},{-40,-28}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,255,255},
                fillPattern=FillPattern.Solid,
                visible=typ == TypDisSys.CombinedGeneration5),
              Rectangle(
                extent={{40,-34},{100,-46}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={255,0,0},
                fillPattern=FillPattern.Solid,
                visible=typ <> TypDisSys.Cooling and typ <> TypDisSys.CombinedGeneration5),
              Rectangle(
                extent={{-100,-34},{-40,-46}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={255,0,0},
                fillPattern=FillPattern.Solid,
                visible=typ <> TypDisSys.Cooling and typ <> TypDisSys.CombinedGeneration5),
              Rectangle(
                extent={{-14,-6},{14,6}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,0,255},
                fillPattern=FillPattern.Solid,
                visible=typ == TypDisSys.CombinedGeneration1 or typ == TypDisSys.CombinedGeneration2to4
                     or typ == TypDisSys.Cooling,
                origin={-28,-60},
                rotation=90),
              Rectangle(
                extent={{-14,-6},{14,6}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,0,255},
                fillPattern=FillPattern.Solid,
                origin={28,-60},
                rotation=90,
                visible=typ == TypDisSys.CombinedGeneration1 or typ == TypDisSys.CombinedGeneration2to4
                     or typ == TypDisSys.Cooling),
              Rectangle(
                extent={{22,-86},{100,-74}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,0,255},
                fillPattern=FillPattern.Solid,
                visible=typ == TypDisSys.CombinedGeneration1 or typ == TypDisSys.CombinedGeneration2to4
                     or typ == TypDisSys.Cooling)}),
          Diagram(
            coordinateSystem(
              preserveAspectRatio=false,
              extent={{-300,-300},{300,300}})),
          Documentation(info="<html>
<p>
Partial model to be used for modeling
</p>
<ul>
<li>
an energy transfer station and the optional in-building primary systems,
based on a model extending
<a href=\"modelica://Buildings.Experimental.DHC.EnergyTransferStations.BaseClasses.PartialETS\">
Buildings.Experimental.DHC.EnergyTransferStations.BaseClasses.PartialETS</a>, and
</li>
<li>
the served building, based on a model extending
<a href=\"modelica://Buildings.Experimental.DHC.Loads.BaseClasses.PartialBuilding\">
Buildings.Experimental.DHC.Loads.BaseClasses.PartialBuilding</a>.
</li>
</ul>
<p>
See the schematics below for a description of the physical boundaries
of the composing systems.
</p>
<p>
The parameters defining the set of outside connectors of this class
are <i>propagated up</i> from the ETS and building components.
The connect clauses between the ETS and the building connectors
are automatically generated based on the previous parameters and the
additional parameters <code>nPorts_heaWat</code> and <code>nPorts_chiWat</code>
that need to be specified.
In case of a heating service line, the model allows for using two
different media at the inlet <code>port_aSerHea</code> and at the oulet
<code>port_bSerHea</code> to represent a steam supply and condensate
return.
</p>
<h4>Scaling</h4>
<p>
Scaling is implemented by means of a multiplier factor <code>facMul</code>.
Each extensive quantity (mass and heat flow rate, electric power)
<i>flowing out</i> through fluid ports, or connected to an
<i>output connector</i> is multiplied by <code>facMul</code>.
Each extensive quantity (mass and heat flow rate, electric power)
<i>flowing in</i> through fluid ports, or connected to an
<i>input connector</i> is multiplied by <code>1/facMul</code>.
This allows modeling, with a single instance,
multiple identical buildings with identical energy transfer stations,
served by the same service line.
</p>
<p>
<br/>
<img alt=\"image\"
src=\"modelica://Buildings/Resources/Images/Experimental/DHC/Loads/PartialBuildingWithPartialETS.png\"/>
</p>
</html>",   revisions="<html>
<ul>
<li>
December 21, 2022, by Kathryn Hinkelman:<br>
Added conditional requirement <code>have_pum</code> to instance 
<code>totPPum</code> for cases where ETS and building both don't have pumping.<br>
This is for <a href=\"https://github.com/lbl-srg/modelica-buildings/issues/2912#issuecomment-1324375700\">#2912</a>.
</li>
<li>
December 14, 2020, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>"));
      end PartialBuildingWithPartialETS;

      partial model PartialTerminalUnit
        "Partial model for HVAC terminal unit"
        replaceable package Medium1=Buildings.Media.Water
          constrainedby Modelica.Media.Interfaces.PartialMedium
          "Medium in the building distribution system";
        replaceable package Medium2=Buildings.Media.Air
          constrainedby Modelica.Media.Interfaces.PartialMedium
          "Load side medium";
        parameter Boolean allowFlowReversal=false
          "Set to true to allow flow reversal in building distribution system"
          annotation (Dialog(tab="Assumptions"),Evaluate=true);
        parameter Boolean allowFlowReversalLoa=true
          "Set to true to allow flow reversal on the load side"
          annotation (Dialog(tab="Assumptions"),Evaluate=true);
        parameter Real facMul(min=Modelica.Constants.eps)=1
          "Multiplier factor"
          annotation (Evaluate=true, Dialog(group="Scaling"));
         parameter Real facMulZon(min=Modelica.Constants.eps)=1
          "Zone multiplier factor"
          annotation (Evaluate=true, Dialog(group="Scaling"));
        parameter Boolean have_heaWat=false
          "Set to true if the system uses heating water"
          annotation (Evaluate=true, Dialog(group="Configuration"));
        parameter Boolean have_chiWat=false
          "Set to true if the system uses chilled water"
          annotation (Evaluate=true, Dialog(group="Configuration"));
        parameter Boolean have_chaOve=false
          "Set to true if the chilled water based heat exchanger operates in change-over"
          annotation (Evaluate=true, Dialog(group="Configuration"));
        parameter Boolean have_eleHea=false
          "Set to true if the system has electric heating system"
          annotation (Evaluate=true, Dialog(group="Configuration"));
        parameter Boolean have_eleCoo=false
          "Set to true if the system has electric cooling system"
          annotation (Evaluate=true, Dialog(group="Configuration"));
        parameter Boolean have_heaPor=false
          "Set to true for heat ports on the load side"
          annotation (Evaluate=true, Dialog(group="Configuration"));
        parameter Boolean have_fluPor=false
          "Set to true for fluid ports on the load side"
          annotation (Evaluate=true, Dialog(group="Configuration"));
        parameter Boolean have_TSen=false
          "Set to true for measured temperature as an input"
          annotation (Evaluate=true, Dialog(group="Configuration"));
        parameter Boolean have_QReq_flow=false
          "Set to true for required heat flow rate as an input"
          annotation (Evaluate=true, Dialog(group="Configuration"));
        parameter Boolean have_weaBus=false
          "Set to true to use a weather bus"
          annotation (Evaluate=true, Dialog(group="Configuration"));
        parameter Boolean have_fan=false
          "Set to true if fan power is computed"
          annotation (Evaluate=true, Dialog(group="Configuration"));
        parameter Boolean have_pum=false
          "Set to true if pump power is computed"
          annotation (Evaluate=true, Dialog(group="Configuration"));
        parameter Modelica.Units.SI.HeatFlowRate QHea_flow_nominal(min=0) = 0
          "Nominal heating capacity (>=0)"
          annotation (Dialog(group="Nominal condition", enable=have_heaWat));
        parameter Modelica.Units.SI.HeatFlowRate QCoo_flow_nominal(max=0) = 0
          "Nominal cooling capacity (<=0)"
          annotation (Dialog(group="Nominal condition", enable=have_chiWat));
        parameter Modelica.Units.SI.MassFlowRate mHeaWat_flow_nominal(min=0) = 0
          "Heating water mass flow rate at nominal conditions"
          annotation (Dialog(group="Nominal condition", enable=have_heaWat));
        parameter Modelica.Units.SI.MassFlowRate mChiWat_flow_nominal(min=0) = 0
          "Chilled water mass flow rate at nominal conditions"
          annotation (Dialog(group="Nominal condition", enable=have_chiWat));
        parameter Modelica.Units.SI.MassFlowRate mLoaHea_flow_nominal(min=0) = 0
          "Load side mass flow rate at nominal conditions in heating mode"
          annotation (Dialog(group="Nominal condition", enable=have_heaWat));
        parameter Modelica.Units.SI.MassFlowRate mLoaCoo_flow_nominal(min=0) = 0
          "Load side mass flow rate at nominal conditions in cooling mode"
          annotation (Dialog(group="Nominal condition", enable=have_chiWat));
        // AHRI 440 Standard Heating
        parameter Modelica.Units.SI.Temperature T_aHeaWat_nominal=273.15 + 60
          "Heating water inlet temperature at nominal conditions" annotation (Dialog(
              group="Nominal condition", enable=have_heaWat and not have_chaOve));
        parameter Modelica.Units.SI.Temperature T_bHeaWat_nominal(
          min=273.15,
          displayUnit="degC") = T_aHeaWat_nominal - 22.2
          "Heating water outlet temperature at nominal conditions" annotation (Dialog(
              group="Nominal condition", enable=have_heaWat and not have_chaOve));
        // AHRI 440 Standard Cooling
        parameter Modelica.Units.SI.Temperature T_aChiWat_nominal=273.15 + 7.2
          "Chilled water inlet temperature at nominal conditions "
          annotation (Dialog(group="Nominal condition", enable=have_chiWat));
        parameter Modelica.Units.SI.Temperature T_bChiWat_nominal(
          min=273.15,
          displayUnit="degC") = T_aChiWat_nominal + 5.6
          "Chilled water outlet temperature at nominal conditions"
          annotation (Dialog(group="Nominal condition", enable=have_chiWat));
        parameter Modelica.Units.SI.Temperature T_aLoaHea_nominal=273.15 + 21.1
          "Load side inlet temperature at nominal conditions in heating mode"
          annotation (Dialog(group="Nominal condition", enable=have_heaWat and not
                have_chaOve));
        parameter Modelica.Units.SI.Temperature T_aLoaCoo_nominal=273.15 + 26.7
          "Load side inlet temperature at nominal conditions in cooling mode"
          annotation (Dialog(group="Nominal condition", enable=have_chiWat));

        parameter Modelica.Units.SI.MassFraction w_aLoaCoo_nominal=0.011
          "Load side inlet humidity ratio at nominal conditions in cooling mode"
          annotation (Dialog(group="Nominal condition", enable=have_chiWat));
        // IO connectors
        Modelica.Blocks.Interfaces.RealInput TSen(
          final quantity="ThermodynamicTemperature",
          final unit="K",
          displayUnit="degC") if have_TSen
          "Temperature (measured)"
          annotation (Placement(transformation(extent={{-20,-20},{20,20}},rotation=0,origin={-220,140}),
          iconTransformation(extent={{-10,-10},{10,10}},rotation=0,origin={-130,20})));
        Modelica.Blocks.Interfaces.RealInput TSetHea(
          quantity="ThermodynamicTemperature",
          final unit="K",
          displayUnit="degC") if have_heaWat or have_chaOve or have_eleHea
          "Heating set point"
          annotation (Placement(transformation(extent={{-20,-20},{20,20}},rotation=0,origin={-220,220}),
          iconTransformation(extent={{-10,-10},{10,10}},rotation=0,origin={-130,60})));
        Modelica.Blocks.Interfaces.RealInput TSetCoo(
          final quantity="ThermodynamicTemperature",
          final unit="K",
          displayUnit="degC") if have_chiWat or have_eleCoo
          "Cooling set point"
          annotation (Placement(transformation(extent={{-20,-20},{20,20}},rotation=0,origin={-220,180}),
          iconTransformation(extent={{-10,-10},{10,10}},rotation=0,origin={-130,40})));
        Modelica.Blocks.Interfaces.RealInput QReqHea_flow(
          final quantity="HeatFlowRate",
          final unit="W") if have_QReq_flow and (have_heaWat or have_chaOve or have_eleHea)
          "Required heat flow rate to meet heating set point (>=0)"
          annotation (Placement(transformation(extent={{-20,-20},{20,20}},rotation=0,origin={-220,100}),
          iconTransformation(extent={{-10,-10},{10,10}},rotation=0,origin={-130,-20})));
        Modelica.Blocks.Interfaces.RealInput QReqCoo_flow(
          final quantity="HeatFlowRate",
          final unit="W") if have_QReq_flow and (have_chiWat or have_eleCoo)
          "Required heat flow rate to meet cooling set point (<=0)"
          annotation (Placement(transformation(extent={{-20,-20},{20,20}},rotation=0,origin={-220,60}),
          iconTransformation(extent={{-10,-10},{10,10}},rotation=0,origin={-130,-42})));
        Modelica.Blocks.Interfaces.RealOutput QActHea_flow(
          final quantity="HeatFlowRate",
          final unit="W") if have_heaWat or have_chaOve or have_eleHea
          "Heating heat flow rate transferred to the load (>=0)"
          annotation (Placement(transformation(extent={{200,200},{240,240}}),
          iconTransformation(extent={{120,70},{140,90}})));
        Modelica.Blocks.Interfaces.RealOutput QActCoo_flow(
          final quantity="HeatFlowRate",
          final unit="W") if have_chiWat or have_eleCoo
          "Cooling heat flow rate transferred to the load (<=0)"
          annotation (Placement(transformation(extent={{200,180},{240,220}}),
          iconTransformation(extent={{120,50},{140,70}})));
        Modelica.Blocks.Interfaces.RealOutput PHea(
          final quantity="Power",
          final unit="W") if have_eleHea
          "Power drawn by heating system"
          annotation (Placement(transformation(extent={{200,160},{240,200}}),
          iconTransformation(extent={{120,30},{140,50}})));
        Modelica.Blocks.Interfaces.RealOutput PCoo(
          final quantity="Power",
          final unit="W") if have_eleCoo
          "Power drawn by cooling system"
          annotation (Placement(transformation(extent={{200,140},{240,180}}),
          iconTransformation(extent={{120,10},{140,30}})));
        Modelica.Blocks.Interfaces.RealOutput PFan(
          final quantity="Power",
          final unit="W") if have_fan
          "Power drawn by fans motors"
          annotation (Placement(transformation(extent={{200,120},{240,160}}),
          iconTransformation(extent={{120,-10},{140,10}})));
        Modelica.Blocks.Interfaces.RealOutput PPum(
          final quantity="Power",
          final unit="W") if have_pum
          "Power drawn by pumps motors"
          annotation (Placement(transformation(extent={{200,100},{240,140}}),
          iconTransformation(extent={{120,-30},{140,-10}})));
        Modelica.Blocks.Interfaces.RealOutput mReqHeaWat_flow(
          final quantity="MassFlowRate",
          final unit="kg/s") if have_heaWat
          "Required heating water flow rate to meet heating set point"
          annotation (Placement(transformation(extent={{200,80},{240,120}}),
          iconTransformation(extent={{120,-50},{140,-30}})));
        Modelica.Blocks.Interfaces.RealOutput mReqChiWat_flow(
          final quantity="MassFlowRate",
          final unit="kg/s") if have_chiWat
          "Required chilled water flow rate to meet cooling set point"
          annotation (Placement(transformation(extent={{200,60},{240,100}}),
          iconTransformation(extent={{120,-70},{140,-50}})));
        Modelica.Fluid.Interfaces.FluidPort_a port_aLoa(
          redeclare final package Medium=Medium2,
          p(start=Medium2.p_default),
          m_flow(
            min=
              if allowFlowReversalLoa then
                -Modelica.Constants.inf
              else
                0),
          h_outflow(
            start=Medium2.h_default,
            nominal=Medium2.h_default)) if have_fluPor
          "Fluid stream inlet port on the load side"
          annotation (Placement(transformation(extent={{190,-10},{210,10}}),
          iconTransformation(extent={{110,90},{130,110}})));
        Modelica.Fluid.Interfaces.FluidPort_b port_bLoa(
          redeclare final package Medium=Medium2,
          p(start=Medium2.p_default),
          m_flow(
            max=
              if allowFlowReversalLoa then
                +Modelica.Constants.inf
              else
                0),
          h_outflow(
            start=Medium2.h_default,
            nominal=Medium2.h_default)) if have_fluPor
          "Fluid stream outlet port on the load side"
          annotation (Placement(transformation(extent={{-190,-10},{-210,10}}),
          iconTransformation(extent={{-110,90},{-130,110}})));
        Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_b heaPorCon if have_heaPor
          "Heat port transferring convective heat to the load"
          annotation (Placement(transformation(extent={{190,30},{210,50}}),
          iconTransformation(extent={{-50,-10},{-30,10}})));
        Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_b heaPorRad if have_heaPor
          "Heat port transferring radiative heat to the load"
          annotation (Placement(transformation(extent={{190,-50},{210,-30}}),
          iconTransformation(extent={{30,-10},{50,10}})));
        Buildings.BoundaryConditions.WeatherData.Bus weaBus if have_weaBus
          "Weather data bus" annotation (Placement(transformation(extent={{-16,
                  224},{18,256}}), iconTransformation(extent={{-18,104},{16,136}})));
        Modelica.Fluid.Interfaces.FluidPort_a port_aHeaWat(
          p(start=Medium1.p_default),
          redeclare final package Medium=Medium1,
          m_flow(
            min=
              if allowFlowReversal then
                -Modelica.Constants.inf
              else
                0),
          h_outflow(
            start=Medium1.h_default,
            nominal=Medium1.h_default)) if have_heaWat
          "Heating water inlet port"
          annotation (Placement(transformation(extent={{-210,-230},{-190,-210}}),
            iconTransformation(extent={{-130,-110},{-110,-90}})));
        Modelica.Fluid.Interfaces.FluidPort_a port_aChiWat(
          p(start=Medium1.p_default),
          redeclare final package Medium=Medium1,
          m_flow(
            min=
              if allowFlowReversal then
                -Modelica.Constants.inf
              else
                0),
          h_outflow(
            start=Medium1.h_default,
            nominal=Medium1.h_default)) if have_chiWat
          "Chilled water inlet port"
          annotation (Placement(transformation(extent={{-210,-190},{-190,-170}}),
            iconTransformation(extent={{-130,-90},{-110,-70}})));
        Modelica.Fluid.Interfaces.FluidPort_b port_bHeaWat(
          p(start=Medium1.p_default),
          redeclare final package Medium=Medium1,
          m_flow(
            max=
              if allowFlowReversal then
                +Modelica.Constants.inf
              else
                0),
          h_outflow(
            start=Medium1.h_default,
            nominal=Medium1.h_default)) if have_heaWat
          "Heating water outlet port"
          annotation (Placement(transformation(extent={{210,-230},{190,-210}}),iconTransformation(extent={{130,-110},{110,-90}})));
        Modelica.Fluid.Interfaces.FluidPort_b port_bChiWat(
          p(start=Medium1.p_default),
          redeclare final package Medium=Medium1,
          m_flow(
            max=
              if allowFlowReversal then
                +Modelica.Constants.inf
              else
                0),
          h_outflow(
            start=Medium1.h_default,
            nominal=Medium1.h_default)) if have_chiWat
          "Chilled water outlet port"
          annotation (Placement(transformation(extent={{210,-190},{190,-170}}),iconTransformation(extent={{130,-90},{110,-70}})));
        // COMPONENTS
        Buildings.Controls.OBC.CDL.Reals.MultiplyByParameter mulQReqHea_flow(u(
              final unit="W"), final k=1/facMul)
          if have_QReq_flow and (have_heaWat or have_chaOve or have_eleHea) "Scaling"
          annotation (Placement(transformation(extent={{-180,90},{-160,110}})));
        Buildings.Controls.OBC.CDL.Reals.MultiplyByParameter mulQReqCoo_flow(u(
              final unit="W"), final k=1/facMul)
          if have_QReq_flow and (have_chiWat or have_eleCoo) "Scaling"
          annotation (Placement(transformation(extent={{-180,50},{-160,70}})));
        Buildings.Controls.OBC.CDL.Reals.MultiplyByParameter mulQActHea_flow(u(
              final unit="W"), final k=facMul*facMulZon)
          if have_heaWat or have_chaOve or have_eleHea "Scaling"
          annotation (Placement(transformation(extent={{160,210},{180,230}})));
        Buildings.Controls.OBC.CDL.Reals.MultiplyByParameter mulQActCoo_flow(u(
              final unit="W"), final k=facMul*facMulZon) if have_chiWat or
          have_eleCoo "Scaling"
          annotation (Placement(transformation(extent={{160,190},{180,210}})));
        Buildings.Controls.OBC.CDL.Reals.MultiplyByParameter mulPHea(u(final
              unit="W"), final k=facMul*facMulZon) if have_eleHea "Scaling"
          annotation (Placement(transformation(extent={{160,170},{180,190}})));
        Buildings.Controls.OBC.CDL.Reals.MultiplyByParameter mulPCoo(u(final
              unit="W"), final k=facMul*facMulZon) if have_eleCoo "Scaling"
          annotation (Placement(transformation(extent={{160,150},{180,170}})));
        Buildings.Controls.OBC.CDL.Reals.MultiplyByParameter mulPFan(u(final
              unit="W"), final k=facMul*facMulZon) if have_fan "Scaling"
          annotation (Placement(transformation(extent={{160,130},{180,150}})));
        Buildings.Controls.OBC.CDL.Reals.MultiplyByParameter mulPPum(u(final
              unit="W"), final k=facMul*facMulZon) if have_pum "Scaling"
          annotation (Placement(transformation(extent={{160,110},{180,130}})));
        Buildings.Controls.OBC.CDL.Reals.MultiplyByParameter mulMasFloReqHeaWat(
            u(final unit="kg/s"), final k=facMul*facMulZon) if have_heaWat "Scaling"
          annotation (Placement(transformation(extent={{160,90},{180,110}})));
        Buildings.Controls.OBC.CDL.Reals.MultiplyByParameter mulMasFloReqChiWat(
            u(final unit="kg/s"), final k=facMul*facMulZon) if have_chiWat "Scaling"
          annotation (Placement(transformation(extent={{160,70},{180,90}})));
        Buildings.Fluid.BaseClasses.MassFlowRateMultiplier mulHeaWatFloInl(
          redeclare final package Medium = Medium1,
          final k=1/facMul/facMulZon,
          final allowFlowReversal=allowFlowReversal) if have_heaWat
          "Mass flow rate multiplier" annotation (Placement(transformation(
                extent={{-180,-230},{-160,-210}})));
        Buildings.Fluid.BaseClasses.MassFlowRateMultiplier mulHeaWatFloOut(
          redeclare final package Medium = Medium1,
          final k=facMul*facMulZon,
          final allowFlowReversal=allowFlowReversal) if have_heaWat
          "Mass flow rate multiplier" annotation (Placement(transformation(
                extent={{160,-230},{180,-210}})));
        Buildings.Fluid.BaseClasses.MassFlowRateMultiplier mulChiWatFloInl(
          redeclare final package Medium = Medium1,
          final k=1/facMul/facMulZon,
          final allowFlowReversal=allowFlowReversal) if have_chiWat
          "Mass flow rate multiplier" annotation (Placement(transformation(
                extent={{-180,-190},{-160,-170}})));
        Buildings.Fluid.BaseClasses.MassFlowRateMultiplier mulChiWatFloOut(
          redeclare final package Medium = Medium1,
          final k=facMul*facMulZon,
          final allowFlowReversal=allowFlowReversal) if have_chiWat
          "Mass flow rate multiplier" annotation (Placement(transformation(
                extent={{160,-190},{180,-170}})));
        Buildings.Fluid.BaseClasses.MassFlowRateMultiplier mulLoaMasFloOut(
          redeclare final package Medium = Medium2,
          final k=facMul,
          final allowFlowReversal=allowFlowReversalLoa) if have_fluPor
          "Load side mass flow rate multiplier"
          annotation (Placement(transformation(extent={{-160,-10},{-180,10}})));
        Buildings.Fluid.BaseClasses.MassFlowRateMultiplier mulLoaMasFloInl(
          redeclare final package Medium = Medium2,
          final k=1/facMul,
          final allowFlowReversal=allowFlowReversalLoa) if have_fluPor
          "Load side mass flow rate multiplier"
          annotation (Placement(transformation(extent={{180,-10},{160,10}})));
        Buildings.Fluid.HeatExchangers.RadiantSlabs.BaseClasses.HeatFlowRateMultiplier
          mulHeaFloCon(final k=facMul) if have_heaPor
          "Convective heat flow rate multiplier"
          annotation (Placement(transformation(extent={{160,30},{180,50}})));
        Buildings.Fluid.HeatExchangers.RadiantSlabs.BaseClasses.HeatFlowRateMultiplier
          mulHeaFloRad(final k=facMul) if have_heaPor
          "Radiative heat flow rate multiplier"
          annotation (Placement(transformation(extent={{160,-50},{180,-30}})));
      protected
        parameter Modelica.Units.SI.SpecificHeatCapacity cpHeaWat_nominal=
            Medium1.specificHeatCapacityCp(Medium1.setState_pTX(Medium1.p_default,
            T_aHeaWat_nominal))
          "Heating water specific heat capacity at nominal conditions";
        parameter Modelica.Units.SI.SpecificHeatCapacity cpChiWat_nominal=
            Medium1.specificHeatCapacityCp(Medium1.setState_pTX(Medium1.p_default,
            T_aChiWat_nominal))
          "Chilled water specific heat capacity at nominal conditions";
        parameter Modelica.Units.SI.SpecificHeatCapacity cpLoaHea_nominal=
            Medium2.specificHeatCapacityCp(Medium2.setState_pTX(Medium2.p_default,
            T_aLoaHea_nominal))
          "Load side fluid specific heat capacity at nominal conditions in heating mode";
        parameter Modelica.Units.SI.SpecificHeatCapacity cpLoaCoo_nominal=
            Medium2.specificHeatCapacityCp(Medium2.setState_pTX(Medium2.p_default,
            T_aLoaCoo_nominal))
          "Load side fluid specific heat capacity at nominal conditions in cooling mode";
      equation
        connect(QReqHea_flow,mulQReqHea_flow.u)
          annotation (Line(points={{-220,100},{-182,100}},color={0,0,127}));
        connect(QReqCoo_flow,mulQReqCoo_flow.u)
          annotation (Line(points={{-220,60},{-182,60}},color={0,0,127}));
        connect(mulQActHea_flow.y,QActHea_flow)
          annotation (Line(points={{182,220},{220,220}},color={0,0,127}));
        connect(mulQActCoo_flow.y,QActCoo_flow)
          annotation (Line(points={{182,200},{192,200},{192,200},{220,200}},color={0,0,127}));
        connect(mulPHea.y,PHea)
          annotation (Line(points={{182,180},{220,180}},color={0,0,127}));
        connect(mulPCoo.y,PCoo)
          annotation (Line(points={{182,160},{220,160}},color={0,0,127}));
        connect(mulPFan.y,PFan)
          annotation (Line(points={{182,140},{220,140}},color={0,0,127}));
        connect(mulPPum.y,PPum)
          annotation (Line(points={{182,120},{220,120}},color={0,0,127}));
        connect(mulMasFloReqHeaWat.y,mReqHeaWat_flow)
          annotation (Line(points={{182,100},{220,100}},color={0,0,127}));
        connect(mulMasFloReqChiWat.y,mReqChiWat_flow)
          annotation (Line(points={{182,80},{220,80}},color={0,0,127}));
        connect(port_aHeaWat,mulHeaWatFloInl.port_a)
          annotation (Line(points={{-200,-220},{-180,-220}},color={0,127,255}));
        connect(mulHeaWatFloOut.port_b,port_bHeaWat)
          annotation (Line(points={{180,-220},{200,-220}},color={0,127,255}));
        connect(port_aChiWat,mulChiWatFloInl.port_a)
          annotation (Line(points={{-200,-180},{-180,-180}},color={0,127,255}));
        connect(mulChiWatFloOut.port_b,port_bChiWat)
          annotation (Line(points={{180,-180},{192,-180},{192,-180},{200,-180}},color={0,127,255}));
        connect(mulLoaMasFloOut.port_b,port_bLoa)
          annotation (Line(points={{-180,0},{-200,0}},color={0,127,255}));
        connect(port_aLoa,mulLoaMasFloInl.port_a)
          annotation (Line(points={{200,0},{180,0}},color={0,127,255}));
        connect(mulHeaFloCon.port_b,heaPorCon)
          annotation (Line(points={{180,40},{200,40}},color={191,0,0}));
        connect(mulHeaFloRad.port_b,heaPorRad)
          annotation (Line(points={{180,-40},{200,-40}},color={191,0,0}));
        annotation (
          defaultComponentName="ter",
          Documentation(
            info="<html>
<p>
Partial model to be used for modeling an HVAC terminal unit.
</p>
<p>
The models inheriting from this class are typically used in conjunction with
<a href=\"modelica://Buildings.Experimental.DHC.Loads.BaseClasses.FlowDistribution\">
Buildings.Experimental.DHC.Loads.BaseClasses.FlowDistribution</a>. They must
compute a so-called required mass flow rate defined as the heating or chilled
water mass flow rate needed to meet the load.
It can be approximated using a control loop to avoid inverting a heat
exchanger model as illustrated in
<a href=\"modelica://Buildings.Experimental.DHC.Loads.BaseClasses.Examples\">
Buildings.Experimental.DHC.Loads.BaseClasses.Examples</a>.
</p>
<p>
The model connectivity can be modified to address various use cases:
</p>
<ul>
<li>
On the source side (typically connected to
<a href=\"modelica://Buildings.Experimental.DHC.Loads.BaseClasses.FlowDistribution\">
Buildings.Experimental.DHC.Loads.BaseClasses.FlowDistribution</a>):
<ul>
<li>
Fluid ports for chilled water and heating water can be conditionally
instantiated by respectively setting <code>have_chiWat</code> and
<code>have_heaWat</code> to true.
</li>
</ul>
</li>
<li>
On the load side (typically connected to a room model):
<ul>
<li>
Fluid ports can be conditionally instantiated by setting
<code>have_fluPor</code> to true.
</li>
<li>
Alternatively heat ports (for convective and radiative heat transfer)
can be conditionally instantiated by setting <code>have_heaPor</code> to true.
</li>
<li>
Real input connectors can be conditionally instantiated by setting
<code>have_QReq_flow</code> to true. Those connectors can be used to provide
heating and cooling loads as time series, see
<a href=\"modelica://Buildings.Experimental.DHC.Loads.BaseClasses.Examples.CouplingTimeSeries\">
Buildings.Experimental.DHC.Loads.BaseClasses.Examples.CouplingTimeSeries</a>
for an illustration of that use case.
The impact on the room air temperature of an unmet load can be assessed with
<a href=\"modelica://Buildings.Experimental.DHC.Loads.BaseClasses.SimpleRoomODE\">
Buildings.Experimental.DHC.Loads.BaseClasses.SimpleRoomODE</a>.
</li>
</ul>
</li>
</ul>
<p>
The heating or cooling nominal capacity is provided for the water based heat
exchangers only. Electric heating or cooling systems are supposed to have
an infinite capacity.
</p>
<h4>Connection with the flow distribution model</h4>
<p>
When connecting the model to
<a href=\"modelica://Buildings.Experimental.DHC.Loads.BaseClasses.FlowDistribution\">
Buildings.Experimental.DHC.Loads.BaseClasses.FlowDistribution</a>:
</p>
<ul>
<li>
The nominal pressure drop on the source side (heating or chilled water) is
irrelevant as the computation of the pump head relies on a specific algorithm
described in
<a href=\"modelica://Buildings.Experimental.DHC.Loads.BaseClasses.FlowDistribution\">
Buildings.Experimental.DHC.Loads.BaseClasses.FlowDistribution</a>.
</li>
<li>
The parameter <code>allowFlowReversal</code> must be set to <code>false</code> (default)
in consistency with
<a href=\"modelica://Buildings.Experimental.DHC.Loads.BaseClasses.FlowDistribution\">
Buildings.Experimental.DHC.Loads.BaseClasses.FlowDistribution</a>.
This requirement only applies to the source side.
On the load side one is free to use whatever option suitable for the modeling needs.
Note that typically for an air flow network connected to the outdoor air
(either at the room level for modeling infiltration or at the system level
for the fresh air source), the unidirectional air flow condition cannot be guaranteed.
The reason is the varying pressure of the outdoor air that can lead to a negative
pressure difference at the terminal unit boundaries when the fan is off.
</li>
</ul>
<h4>Scaling</h4>
<p>
Scaling is implemented by means of two multiplier factors.
</p>
<ul>
<li>
The parameter <code>facMul</code> serves as a terminal unit multiplier.
Each extensive quantity (mass and heat flow rate, electric power)
<i>flowing out</i> through fluid or heat ports, or connected to an
<i>output connector</i> is multiplied by <code>facMul</code>.
Each extensive quantity (mass and heat flow rate, electric power)
<i>flowing in</i> through fluid or heat ports, or connected to an
<i>input connector</i> is multiplied by <code>1/facMul</code>.
This parameter allows modeling, with a single instance,
multiple identical units served by the same distribution system,
and serving <i>an aggregated load</i> (e.g., a thermal zone representing several rooms).
</li>
<li>
The parameter <code>facMulZon</code> serves as a thermal zone multiplier.
Except for the variables connected to the load side, which are not affected by
<code>facMulZon</code>, the logic is otherwise identical to the one described
for <code>facMul</code>.
This parameter allows modeling, with a single instance (of both the terminal
unit model and the load model),
multiple identical units served by the same distribution system,
and serving <i>multiple identical loads</i> (e.g., a thermal zone representing a single room).
</li>
</ul>
<p>
Note that the two multiplier factors serve different modeling purposes.
As such they typically should not be used simultaneously.
Both multiplier factors are of type real (as opposed to integer) to allow
for instance modeling a set of terminal units based on manufacturer data,
while still being able to size the full set based on a peak load.
See
<a href=\"modelica://Buildings.Experimental.DHC.Loads.BaseClasses.Validation.TerminalUnitScaling\">
Buildings.Experimental.DHC.Loads.BaseClasses.Validation.TerminalUnitScaling</a>
for an illustration of the use case when heating and cooling loads are
provided as time series.
</p>
<h4>Change-over mode</h4>
<p>
When modeling a change-over system:
</p>
<ul>
<li>
The parameters <code>have_chiWat</code> and <code>have_chaOve</code> must both be set to
<code>true</code> and <code>have_heaWat</code> must be set to <code>false</code>.
</li>
<li>
The heat exchanger is sized by providing the nominal parameters for the cooling
configuration (suffix <code>ChiWat</code>). The nominal mass flow rate on the
source and the load side must also be provided for the heating configuration
(suffix <code>HeaWat</code>) as it can differ from the cooling configuration.
</li>
<li>
The computed heat flow rate must be split into its positive part that gets
connected to <code>QActHea_flow</code> and its negative part that gets connected
to <code>QActCoo_flow</code>.
</li>
<li>
The computed required mass flow rate must be connected to
<code>mReqChiWat_flow</code>.
</li>
</ul>
<h4>Base class parameters</h4>
<p>
All the parameters of this base class that pertain to the nominal conditions
shall not be exposed in the derived class, as this would lead to an
overdetermined model.
For instance, the nominal mass flow rate may not be exposed but rather
computed from the nominal heat flow rate, entering and leaving fluid temperature.
However, those parameters are included in the base class because other components
are likely to reference them. For instance the distribution system model
may use the nominal mass flow rate of each terminal unit to compute
the nominal mass flow rate of the circulation pump.
</p>
</html>",   revisions="<html>
<ul>
<li>
December 21, 2020, by Antoine Gautier:<br/>
Refactored scaling mechanism and renamed parameters.<br/>
This is for <a href=\"https://github.com/lbl-srg/modelica-buildings/issues/2291\">issue 2291</a>.
</li>
<li>
February 21, 2020, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>"),Icon(
            coordinateSystem(
              preserveAspectRatio=false,
              extent={{-120,-120},{120,120}}),
            graphics={
              Rectangle(
                extent={{-120,120},{120,-120}},
                lineColor={95,95,95},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-150,-130},{150,-170}},
                textColor={0,0,255},
                textString="%name"),
              Ellipse(
                extent={{-100,100},{100,-100}},
                lineColor={28,108,200},
                fillColor={95,95,95},
                fillPattern=FillPattern.Solid,
                pattern=LinePattern.None),
              Line(
                points={{-120,-1.46958e-14},{-80,-9.79717e-15},{-40,60},{40,-60},{80,9.79717e-15},{120,1.46958e-14}},
                color={255,255,255},
                thickness=1,
                origin={0,0},
                rotation=180),
              Line(
                points={{-118,-118},{120,120}},
                color={255,255,255},
                thickness=1),
              Polygon(
                points={{46,62},{70,70},{62,46},{46,62}},
                lineColor={255,255,255},
                lineThickness=1,
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid)}),
          Diagram(
            coordinateSystem(
              extent={{-200,-240},{200,240}})));
      end PartialTerminalUnit;

      model SimpleRoomODE
        "Simplified model for assessing room air temperature variations around a set point"
        extends Modelica.Blocks.Icons.Block;
        parameter Modelica.Units.SI.TemperatureDifference dTEnv_nominal
          "Design temperature difference at which envelope heat loss is QEnv_flow_nominal"
          annotation (Dialog(group="Nominal condition"));
        parameter Modelica.Units.SI.Temperature TAir_start(displayUnit="degC")
          "Initial air temperature"
          annotation (Dialog(group="Nominal condition"));
        parameter Modelica.Units.SI.HeatFlowRate QEnv_flow_nominal(min=0)
          "Envelope heat loss at temperature difference of dTEnv_nominal (with no internal gains, no solar radiation)"
          annotation (Dialog(group="Nominal condition"));
        parameter Boolean steadyStateInitial=false
          "true initializes T with dT(0)/dt=0, false initializes T with T(0)=TIndHea_nominal"
          annotation (Dialog(group="Initialization"),Evaluate=true);
        parameter Modelica.Units.SI.Time tau=1800
          "Time constant of the indoor temperature";
        Modelica.Blocks.Interfaces.RealInput TSet(
          final quantity="ThermodynamicTemperature",
          final unit="K",
          displayUnit="degC")
          "Temperature set point for heating or cooling"
          annotation (Placement(transformation(extent={{-140,60},{-100,100}}),iconTransformation(extent={{-140,60},{-100,100}})));
        Modelica.Blocks.Interfaces.RealInput QReq_flow(
          final quantity="HeatFlowRate",
          final unit="W")
          "Required heat flow rate to meet temperature set point (>=0 for heating)"
          annotation (Placement(transformation(extent={{-140,-20},{-100,20}}),iconTransformation(extent={{-140,-20},{-100,20}})));
        Modelica.Blocks.Interfaces.RealInput QAct_flow(
          final quantity="HeatFlowRate",
          final unit="W")
          "Actual heating or cooling heat flow rate (>=0 for heating)"
          annotation (Placement(transformation(extent={{-140,-100},{-100,-60}}),iconTransformation(extent={{-140,-100},{-100,-60}})));
        Modelica.Blocks.Interfaces.RealOutput TAir(
          final quantity="ThermodynamicTemperature",
          final unit="K",
          displayUnit="degC")
          "Room air temperature"
          annotation (Placement(transformation(extent={{100,-20},{140,20}})));
      protected
        parameter Modelica.Units.SI.ThermalConductance G=abs(QEnv_flow_nominal/dTEnv_nominal)
          "Lumped thermal conductance representing all temperature dependent heat transfer mechanisms";
      initial equation
        if steadyStateInitial then
          der(
            TAir)=0;
        else
          TAir=TAir_start;
        end if;
      equation
        der(
          TAir)*tau=(QAct_flow-QReq_flow)/G+TSet-TAir;
        assert(
          TAir >= 273.15,
          "In "+getInstanceName()+": The computed indoor temperature is below 0°C.");
        annotation (
          defaultComponentName="roo",
          Documentation(
            info="<html>
<p>
This is a first order ODE model assessing the indoor air temperature variations
around a set point, based on the difference between the required and actual
heating or cooling heat flow rate and a minimum set of parameters at nominal conditions.
</p>
<p>
The lumped thermal conductance <i>G</i> representing all heat transfer mechanisms
that depend on the temperature difference with the outside (transmission,
infiltration and ventilation) is assessed from the steady-state energy balance
at heating nominal conditions as
</p>
<p style=\"font-style:italic;\">
0 = Q&#775;<sub>heating, nom</sub> + G (T<sub>out, heating, nom</sub> - T<sub>ind, heating, nom</sub>).
</p>
<p>
Note that for model representativeness, it is important
for Q&#775;<sub>heating, nom</sub> to be evaluated in close to steady-state conditions
with no internal heat gains and no solar heat gains.
</p>
<p>
The lumped thermal conductance <i>G</i> is then considered constant for all operating conditions.
</p>
<p>
The required heating or cooling heat flow rate (i.e. the space load) 
<i>Q&#775;<sub>heat_cool, req</sub></i> corresponds to
a steady-state control error equal to zero,
</p>
<p style=\"font-style:italic;\">
0 = Q&#775;<sub>heat_cool, req</sub> +
G (T<sub>out</sub> - T<sub>ind, set</sub>) +
Q&#775;<sub>various</sub>,
</p>
<p>
where <i>Q&#775;<sub>various</sub></i> represents the miscellaneous heat gains.
The indoor temperature variation rate due to an unmet load is given by
</p>
<p style=\"font-style:italic;\">
C &part;T<sub>ind</sub> / &part;t = Q&#775;<sub>heat_cool, act</sub> +
G (T<sub>out</sub> - T<sub>ind</sub>) + Q&#775;<sub>various</sub>,
</p>
<p>
where
<i>Q&#775;<sub>heat_cool, act</sub></i> is the actual heating or cooling heat flow rate and
<i>C</i> is the thermal capacitance of the indoor volume.
The two previous equations yield
</p>
<p style=\"font-style:italic;\">
&tau; &part;T<sub>ind</sub> / &part;t = (Q&#775;<sub>heat_cool, act</sub> - Q&#775;<sub>heat_cool, req</sub>) / G
- T<sub>ind</sub> + T<sub>ind, set</sub>,
</p>
<p>
where <i>&tau; = C / G</i> is the time constant of the indoor temperature.
</p>
</html>",   revisions="<html>
<ul>
<li>
January 26, 2023, by Michael Wetter:<br/>
Updated parameters for clarity if used for cooling.
</li>

<li>
February 21, 2020, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>"),Icon(
            coordinateSystem(
              preserveAspectRatio=false),
            graphics={
              Text(
                extent={{-88,16},{-8,-14}},
                textColor={0,0,127},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                horizontalAlignment=TextAlignment.Left,
                textString="QReq_flow"),
              Text(
                extent={{-88,94},{-52,68}},
                textColor={0,0,127},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                horizontalAlignment=TextAlignment.Left,
                textString="TSet"),
              Text(
                extent={{-88,-64},{-8,-94}},
                textColor={0,0,127},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                horizontalAlignment=TextAlignment.Left,
                textString="QAct_flow"),
              Text(
                extent={{50,10},{90,-8}},
                textColor={0,0,127},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                horizontalAlignment=TextAlignment.Right,
                textString="TAir")}),
          Diagram(
            coordinateSystem(
              preserveAspectRatio=false)));
      end SimpleRoomODE;

      pure function getPeakLoad
        "Function that reads the peak load from the load profile"
        extends Modelica.Icons.Function;

        input String string
          "String that is written before the '=' sign";
        input String filNam
          "Name of data file with heating and cooling load"
          annotation (Dialog(loadSelector(filter="Load file (*.mos)",caption="Select load file")));
        output Real number
          "Number that is read from the file";
      protected
        String lin
          "Line that is used in parser";
        Integer iLin
          "Line number";
        Integer index=0
          "Index of string 'string'";
        Integer staInd
          "Start index used when parsing a real number";
        Integer nexInd
          "Next index used when parsing a real number";
        Boolean found
          "Flag, true if 'string' has been found";
        Boolean EOF
          "Flag, true if EOF has been reached";
        String del
          "Found delimiter";

        pure function pureReadLine "Read a line of text from a file and return it in a string"
          extends Modelica.Icons.Function;
          input String fileName "Name of the file that shall be read";
          input Integer lineNumber(min=1) "Number of line to read";
          output String string "Line of text";
          output Boolean endOfFile
            "If true, end-of-file was reached when trying to read line";
          external"C" string = ModelicaInternal_readLine(
              fileName,
              lineNumber,
              endOfFile) annotation (
            IncludeDirectory="modelica://Modelica/Resources/C-Sources",
            Include="#include \"ModelicaInternal.h\"",
            Library="ModelicaExternalC");
        annotation (Documentation(info="<html>
<p>
This function implements
<a href=\"modelica://Modelica.Utilities.Streams.readLine\">Modelica.Utilities.Streams.readLine</a>
but declares it as a <code>pure</code> function, which is fine assuming a user is
not deliberately changing the file after the model is translated.
</p>
<h4>Syntax</h4>
<pre>
(string, endOfFile) = Streams.<strong>readLine</strong>(fileName, lineNumber)
</pre>
<h4>Description</h4>
<p>
Function <strong>readLine</strong>(..) opens the given file, reads enough of the
content to get the requested line, and returns the line as a string.
Lines are separated by LF or CR-LF; the returned string does not
contain the line separator. The file might remain open after
the call.
</p>
<p>
If lineNumber > countLines(fileName), an empty string is returned
and endOfFile=true. Otherwise endOfFile=false.
</p>
</html>"));

        end pureReadLine;
      algorithm
        // Get line that contains 'string'
        iLin := 0;
        EOF := false;
        while
             (not EOF) and
                          (index == 0) loop
          iLin := iLin+1;
          (lin,EOF) := pureReadLine(
            fileName=filNam,
            lineNumber=iLin);
          index := Modelica.Utilities.Strings.find(
            string=lin,
            searchString=string,
            startIndex=1,
            caseSensitive=true);
        end while;
        assert(
          not EOF,
          "Error: Did not find '"+string+"' when scanning '"+filNam+"'."+"\n   Check for correct file syntax.");
        // Search for the equality sign
        (del,nexInd) := Modelica.Utilities.Strings.scanDelimiter(
          string=lin,
          startIndex=Modelica.Utilities.Strings.length(string)+1,
          requiredDelimiters={"="},
          message="Failed to find '=' when reading peak load in '"+filNam+"'.");
        // Read the value behind it.
        number := Modelica.Utilities.Strings.scanReal(
          string=lin,
          startIndex=nexInd,
          message="Failed to read double value when reading peak load in '"+filNam+"'.");
        annotation (
          Documentation(
            info="<html>
<p>
Function that reads a double value from a text file.
</p>
<p>
This function scans a file that has a format such as
</p>
<pre>
#1
#Some other text
#Peak space cooling load = -383165.6989 Watts
#Peak space heating load = 893931.4335 Watts
double tab1(8760,4)
0,0,5972.314925,16
3600,0,4925.839944,1750.915684
...
</pre>
<p>
The parameter <code>string</code> is a string that the function
searches for, starting at the first line.
If it finds the string, it expects an equality sign, and
returns the double value after this equality sign.
If the function encounters the end of the file, it
terminates the simulation with an assertion.
</p>
<p>
See
<a href=\"modelica://Buildings.Experimental.DHC.Loads.BaseClasses.Validation.GetPeakLoad\">
Buildings.Experimental.DHC.Loads.BaseClasses.Validation.GetPeakLoad</a>
for how to invoke this function.
</p>
</html>",   revisions="<html>
<ul>
<li>
January 24, 2022, by Michael Wetter:<br/>
Reformulated function as a <code>pure</code> function.<br/>
This is for
<a href=\"https://github.com/lbl-srg/modelica-buildings/issues/2816\">issue 2816</a>.
</li>
<li>
December 11, 2021, by Michael Wetter:<br/>
Declared function as <code>impure</code> for MSL 4.0.0.
</li>
<li>
December 1, 2015, by Michael Wetter:<br/>
First implementation.
</li>
</ul>
</html>"));
      end getPeakLoad;

      package Controls "Package of control sequences for DHC systems"
        extends Modelica.Icons.VariantsPackage;

        block MixingValveControl
          "Mixing valve controller"
          extends Modelica.Blocks.Icons.Block;
          import Type_dis=estcp.DHC.Loads.BaseClasses.Types.DistributionType
            "Types of distribution system";
          parameter Type_dis typDis=Type_dis.HeatingWater
            "Type of distribution system"
            annotation (Evaluate=true);
          parameter Real k(
            final min=0,
            final unit="1")=0.1
            "Gain of controller";
          parameter Modelica.Units.SI.Time Ti(final min=Modelica.Constants.small) = 10
            "Time constant of integrator block";
          // IO CONNECTORS
          Modelica.Blocks.Interfaces.RealInput TSupSet(
            final unit="K",
            displayUnit="degC")
            "Supply temperature set point"
            annotation (Placement(transformation(extent={{-20,-20},{20,20}},rotation=0,origin={-120,-40}),iconTransformation(extent={{-10,-10},{10,10}},rotation=0,origin={-110,40})));
          Modelica.Blocks.Interfaces.IntegerInput modChaOve if typDis == Type_dis.ChangeOver
            "Operating mode in change-over (1 for heating, 2 for cooling)"
            annotation (Placement(transformation(extent={{-20,-20},{20,20}},rotation=0,origin={-120,80}),iconTransformation(extent={{-10,-10},{10,10}},rotation=0,origin={-110,80})));
          Modelica.Blocks.Interfaces.RealInput TSupMes(
            final unit="K",
            displayUnit="degC")
            "Supply temperature (measured)"
            annotation (Placement(transformation(extent={{-20,-20},{20,20}},rotation=0,origin={-120,-80}),iconTransformation(extent={{-10,-10},{10,10}},rotation=0,origin={-110,-40})));
          Modelica.Blocks.Interfaces.RealOutput yVal(
            final unit="1")
            "Valve control signal"
            annotation (Placement(transformation(extent={{-20,-20},{20,20}},rotation=0,origin={120,0}),iconTransformation(extent={{-10,-10},{10,10}},rotation=0,origin={110,0})));
          // COMPONENTS
          Buildings.Controls.OBC.CDL.Reals.Sources.Constant zer(
            k=0)
            "Zero constant"
            annotation (Placement(transformation(extent={{-70,10},{-50,30}})));
          Modelica.Blocks.Math.IntegerToBoolean toBoo(
            threshold=2) if typDis == Type_dis.ChangeOver
            "Conversion to boolean (true if cooling mode)"
            annotation (Placement(transformation(extent={{-10,30},{10,50}})));
          Buildings.Controls.OBC.CDL.Reals.PIDWithReset resConTSup(
            controllerType=Buildings.Controls.OBC.CDL.Types.SimpleController.PI,
            final k=k,
            final Ti=Ti,
            final yMax=1,
            final yMin=-1,
            final reverseActing=true,
            final y_reset=0) if typDis == Type_dis.ChangeOver
            "PI controller tracking supply temperature"
            annotation (Placement(transformation(extent={{-70,-70},{-50,-50}})));
          Buildings.Controls.OBC.CDL.Reals.PID conTSup(
            controllerType=Buildings.Controls.OBC.CDL.Types.SimpleController.PI,
            final k=k,
            final Ti=Ti,
            final yMax=1,
            final yMin=-1,
            final reverseActing=true) if typDis <> Type_dis.ChangeOver
            "PI controller tracking supply temperature"
            annotation (Placement(transformation(extent={{-70,-30},{-50,-10}})));
          Buildings.Controls.OBC.CDL.Reals.Min negPar
            "Negative part of control signal"
            annotation (Placement(transformation(extent={{-10,-50},{10,-30}})));
          Buildings.Controls.OBC.CDL.Reals.Max posPar
            "Positive part of control signal"
            annotation (Placement(transformation(extent={{-10,-90},{10,-70}})));
          Buildings.Controls.OBC.CDL.Reals.MultiplyByParameter opp(k=-1)
            "Opposite value"
            annotation (Placement(transformation(extent={{20,-50},{40,-30}})));
          Buildings.Controls.OBC.CDL.Reals.Switch swi
            "Logical switch"
            annotation (Placement(transformation(extent={{70,-10},{90,10}})));
          Modelica.Blocks.Sources.BooleanExpression fixMod(
            final y=typDis == Type_dis.ChilledWater) if typDis <> Type_dis.ChangeOver
            "Fixed operating mode"
            annotation (Placement(transformation(extent={{-10,-10},{10,10}})));
          Buildings.Controls.OBC.CDL.Integers.Change cha if typDis == Type_dis.ChangeOver
            "Evaluate the integer input u to check if its value changes"
            annotation (Placement(transformation(extent={{-80,70},{-60,90}})));
        equation
          connect(modChaOve,toBoo.u)
            annotation (Line(points={{-120,80},{-90,80},{-90,40},{-12,40}},color={255,127,0}));
          connect(toBoo.y,swi.u2)
            annotation (Line(points={{11,40},{30,40},{30,0},{68,0}},color={255,0,255}));
          connect(fixMod.y,swi.u2)
            annotation (Line(points={{11,0},{68,0}},color={255,0,255}));
          connect(resConTSup.y,posPar.u2)
            annotation (Line(points={{-48,-60},{-20,-60},{-20,-86},{-12,-86}},color={0,0,127}));
          connect(zer.y,posPar.u1)
            annotation (Line(points={{-48,20},{-40,20},{-40,-74},{-12,-74}},color={0,0,127}));
          connect(zer.y,negPar.u1)
            annotation (Line(points={{-48,20},{-40,20},{-40,-34},{-12,-34}},color={0,0,127}));
          connect(resConTSup.y,negPar.u2)
            annotation (Line(points={{-48,-60},{-20,-60},{-20,-46},{-12,-46}},color={0,0,127}));
          connect(negPar.y,opp.u)
            annotation (Line(points={{12,-40},{18,-40}},color={0,0,127}));
          connect(resConTSup.u_s,TSupSet)
            annotation (Line(points={{-72,-60},{-90,-60},{-90,-40},{-120,-40}},color={0,0,127}));
          connect(TSupMes,resConTSup.u_m)
            annotation (Line(points={{-120,-80},{-60,-80},{-60,-72}},color={0,0,127}));
          connect(swi.y,yVal)
            annotation (Line(points={{92,0},{120,0}},color={0,0,127}));
          connect(modChaOve,cha.u)
            annotation (Line(points={{-120,80},{-82,80}},color={255,127,0}));
          connect(cha.y,resConTSup.trigger)
            annotation (Line(points={{-58,80},{-40,80},{-40,60},{-80,60},{-80,-76},{-66,-76},{-66,-72}},color={255,0,255}));
          connect(opp.y,swi.u1)
            annotation (Line(points={{42,-40},{50,-40},{50,8},{68,8}},color={0,0,127}));
          connect(posPar.y,swi.u3)
            annotation (Line(points={{12,-80},{60,-80},{60,-8},{68,-8}},color={0,0,127}));
          connect(TSupSet,conTSup.u_s)
            annotation (Line(points={{-120,-40},{-90,-40},{-90,-20},{-72,-20}},color={0,0,127}));
          connect(TSupMes,conTSup.u_m)
            annotation (Line(points={{-120,-80},{-84,-80},{-84,-40},{-60,-40},{-60,-32}},color={0,0,127}));
          connect(conTSup.y,negPar.u2)
            annotation (Line(points={{-48,-20},{-20,-20},{-20,-46},{-12,-46}},color={0,0,127}));
          connect(conTSup.y,posPar.u2)
            annotation (Line(points={{-48,-20},{-20,-20},{-20,-86},{-12,-86}},color={0,0,127}));
          annotation (
            defaultComponentName="conVal",
            Documentation(
              info="
<html>
<p>
This model implements a generic controller for a three-way mixing valve.
Three operating modes are supported:
</p>
<ul>
<li>
Heating: the controller tracks a minimum supply temperature.
</li>
<li>
Cooling: the controller tracks a maximum supply temperature.
</li>
<li>
Change-over: the controller tracks either a minimum or a maximum
supplied temperature depending on the actual value of the integer input
<code>modChaOve</code> (1 for heating, 2 for cooling).
The model instantiates only one PI block to limit the number of state
variables in large models. Therefore the PI gain
is independent from the change-over mode: the reverse action is modeled
by taking the opposite value of the PI block output. Eventually the
integral part is reset whenever the change-over mode is switched.
</li>
</ul>
<p>
See
<a href=\"modelica://Buildings.Experimental.DHC.Loads.BaseClasses.Controls.Validation.MixingValveControl\">
Buildings.Experimental.DHC.Loads.BaseClasses.Controls.Validation.MixingValveControl</a>
for a simulation with change-over.
</p>
</html>",     revisions="<html>
<ul>
<li>
February 21, 2020, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>"),  Icon(
              coordinateSystem(
                preserveAspectRatio=false),
              graphics={
                Text(
                  extent={{-90,96},{-10,66}},
                  textColor={244,125,35},
                  fillColor={0,0,0},
                  fillPattern=FillPattern.Solid,
                  horizontalAlignment=TextAlignment.Left,
                  visible=typDis == Type_dis.ChangeOver,
                  textString="modChaOve"),
                Text(
                  extent={{-90,54},{-22,26}},
                  textColor={0,0,127},
                  fillColor={0,0,0},
                  fillPattern=FillPattern.Solid,
                  horizontalAlignment=TextAlignment.Left,
                  textString="TSupSet"),
                Text(
                  extent={{-90,-26},{-16,-52}},
                  textColor={0,0,127},
                  fillColor={0,0,0},
                  fillPattern=FillPattern.Solid,
                  horizontalAlignment=TextAlignment.Left,
                  textString="TSupMes"),
                Text(
                  extent={{50,12},{88,-14}},
                  textColor={0,0,127},
                  fillColor={0,0,0},
                  fillPattern=FillPattern.Solid,
                  horizontalAlignment=TextAlignment.Right,
                  textString="yVal")}),
            Diagram(
              coordinateSystem(
                preserveAspectRatio=false)));
        end MixingValveControl;

        package Validation "Collection of validation models"
          extends Modelica.Icons.ExamplesPackage;

          model MixingValveControl
            "Validation of mixing valve control in change-over mode"
            extends Modelica.Icons.Example;
            package Medium=Buildings.Media.Water
              "Source side medium";
            parameter Modelica.Units.SI.MassFlowRate m_flow_nominal=1
              "Mass flow rate at nominal conditions";
            estcp.DHC.Loads.BaseClasses.FlowDistribution disFlo(
              redeclare package Medium = Medium,
              m_flow_nominal=m_flow_nominal,
              typDis=estcp.DHC.Loads.BaseClasses.Types.DistributionType.ChangeOver,

              have_pum=true,
              have_val=true,
              dp_nominal=100000,
              nPorts_a1=1,
              nPorts_b1=1) "Secondary distribution system"
              annotation (Placement(transformation(extent={{40,10},{60,30}})));
            Buildings.Fluid.Sources.Boundary_pT souPri(
              redeclare package Medium=Medium,
              use_T_in=true,
              nPorts=1)
              "Primary supply stream"
              annotation (Placement(transformation(extent={{-10,-10},{10,10}},rotation=0,origin={-10,20})));
            Buildings.Controls.OBC.CDL.Reals.Sources.Constant TPriHea(
              k=313.15,
              y(final unit="K",
                displayUnit="degC"))
              "Heating water primary supply temperature"
              annotation (Placement(transformation(extent={{-140,110},{-120,130}})));
            Buildings.Controls.OBC.CDL.Reals.Sources.Constant TPriChi(
              k=280.15,
              y(final unit="K",
                displayUnit="degC"))
              "Chilled water primary supply temperature"
              annotation (Placement(transformation(extent={{-140,70},{-120,90}})));
            Buildings.Controls.OBC.CDL.Reals.Switch TPri(
              y(final unit="K",
                displayUnit="degC"))
              "Actual primary supply temperature"
              annotation (Placement(transformation(extent={{-60,70},{-40,90}})));
            Buildings.Controls.OBC.CDL.Reals.Sources.Constant TSetSecHea(
              k=303.15,
              y(final unit="K",
                displayUnit="degC"))
              "Heating water secondary supply temperature set point"
              annotation (Placement(transformation(extent={{-140,-70},{-120,-50}})));
            Buildings.Controls.OBC.CDL.Reals.Sources.Constant TSetSecChi(
              k=291.15)
              "Chilled water secondary supply temperature set point"
              annotation (Placement(transformation(extent={{-140,-110},{-120,-90}})));
            Buildings.Controls.OBC.CDL.Reals.Switch TSetSecAct(
              y(final unit="K",
                displayUnit="degC"))
              "Actual secondary supply temperature set point"
              annotation (Placement(transformation(extent={{-60,-90},{-40,-70}})));
            Buildings.Fluid.Sources.MassFlowSource_T souSec(
              use_m_flow_in=true,
              redeclare package Medium=Medium,
              use_T_in=true,
              nPorts=1)
              "Secondary return stream"
              annotation (Placement(transformation(extent={{10,-10},{-10,10}},rotation=0,origin={110,60})));
            Buildings.Fluid.Sources.Boundary_pT sinSec(
              redeclare package Medium=Medium,
              nPorts=1)
              "Sink for secondary stream"
              annotation (Placement(transformation(extent={{10,-10},{-10,10}},rotation=0,origin={110,100})));
            Buildings.Controls.OBC.CDL.Reals.Sources.Constant dTSecHea(
              k=-5)
              "Secondary temperature difference between supply and return"
              annotation (Placement(transformation(extent={{-20,-110},{0,-90}})));
            Buildings.Fluid.Sensors.TemperatureTwoPort senTSecSup(
              redeclare package Medium=Medium,
              m_flow_nominal=m_flow_nominal)
              "Secondary supply temperature (measured)"
              annotation (Placement(transformation(extent={{70,90},{90,110}})));
            Buildings.Fluid.Sensors.TemperatureTwoPort senTSecRet(
              redeclare package Medium=Medium,
              m_flow_nominal=m_flow_nominal)
              "Secondary return temperature (measured)"
              annotation (Placement(transformation(extent={{90,50},{70,70}})));
            Buildings.Fluid.Sources.Boundary_pT sinPri(
              redeclare package Medium=Medium,
              nPorts=1)
              "Sink for primary stream"
              annotation (Placement(transformation(extent={{10,-10},{-10,10}},rotation=0,origin={110,20})));
            Buildings.Controls.OBC.CDL.Reals.Sources.Pulse mSec_flow(
              amplitude=m_flow_nominal,
              period=200,
              offset=0)
              "Secondary mass flow rate"
              annotation (Placement(transformation(extent={{-140,150},{-120,170}})));
            Buildings.Controls.OBC.CDL.Reals.Add add
              "Computation of secondary return temperature"
              annotation (Placement(transformation(extent={{100,-90},{120,-70}})));
            Buildings.Fluid.Sensors.TemperatureTwoPort senTPriSup(
              redeclare package Medium=Medium,
              m_flow_nominal=m_flow_nominal)
              "Primary supply temperature (measured)"
              annotation (Placement(transformation(extent={{8,10},{28,30}})));
            Buildings.Controls.OBC.CDL.Reals.Switch dTSec(
              y(final unit="K",
                displayUnit="degC"))
              "Actual secondary delta T"
              annotation (Placement(transformation(extent={{20,-130},{40,-110}})));
            Buildings.Controls.OBC.CDL.Reals.Sources.Constant dTSecCoo(
              k=5)
              "Secondary temperature difference between supply and return"
              annotation (Placement(transformation(extent={{-20,-150},{0,-130}})));
            Buildings.Controls.OBC.CDL.Conversions.BooleanToInteger modInd(
              final integerTrue=1,
              final integerFalse=2)
              "Mode index, 1 for heating, 2 for cooling"
              annotation (Placement(transformation(extent={{-60,-10},{-40,10}})));
            Buildings.Controls.OBC.CDL.Logical.Sources.Pulse modCha(
              period=1000)
              "Boolean pulse for changing mode"
              annotation (Placement(transformation(extent={{-140,-10},{-120,10}})));
            Buildings.Controls.OBC.CDL.Logical.Not mod
              "Operating mode, true for heating, false for cooling"
              annotation (Placement(transformation(extent={{-100,-10},{-80,10}})));
          equation
            connect(TPri.y,souPri.T_in)
              annotation (Line(points={{-38,80},{-32,80},{-32,24},{-22,24}},color={0,0,127}));
            connect(TSetSecAct.y,disFlo.TSupSet)
              annotation (Line(points={{-38,-80},{32,-80},{32,12},{39,12}},color={0,0,127}));
            connect(disFlo.ports_b1[1],senTSecSup.port_a)
              annotation (Line(points={{40,26},{36,26},{36,100},{70,100}},color={0,127,255}));
            connect(souSec.ports[1],senTSecRet.port_a)
              annotation (Line(points={{100,60},{90,60}},color={0,127,255}));
            connect(senTSecRet.port_b,disFlo.ports_a1[1])
              annotation (Line(points={{70,60},{64,60},{64,26},{60,26}},color={0,127,255}));
            connect(disFlo.port_b,sinPri.ports[1])
              annotation (Line(points={{60,20},{100,20}},color={0,127,255}));
            connect(senTSecSup.port_b,sinSec.ports[1])
              annotation (Line(points={{90,100},{100,100}},color={0,127,255}));
            connect(mSec_flow.y,disFlo.mReq_flow[1])
              annotation (Line(points={{-118,160},{32,160},{32,16},{39,16}},color={0,0,127}));
            connect(mSec_flow.y,souSec.m_flow_in)
              annotation (Line(points={{-118,160},{140,160},{140,68},{122,68}},color={0,0,127}));
            connect(add.y,souSec.T_in)
              annotation (Line(points={{122,-80},{140,-80},{140,64},{122,64}},color={0,0,127}));
            connect(souPri.ports[1],senTPriSup.port_a)
              annotation (Line(points={{0,20},{8,20}},color={0,127,255}));
            connect(senTPriSup.port_b,disFlo.port_a)
              annotation (Line(points={{28,20},{40,20}},color={0,127,255}));
            connect(TSetSecChi.y,TSetSecAct.u3)
              annotation (Line(points={{-118,-100},{-100,-100},{-100,-88},{-62,-88}},color={0,0,127}));
            connect(TSetSecHea.y,TSetSecAct.u1)
              annotation (Line(points={{-118,-60},{-100,-60},{-100,-72},{-62,-72}},color={0,0,127}));
            connect(TPriChi.y,TPri.u3)
              annotation (Line(points={{-118,80},{-80,80},{-80,72},{-62,72}},color={0,0,127}));
            connect(TPriHea.y,TPri.u1)
              annotation (Line(points={{-118,120},{-80,120},{-80,88},{-62,88}},color={0,0,127}));
            connect(TSetSecAct.y,add.u1)
              annotation (Line(points={{-38,-80},{32,-80},{32,-74},{98,-74}},color={0,0,127}));
            connect(dTSec.y,add.u2)
              annotation (Line(points={{42,-120},{80,-120},{80,-86},{98,-86}},color={0,0,127}));
            connect(dTSecHea.y,dTSec.u1)
              annotation (Line(points={{2,-100},{10,-100},{10,-112},{18,-112}},color={0,0,127}));
            connect(dTSecCoo.y,dTSec.u3)
              annotation (Line(points={{2,-140},{10,-140},{10,-128},{18,-128}},color={0,0,127}));
            connect(modCha.y,mod.u)
              annotation (Line(points={{-118,0},{-102,0}},color={255,0,255}));
            connect(mod.y,TPri.u2)
              annotation (Line(points={{-78,0},{-70,0},{-70,80},{-62,80}},color={255,0,255}));
            connect(mod.y,TSetSecAct.u2)
              annotation (Line(points={{-78,0},{-70,0},{-70,-80},{-62,-80}},color={255,0,255}));
            connect(mod.y,modInd.u)
              annotation (Line(points={{-78,0},{-62,0}},color={255,0,255}));
            connect(modInd.y,disFlo.modChaOve)
              annotation (Line(points={{-38,0},{36,0},{36,14},{39,14}},color={255,127,0}));
            connect(mod.y,dTSec.u2)
              annotation (Line(points={{-78,0},{-70,0},{-70,-120},{18,-120}},color={255,0,255}));
            annotation (
              Documentation(
                info="<html>
<p>
This model validates
<a href=\"modelica://Buildings.Experimental.DHC.Loads.BaseClasses.Controls.MixingValveControl\">
Buildings.Experimental.DHC.Loads.BaseClasses.Controls.MixingValveControl</a>
(as part of
<a href=\"modelica://Buildings.Experimental.DHC.Loads.BaseClasses.FlowDistribution\">
Buildings.Experimental.DHC.Loads.BaseClasses.FlowDistribution</a>)
in change-over mode.
</p>
</html>",       revisions="<html>
<ul>
<li>
February 21, 2020, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>"),    Diagram(
                coordinateSystem(
                  preserveAspectRatio=false,
                  extent={{-180,-200},{180,200}})),
              experiment(
                StopTime=1000,
                Tolerance=1e-06),
              __Dymola_Commands(
                file="modelica://Buildings/Resources/Scripts/Dymola/Experimental/DHC/Loads/BaseClasses/Controls/Validation/MixingValveControl.mos" "Simulate and plot"));
          end MixingValveControl;
          annotation (
            preferredView="info",
            Documentation(
              info="<html>
<p>
This package contains validation models for the classes in
<a href=\"modelica://Buildings.Experimental.DHC.Loads.BaseClasses.Controls\">
Buildings.Experimental.DHC.Loads.BaseClasses.Controls</a>.
</p>
</html>"));
        end Validation;
        annotation (
          preferredView="info",
          Documentation(
            info="<html>
<p>
This package contains control sequences used in district heating and
cooling systems.
</p>
</html>"));
      end Controls;

      package Types
        "Package with type definitions"
        extends Modelica.Icons.TypesPackage;
        type DistributionType = enumeration(
            HeatingWater
          "Heating water distribution system",
            ChilledWater
          "Chilled water distribution system",
            ChangeOver
          "Change-over distribution system")
          "Enumeration for the type of distribution system"
          annotation (Documentation(info="<html>
<p>
Enumeration to define the type of distribution system.
<br/>
</p>
<table border=\"1\" summary=\"Explanation of the enumeration\">
<tr>
  <th>
  Enumeration
  </th>
  <th>
  Description
  </th>
</tr>
<tr>
  <td>
  HeatingWater
  </td>
  <td>
  Use this setting for a heating water distribution system.
  </td>
</tr>
<tr>
  <td>
  ChilledWater
  </td>
  <td>
  Use this setting for a chilled water distribution system.
  </td>
</tr>
<tr>
  <td>
  ChangeOver
  </td>
  <td>
  Use this setting for a change-over distribution system.
  </td>
</tr>
</table>
</html>",      revisions="<html>
<ul>
<li>
February 21, 2020, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>"));
        type PumpControlType = enumeration(
            ConstantSpeed
          "Constant speed",
            ConstantFlow
          "Constant flow rate (three-way valves)",
            ConstantHead
          "Constant pump head",
            LinearHead
          "Linear relationship between pump head and mass flow rate",
            ConstantDp
          "Constant pressure difference at given location")
          "Enumeration for the type of distribution pump control"
          annotation (Documentation(info="<html>
<p>
Enumeration to define the type of distribution pump control.
<br/>
</p>
<table border=\"1\" summary=\"Explanation of the enumeration\">
<tr>
  <th>
  Enumeration
  </th>
  <th>
  Description
  </th>
</tr>
<tr>
  <td>
  ConstantSpeed
  </td>
  <td>
  Use this setting for a constant speed pump.
  </td>
</tr>
<tr>
  <td>
  ConstantFlow
  </td>
  <td>
  Use this setting for a constant flow system where terminal units are
  equipped with three-way valves and the pump operation can be
  approximated as constant flow and constant head.
  </td>
</tr>
<tr>
  <td>
  ConstantHead
  </td>
  <td>
  Use this setting for a pump control ensuring a constant head.
  </td>
</tr>
<tr>
  <td>
  LinearHead
  </td>
  <td>
  Use this setting for a pump control ensuring a linear variation of the
  pump head with the mass flow rate.
  </td>
</tr>
<tr>
  <td>
  ConstantDp
  </td>
  <td>
  Use this setting for a pump control ensuring a constant pressure drop
  at a given location in the distribution system.
  </td>
</tr>
</table>
</html>",      revisions="<html>
<ul>
<li>
February 21, 2020, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>"));
        annotation (
          preferredView="info",
          Documentation(
            info="<html>
<p>
This package contains type definitions.
</p>
</html>"));
      end Types;

      package Examples "Example models integrating multiple components"
        extends Modelica.Icons.ExamplesPackage;

        model CouplingRCZ1Valve
          "Example illustrating the coupling of a building model to heating water and chilled water loops"
          extends Modelica.Icons.Example;
          Buildings.BoundaryConditions.WeatherData.ReaderTMY3 weaDat(
            calTSky=Buildings.BoundaryConditions.Types.SkyTemperatureCalculation.HorizontalRadiation,
            computeWetBulbTemperature=false,
            filNam=Modelica.Utilities.Files.loadResource(
              "modelica://Buildings/Resources/weatherdata/USA_CA_San.Francisco.Intl.AP.724940_TMY3.mos"))
            "Weather data reader"
            annotation (Placement(transformation(extent={{60,100},{40,120}})));
          package Medium1=Buildings.Media.Water
            "Source side medium";
          estcp.DHC.Loads.BaseClasses.Examples.BaseClasses.BuildingRCZ1Valve bui(
            nPorts_aHeaWat=1,
            nPorts_aChiWat=1,
            nPorts_bHeaWat=1,
            nPorts_bChiWat=1) "Building"
            annotation (Placement(transformation(extent={{20,40},{40,60}})));
          Buildings.Fluid.Sources.Boundary_pT sinHeaWat(
            redeclare final package Medium=Medium1,
            nPorts=1)
            "Sink for heating water"
            annotation (Placement(transformation(extent={{10,-10},{-10,10}},rotation=0,origin={130,80})));
          Modelica.Blocks.Sources.RealExpression THeaWatSup(
            y=bui.terUni.T_aHeaWat_nominal)
            "Heating water supply temperature"
            annotation (Placement(transformation(extent={{-120,70},{-100,90}})));
          Modelica.Blocks.Sources.RealExpression TChiWatSup(
            y=bui.terUni.T_aChiWat_nominal)
            "Chilled water supply temperature"
            annotation (Placement(transformation(extent={{-120,10},{-100,30}})));
          Buildings.Fluid.Sources.Boundary_pT sinChiWat(
            redeclare final package Medium=Medium1,
            nPorts=1)
            "Sink for chilled water"
            annotation (Placement(transformation(extent={{10,-10},{-10,10}},rotation=0,origin={130,20})));
          Buildings.Fluid.Sources.Boundary_pT supHeaWat(
            redeclare package Medium=Medium1,
            use_T_in=true,
            nPorts=1)
            "Heating water supply"
            annotation (Placement(transformation(extent={{-10,-10},{10,10}},rotation=0,origin={-50,80})));
          Buildings.Fluid.Sources.Boundary_pT supChiWat(
            redeclare package Medium=Medium1,
            use_T_in=true,
            nPorts=1)
            "Chilled water supply"
            annotation (Placement(transformation(extent={{-10,-10},{10,10}},rotation=0,origin={-50,20})));
        equation
          connect(weaDat.weaBus,bui.weaBus)
            annotation (Line(points={{40,110},{30,110},{30,57.1333},{30.0333,57.1333}},color={255,204,51},thickness=0.5));
          connect(supHeaWat.T_in,THeaWatSup.y)
            annotation (Line(points={{-62,84},{-80,84},{-80,80},{-99,80}},color={0,0,127}));
          connect(TChiWatSup.y,supChiWat.T_in)
            annotation (Line(points={{-99,20},{-80,20},{-80,24},{-62,24}},color={0,0,127}));
          connect(supHeaWat.ports[1],bui.ports_aHeaWat[1])
            annotation (Line(points={{-40,80},{0,80},{0,48},{20,48}},color={0,127,255}));
          connect(supChiWat.ports[1],bui.ports_aChiWat[1])
            annotation (Line(points={{-40,20},{0,20},{0,44},{20,44}},color={0,127,255}));
          connect(bui.ports_bHeaWat[1],sinHeaWat.ports[1])
            annotation (Line(points={{40,48},{60,48},{60,80},{120,80}},color={0,127,255}));
          connect(bui.ports_bChiWat[1],sinChiWat.ports[1])
            annotation (Line(points={{40,44},{60,44},{60,20},{120,20}},color={0,127,255}));
          annotation (
            experiment(
              StopTime=604800,
              Tolerance=1e-06),
            Documentation(
              info="<html>
<p>
This example illustrates the use of
<a href=\"modelica://Buildings.Experimental.DHC.Loads.BaseClasses.PartialBuilding\">
Buildings.Experimental.DHC.Loads.BaseClasses.PartialBuilding</a>,
<a href=\"modelica://Buildings.Experimental.DHC.Loads.BaseClasses.PartialTerminalUnit\">
Buildings.Experimental.DHC.Loads.BaseClasses.PartialTerminalUnit</a>
and
<a href=\"modelica://Buildings.Experimental.DHC.Loads.BaseClasses.FlowDistribution\">
Buildings.Experimental.DHC.Loads.BaseClasses.FlowDistribution</a>
in a configuration with
</p>
<ul>
<li>
a one-zone building model based on a one-element reduced order model, and
</li>
<li>
secondary pumps and mixing valves controlling the heating and chilled water
supply temperature.
</li>
</ul>
</html>",     revisions="<html>
<ul>
<li>
February 21, 2020, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>"),  Diagram(
              coordinateSystem(
                preserveAspectRatio=false,
                extent={{-140,-20},{160,140}})),
            __Dymola_Commands(
              file="modelica://Buildings/Resources/Scripts/Dymola/Experimental/DHC/Loads/BaseClasses/Examples/CouplingRCZ1Valve.mos" "Simulate and plot"));
        end CouplingRCZ1Valve;

        model CouplingRCZ6
          "Example illustrating the coupling of a building model to heating water and chilled water loops"
          extends Modelica.Icons.Example;
          package Medium1=Buildings.Media.Water
            "Fluid in the pipes";
          Buildings.BoundaryConditions.WeatherData.ReaderTMY3 weaDat(
            calTSky=Buildings.BoundaryConditions.Types.SkyTemperatureCalculation.HorizontalRadiation,
            computeWetBulbTemperature=false,
            filNam=Modelica.Utilities.Files.loadResource(
              "modelica://Buildings/Resources/weatherdata/USA_CA_San.Francisco.Intl.AP.724940_TMY3.mos"))
            "Weather data reader"
            annotation (Placement(transformation(extent={{60,20},{40,40}})));
          estcp.DHC.Loads.BaseClasses.Examples.BaseClasses.BuildingRCZ6 bui(
            nPorts_aHeaWat=1,
            nPorts_aChiWat=1,
            nPorts_bHeaWat=1,
            nPorts_bChiWat=1) "Building"
            annotation (Placement(transformation(extent={{40,-40},{60,-20}})));
          Buildings.Fluid.Sources.Boundary_pT sinHeaWat(
            redeclare final package Medium=Medium1,
            nPorts=1)
            "Sink for heating water"
            annotation (Placement(transformation(extent={{10,-10},{-10,10}},rotation=0,origin={130,0})));
          Buildings.Fluid.Sources.Boundary_pT sinChilWat(
            redeclare final package Medium=Medium1,
            nPorts=1)
            "Sink for chilled water"
            annotation (Placement(transformation(extent={{10,-10},{-10,10}},rotation=0,origin={130,-60})));
          Modelica.Blocks.Sources.RealExpression THeaWatSup(
            y=max(
              bui.terUni.T_aHeaWat_nominal))
            "Heating water supply temperature"
            annotation (Placement(transformation(extent={{-100,-10},{-80,10}})));
          Modelica.Blocks.Sources.RealExpression TChiWatSup(
            y=min(
              bui.terUni.T_aChiWat_nominal))
            "Chilled water supply temperature"
            annotation (Placement(transformation(extent={{-100,-70},{-80,-50}})));
          Buildings.Fluid.Sources.Boundary_pT supHeaWat(
            redeclare package Medium = Medium1,
            use_T_in=true,
            nPorts=1) "Heating water supply" annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={-30,0})));
          Buildings.Fluid.Sources.Boundary_pT supChiWat(
            redeclare package Medium = Medium1,
            use_T_in=true,
            nPorts=1) "Chilled water supply" annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={-30,-60})));
        equation
          connect(weaDat.weaBus,bui.weaBus)
            annotation (Line(points={{40,30},{30,30},{30,-22.8667},{50.0333,-22.8667}},color={255,204,51},thickness=0.5));
          connect(supHeaWat.T_in,THeaWatSup.y)
            annotation (Line(points={{-42,4},{-60,4},{-60,0},{-79,0}},color={0,0,127}));
          connect(TChiWatSup.y,supChiWat.T_in)
            annotation (Line(points={{-79,-60},{-60,-60},{-60,-56},{-42,-56}},color={0,0,127}));
          connect(supHeaWat.ports[1],bui.ports_aHeaWat[1])
            annotation (Line(points={{-20,0},{20,0},{20,-32},{40,-32}},color={0,127,255}));
          connect(supChiWat.ports[1],bui.ports_aChiWat[1])
            annotation (Line(points={{-20,-60},{20,-60},{20,-36},{40,-36}},color={0,127,255}));
          connect(bui.ports_bHeaWat[1],sinHeaWat.ports[1])
            annotation (Line(points={{60,-32},{80,-32},{80,0},{120,0}},color={0,127,255}));
          connect(bui.ports_bChiWat[1],sinChilWat.ports[1])
            annotation (Line(points={{60,-36},{80,-36},{80,-60},{120,-60}},color={0,127,255}));
          annotation (
            Documentation(
              info="<html>
<p>
This example illustrates the use of
<a href=\"modelica://Buildings.Experimental.DHC.Loads.BaseClasses.PartialBuilding\">
Buildings.Experimental.DHC.Loads.BaseClasses.PartialBuilding</a>,
<a href=\"modelica://Buildings.Experimental.DHC.Loads.BaseClasses.PartialTerminalUnit\">
Buildings.Experimental.DHC.Loads.BaseClasses.PartialTerminalUnit</a>
and
<a href=\"modelica://Buildings.Experimental.DHC.Loads.BaseClasses.FlowDistribution\">
Buildings.Experimental.DHC.Loads.BaseClasses.FlowDistribution</a>
in a configuration with
</p>
<ul>
<li>
a six-zone building model based on a two-element reduced order model (from
GeoJSON export), and
</li>
<li>
secondary pumps.
</li>
</ul>
</html>",     revisions="<html>
<ul>
<li>
February 21, 2020, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>"),  Diagram(
              coordinateSystem(
                preserveAspectRatio=false,
                extent={{-120,-100},{160,60}})),
            __Dymola_Commands(
              file="modelica://Buildings/Resources/Scripts/Dymola/Experimental/DHC/Loads/BaseClasses/Examples/CouplingRCZ6.mos" "Simulate and plot"),
            experiment(
              StopTime=604800,
              Tolerance=1e-06));
        end CouplingRCZ6;

        model CouplingSpawnZ1
          "Example illustrating the coupling of a building model to heating water and chilled water loops"
          extends Modelica.Icons.Example;
          package Medium1=Buildings.Media.Water
            "Source side medium";
          estcp.DHC.Loads.BaseClasses.Examples.BaseClasses.BuildingSpawnZ1 bui(
            nPorts_aHeaWat=1,
            nPorts_aChiWat=1,
            nPorts_bHeaWat=1,
            nPorts_bChiWat=1) "Building"
            annotation (Placement(transformation(extent={{40,-40},{60,-20}})));
          Buildings.Fluid.Sources.MassFlowSource_T supHeaWat(
            use_m_flow_in=true,
            redeclare final package Medium=Medium1,
            use_T_in=true,
            nPorts=1)
            "Heating water supply"
            annotation (Placement(transformation(extent={{-10,-10},{10,10}},rotation=0,origin={-30,0})));
          Modelica.Blocks.Sources.RealExpression THeaWatSup(
            y=bui.terUni.T_aHeaWat_nominal)
            "Heating water supply temperature"
            annotation (Placement(transformation(extent={{-80,-10},{-60,10}})));
          Modelica.Blocks.Sources.RealExpression mHeaWat_flow(
            y=bui.disFloHea.mReqTot_flow)
            "Heating water flow rate"
            annotation (Placement(transformation(extent={{-80,10},{-60,30}})));
          Buildings.Fluid.Sources.MassFlowSource_T supChiWat(
            use_m_flow_in=true,
            redeclare final package Medium=Medium1,
            use_T_in=true,
            nPorts=1)
            "Chilled water supply"
            annotation (Placement(transformation(extent={{-10,-10},{10,10}},rotation=0,origin={-30,-80})));
          Modelica.Blocks.Sources.RealExpression TChiWatSup(
            y=bui.terUni.T_aChiWat_nominal)
            "Chilled water supply temperature"
            annotation (Placement(transformation(extent={{-80,-90},{-60,-70}})));
          Modelica.Blocks.Sources.RealExpression mChiWat_flow(
            y=bui.disFloCoo.mReqTot_flow)
            "Chilled water flow rate"
            annotation (Placement(transformation(extent={{-80,-70},{-60,-50}})));
          Buildings.Fluid.Sources.Boundary_pT sinHeaWat(
            redeclare package Medium=Medium1,
            nPorts=1)
            "Sink for heating water"
            annotation (Placement(transformation(extent={{10,-10},{-10,10}},rotation=0,origin={130,0})));
          Buildings.Fluid.Sources.Boundary_pT sinChiWat(
            redeclare package Medium=Medium1,
            nPorts=1)
            "Sink for chilled water"
            annotation (Placement(transformation(extent={{10,-10},{-10,10}},rotation=0,origin={130,-80})));
        equation
          connect(THeaWatSup.y,supHeaWat.T_in)
            annotation (Line(points={{-59,0},{-50,0},{-50,4},{-42,4}},color={0,0,127}));
          connect(mHeaWat_flow.y,supHeaWat.m_flow_in)
            annotation (Line(points={{-59,20},{-50,20},{-50,8},{-42,8}},color={0,0,127}));
          connect(TChiWatSup.y,supChiWat.T_in)
            annotation (Line(points={{-59,-80},{-50,-80},{-50,-76},{-42,-76}},color={0,0,127}));
          connect(mChiWat_flow.y,supChiWat.m_flow_in)
            annotation (Line(points={{-59,-60},{-50,-60},{-50,-72},{-42,-72}},color={0,0,127}));
          connect(supHeaWat.ports[1],bui.ports_aHeaWat[1])
            annotation (Line(points={{-20,0},{20,0},{20,-32},{40,-32}},color={0,127,255}));
          connect(supChiWat.ports[1],bui.ports_aChiWat[1])
            annotation (Line(points={{-20,-80},{20,-80},{20,-36},{40,-36}},color={0,127,255}));
          connect(bui.ports_bHeaWat[1],sinHeaWat.ports[1])
            annotation (Line(points={{60,-32},{80,-32},{80,0},{120,0}},color={0,127,255}));
          connect(bui.ports_bChiWat[1],sinChiWat.ports[1])
            annotation (Line(points={{60,-36},{80,-36},{80,-80},{120,-80}},color={0,127,255}));
          annotation (
            experiment(
              StopTime=604800,
              Tolerance=1e-06),
            Documentation(
              info="<html>
<p>
This example illustrates the use of
<a href=\"modelica://Buildings.Experimental.DHC.Loads.BaseClasses.PartialBuilding\">
Buildings.Experimental.DHC.Loads.BaseClasses.PartialBuilding</a>,
<a href=\"modelica://Buildings.Experimental.DHC.Loads.BaseClasses.PartialTerminalUnit\">
Buildings.Experimental.DHC.Loads.BaseClasses.PartialTerminalUnit</a>
and
<a href=\"modelica://Buildings.Experimental.DHC.Loads.BaseClasses.FlowDistribution\">
Buildings.Experimental.DHC.Loads.BaseClasses.FlowDistribution</a>
in a configuration with
</p>
<ul>
<li>
a one-zone building model based on an EnergyPlus envelope model, and
</li>
<li>
no secondary pumps.
</li>
</ul>
</html>",     revisions="<html>
<ul>
<li>
February 21, 2020, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>"),  Diagram(
              coordinateSystem(
                preserveAspectRatio=false,
                extent={{-100,-140},{160,80}})),
            __Dymola_Commands(
              file="modelica://Buildings/Resources/Scripts/Dymola/Experimental/DHC/Loads/BaseClasses/Examples/CouplingSpawnZ1.mos" "Simulate and plot"));
        end CouplingSpawnZ1;

        model CouplingSpawnZ6
          "Example illustrating the coupling of a building model to heating water and chilled water loops"
          extends Modelica.Icons.Example;
          package Medium1=Buildings.Media.Water
            "Source side medium";
          estcp.DHC.Loads.BaseClasses.Examples.BaseClasses.BuildingSpawnZ6 bui(
            nPorts_aHeaWat=1,
            nPorts_aChiWat=1,
            nPorts_bHeaWat=1,
            nPorts_bChiWat=1) "Building"
            annotation (Placement(transformation(extent={{40,-40},{60,-20}})));
          Buildings.Fluid.Sources.Boundary_pT sinHeaWat(
            redeclare final package Medium=Medium1,
            nPorts=1)
            "Sink for heating water"
            annotation (Placement(transformation(extent={{10,-10},{-10,10}},rotation=0,origin={130,0})));
          Buildings.Fluid.Sources.Boundary_pT sinChiWat(
            redeclare final package Medium=Medium1,
            nPorts=1)
            "Sink for chilled water"
            annotation (Placement(transformation(extent={{10,-10},{-10,10}},rotation=0,origin={130,-60})));
          Modelica.Blocks.Sources.RealExpression THeaWatSup(
            y=max(
              bui.terUni.T_aHeaWat_nominal))
            "Heating water supply temperature"
            annotation (Placement(transformation(extent={{-100,-10},{-80,10}})));
          Modelica.Blocks.Sources.RealExpression TChiWatSup(
            y=min(
              bui.terUni.T_aChiWat_nominal))
            "Chilled water supply temperature"
            annotation (Placement(transformation(extent={{-100,-70},{-80,-50}})));
          Buildings.Fluid.Sources.Boundary_pT supHeaWat(
            redeclare final package Medium = Medium1,
            use_T_in=true,
            nPorts=1) "Heating water supply" annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={-30,0})));
          Buildings.Fluid.Sources.Boundary_pT supChiWat(
            redeclare final package Medium = Medium1,
            use_T_in=true,
            nPorts=1) "Chilled water supply" annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={-30,-60})));
        equation
          connect(supHeaWat.T_in,THeaWatSup.y)
            annotation (Line(points={{-42,4},{-60,4},{-60,0},{-79,0}},color={0,0,127}));
          connect(TChiWatSup.y,supChiWat.T_in)
            annotation (Line(points={{-79,-60},{-60,-60},{-60,-56},{-42,-56}},color={0,0,127}));
          connect(supHeaWat.ports[1],bui.ports_aHeaWat[1])
            annotation (Line(points={{-20,0},{20,0},{20,-32},{40,-32}},color={0,127,255}));
          connect(supChiWat.ports[1],bui.ports_aChiWat[1])
            annotation (Line(points={{-20,-60},{20,-60},{20,-36},{40,-36}},color={0,127,255}));
          connect(bui.ports_bHeaWat[1],sinHeaWat.ports[1])
            annotation (Line(points={{60,-32},{80,-32},{80,0},{120,0}},color={0,127,255}));
          connect(sinChiWat.ports[1],bui.ports_bChiWat[1])
            annotation (Line(points={{120,-60},{80,-60},{80,-36},{60,-36}},color={0,127,255}));
          annotation (
            experiment(
              StopTime=604800,
              Tolerance=1e-06),
            Documentation(
              info="<html>
<p>
This example illustrates the use of
<a href=\"modelica://Buildings.Experimental.DHC.Loads.BaseClasses.PartialBuilding\">
Buildings.Experimental.DHC.Loads.BaseClasses.PartialBuilding</a>,
<a href=\"modelica://Buildings.Experimental.DHC.Loads.BaseClasses.PartialTerminalUnit\">
Buildings.Experimental.DHC.Loads.BaseClasses.PartialTerminalUnit</a>
and
<a href=\"modelica://Buildings.Experimental.DHC.Loads.BaseClasses.FlowDistribution\">
Buildings.Experimental.DHC.Loads.BaseClasses.FlowDistribution</a>
in a configuration with
</p>
<ul>
<li>
a six-zone building model based on an EnergyPlus envelope model (from
GeoJSON export), and
</li>
<li>
secondary pumps.
</li>
</ul>
<p>
Simulation with Dymola requires minimum version 2020x and setting
<code>Hidden.AvoidDoubleComputation=true</code>, see
<a href=\"modelica://Buildings.ThermalZones.EnergyPlus_9_6_0.UsersGuide\">
Buildings.ThermalZones.EnergyPlus_9_6_0.UsersGuide</a>.
</p>
</html>",     revisions="<html>
<ul>
<li>
February 21, 2020, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>"),  Diagram(
              coordinateSystem(
                preserveAspectRatio=false,
                extent={{-120,-100},{160,60}}),
              graphics={
                Text(
                  extent={{-28,36},{104,10}},
                  textColor={28,108,200},
                  textString="")}),
            __Dymola_Commands(
              file="modelica://Buildings/Resources/Scripts/Dymola/Experimental/DHC/Loads/BaseClasses/Examples/CouplingSpawnZ6.mos" "Simulate and plot"));
        end CouplingSpawnZ6;

        model CouplingTimeSeries
          "Example illustrating the coupling of a building model to heating water and chilled water loops"
          extends Modelica.Icons.Example;
          package Medium1=Buildings.Media.Water
            "Source side medium";
          parameter Modelica.Units.SI.Time perAve=600
            "Period for time averaged variables";
          estcp.DHC.Loads.BaseClasses.Examples.BaseClasses.BuildingTimeSeries bui(
            filNam=
                "modelica://Buildings/Resources/Data/Experimental/DHC/Loads/Examples/SwissResidential_20190916.mos",

            nPorts_aHeaWat=1,
            nPorts_aChiWat=1,
            nPorts_bHeaWat=1,
            nPorts_bChiWat=1) "Building"
            annotation (Placement(transformation(extent={{10,-4},{30,16}})));
          Buildings.Fluid.Sources.Boundary_pT sinHeaWat(
            redeclare package Medium=Medium1,
            nPorts=1)
            "Sink for heating water"
            annotation (Placement(transformation(extent={{10,-10},{-10,10}},rotation=0,origin={130,20})));
          Buildings.Fluid.Sources.Boundary_pT sinChiWat(
            redeclare package Medium=Medium1,
            nPorts=1)
            "Sink for chilled water"
            annotation (Placement(transformation(extent={{10,-10},{-10,10}},rotation=0,origin={130,-20})));
          Modelica.Blocks.Sources.RealExpression THeaWatSup(
            y=bui.T_aHeaWat_nominal)
            "Heating water supply temperature"
            annotation (Placement(transformation(extent={{-120,10},{-100,30}})));
          Modelica.Blocks.Sources.RealExpression TChiWatSup(
            y=bui.T_aChiWat_nominal)
            "Chilled water supply temperature"
            annotation (Placement(transformation(extent={{-120,-30},{-100,-10}})));
          Buildings.Fluid.Sources.Boundary_pT supHeaWat(
            redeclare package Medium = Medium1,
            use_T_in=true,
            nPorts=1) "Heating water supply" annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={-50,20})));
          Buildings.Fluid.Sources.Boundary_pT supChiWat(
            redeclare package Medium = Medium1,
            use_T_in=true,
            nPorts=1) "Chilled water supply" annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={-50,-20})));
          Modelica.Blocks.Continuous.Integrator EHeaReq(
            y(unit="J"))
            "Time integral of heating load"
            annotation (Placement(transformation(extent={{60,70},{80,90}})));
          Modelica.Blocks.Continuous.Integrator EHeaAct(
            y(unit="J"))
            "Actual energy used for heating"
            annotation (Placement(transformation(extent={{100,70},{120,90}})));
          Modelica.Blocks.Continuous.Integrator ECooReq(
            y(unit="J"))
            "Time integral of cooling load"
            annotation (Placement(transformation(extent={{60,-70},{80,-50}})));
          Modelica.Blocks.Continuous.Integrator ECooAct(
            y(unit="J"))
            "Actual energy used for cooling"
            annotation (Placement(transformation(extent={{100,-70},{120,-50}})));
          Buildings.Controls.OBC.CDL.Reals.MovingAverage QAveHeaReq_flow(y(unit=
                  "W"), final delta=perAve) "Time average of heating load"
            annotation (Placement(transformation(extent={{60,110},{80,130}})));
          Buildings.Controls.OBC.CDL.Reals.MovingAverage QAveHeaAct_flow(y(unit=
                  "W"), final delta=perAve) "Time average of heating heat flow rate"
            annotation (Placement(transformation(extent={{100,110},{120,130}})));
          Buildings.Controls.OBC.CDL.Reals.MovingAverage QAveCooReq_flow(y(unit=
                  "W"), final delta=perAve) "Time average of cooling load"
            annotation (Placement(transformation(extent={{60,-110},{80,-90}})));
          Buildings.Controls.OBC.CDL.Reals.MovingAverage QAveCooAct_flow(y(unit=
                  "W"), final delta=perAve) "Time average of cooling heat flow rate"
            annotation (Placement(transformation(extent={{100,-110},{120,-90}})));
        equation
          connect(supHeaWat.T_in,THeaWatSup.y)
            annotation (Line(points={{-62,24},{-80,24},{-80,20},{-99,20}},color={0,0,127}));
          connect(TChiWatSup.y,supChiWat.T_in)
            annotation (Line(points={{-99,-20},{-80,-20},{-80,-16},{-62,-16}},color={0,0,127}));
          connect(supHeaWat.ports[1],bui.ports_aHeaWat[1])
            annotation (Line(points={{-40,20},{0,20},{0,4},{10,4}},color={0,127,255}));
          connect(supChiWat.ports[1],bui.ports_aChiWat[1])
            annotation (Line(points={{-40,-20},{0,-20},{0,0},{10,0}},color={0,127,255}));
          connect(bui.ports_bHeaWat[1],sinHeaWat.ports[1])
            annotation (Line(points={{30,4},{60,4},{60,20},{120,20}},color={0,127,255}));
          connect(sinChiWat.ports[1],bui.ports_bChiWat[1])
            annotation (Line(points={{120,-20},{60,-20},{60,0},{30,0}},color={0,127,255}));
          connect(bui.QHea_flow,EHeaAct.u)
            annotation (Line(points={{30.6667,14.6667},{40,14.6667},{40,60},{90,60},{90,
                  80},{98,80}},                                                                      color={0,0,127}));
          connect(bui.QReqHea_flow,EHeaReq.u)
            annotation (Line(points={{26.6667,-5.33333},{26.6667,-8},{36,-8},{36,80},{
                  58,80}},                                                                    color={0,0,127}));
          connect(bui.QReqCoo_flow,ECooReq.u)
            annotation (Line(points={{28,-5.33333},{28,-60},{58,-60}},          color={0,0,127}));
          connect(bui.QCoo_flow,ECooAct.u)
            annotation (Line(points={{30.6667,13.3333},{40,13.3333},{40,-40},{90,-40},{
                  90,-60},{98,-60}},                                                                     color={0,0,127}));
          connect(bui.QReqHea_flow,QAveHeaReq_flow.u)
            annotation (Line(points={{26.6667,-5.33333},{26.6667,-7.90323},{35.9677,
                  -7.90323},{35.9677,120},{58,120}},                                                                  color={0,0,127}));
          connect(bui.QHea_flow,QAveHeaAct_flow.u)
            annotation (Line(points={{30.6667,14.6667},{40,14.6667},{40,60},{90,60},{90,
                  120},{98,120}},                                                                      color={0,0,127}));
          connect(bui.QReqCoo_flow,QAveCooReq_flow.u)
            annotation (Line(points={{28,-5.33333},{28.6316,-5.33333},{28.6316,-60},{
                  28.6316,-100},{58,-100}},                                                                        color={0,0,127}));
          connect(bui.QCoo_flow,QAveCooAct_flow.u)
            annotation (Line(points={{30.6667,13.3333},{40,13.3333},{40,-40},{90,-40},{
                  90,-100},{98,-100}},                                                                     color={0,0,127}));
          annotation (
            experiment(
              StopTime=604800,
              Tolerance=1e-06),
            Documentation(
              info="<html>
<p>
This example illustrates the use of
<a href=\"modelica://Buildings.Experimental.DHC.Loads.BaseClasses.PartialBuilding\">
Buildings.Experimental.DHC.Loads.BaseClasses.PartialBuilding</a>,
<a href=\"modelica://Buildings.Experimental.DHC.Loads.BaseClasses.PartialTerminalUnit\">
Buildings.Experimental.DHC.Loads.BaseClasses.PartialTerminalUnit</a>
and
<a href=\"modelica://Buildings.Experimental.DHC.Loads.BaseClasses.FlowDistribution\">
Buildings.Experimental.DHC.Loads.BaseClasses.FlowDistribution</a>
in a configuration with
</p>
<ul>
<li>
space heating and cooling loads provided as time series, and
</li>
<li>
secondary pumps.
</li>
</ul>
</html>",     revisions="<html>
<ul>
<li>
November 21, 2022, by David Blum:<br/>
Change <code>bui.facMulHea</code> and <code>bui.facMulCoo</code> to be default.<br/>
This is for
<a href=\"https://github.com/lbl-srg/modelica-buildings/issues/2302\">
issue 2302</a>.
</li>
<li>
February 21, 2020, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>"),  Diagram(
              coordinateSystem(
                preserveAspectRatio=false,
                extent={{-160,-140},{160,140}})),
            __Dymola_Commands(
              file="modelica://Buildings/Resources/Scripts/Dymola/Experimental/DHC/Loads/BaseClasses/Examples/CouplingTimeSeries.mos" "Simulate and plot"));
        end CouplingTimeSeries;

        model CouplingTimeSeriesSingleLoop
          "Example illustrating the coupling of a building model to heating water or chilled water loops"
          extends Modelica.Icons.Example;
          package Medium1=Buildings.Media.Water
            "Source side medium";
          parameter Modelica.Units.SI.Time perAve=600
            "Period for time averaged variables";
          estcp.DHC.Loads.BaseClasses.Examples.BaseClasses.BuildingTimeSeries buiCoo(
            have_heaWat=false,
            filNam=
                "modelica://Buildings/Resources/Data/Experimental/DHC/Loads/Examples/SwissResidential_20190916.mos",

            nPorts_aChiWat=1,
            nPorts_bChiWat=1) "Building wint cooling only"
            annotation (Placement(transformation(extent={{-10,100},{10,120}})));
          Buildings.Fluid.Sources.Boundary_pT sinChiWat(
            redeclare package Medium=Medium1,
            nPorts=1)
            "Sink for chilled water"
            annotation (Placement(transformation(extent={{10,-10},{-10,10}},rotation=0,origin={110,104})));
          Modelica.Blocks.Sources.RealExpression TChiWatSup(
            y=buiCoo.T_aChiWat_nominal)
            "Chilled water supply temperature"
            annotation (Placement(transformation(extent={{-140,98},{-120,118}})));
          Buildings.Fluid.Sources.Boundary_pT supChiWat(
            redeclare package Medium = Medium1,
            use_T_in=true,
            nPorts=1) "Chilled water supply" annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={-70,104})));
          Modelica.Blocks.Continuous.Integrator ECooReq(
            y(unit="J"))
            "Time integral of cooling load"
            annotation (Placement(transformation(extent={{40,60},{60,80}})));
          Buildings.Controls.OBC.CDL.Reals.MovingAverage QAveCooReq_flow(y(unit=
                  "W"), final delta=perAve) "Time average of cooling load"
            annotation (Placement(transformation(extent={{40,20},{60,40}})));
          Buildings.Controls.OBC.CDL.Reals.MovingAverage QAveCooAct_flow(y(unit=
                  "W"), final delta=perAve) "Time average of cooling heat flow rate"
            annotation (Placement(transformation(extent={{80,20},{100,40}})));
          Modelica.Blocks.Continuous.Integrator ECooAct(
            y(unit="J"))
            "Actual energy used for cooling"
            annotation (Placement(transformation(extent={{80,60},{100,80}})));
          estcp.DHC.Loads.BaseClasses.Examples.BaseClasses.BuildingTimeSeries buiHea(
            have_chiWat=false,
            filNam=
                "modelica://Buildings/Resources/Data/Experimental/DHC/Loads/Examples/SwissResidential_20190916.mos",

            nPorts_aChiWat=1,
            nPorts_bChiWat=1,
            nPorts_aHeaWat=1,
            nPorts_bHeaWat=1) "Building with heating only"
            annotation (Placement(transformation(extent={{-10,-20},{10,0}})));
          Modelica.Blocks.Sources.RealExpression THeaWatSup(
            y=buiHea.T_aHeaWat_nominal)
            "Heating water supply temperature"
            annotation (Placement(transformation(extent={{-140,-18},{-120,2}})));
          Buildings.Fluid.Sources.Boundary_pT supHeaWat(
            redeclare package Medium = Medium1,
            use_T_in=true,
            nPorts=1) "Heating water supply" annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={-70,-12})));
          Buildings.Fluid.Sources.Boundary_pT sinHeaWat(redeclare package
              Medium = Medium1, nPorts=1) "Sink for heating water" annotation (
              Placement(transformation(
                extent={{10,-10},{-10,10}},
                rotation=0,
                origin={110,-12})));
          Buildings.Controls.OBC.CDL.Reals.MovingAverage QAveHeaReq_flow(y(unit=
                  "W"), final delta=perAve) "Time average of heating load"
            annotation (Placement(transformation(extent={{40,-110},{60,-90}})));
          Modelica.Blocks.Continuous.Integrator EHeaReq(
            y(unit="J"))
            "Time integral of heating load"
            annotation (Placement(transformation(extent={{40,-70},{60,-50}})));
          Modelica.Blocks.Continuous.Integrator EHeaAct(
            y(unit="J"))
            "Actual energy used for heating"
            annotation (Placement(transformation(extent={{80,-70},{100,-50}})));
          Buildings.Controls.OBC.CDL.Reals.MovingAverage QAveHeaAct_flow(y(unit=
                  "W"), final delta=perAve) "Time average of heating heat flow rate"
            annotation (Placement(transformation(extent={{80,-110},{100,-90}})));
        equation
          connect(TChiWatSup.y,supChiWat.T_in)
            annotation (Line(points={{-119,108},{-82,108}},color={0,0,127}));
          connect(supChiWat.ports[1],buiCoo.ports_aChiWat[1])
            annotation (Line(points={{-60,104},{-10,104}},color={0,127,255}));
          connect(sinChiWat.ports[1],buiCoo.ports_bChiWat[1])
            annotation (Line(points={{100,104},{10,104}},color={0,127,255}));
          connect(buiCoo.QReqCoo_flow,ECooReq.u)
            annotation (Line(points={{8,98.6667},{8,70},{38,70}},            color={0,0,127}));
          connect(buiCoo.QReqCoo_flow,QAveCooReq_flow.u)
            annotation (Line(points={{8,98.6667},{8,30},{38,30}},            color={0,0,127}));
          connect(buiCoo.QCoo_flow,ECooAct.u)
            annotation (Line(points={{10.6667,117.333},{70,117.333},{70,70},{78,70}},color={0,0,127}));
          connect(buiCoo.QCoo_flow,QAveCooAct_flow.u)
            annotation (Line(points={{10.6667,117.333},{70,117.333},{70,30},{78,30}},color={0,0,127}));
          connect(THeaWatSup.y,supHeaWat.T_in)
            annotation (Line(points={{-119,-8},{-82,-8}},color={0,0,127}));
          connect(supHeaWat.ports[1],buiHea.ports_aHeaWat[1])
            annotation (Line(points={{-60,-12},{-10,-12}},color={0,127,255}));
          connect(buiHea.ports_bHeaWat[1],sinHeaWat.ports[1])
            annotation (Line(points={{10,-12},{100,-12}},color={0,127,255}));
          connect(buiHea.QReqHea_flow,EHeaReq.u)
            annotation (Line(points={{6.66667,-21.3333},{6.66667,-60},{38,-60}},color={0,0,127}));
          connect(buiHea.QReqHea_flow,QAveHeaReq_flow.u)
            annotation (Line(points={{6.66667,-21.3333},{6.66667,-100},{38,-100}},color={0,0,127}));
          connect(buiHea.QHea_flow,EHeaAct.u)
            annotation (Line(points={{10.6667,-1.33333},{70,-1.33333},{70,-60},{78,-60}},color={0,0,127}));
          connect(buiHea.QHea_flow,QAveHeaAct_flow.u)
            annotation (Line(points={{10.6667,-1.33333},{70,-1.33333},{70,-100},{78,
                  -100}},                                                                  color={0,0,127}));
          annotation (
            experiment(
              StopTime=604800,
              Tolerance=1e-06),
            Documentation(
              info="<html>
<p>
This example illustrates the use of
<a href=\"modelica://Buildings.Experimental.DHC.Loads.BaseClasses.PartialBuilding\">
Buildings.Experimental.DHC.Loads.BaseClasses.PartialBuilding</a>,
<a href=\"modelica://Buildings.Experimental.DHC.Loads.BaseClasses.PartialTerminalUnit\">
Buildings.Experimental.DHC.Loads.BaseClasses.PartialTerminalUnit</a>
and
<a href=\"modelica://Buildings.Experimental.DHC.Loads.BaseClasses.FlowDistribution\">
Buildings.Experimental.DHC.Loads.BaseClasses.FlowDistribution</a>
in a configuration with
</p>
<ul>
<li>
a single connection with a heating water distribution system, see
component <code>buiHea</code> (resp. with a chilled water distribution
system, see component <code>buiCoo</code>),
</li>
<li>
space heating and cooling loads provided as time series, and
</li>
<li>
secondary pumps.
</li>
</ul>
</html>",     revisions="<html>
<ul>
<li>
November 21, 2022, by David Blum:<br/>
Change <code>buiHea.facMulHea</code> and <code>buiCoo.facMulCoo</code> to be default.<br/>
This is for
<a href=\"https://github.com/lbl-srg/modelica-buildings/issues/2302\">
issue 2302</a>.
</li>
<li>
September 18, 2020, by Jianjun Hu:<br/>
First implementation.
</li>
</ul>
</html>"),  Diagram(
              coordinateSystem(
                preserveAspectRatio=false,
                extent={{-160,-140},{160,140}})),
            __Dymola_Commands(
              file="modelica://Buildings/Resources/Scripts/Dymola/Experimental/DHC/Loads/BaseClasses/Examples/CouplingTimeSeriesSingleLoop.mos" "Simulate and plot"));
        end CouplingTimeSeriesSingleLoop;

        package BaseClasses "Package with base classes"
          extends Modelica.Icons.BasesPackage;

          model BuildingRCZ1Valve
            "One-zone RC building model with distribution pumps and mixing valves"
            extends estcp.DHC.Loads.BaseClasses.PartialBuilding(
              redeclare package Medium = Buildings.Media.Water,
              final have_heaWat=true,
              final have_chiWat=true,
              final have_eleHea=false,
              final have_eleCoo=false,
              final have_weaBus=true);
            package Medium2=Buildings.Media.Air
              "Load side medium";
            parameter Integer nZon=1
              "Number of thermal zones";
            Buildings.BoundaryConditions.SolarIrradiation.DiffusePerez HDifTil[2](
              each outSkyCon=true,
              each outGroCon=true,
              each til=1.5707963267949,
              azi={3.1415926535898,4.7123889803847})
              "Calculates diffuse solar radiation on titled surface for both directions"
              annotation (Placement(transformation(extent={{-94,98},{-74,118}})));
            Buildings.BoundaryConditions.SolarIrradiation.DirectTiltedSurface HDirTil[2](each til=
                 1.5707963267949, azi={3.1415926535898,4.7123889803847})
              "Calculates direct solar radiation on titled surface for both directions"
              annotation (Placement(transformation(extent={{-94,130},{-74,150}})));
            Buildings.ThermalZones.ReducedOrder.SolarGain.CorrectionGDoublePane corGDouPan(
              n=2,
              UWin=2.1)
              "Correction factor for solar transmission"
              annotation (Placement(transformation(extent={{-20,132},{0,152}})));
            Buildings.ThermalZones.ReducedOrder.RC.OneElement thermalZoneOneElement(
              VAir=52.5,
              hRad=4.999999999999999,
              hConWin=2.7000000000000006,
              gWin=1,
              ratioWinConRad=0.09,
              hConExt=2.0490178828959134,
              nExt=1,
              RExt={0.00331421908725},
              CExt={5259932.23},
              RWin=0.01642857143,
              RExtRem=0.1265217391,
              nOrientations=2,
              AWin={7,7},
              ATransparent={7,7},
              AExt={3.5,8},
              redeclare package Medium=Medium2,
              extWallRC(
                thermCapExt(
                  each der_T(
                    fixed=true))),
              energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,
              T_start=295.15,
              nPorts=2)
              "Thermal zone"
              annotation (Placement(transformation(extent={{18,68},{66,104}})));
            Buildings.ThermalZones.ReducedOrder.EquivalentAirTemperature.VDI6007WithWindow eqAirTemp(
              n=2,
              wfGro=0,
              wfWall={0.3043478260869566,0.6956521739130435},
              wfWin={0.5,0.5},
              withLongwave=true,
              aExt=0.7,
              hConWallOut=20.0,
              hRad=5.0,
              hConWinOut=20.0,
              TGro=285.15)
              "Computes equivalent air temperature"
              annotation (Placement(transformation(extent={{-50,64},{-30,84}})));
            Modelica.Blocks.Math.Add solRad[2]
              "Sums up solar radiation of both directions"
              annotation (Placement(transformation(extent={{-64,84},{-54,94}})));
            Buildings.HeatTransfer.Sources.PrescribedTemperature preTem
              "Prescribed temperature for exterior walls outdoor surface temperature"
              annotation (Placement(transformation(extent={{-18,72},{-6,84}})));
            Buildings.HeatTransfer.Sources.PrescribedTemperature preTem1
              "Prescribed temperature for windows outdoor surface temperature"
              annotation (Placement(transformation(extent={{-18,92},{-6,104}})));
            Modelica.Thermal.HeatTransfer.Components.Convection theConWin
              "Outdoor convective heat transfer of windows"
              annotation (Placement(transformation(extent={{12,94},{2,104}})));
            Modelica.Thermal.HeatTransfer.Components.Convection theConWall
              "Outdoor convective heat transfer of walls"
              annotation (Placement(transformation(extent={{10,84},{0,74}})));
            Modelica.Thermal.HeatTransfer.Sources.PrescribedHeatFlow perRad
              "Radiative heat flow of persons"
              annotation (Placement(transformation(extent={{22,36},{42,56}})));
            Modelica.Thermal.HeatTransfer.Sources.PrescribedHeatFlow perCon
              "Convective heat flow of persons"
              annotation (Placement(transformation(extent={{22,20},{42,40}})));
            Modelica.Blocks.Sources.CombiTimeTable intGai(
              table=[
                0,0,0,0;
                3600,0,0,0;
                7200,0,0,0;
                10800,0,0,0;
                14400,0,0,0;
                18000,0,0,0;
                21600,0,0,0;
                25200,0,0,0;
                25200,80,80,200;
                28800,80,80,200;
                32400,80,80,200;
                36000,80,80,200;
                39600,80,80,200;
                43200,80,80,200;
                46800,80,80,200;
                50400,80,80,200;
                54000,80,80,200;
                57600,80,80,200;
                61200,80,80,200;
                61200,0,0,0;
                64800,0,0,0;
                72000,0,0,0;
                75600,0,0,0;
                79200,0,0,0;
                82800,0,0,0;
                86400,0,0,0],
              columns={2,3,4},
              extrapolation=Modelica.Blocks.Types.Extrapolation.Periodic)
              "Table with profiles for persons (radiative and convective) and machines
    (convective)"
              annotation (Placement(transformation(extent={{-28,38},{-12,54}})));
            Modelica.Blocks.Sources.Constant const[2](
              each k=0)
              "Sets sunblind signal to zero (open)"
              annotation (Placement(transformation(extent={{-46,92},{-40,98}})));
            Modelica.Thermal.HeatTransfer.Sources.PrescribedHeatFlow macConv
              "Convective heat flow of machines"
              annotation (Placement(transformation(extent={{22,2},{42,22}})));
            Modelica.Blocks.Sources.Constant hConWall(
              k=25*11.5)
              "Outdoor coefficient of heat transfer for walls"
              annotation (Placement(transformation(extent={{-4,-4},{4,4}},rotation=90,origin={4,62})));
            Modelica.Blocks.Sources.Constant hConWin(
              k=20*14)
              "Outdoor coefficient of heat transfer for windows"
              annotation (Placement(transformation(extent={{4,-4},{-4,4}},rotation=90,origin={6,116})));
            Buildings.Controls.OBC.CDL.Reals.Sources.Constant minTSet(
              k=293.15,
              y(final unit="K",
                displayUnit="degC"))
              "Minimum temperature set point"
              annotation (Placement(transformation(extent={{-280,250},{-260,270}})));
            Buildings.Controls.OBC.CDL.Reals.Sources.Constant maxTSet(
              k=297.15,
              y(final unit="K",
                displayUnit="degC"))
              "Maximum temperature set point"
              annotation (Placement(transformation(extent={{-280,210},{-260,230}})));
            Buildings.Controls.OBC.CDL.Reals.MultiSum mulSum(
              nin=2)
              annotation (Placement(transformation(extent={{240,70},{260,90}})));
            estcp.DHC.Loads.BaseClasses.Examples.BaseClasses.FanCoil4Pipe terUni(
              redeclare package Medium1 = Medium,
              redeclare package Medium2 = Medium2,
              QHea_flow_nominal=1000,
              QCoo_flow_nominal=-5000,
              T_aLoaHea_nominal=293.15,
              T_aLoaCoo_nominal=297.15,
              T_bHeaWat_nominal=308.15,
              T_bChiWat_nominal=285.15,
              T_aHeaWat_nominal=313.15,
              T_aChiWat_nominal=280.15,
              mLoaHea_flow_nominal=1,
              mLoaCoo_flow_nominal=1) "Terminal unit" annotation (Placement(
                  transformation(extent={{-160,-58},{-140,-38}})));
            estcp.DHC.Loads.BaseClasses.FlowDistribution disFloHea(
              redeclare package Medium = Medium,
              m_flow_nominal=terUni.mHeaWat_flow_nominal,
              have_pum=true,
              have_val=true,
              dp_nominal=100000,
              nPorts_a1=1,
              nPorts_b1=1) "Heating water distribution system" annotation (
                Placement(transformation(extent={{-100,-110},{-80,-90}})));
            estcp.DHC.Loads.BaseClasses.FlowDistribution disFloCoo(
              redeclare package Medium = Medium,
              m_flow_nominal=terUni.mChiWat_flow_nominal,
              typDis=estcp.DHC.Loads.BaseClasses.Types.DistributionType.ChilledWater,

              have_pum=true,
              have_val=true,
              dp_nominal=100000,
              nPorts_a1=1,
              nPorts_b1=1) "Chilled water distribution system" annotation (
                Placement(transformation(extent={{-100,-270},{-80,-250}})));
            Buildings.Controls.OBC.CDL.Reals.Sources.Constant TSetSecHea(
              k=308.15,
              y(final unit="K",
                displayUnit="degC"))
              "Heating water secondary supply temperature set point"
              annotation (Placement(transformation(extent={{-260,-190},{-240,-170}})));
            Buildings.Controls.OBC.CDL.Reals.Sources.Constant TSetSecChi(
              k=289.15,
              y(final unit="K",
                displayUnit="degC"))
              "Chilled water secondary supply temperature set point"
              annotation (Placement(transformation(extent={{-260,-230},{-240,-210}})));
          equation
            connect(eqAirTemp.TEqAirWin,preTem1.T)
              annotation (Line(points={{-29,77.8},{-26,77.8},{-26,98},{-19.2,98}},color={0,0,127}));
            connect(eqAirTemp.TEqAir,preTem.T)
              annotation (Line(points={{-29,74},{-22,74},{-22,78},{-19.2,78}},color={0,0,127}));
            connect(intGai.y[1],perRad.Q_flow)
              annotation (Line(points={{-11.2,46},{22,46}},color={0,0,127}));
            connect(intGai.y[2],perCon.Q_flow)
              annotation (Line(points={{-11.2,46},{-11.2,30},{22,30}},color={0,0,127}));
            connect(intGai.y[3],macConv.Q_flow)
              annotation (Line(points={{-11.2,46},{28,46},{28,12},{22,12}},color={0,0,127}));
            connect(const.y,eqAirTemp.sunblind)
              annotation (Line(points={{-39.7,95},{-38,95},{-38,86},{-40,86}},color={0,0,127}));
            connect(HDifTil.HSkyDifTil,corGDouPan.HSkyDifTil)
              annotation (Line(points={{-73,114},{-32,114},{-32,144},{-22,144}},color={0,0,127}));
            connect(HDirTil.H,corGDouPan.HDirTil)
              annotation (Line(points={{-73,140},{-36,140},{-36,148},{-22,148}},color={0,0,127}));
            connect(HDirTil.H,solRad.u1)
              annotation (Line(points={{-73,140},{-68,140},{-68,92},{-65,92}},color={0,0,127}));
            connect(HDirTil.inc,corGDouPan.inc)
              annotation (Line(points={{-73,136},{-22,136}},color={0,0,127}));
            connect(HDifTil.H,solRad.u2)
              annotation (Line(points={{-73,108},{-70,108},{-70,86},{-65,86}},color={0,0,127}));
            connect(HDifTil.HGroDifTil,corGDouPan.HGroDifTil)
              annotation (Line(points={{-73,102},{-30,102},{-30,140},{-22,140}},color={0,0,127}));
            connect(solRad.y,eqAirTemp.HSol)
              annotation (Line(points={{-53.5,89},{-52,89},{-52,80}},color={0,0,127}));
            connect(perRad.port,thermalZoneOneElement.intGainsRad)
              annotation (Line(points={{42,46},{104,46},{104,94},{66,94}},color={191,0,0}));
            connect(theConWin.solid,thermalZoneOneElement.window)
              annotation (Line(points={{12,99},{14,99},{14,90},{18,90}},color={191,0,0}));
            connect(preTem1.port,theConWin.fluid)
              annotation (Line(points={{-6,98},{2,98},{2,99}},color={191,0,0}));
            connect(thermalZoneOneElement.extWall,theConWall.solid)
              annotation (Line(points={{18,82},{14,82},{14,79},{10,79}},color={191,0,0}));
            connect(theConWall.fluid,preTem.port)
              annotation (Line(points={{0,79},{-2,79},{-2,78},{-6,78}},color={191,0,0}));
            connect(hConWall.y,theConWall.Gc)
              annotation (Line(points={{4,66.4},{4,74},{5,74}},color={0,0,127}));
            connect(hConWin.y,theConWin.Gc)
              annotation (Line(points={{6,111.6},{6,104},{7,104}},color={0,0,127}));
            connect(macConv.port,thermalZoneOneElement.intGainsConv)
              annotation (Line(points={{42,12},{98,12},{98,90},{66,90}},color={191,0,0}));
            connect(perCon.port,thermalZoneOneElement.intGainsConv)
              annotation (Line(points={{42,30},{98,30},{98,90},{66,90}},color={191,0,0}));
            connect(corGDouPan.solarRadWinTrans,thermalZoneOneElement.solRad)
              annotation (Line(points={{1,142},{14,142},{14,101},{17,101}},color={0,0,127}));
            connect(weaBus.TBlaSky,eqAirTemp.TBlaSky)
              annotation (Line(points={{1,300},{-186,300},{-186,74},{-52,74}},color={255,204,51},thickness=0.5),Text(string="%first",index=-1,extent={{6,3},{6,3}},horizontalAlignment=TextAlignment.Left));
            connect(weaBus.TDryBul,eqAirTemp.TDryBul)
              annotation (Line(points={{1,300},{-186,300},{-186,68},{-52,68}},color={255,204,51},thickness=0.5),Text(string="%first",index=-1,extent={{6,3},{6,3}},horizontalAlignment=TextAlignment.Left));
            connect(weaBus,HDifTil[2].weaBus)
              annotation (Line(points={{1,300},{-186,300},{-186,108},{-94,108}},color={255,204,51},thickness=0.5),Text(string="%first",index=-1,extent={{6,3},{6,3}},horizontalAlignment=TextAlignment.Left));
            connect(weaBus,HDirTil[1].weaBus)
              annotation (Line(points={{1,300},{-186,300},{-186,140},{-94,140}},color={255,204,51},thickness=0.5),Text(string="%first",index=-1,extent={{6,3},{6,3}},horizontalAlignment=TextAlignment.Left));
            connect(weaBus,HDirTil[2].weaBus)
              annotation (Line(points={{1,300},{-186,300},{-186,140},{-94,140}},color={255,204,51},thickness=0.5),Text(string="%first",index=-1,extent={{6,3},{6,3}},horizontalAlignment=TextAlignment.Left));
            connect(weaBus,HDifTil[1].weaBus)
              annotation (Line(points={{1,300},{-186,300},{-186,108},{-94,108}},color={255,204,51},thickness=0.5),Text(string="%first",index=-1,extent={{6,3},{6,3}},horizontalAlignment=TextAlignment.Left));
            connect(thermalZoneOneElement.ports[1],terUni.port_aLoa)
              annotation (Line(points={{55.475,68.05},{86.5,68.05},{86.5,-39.6667},{-140,
                    -39.6667}},                                                                     color={0,127,255}));
            connect(terUni.port_bLoa,thermalZoneOneElement.ports[2])
              annotation (Line(points={{-160,-39.6667},{-170,-39.6667},{-170,0},{58.525,0},
                    {58.525,68.05}},                                                                       color={0,127,255}));
            connect(terUni.port_bChiWat,disFloCoo.ports_a1[1])
              annotation (Line(points={{-140,-54.6667},{-40,-54.6667},{-40,-254},{-80,
                    -254}},                                                                                 color={0,127,255}));
            connect(terUni.port_bHeaWat,disFloHea.ports_a1[1])
              annotation (Line(points={{-140,-56.3333},{-60,-56.3333},{-60,-94},{-80,-94}},                  color={0,127,255}));
            connect(disFloHea.ports_b1[1],terUni.port_aHeaWat)
              annotation (Line(points={{-100,-94},{-180,-94},{-180,-56.3333},{-160,
                    -56.3333}},                                                                 color={0,127,255}));
            connect(disFloCoo.ports_b1[1],terUni.port_aChiWat)
              annotation (Line(points={{-100,-254},{-200,-254},{-200,-54.6667},{-160,
                    -54.6667}},                                                                 color={0,127,255}));
            connect(terUni.mReqHeaWat_flow,disFloHea.mReq_flow[1])
              annotation (Line(points={{-139.167,-51.3333},{-139.167,-52},{-120,-52},{
                    -120,-104},{-101,-104}},                                                                  color={0,0,127}));
            connect(terUni.mReqChiWat_flow,disFloCoo.mReq_flow[1])
              annotation (Line(points={{-139.167,-53},{-139.167,-54},{-122,-54},{-122,
                    -264},{-101,-264}},                                                                  color={0,0,127}));
            connect(disFloHea.PPum,mulSum.u[1])
              annotation (Line(points={{-79,-108},{218,-108},{218,81},{238,81}},color={0,0,127}));
            connect(disFloCoo.PPum,mulSum.u[2])
              annotation (Line(points={{-79,-268},{220,-268},{220,79},{238,79}},         color={0,0,127}));
            connect(thermalZoneOneElement.TAir,terUni.TSen)
              annotation (Line(points={{67,102},{80,102},{80,-20},{-180,-20},{-180,
                    -46.3333},{-160.833,-46.3333}},                                                               color={0,0,127}));
            connect(maxTSet.y,terUni.TSetCoo)
              annotation (Line(points={{-258,220},{-240,220},{-240,-44.6667},{-160.833,
                    -44.6667}},                                                                   color={0,0,127}));
            connect(minTSet.y,terUni.TSetHea)
              annotation (Line(points={{-258,260},{-220,260},{-220,-43},{-160.833,-43}},color={0,0,127}));
            connect(TSetSecChi.y,disFloCoo.TSupSet)
              annotation (Line(points={{-238,-220},{-160,-220},{-160,-268},{-101,-268}},color={0,0,127}));
            connect(TSetSecHea.y,disFloHea.TSupSet)
              annotation (Line(points={{-238,-180},{-180,-180},{-180,-108},{-101,-108}},color={0,0,127}));
            connect(mulSum.y, mulPPum.u)
              annotation (Line(points={{262,80},{268,80}}, color={0,0,127}));
            connect(disFloHea.QActTot_flow, mulQHea_flow.u) annotation (Line(points={{-79,
                    -106},{210,-106},{210,280},{268,280}}, color={0,0,127}));
            connect(disFloCoo.QActTot_flow, mulQCoo_flow.u) annotation (Line(points={{-79,
                    -266},{214,-266},{214,240},{268,240}}, color={0,0,127}));
            connect(terUni.PFan, mulPFan.u) annotation (Line(points={{-139.167,-48},{206,
                    -48},{206,120},{268,120}}, color={0,0,127}));
            connect(mulHeaWatInl[1].port_b, disFloHea.port_a) annotation (Line(points={{
                    -260,-60},{-240,-60},{-240,-100},{-100,-100}}, color={0,127,255}));
            connect(mulHeaWatOut[1].port_a, disFloHea.port_b) annotation (Line(points={{
                    260,-60},{240,-60},{240,-100},{-80,-100}}, color={0,127,255}));
            connect(mulChiWatInl[1].port_b, disFloCoo.port_a)
              annotation (Line(points={{-260,-260},{-100,-260}}, color={0,127,255}));
            connect(mulChiWatOut[1].port_a, disFloCoo.port_b)
              annotation (Line(points={{260,-260},{-80,-260}}, color={0,127,255}));
            annotation (
              Documentation(
                info="
<html>
<p>
This is a simplified one-zone building model based on a one-element
reduced order room model.
The corresponding heating and cooling loads are computed with a four-pipe
fan coil unit model derived from
<a href=\"modelica://Buildings.Experimental.DHC.Loads.BaseClasses.PartialTerminalUnit\">
Buildings.Experimental.DHC.Loads.BaseClasses.PartialTerminalUnit</a>
and connected to the room model by means of fluid ports.
</p>
<p>
The heating and chilled water distribution to the terminal units is modeled
with an instance of
<a href=\"modelica://Buildings.Experimental.DHC.Loads.BaseClasses.FlowDistribution\">
Buildings.Experimental.DHC.Loads.BaseClasses.FlowDistribution</a>
including a mixing valve to control the supply temperature.
</p>
</html>",       revisions="<html>
<ul>
<li>
September 16, 2021, by Michael Wetter:<br/>
Removed assignment of parameter <code>lat</code> as this is now obtained from the weather data reader.<br/>
This is for
<a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1477\">IBPSA, #1477</a>.
</li>
<li>
February 21, 2020, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>"));
          end BuildingRCZ1Valve;

          model BuildingRCZ6
            "Six-zone RC building model based on URBANopt GeoJSON export, with distribution pumps"
            extends estcp.DHC.Loads.BaseClasses.PartialBuilding(
              redeclare package Medium = Buildings.Media.Water,
              final have_weaBus=true,
              final have_heaWat=true,
              final have_chiWat=true,
              final have_eleHea=false,
              final have_eleCoo=false,
              final have_fan=false,
              final have_pum=true);
            package Medium2=Buildings.Media.Air
              "Load side medium";
            parameter Integer nZon=6
              "Number of thermal zones";
            parameter Real facMulTerUni[nZon]={15 for i in 1:nZon}
              "Multiplier factor for terminal units";
            parameter Modelica.Units.SI.MassFlowRate mLoa_flow_nominal[nZon]=fill(1, nZon)
              "Load side mass flow rate at nominal conditions"
              annotation (Dialog(group="Nominal condition"));
            parameter Modelica.Units.SI.HeatFlowRate QHea_flow_nominal[nZon]=fill(10000,
                nZon) ./ facMulTerUni "Design heating heat flow rate (>=0)"
              annotation (Dialog(group="Nominal condition"));
            parameter Modelica.Units.SI.HeatFlowRate QCoo_flow_nominal[nZon]=cat(
                1,
                fill(-10000, nZon - 1),
                {-50000}) ./ facMulTerUni "Design cooling heat flow rate (<=0)"
              annotation (Dialog(group="Nominal condition"));
            Buildings.Controls.OBC.CDL.Reals.Sources.Constant minTSet[nZon](
              k=fill(
                293.15,
                nZon),
              y(each final unit="K",
                each displayUnit="degC"))
              "Minimum temperature set point"
              annotation (Placement(transformation(extent={{-290,230},{-270,250}})));
            Buildings.Controls.OBC.CDL.Reals.Sources.Constant maxTSet[nZon](
              k=fill(
                297.15,
                nZon),
              y(each final unit="K",
                each displayUnit="degC"))
              "Maximum temperature set point"
              annotation (Placement(transformation(extent={{-290,190},{-270,210}})));
            estcp.DHC.Loads.BaseClasses.Examples.BaseClasses.GeojsonExportRC.OfficeBuilding.Office
              office annotation (Placement(transformation(extent={{-100,-20},{-80,
                      0}})));
            estcp.DHC.Loads.BaseClasses.Examples.BaseClasses.GeojsonExportRC.OfficeBuilding.Floor
              floor annotation (Placement(transformation(extent={{-60,-20},{-40,
                      0}})));
            estcp.DHC.Loads.BaseClasses.Examples.BaseClasses.GeojsonExportRC.OfficeBuilding.Storage
              storage
              annotation (Placement(transformation(extent={{-20,-20},{0,0}})));
            estcp.DHC.Loads.BaseClasses.Examples.BaseClasses.GeojsonExportRC.OfficeBuilding.Meeting
              meeting
              annotation (Placement(transformation(extent={{20,-20},{40,0}})));
            estcp.DHC.Loads.BaseClasses.Examples.BaseClasses.GeojsonExportRC.OfficeBuilding.Restroom
              restroom
              annotation (Placement(transformation(extent={{60,-20},{80,0}})));
            estcp.DHC.Loads.BaseClasses.Examples.BaseClasses.GeojsonExportRC.OfficeBuilding.ICT
              iCT annotation (Placement(transformation(extent={{100,-20},{120,0}})));
            Buildings.Controls.OBC.CDL.Reals.MultiSum mulSum(
              nin=2)
              annotation (Placement(transformation(extent={{240,70},{260,90}})));
            estcp.DHC.Loads.BaseClasses.Examples.BaseClasses.FanCoil4PipeHeatPorts
              terUni[nZon](
              redeclare each final package Medium1 = Medium,
              redeclare each final package Medium2 = Medium2,
              final facMul=facMulTerUni,
              final QHea_flow_nominal=QHea_flow_nominal,
              final QCoo_flow_nominal=QCoo_flow_nominal,
              each T_aLoaHea_nominal=293.15,
              each T_aLoaCoo_nominal=297.15,
              each T_bHeaWat_nominal=35 + 273.15,
              each T_bChiWat_nominal=12 + 273.15,
              each T_aHeaWat_nominal=40 + 273.15,
              each T_aChiWat_nominal=7 + 273.15,
              each mLoaHea_flow_nominal=5,
              each mLoaCoo_flow_nominal=5) "Terminal unit" annotation (
                Placement(transformation(extent={{-200,-60},{-180,-40}})));
            estcp.DHC.Loads.BaseClasses.FlowDistribution disFloHea(
              redeclare package Medium = Medium,
              m_flow_nominal=sum(terUni.mHeaWat_flow_nominal .* terUni.facMul),

              have_pum=true,
              dp_nominal=100000,
              nPorts_a1=nZon,
              nPorts_b1=nZon) "Heating water distribution system" annotation (
                Placement(transformation(extent={{-140,-110},{-120,-90}})));
            estcp.DHC.Loads.BaseClasses.FlowDistribution disFloCoo(
              redeclare package Medium = Medium,
              m_flow_nominal=sum(terUni.mChiWat_flow_nominal .* terUni.facMul),

              typDis=estcp.DHC.Loads.BaseClasses.Types.DistributionType.ChilledWater,

              have_pum=true,
              dp_nominal=100000,
              nPorts_a1=nZon,
              nPorts_b1=nZon) "Chilled water distribution system" annotation (
                Placement(transformation(extent={{-138,-270},{-118,-250}})));
          equation
            connect(terUni.port_bHeaWat,disFloHea.ports_a1)
              annotation (Line(points={{-180,-58.3333},{-100,-58.3333},{-100,-94},{-120,
                    -94}},                                                                    color={0,127,255}));
            connect(terUni.port_bChiWat,disFloCoo.ports_a1)
              annotation (Line(points={{-180,-56.6667},{-80,-56.6667},{-80,-254},{-118,
                    -254}},                                                                   color={0,127,255}));
            connect(disFloHea.ports_b1,terUni.port_aHeaWat)
              annotation (Line(points={{-140,-94},{-220,-94},{-220,-58.3333},{-200,
                    -58.3333}},                                                               color={0,127,255}));
            connect(disFloCoo.ports_b1,terUni.port_aChiWat)
              annotation (Line(points={{-138,-254},{-224,-254},{-224,-56.6667},{-200,
                    -56.6667}},                                                                 color={0,127,255}));
            connect(weaBus,office.weaBus)
              annotation (Line(points={{1,300},{0,300},{0,20},{-66,20},{-66,-10.2},{-96,-10.2}},color={255,204,51},thickness=0.5),Text(string="%first",index=-1,extent={{6,3},{6,3}},horizontalAlignment=TextAlignment.Left));
            connect(weaBus,floor.weaBus)
              annotation (Line(points={{1,300},{1,160},{0,20},{-56,20},{-56,-10.2}},color={255,204,51},thickness=0.5),Text(string="%first",index=-1,extent={{-3,6},{-3,6}},horizontalAlignment=TextAlignment.Right));
            connect(weaBus,storage.weaBus)
              annotation (Line(points={{1,300},{0,300},{0,-10.2},{-16,-10.2}},color={255,204,51},thickness=0.5),Text(string="%first",index=-1,extent={{6,3},{6,3}},horizontalAlignment=TextAlignment.Left));
            connect(weaBus,meeting.weaBus)
              annotation (Line(points={{1,300},{1,20},{24,20},{24,-10.2}},color={255,204,51},thickness=0.5),Text(string="%first",index=-1,extent={{-3,6},{-3,6}},horizontalAlignment=TextAlignment.Right));
            connect(weaBus,restroom.weaBus)
              annotation (Line(points={{1,300},{2,300},{2,20},{68,20},{68,-10.2},{64,-10.2}},color={255,204,51},thickness=0.5),Text(string="%first",index=-1,extent={{6,3},{6,3}},horizontalAlignment=TextAlignment.Left));
            connect(weaBus,iCT.weaBus)
              annotation (Line(points={{1,300},{0,300},{0,19.8},{104,19.8},{104,-10.2}},color={255,204,51},thickness=0.5),Text(string="%first",index=-1,extent={{-6,3},{-6,3}},horizontalAlignment=TextAlignment.Right));
            connect(terUni[1].heaPorCon,office.port_a)
              annotation (Line(points={{-193.333,-50},{-192,-50},{-192,0},{-90,0}},color={191,0,0}));
            connect(terUni[2].heaPorCon,floor.port_a)
              annotation (Line(points={{-193.333,-50},{-192,-50},{-192,0},{-50,0}},color={191,0,0}));
            connect(terUni[3].heaPorCon,storage.port_a)
              annotation (Line(points={{-193.333,-50},{-192,-50},{-192,0},{-10,0}},color={191,0,0}));
            connect(terUni[4].heaPorCon,meeting.port_a)
              annotation (Line(points={{-193.333,-50},{-192,-50},{-192,0},{30,0}},color={191,0,0}));
            connect(terUni[5].heaPorCon,restroom.port_a)
              annotation (Line(points={{-193.333,-50},{-192,-50},{-192,0},{70,0}},color={191,0,0}));
            connect(terUni[6].heaPorCon,iCT.port_a)
              annotation (Line(points={{-193.333,-50},{-192,-50},{-192,0},{110,0}},color={191,0,0}));
            connect(terUni[1].heaPorRad,office.port_a)
              annotation (Line(points={{-186.667,-50},{-90,-50},{-90,0}},color={191,0,0}));
            connect(terUni[2].heaPorRad,floor.port_a)
              annotation (Line(points={{-186.667,-50},{-50,-50},{-50,0}},color={191,0,0}));
            connect(terUni[3].heaPorRad,storage.port_a)
              annotation (Line(points={{-186.667,-50},{-10,-50},{-10,0}},color={191,0,0}));
            connect(terUni[4].heaPorRad,meeting.port_a)
              annotation (Line(points={{-186.667,-50},{30,-50},{30,0}},color={191,0,0}));
            connect(terUni[5].heaPorRad,restroom.port_a)
              annotation (Line(points={{-186.667,-50},{70,-50},{70,0}},color={191,0,0}));
            connect(terUni[6].heaPorRad,iCT.port_a)
              annotation (Line(points={{-186.667,-50},{110,-50},{110,0}},color={191,0,0}));
            connect(terUni.mReqHeaWat_flow,disFloHea.mReq_flow)
              annotation (Line(points={{-179.167,-53.3333},{-179.167,-54},{-170,-54},{
                    -170,-104},{-141,-104}},                                                                  color={0,0,127}));
            connect(terUni.mReqChiWat_flow,disFloCoo.mReq_flow)
              annotation (Line(points={{-179.167,-55},{-179.167,-56},{-172,-56},{-172,
                    -264},{-139,-264}},                                                                  color={0,0,127}));
            connect(disFloHea.PPum,mulSum.u[1])
              annotation (Line(points={{-119,-108},{224,-108},{224,81},{238,81}},color={0,0,127}));
            connect(disFloCoo.PPum,mulSum.u[2])
              annotation (Line(points={{-117,-268},{226,-268},{226,79},{238,79}},color={0,0,127}));
            connect(maxTSet.y,terUni.TSetCoo)
              annotation (Line(points={{-268,200},{-240,200},{-240,-46.6667},{-200.833,
                    -46.6667}},                                                                   color={0,0,127}));
            connect(minTSet.y,terUni.TSetHea)
              annotation (Line(points={{-268,240},{-220,240},{-220,-45},{-200.833,-45}},color={0,0,127}));
            connect(disFloHea.QActTot_flow, mulQHea_flow.u) annotation (Line(points={{-119,
                    -106},{220,-106},{220,280},{268,280}},    color={0,0,127}));
            connect(disFloCoo.QActTot_flow, mulQCoo_flow.u) annotation (Line(points={{-117,
                    -266},{222,-266},{222,240},{268,240}},      color={0,0,127}));
            connect(mulPPum.u, mulSum.y)
              annotation (Line(points={{268,80},{262,80}}, color={0,0,127}));
            connect(mulHeaWatInl[1].port_b, disFloHea.port_a) annotation (Line(points={{-260,
                    -60},{-240,-60},{-240,-100},{-140,-100}}, color={0,127,255}));
            connect(mulHeaWatOut[1].port_a, disFloHea.port_b) annotation (Line(points={{260,
                    -60},{240,-60},{240,-100},{-120,-100}}, color={0,127,255}));
            connect(mulChiWatInl[1].port_b, disFloCoo.port_a)
              annotation (Line(points={{-260,-260},{-138,-260}}, color={0,127,255}));
            connect(mulChiWatOut[1].port_a, disFloCoo.port_b) annotation (Line(points={{260,
                    -260},{70,-260},{70,-260},{-118,-260}}, color={0,127,255}));
            annotation (
              Documentation(
                info="
<html>
<p>
This is a simplified six-zone building model based on two-element reduced order
model.
It was generated from translating a GeoJSON model specified within the URBANopt UI.
The heating and cooling loads are computed with a four-pipe
fan coil unit model derived from
<a href=\"modelica://Buildings.Experimental.DHC.Loads.BaseClasses.PartialTerminalUnit\">
Buildings.Experimental.DHC.Loads.BaseClasses.PartialTerminalUnit</a>
and connected to the room model by means of heat ports.
</p>
</html>",       revisions="<html>
<ul>
<li>
February 21, 2020, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>"));
          end BuildingRCZ6;

          model BuildingSpawnZ1
            "One-zone EnergyPlus building model"
            extends estcp.DHC.Loads.BaseClasses.PartialBuilding(
              redeclare package Medium = Buildings.Media.Water,
              final have_heaWat=true,
              final have_chiWat=true,
              final have_pum=false,
              final have_eleHea=false,
              final have_eleCoo=false);
            package Medium2=Buildings.Media.Air
              "Load side medium";
            parameter Integer nZon=1
              "Number of thermal zones";
            parameter String idfName="modelica://Buildings/Resources/Data/ThermalZones/EnergyPlus_9_6_0/Examples/RefBldgSmallOffice/RefBldgSmallOfficeNew2004_Chicago.idf"
              "Name of the IDF file";
            parameter String epwName="modelica://Buildings/Resources/weatherdata/USA_IL_Chicago-OHare.Intl.AP.725300_TMY3.epw"
              "Name of the weather file";
            parameter String weaName="modelica://Buildings/Resources/weatherdata/USA_IL_Chicago-OHare.Intl.AP.725300_TMY3.mos"
              "Name of the weather file";
            Modelica.Blocks.Sources.Constant qConGai_flow(
              k=0)
              "Convective heat gain"
              annotation (Placement(transformation(extent={{-80,30},{-60,50}})));
            Modelica.Blocks.Sources.Constant qRadGai_flow(
              k=0)
              "Radiative heat gain"
              annotation (Placement(transformation(extent={{-80,70},{-60,90}})));
            Modelica.Blocks.Routing.Multiplex3 multiplex3_1
              annotation (Placement(transformation(extent={{-20,0},{0,20}})));
            Modelica.Blocks.Sources.Constant qLatGai_flow(
              k=0)
              "Latent heat gain"
              annotation (Placement(transformation(extent={{-80,-10},{-60,10}})));
            Buildings.ThermalZones.EnergyPlus_9_6_0.ThermalZone zon(
              redeclare package Medium=Medium2,
              zoneName="Core_ZN",
              nPorts=2)
              "Thermal zone"
              annotation (Placement(transformation(extent={{40,-20},{80,20}})));
            inner Buildings.ThermalZones.EnergyPlus_9_6_0.Building building(
              idfName=Modelica.Utilities.Files.loadResource(
                idfName),
              epwName=Modelica.Utilities.Files.loadResource(
                epwName),
              weaName=Modelica.Utilities.Files.loadResource(
                weaName))
              "Building model"
              annotation (Placement(transformation(extent={{40,60},{60,80}})));
            Buildings.Controls.OBC.CDL.Reals.Sources.Constant minTSet(
              k=293.15,
              y(final unit="K",
                displayUnit="degC"))
              "Minimum temperature set point"
              annotation (Placement(transformation(extent={{-280,250},{-260,270}})));
            Buildings.Controls.OBC.CDL.Reals.Sources.Constant maxTSet(
              k=297.15,
              y(final unit="K",
                displayUnit="degC"))
              "Maximum temperature set point"
              annotation (Placement(transformation(extent={{-280,210},{-260,230}})));
            estcp.DHC.Loads.BaseClasses.Examples.BaseClasses.FanCoil4Pipe terUni(
              redeclare package Medium1 = Medium,
              redeclare package Medium2 = Medium2,
              QHea_flow_nominal=2000,
              QCoo_flow_nominal=-2000,
              T_aLoaHea_nominal=293.15,
              T_aLoaCoo_nominal=297.15,
              T_bHeaWat_nominal=308.15,
              T_bChiWat_nominal=285.15,
              T_aHeaWat_nominal=313.15,
              T_aChiWat_nominal=280.15,
              mLoaHea_flow_nominal=1,
              mLoaCoo_flow_nominal=1) "Terminal unit" annotation (Placement(
                  transformation(extent={{-160,-60},{-140,-40}})));
            estcp.DHC.Loads.BaseClasses.FlowDistribution disFloHea(
              redeclare package Medium = Medium,
              m_flow_nominal=terUni.mHeaWat_flow_nominal,
              dp_nominal=100000,
              nPorts_a1=nZon,
              nPorts_b1=nZon) "Heating water distribution system" annotation (
                Placement(transformation(extent={{-120,-130},{-100,-110}})));
            estcp.DHC.Loads.BaseClasses.FlowDistribution disFloCoo(
              redeclare package Medium = Medium,
              m_flow_nominal=terUni.mChiWat_flow_nominal,
              typDis=estcp.DHC.Loads.BaseClasses.Types.DistributionType.ChilledWater,

              dp_nominal=100000,
              nPorts_a1=nZon,
              nPorts_b1=nZon) "Chilled water distribution system" annotation (
                Placement(transformation(extent={{-120,-270},{-100,-250}})));
          equation
            connect(qRadGai_flow.y,multiplex3_1.u1[1])
              annotation (Line(points={{-59,80},{-40,80},{-40,17},{-22,17}},  color={0,0,127},smooth=Smooth.None));
            connect(qConGai_flow.y,multiplex3_1.u2[1])
              annotation (Line(points={{-59,40},{-48,40},{-48,10},{-22,10}},color={0,0,127},smooth=Smooth.None));
            connect(multiplex3_1.u3[1],qLatGai_flow.y)
              annotation (Line(points={{-22,3},{-40,3},{-40,0},{-59,0}},    color={0,0,127}));
            connect(multiplex3_1.y,zon.qGai_flow)
              annotation (Line(points={{1,10},{38,10}},                  color={0,0,127}));
            connect(zon.ports[1],terUni.port_aLoa)
              annotation (Line(points={{58,-19.1},{62,-19.1},{62,-41.6667},{-140,-41.6667}},color={0,127,255}));
            connect(terUni.port_bHeaWat,disFloHea.ports_a1[1])
              annotation (Line(points={{-140,-58.3333},{-140,-59.5833},{-100,-59.5833},{
                    -100,-114}},                                                                    color={0,127,255}));
            connect(terUni.port_bChiWat,disFloCoo.ports_a1[1])
              annotation (Line(points={{-140,-56.6667},{-80,-56.6667},{-80,-254},{-100,
                    -254}},                                                                   color={0,127,255}));
            connect(disFloHea.ports_b1[1],terUni.port_aHeaWat)
              annotation (Line(points={{-120,-114},{-180,-114},{-180,-58.3333},{-160,
                    -58.3333}},                                                                 color={0,127,255}));
            connect(disFloCoo.ports_b1[1],terUni.port_aChiWat)
              annotation (Line(points={{-120,-254},{-200,-254},{-200,-56.6667},{-160,
                    -56.6667}},                                                                 color={0,127,255}));
            connect(terUni.mReqHeaWat_flow,disFloHea.mReq_flow[1])
              annotation (Line(points={{-139.167,-53.3333},{-126,-53.3333},{-126,-124},{
                    -121,-124}},                                                                    color={0,0,127}));
            connect(terUni.mReqChiWat_flow,disFloCoo.mReq_flow[1])
              annotation (Line(points={{-139.167,-55},{-139.167,-56},{-130,-56},{-130,
                    -264},{-121,-264}},                                                                  color={0,0,127}));
            connect(terUni.port_bLoa,zon.ports[2])
              annotation (Line(points={{-160,-41.6667},{-162,-41.6667},{-162,-24},{58,-24},
                    {58,-19.1},{62,-19.1}},                                                                     color={0,127,255}));
            connect(zon.TAir,terUni.TSen)
              annotation (Line(points={{81,18},{100,18},{100,-32},{-166,-32},{-166,
                    -48.3333},{-160.833,-48.3333}},                                                                   color={0,0,127}));
            connect(maxTSet.y,terUni.TSetCoo)
              annotation (Line(points={{-258,220},{-240,220},{-240,-46.6667},{-160.833,
                    -46.6667}},                                                                   color={0,0,127}));
            connect(minTSet.y,terUni.TSetHea)
              annotation (Line(points={{-258,260},{-220,260},{-220,-45},{-160.833,-45}},color={0,0,127}));
            connect(terUni.PFan, mulPFan.u) annotation (Line(points={{-139.167,-50},{240,
                    -50},{240,120},{268,120}}, color={0,0,127}));
            connect(disFloHea.QActTot_flow, mulQHea_flow.u) annotation (Line(points={{-99,
                    -126},{232,-126},{232,280},{268,280}}, color={0,0,127}));
            connect(disFloCoo.QActTot_flow, mulQCoo_flow.u) annotation (Line(points={{-99,
                    -266},{236,-266},{236,240},{268,240}}, color={0,0,127}));
            connect(mulChiWatInl[1].port_b, disFloCoo.port_a)
              annotation (Line(points={{-260,-260},{-120,-260}}, color={0,127,255}));
            connect(mulChiWatOut[1].port_a, disFloCoo.port_b)
              annotation (Line(points={{260,-260},{-100,-260}}, color={0,127,255}));
            connect(mulHeaWatInl[1].port_b, disFloHea.port_a) annotation (Line(points={{
                    -260,-60},{-240,-60},{-240,-120},{-120,-120}}, color={0,127,255}));
            connect(mulHeaWatOut[1].port_a, disFloHea.port_b) annotation (Line(points={{
                    260,-60},{240,-60},{240,-120},{-100,-120}}, color={0,127,255}));
            annotation (
              Documentation(
                info="
<html>
<p>
This is a simplified one-zone building model based on EnergyPlus
building envelope model.
The heating and cooling loads are computed with a four-pipe
fan coil unit model derived from
<a href=\"modelica://Buildings.Experimental.DHC.Loads.BaseClasses.PartialTerminalUnit\">
Buildings.Experimental.DHC.Loads.BaseClasses.PartialTerminalUnit</a>
and connected to the room model by means of fluid ports.
</p>
</html>",       revisions="<html>
<ul>
<li>
November 15, 2021, by Michael Wetter:<br/>
Added parameter <code>epwName</code>.<br/>
This is for <a href=\"https://github.com/lbl-srg/modelica-buildings/issues/2054\">#2054</a>.
</li>
<li>
February 21, 2020, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>"),    Icon(
                graphics={
                  Bitmap(
                    extent={{-108,-100},{92,100}},
                    fileName="modelica://Buildings/Resources/Images/ThermalZones/EnergyPlus_9_6_0/EnergyPlusLogo.png")}));
          end BuildingSpawnZ1;

          model BuildingSpawnZ6
            "Six-zone EnergyPlus building model based on URBANopt GeoJSON export, with distribution pumps"
            extends estcp.DHC.Loads.BaseClasses.PartialBuilding(
              redeclare package Medium = Buildings.Media.Water,
              final have_heaWat=true,
              final have_chiWat=true,
              final have_eleHea=false,
              final have_eleCoo=false,
              final have_pum=true,
              final have_weaBus=false);
            package Medium2=Buildings.Media.Air
              "Medium model";
            parameter Integer nZon=5
              "Number of conditioned thermal zones";
            parameter Real facMulTerUni[nZon]={5 for i in 1:nZon}
              "Multiplier factor for terminal units";
            parameter Modelica.Units.SI.MassFlowRate mLoa_flow_nominal[nZon]=fill(1, nZon)
              "Load side mass flow rate at nominal conditions (single terminal unit)"
              annotation (Dialog(group="Nominal condition"));
            parameter Modelica.Units.SI.HeatFlowRate QHea_flow_nominal[nZon]=fill(2000,
                nZon) ./ facMulTerUni
              "Design heating heat flow rate (single terminal unit)"
              annotation (Dialog(group="Nominal condition"));
            parameter Modelica.Units.SI.HeatFlowRate QCoo_flow_nominal[nZon]=fill(-2000,
                nZon) ./ facMulTerUni
              "Design cooling heat flow rate (single terminal unit)"
              annotation (Dialog(group="Nominal condition"));
            parameter String idfName="modelica://Buildings/Resources/Data/ThermalZones/EnergyPlus_9_6_0/Examples/RefBldgSmallOffice/RefBldgSmallOfficeNew2004_Chicago.idf"
              "Name of the IDF file";
            parameter String epwName="modelica://Buildings/Resources/weatherdata/USA_IL_Chicago-OHare.Intl.AP.725300_TMY3.epw"
              "Name of the weather file";
            parameter String weaName="modelica://Buildings/Resources/weatherdata/USA_IL_Chicago-OHare.Intl.AP.725300_TMY3.mos"
              "Name of the weather file";
            Buildings.Controls.OBC.CDL.Reals.Sources.Constant minTSet[nZon](
              k=fill(
                293.15,
                nZon),
              y(each final unit="K",
                each displayUnit="degC"))
              "Minimum temperature set point"
              annotation (Placement(transformation(extent={{-280,250},{-260,270}})));
            Buildings.Controls.OBC.CDL.Reals.Sources.Constant maxTSet[nZon](
              k=fill(
                297.15,
                nZon),
              y(each final unit="K",
                each displayUnit="degC"))
              "Maximum temperature set point"
              annotation (Placement(transformation(extent={{-280,210},{-260,230}})));
            Modelica.Blocks.Sources.Constant qConGai_flow(
              k=0)
              "Convective heat gain"
              annotation (Placement(transformation(extent={{-60,104},{-40,124}})));
            Modelica.Blocks.Sources.Constant qRadGai_flow(
              k=0)
              "Radiative heat gain"
              annotation (Placement(transformation(extent={{-60,144},{-40,164}})));
            Modelica.Blocks.Routing.Multiplex3 multiplex3_1
              annotation (Placement(transformation(extent={{-20,104},{0,124}})));
            Modelica.Blocks.Sources.Constant qLatGai_flow(
              k=0)
              "Latent heat gain"
              annotation (Placement(transformation(extent={{-60,64},{-40,84}})));
            Buildings.ThermalZones.EnergyPlus_9_6_0.ThermalZone znAttic(
              redeclare package Medium=Medium2,
              zoneName="Attic")
              "Thermal zone"
              annotation (Placement(transformation(extent={{24,84},{64,124}})));
            Buildings.ThermalZones.EnergyPlus_9_6_0.ThermalZone znCore_ZN(
              redeclare package Medium=Medium2,
              zoneName="Core_ZN",
              nPorts=2)
              "Thermal zone"
              annotation (Placement(transformation(extent={{24,42},{64,82}})));
            Buildings.ThermalZones.EnergyPlus_9_6_0.ThermalZone znPerimeter_ZN_1(
              redeclare package Medium=Medium2,
              zoneName="Perimeter_ZN_1",
              nPorts=2)
              "Thermal zone"
              annotation (Placement(transformation(extent={{24,0},{64,40}})));
            Buildings.ThermalZones.EnergyPlus_9_6_0.ThermalZone znPerimeter_ZN_2(
              redeclare package Medium=Medium2,
              zoneName="Perimeter_ZN_2",
              nPorts=2)
              "Thermal zone"
              annotation (Placement(transformation(extent={{24,-40},{64,0}})));
            Buildings.ThermalZones.EnergyPlus_9_6_0.ThermalZone znPerimeter_ZN_3(
              redeclare package Medium=Medium2,
              zoneName="Perimeter_ZN_3",
              nPorts=2)
              "Thermal zone"
              annotation (Placement(transformation(extent={{24,-80},{64,-40}})));
            Buildings.ThermalZones.EnergyPlus_9_6_0.ThermalZone znPerimeter_ZN_4(
              redeclare package Medium=Medium2,
              zoneName="Perimeter_ZN_4",
              nPorts=2)
              "Thermal zone"
              annotation (Placement(transformation(extent={{24,-120},{64,-80}})));
            inner Buildings.ThermalZones.EnergyPlus_9_6_0.Building building(
              idfName=Modelica.Utilities.Files.loadResource(
                idfName),
              epwName=Modelica.Utilities.Files.loadResource(
                epwName),
              weaName=Modelica.Utilities.Files.loadResource(
                weaName))
              "Building outer component"
              annotation (Placement(transformation(extent={{30,138},{52,158}})));
            Buildings.Controls.OBC.CDL.Reals.MultiSum mulSum(
              final nin=nZon)
              annotation (Placement(transformation(extent={{230,110},{250,130}})));
            Buildings.Controls.OBC.CDL.Reals.MultiSum mulSum3(
              nin=2)
              annotation (Placement(transformation(extent={{230,70},{250,90}})));
            estcp.DHC.Loads.BaseClasses.Examples.BaseClasses.FanCoil4Pipe terUni[nZon](
              redeclare each final package Medium1 = Medium,
              redeclare each final package Medium2 = Medium2,
              final facMul=facMulTerUni,
              final QHea_flow_nominal=QHea_flow_nominal,
              final QCoo_flow_nominal=QCoo_flow_nominal,
              each T_aLoaHea_nominal=293.15,
              each T_aLoaCoo_nominal=297.15,
              each T_bHeaWat_nominal=308.15,
              each T_bChiWat_nominal=285.15,
              each T_aHeaWat_nominal=313.15,
              each T_aChiWat_nominal=280.15,
              final mLoaHea_flow_nominal=mLoa_flow_nominal,
              final mLoaCoo_flow_nominal=mLoa_flow_nominal) "Terminal unit"
              annotation (Placement(transformation(extent={{-140,-2},{-116,22}})));
            estcp.DHC.Loads.BaseClasses.FlowDistribution disFloHea(
              redeclare package Medium = Medium,
              m_flow_nominal=sum(terUni.mHeaWat_flow_nominal .* terUni.facMul),

              have_pum=true,
              dp_nominal=100000,
              nPorts_a1=nZon,
              nPorts_b1=nZon) "Heating water distribution system" annotation (
                Placement(transformation(extent={{-200,-190},{-180,-170}})));
            estcp.DHC.Loads.BaseClasses.FlowDistribution disFloCoo(
              redeclare package Medium = Medium,
              m_flow_nominal=sum(terUni.mChiWat_flow_nominal .* terUni.facMul),

              typDis=estcp.DHC.Loads.BaseClasses.Types.DistributionType.ChilledWater,

              have_pum=true,
              dp_nominal=100000,
              nPorts_a1=nZon,
              nPorts_b1=nZon) "Chilled water distribution system" annotation (
                Placement(transformation(extent={{-198,-270},{-178,-250}})));
          equation
            connect(qRadGai_flow.y,multiplex3_1.u1[1])
              annotation (Line(points={{-39,154},{-26,154},{-26,121},{-22,121}},color={0,0,127},smooth=Smooth.None));
            connect(qConGai_flow.y,multiplex3_1.u2[1])
              annotation (Line(points={{-39,114},{-22,114}},color={0,0,127},smooth=Smooth.None));
            connect(multiplex3_1.u3[1],qLatGai_flow.y)
              annotation (Line(points={{-22,107},{-26,107},{-26,74},{-39,74}},  color={0,0,127}));
            connect(multiplex3_1.y,znAttic.qGai_flow)
              annotation (Line(points={{1,114},{22,114}},                  color={0,0,127}));
            connect(multiplex3_1.y,znCore_ZN.qGai_flow)
              annotation (Line(points={{1,114},{12,114},{12,72},{22,72}},color={0,0,127}));
            connect(multiplex3_1.y,znPerimeter_ZN_1.qGai_flow)
              annotation (Line(points={{1,114},{12,114},{12,30},{22,30}},color={0,0,127}));
            connect(multiplex3_1.y,znPerimeter_ZN_2.qGai_flow)
              annotation (Line(points={{1,114},{12,114},{12,-10},{22,-10}},color={0,0,127}));
            connect(multiplex3_1.y,znPerimeter_ZN_3.qGai_flow)
              annotation (Line(points={{1,114},{12,114},{12,-50},{22,-50}},color={0,0,127}));
            connect(multiplex3_1.y,znPerimeter_ZN_4.qGai_flow)
              annotation (Line(points={{1,114},{12,114},{12,-90},{22,-90}},color={0,0,127}));
            connect(znCore_ZN.ports[1],terUni[1].port_aLoa)
              annotation (Line(points={{42,42.9},{-8,42.9},{-8,20},{-116,20}},color={0,127,255}));
            connect(terUni[1].port_bLoa,znCore_ZN.ports[2])
              annotation (Line(points={{-140,20},{-20,20},{-20,42.9},{46,42.9}},color={0,127,255}));
            connect(znPerimeter_ZN_1.ports[1],terUni[2].port_aLoa)
              annotation (Line(points={{42,0.9},{-8,0.9},{-8,20},{-116,20}},color={0,127,255}));
            connect(terUni[2].port_bLoa,znPerimeter_ZN_1.ports[2])
              annotation (Line(points={{-140,20},{-20,20},{-20,0.9},{46,0.9}},color={0,127,255}));
            connect(znPerimeter_ZN_2.ports[1],terUni[3].port_aLoa)
              annotation (Line(points={{42,-39.1},{-8,-39.1},{-8,20},{-116,20}},color={0,127,255}));
            connect(terUni[3].port_bLoa,znPerimeter_ZN_2.ports[2])
              annotation (Line(points={{-140,20},{-20,20},{-20,-39.1},{46,-39.1}},color={0,127,255}));
            connect(znPerimeter_ZN_3.ports[1],terUni[4].port_aLoa)
              annotation (Line(points={{42,-79.1},{-8,-79.1},{-8,20},{-116,20}},color={0,127,255}));
            connect(terUni[4].port_bLoa,znPerimeter_ZN_3.ports[2])
              annotation (Line(points={{-140,20},{-20,20},{-20,-79.1},{46,-79.1}},color={0,127,255}));
            connect(znPerimeter_ZN_4.ports[1],terUni[5].port_aLoa)
              annotation (Line(points={{42,-119.1},{-8,-119.1},{-8,20},{-116,20}},color={0,127,255}));
            connect(terUni[5].port_bLoa,znPerimeter_ZN_4.ports[2])
              annotation (Line(points={{-140,20},{-20,20},{-20,-119.1},{46,-119.1}},color={0,127,255}));
            connect(terUni.port_bHeaWat,disFloHea.ports_a1)
              annotation (Line(points={{-116,0},{-116,-174},{-180,-174}},       color={0,127,255}));
            connect(disFloHea.ports_b1,terUni.port_aHeaWat)
              annotation (Line(points={{-200,-174},{-226,-174},{-226,0},{-140,0}},color={0,127,255}));
            connect(disFloCoo.ports_b1,terUni.port_aChiWat)
              annotation (Line(points={{-198,-254},{-216,-254},{-216,2},{-140,2}},color={0,127,255}));
            connect(terUni.port_bChiWat,disFloCoo.ports_a1)
              annotation (Line(points={{-116,2},{-116,-8},{-124,-8},{-124,-254},{-178,-254}},
                                                                                color={0,127,255}));
            connect(terUni.mReqChiWat_flow,disFloCoo.mReq_flow)
              annotation (Line(points={{-115,4},{-102,4},{-102,-234},{-210,-234},{-210,-264},
                    {-199,-264}},                                                                       color={0,0,127}));
            connect(terUni.mReqHeaWat_flow,disFloHea.mReq_flow)
              annotation (Line(points={{-115,6},{-100,6},{-100,-88},{-220,-88},{-220,-184},
                    {-201,-184}},                                                               color={0,0,127}));
            connect(terUni.PFan,mulSum.u)
              annotation (Line(points={{-115,10},{-100,10},{-100,220},{216,220},{216,120},
                    {228,120}},                                                                      color={0,0,127}));
            connect(disFloHea.PPum,mulSum3.u[1])
              annotation (Line(points={{-179,-188},{220,-188},{220,81},{228,81}},    color={0,0,127}));
            connect(disFloCoo.PPum,mulSum3.u[2])
              annotation (Line(points={{-177,-268},{-116,-268},{-116,-188},{220,-188},{220,
                    79},{228,79}},                                               color={0,0,127}));
            connect(znCore_ZN.TAir,terUni[1].TSen)
              annotation (Line(points={{65,80},{80,80},{80,198},{-152,198},{-152,12},{
                    -141,12}},                                                                            color={0,0,127}));
            connect(znPerimeter_ZN_1.TAir,terUni[2].TSen)
              annotation (Line(points={{65,38},{80,38},{80,198},{-152,198},{-152,12},{
                    -141,12}},                                                                                      color={0,0,127}));
            connect(znPerimeter_ZN_2.TAir,terUni[3].TSen)
              annotation (Line(points={{65,-2},{80,-2},{80,-140},{-152,-140},{-152,12},{-141,
                    12}},                                                                             color={0,0,127}));
            connect(znPerimeter_ZN_3.TAir,terUni[4].TSen)
              annotation (Line(points={{65,-42},{80,-42},{80,-140},{-152,-140},{-152,12},{
                    -141,12}},                                                                          color={0,0,127}));
            connect(znPerimeter_ZN_4.TAir,terUni[5].TSen)
              annotation (Line(points={{65,-82},{80,-82},{80,-140},{-152,-140},{-152,12},{
                    -141,12}},                                                                          color={0,0,127}));
            connect(maxTSet.y,terUni.TSetCoo)
              annotation (Line(points={{-258,220},{-200,220},{-200,14},{-141,14}},color={0,0,127}));
            connect(minTSet.y,terUni.TSetHea)
              annotation (Line(points={{-258,260},{-180,260},{-180,16},{-141,16}},color={0,0,127}));
            connect(disFloHea.QActTot_flow, mulQHea_flow.u) annotation (Line(points={{-179,
                    -186},{212,-186},{212,280},{268,280}}, color={0,0,127}));
            connect(mulSum3.y, mulPPum.u)
              annotation (Line(points={{252,80},{268,80}}, color={0,0,127}));
            connect(mulSum.y, mulPFan.u)
              annotation (Line(points={{252,120},{268,120}}, color={0,0,127}));
            connect(disFloCoo.QActTot_flow, mulQCoo_flow.u) annotation (Line(points={{-177,
                    -266},{-108,-266},{-108,-176},{216,-176},{216,128},{220,128},{220,240},
                    {268,240}},                                 color={0,0,127}));
            connect(mulHeaWatInl[1].port_b, disFloHea.port_a) annotation (Line(points={{-260,
                    -60},{-240,-60},{-240,-180},{-200,-180}}, color={0,127,255}));
            connect(mulChiWatInl[1].port_b, disFloCoo.port_a)
              annotation (Line(points={{-260,-260},{-198,-260}}, color={0,127,255}));
            connect(mulChiWatOut[1].port_a, disFloCoo.port_b)
              annotation (Line(points={{260,-260},{-178,-260}}, color={0,127,255}));
            connect(mulHeaWatOut[1].port_a, disFloHea.port_b) annotation (Line(points={{260,
                    -60},{240,-60},{240,-180},{-180,-180}}, color={0,127,255}));
            annotation (
              Documentation(
                info="
<html>
<p>
This is a simplified six-zone building model based on an EnergyPlus
building envelope model.
It was generated from translating a GeoJSON model specified within the URBANopt UI.
The heating and cooling loads are computed with a four-pipe
fan coil unit model derived from
<a href=\"modelica://Buildings.Experimental.DHC.Loads.BaseClasses.PartialTerminalUnit\">
Buildings.Experimental.DHC.Loads.BaseClasses.PartialTerminalUnit</a>
and connected to the room model by means of fluid ports. The <code>Attic</code> zone
is unconditionned, with a free floating temperature.
</p>
</html>",       revisions="<html>
<ul>
<li>
November 15, 2021, by Michael Wetter:<br/>
Added parameter <code>epwName</code>.<br/>
This is for <a href=\"https://github.com/lbl-srg/modelica-buildings/issues/2054\">#2054</a>.
</li>
<li>
February 21, 2020, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>"),    Icon(
                graphics={
                  Bitmap(
                    extent={{-108,-100},{92,100}},
                    fileName="modelica://Buildings/Resources/Images/ThermalZones/EnergyPlus_9_6_0/EnergyPlusLogo.png")}));
          end BuildingSpawnZ6;

          model BuildingTimeSeries
            "Building model with heating and/or cooling loads provided as time series"
            extends estcp.DHC.Loads.BaseClasses.PartialBuilding(
              redeclare package Medium = Buildings.Media.Water,
              have_heaWat=true,
              have_chiWat=true,
              final have_fan=false,
              final have_pum=true,
              final have_eleHea=false,
              final have_eleCoo=false,
              final have_weaBus=false);
            replaceable package Medium2=Buildings.Media.Air
              constrainedby Modelica.Media.Interfaces.PartialMedium
              "Load side medium";
            parameter Boolean have_hotWat = false
              "Set to true if SHW load is included in the time series"
              annotation (Evaluate=true, Dialog(group="Configuration"));
            parameter String filNam
              "File name with thermal loads as time series";
            parameter Real facMulHea(min=0)=QHea_flow_nominal /
              (QHea_flow_nominal_ref * abs(T_aLoaHea_nominal - T_aHeaWat_nominal) /
               abs(T_aLoaHea_nominal_ref - T_aHeaWat_nominal_ref) *
               mLoaHea_flow_nominal / mLoaHea_flow_nominal_ref)
              "Heating terminal unit multiplier factor"
              annotation(Dialog(enable=have_heaWat, group="Scaling", tab="Advanced"));
            parameter Real facMulCoo(min=0)=QCoo_flow_nominal /
              (QCoo_flow_nominal_ref * abs(h_aLoaCoo_nominal - hSat_nominal) /
               abs(h_aLoaCoo_nominal_ref - hSat_nominal_ref) *
               mLoaCoo_flow_nominal / mLoaCoo_flow_nominal_ref)
              "Cooling terminal unit scaling factor"
              annotation(Dialog(enable=have_chiWat, group="Scaling", tab="Advanced"));
            parameter Modelica.Units.SI.Temperature T_aHeaWat_nominal=323.15
              "Heating water inlet temperature at nominal conditions"
              annotation (Dialog(group="Nominal condition", enable=have_heaWat));
            parameter Modelica.Units.SI.Temperature T_bHeaWat_nominal(
              min=273.15,
              displayUnit="degC") = T_aHeaWat_nominal - 10
              "Heating water outlet temperature at nominal conditions"
              annotation (Dialog(group="Nominal condition", enable=have_heaWat));
            parameter Modelica.Units.SI.Temperature T_aChiWat_nominal=280.15
              "Chilled water inlet temperature at nominal conditions "
              annotation (Dialog(group="Nominal condition", enable=have_chiWat));
            parameter Modelica.Units.SI.Temperature T_bChiWat_nominal(
              min=273.15,
              displayUnit="degC") = T_aChiWat_nominal + 5
              "Chilled water outlet temperature at nominal conditions"
              annotation (Dialog(group="Nominal condition", enable=have_chiWat));
            parameter Modelica.Units.SI.Temperature T_aLoaHea_nominal=293.15
              "Load side inlet temperature at nominal conditions in heating mode"
              annotation (Dialog(group="Nominal condition", tab="Advanced"));
            parameter Modelica.Units.SI.Temperature T_aLoaCoo_nominal=298.15
              "Load side inlet temperature at nominal conditions in cooling mode"
              annotation (Dialog(group="Nominal condition", tab="Advanced", enable=have_chiWat));
            parameter Modelica.Units.SI.MassFraction w_aLoaCoo_nominal=0.01
              "Load side inlet humidity ratio at nominal conditions in cooling mode"
              annotation (Dialog(group="Nominal condition", tab="Advanced", enable=have_chiWat));
            parameter Modelica.Units.SI.MassFlowRate mLoaHea_flow_nominal(min=Modelica.Constants.eps)=0.5
              "Load side mass flow rate at nominal conditions in heating mode (single unit)"
              annotation (Dialog(group="Nominal condition", tab="Advanced", enable=have_heaWat));
            parameter Modelica.Units.SI.MassFlowRate mLoaCoo_flow_nominal(min=Modelica.Constants.eps)=
              mLoaHea_flow_nominal
              "Load side mass flow rate at nominal conditions in cooling mode (single unit)"
              annotation (Dialog(group="Nominal condition", tab="Advanced", enable=have_chiWat));

            parameter Modelica.Units.SI.Temperature T_aHeaWat_nominal_ref=323.15
              "Heating water inlet temperature at nominal conditions of reference terminal unit"
              annotation(Dialog(enable=have_heaWat, group="Reference terminal unit performance", tab="Advanced"));
            parameter Modelica.Units.SI.Temperature T_aLoaHea_nominal_ref=293.15
              "Load side inlet temperature at nominal conditions in heating mode of reference terminal unit"
              annotation(Dialog(enable=have_heaWat, group="Reference terminal unit performance", tab="Advanced"));
            parameter Modelica.Units.SI.MassFlowRate mLoaHea_flow_nominal_ref(min=Modelica.Constants.eps) = 0.5
              "Load side mass flow rate at nominal conditions in heating mode of reference terminal unit"
              annotation(Dialog(enable=have_heaWat, group="Reference terminal unit performance", tab="Advanced"));
            parameter Modelica.Units.SI.HeatFlowRate QHea_flow_nominal_ref(min=Modelica.Constants.eps) = 4.5E3
              "Heat flow at nominal conditions in heating mode of reference terminal unit"
              annotation(Dialog(enable=have_heaWat, group="Reference terminal unit performance", tab="Advanced"));

            parameter Modelica.Units.SI.Temperature T_aChiWat_nominal_ref=279.15
              "Chilled water inlet temperature at nominal conditions of reference terminal unit"
              annotation(Dialog(enable=have_chiWat, group="Reference terminal unit performance", tab="Advanced"));
            parameter Modelica.Units.SI.Temperature T_aLoaCoo_nominal_ref=298.15
              "Load side inlet temperature at nominal conditions in cooling mode of reference terminal unit"
              annotation(Dialog(enable=have_chiWat, group="Reference terminal unit performance", tab="Advanced"));
            parameter Modelica.Units.SI.MassFraction w_aLoaCoo_nominal_ref=0.01
              "Load side inlet humidity ratio at nominal conditions in cooling mode of reference terminal unit"
              annotation(Dialog(enable=have_chiWat, group="Reference terminal unit performance", tab="Advanced"));
            parameter Modelica.Units.SI.MassFlowRate mLoaCoo_flow_nominal_ref(min=Modelica.Constants.eps) = 0.5
              "Load side mass flow rate at nominal conditions in cooling mode of reference terminal unit"
              annotation(Dialog(enable=have_chiWat, group="Reference terminal unit performance", tab="Advanced"));
            parameter Modelica.Units.SI.HeatFlowRate QCoo_flow_nominal_ref(max=-Modelica.Constants.eps) = -5.8E3
              "Heat flow at nominal conditions in cooling mode of reference terminal unit"
              annotation(Dialog(enable=have_chiWat, group="Reference terminal unit performance", tab="Advanced"));

            parameter Modelica.Units.SI.HeatFlowRate QCoo_flow_nominal(max=0)=
              if have_chiWat then
              estcp.DHC.Loads.BaseClasses.getPeakLoad(                 string=
              "#Peak space cooling load",
              filNam=Modelica.Utilities.Files.loadResource(filNam))
              else 0
              "Design cooling heat flow rate (<=0)"
              annotation (Dialog(group="Nominal condition", enable=have_chiWat));
            parameter Modelica.Units.SI.HeatFlowRate QHea_flow_nominal(min=0)=
              if have_heaWat then
              estcp.DHC.Loads.BaseClasses.getPeakLoad(                 string=
              "#Peak space heating load",
              filNam=Modelica.Utilities.Files.loadResource(filNam))
              else 0
              "Design heating heat flow rate (>=0)"
              annotation (Dialog(group="Nominal condition"));
            parameter Modelica.Units.SI.MassFlowRate mChiWat_flow_nominal(min=0)=
                QCoo_flow_nominal/cp_default/(T_aChiWat_nominal - T_bChiWat_nominal)
              "Chilled water mass flow rate at nominal conditions (all units)"
              annotation (Dialog(group="Nominal condition"));
            parameter Modelica.Units.SI.MassFlowRate mHeaWat_flow_nominal(min=0)=
                QHea_flow_nominal/cp_default/(T_aHeaWat_nominal - T_bHeaWat_nominal)
              "Heating water mass flow rate at nominal conditions (all units)"
              annotation (Dialog(group="Nominal condition"));
            parameter Real k(
              min=0)=0.1
              "Gain of controller";
            parameter Modelica.Units.SI.Time Ti(min=Modelica.Constants.small) = 10
              "Time constant of integrator block";

            Buildings.Controls.OBC.CDL.Interfaces.RealOutput QReqHotWat_flow(
              final unit="W") if have_hotWat
              "SHW load" annotation (Placement(
                transformation(extent={{300,-140},{340,-100}}), iconTransformation(
                extent={{-40,-40},{40,40}},
                rotation=-90,
                origin={280,-340})));
            Buildings.Controls.OBC.CDL.Interfaces.RealOutput QReqHea_flow(
              final quantity="HeatFlowRate",
              final unit="W") if have_heaLoa
              "Heating load"
              annotation (Placement(transformation(extent={{300,20},{340,60}}),
                iconTransformation(extent={{-40,-40},{40,40}},rotation=-90,origin={200,-340})));
            Buildings.Controls.OBC.CDL.Interfaces.RealOutput QReqCoo_flow(
              final quantity="HeatFlowRate",
              final unit="W") if have_cooLoa
              "Cooling load"
              annotation (Placement(transformation(extent={{300,-20},{340,20}}),
                iconTransformation(extent={{-40,-40},{40,40}},rotation=-90,origin={240,-340})));
            Modelica.Blocks.Sources.CombiTimeTable loa(
              tableOnFile=true,
              tableName="tab1",
              fileName=Modelica.Utilities.Files.loadResource(
                filNam),
              extrapolation=Modelica.Blocks.Types.Extrapolation.Periodic,
              y(each unit="W"),
              offset={0,0,0},
              columns={2,3,4},
              smoothness=Modelica.Blocks.Types.Smoothness.MonotoneContinuousDerivative1)
              "Reader for thermal loads (y[1] is cooling load, y[2] is space heating load, y[3] is domestic water heat load)"
              annotation (Placement(transformation(extent={{-280,-10},{-260,10}})));
            Buildings.Controls.OBC.CDL.Reals.Sources.Constant minTSet(
              k=293.15,
              y(final unit="K",
                displayUnit="degC"))
              if have_heaWat
              "Minimum temperature set point"
              annotation (Placement(transformation(extent={{-280,170},{-260,190}})));
            Buildings.Controls.OBC.CDL.Reals.Sources.Constant maxTSet(
              k=297.15,
              y(final unit="K",
                displayUnit="degC"))
              if have_chiWat
              "Maximum temperature set point"
              annotation (Placement(transformation(extent={{-280,210},{-260,230}})));
            replaceable
              estcp.DHC.Loads.BaseClasses.Validation.BaseClasses.FanCoil2PipeHeating
              terUniHea(final k=k, final Ti=Ti) if have_heaWat constrainedby
              estcp.DHC.Loads.BaseClasses.PartialTerminalUnit(
              redeclare final package Medium1 = Medium,
              redeclare final package Medium2 = Medium2,
              final allowFlowReversal=allowFlowReversal,
              final facMul=facMulHea,
              final facMulZon=1,
              final QHea_flow_nominal=QHea_flow_nominal/facMulHea,
              final mLoaHea_flow_nominal=mLoaHea_flow_nominal,
              final T_aHeaWat_nominal=T_aHeaWat_nominal,
              final T_bHeaWat_nominal=T_bHeaWat_nominal,
              final T_aLoaHea_nominal=T_aLoaHea_nominal)
              "Heating terminal unit"
              annotation (Placement(transformation(extent={{70,-22},{90,-2}})));
            estcp.DHC.Loads.BaseClasses.FlowDistribution disFloHea(
              redeclare final package Medium = Medium,
              final allowFlowReversal=allowFlowReversal,
              m_flow_nominal=mHeaWat_flow_nominal,
              have_pum=true,
              typCtr=estcp.DHC.Loads.BaseClasses.Types.PumpControlType.ConstantHead,

              dp_nominal=100000,
              nPorts_a1=1,
              nPorts_b1=1) if have_heaWat "Heating water distribution system"
              annotation (Placement(transformation(extent={{120,-70},{140,-50}})));
            estcp.DHC.Loads.BaseClasses.FlowDistribution disFloCoo(
              redeclare final package Medium = Medium,
              final allowFlowReversal=allowFlowReversal,
              m_flow_nominal=mChiWat_flow_nominal,
              typDis=estcp.DHC.Loads.BaseClasses.Types.DistributionType.ChilledWater,

              have_pum=true,
              typCtr=estcp.DHC.Loads.BaseClasses.Types.PumpControlType.ConstantHead,

              dp_nominal=100000,
              nPorts_b1=1,
              nPorts_a1=1) if have_chiWat "Chilled water distribution system"
              annotation (Placement(transformation(extent={{120,-270},{140,-250}})));
            replaceable
              estcp.DHC.Loads.BaseClasses.Validation.BaseClasses.FanCoil2PipeCooling
              terUniCoo(
              final k=k,
              final Ti=Ti,
              final QEnv_flow_nominal=if have_heaWat then QHea_flow_nominal/
                  facMulHea else -QCoo_flow_nominal/facMulCoo) if have_chiWat
              constrainedby estcp.DHC.Loads.BaseClasses.PartialTerminalUnit(
              redeclare final package Medium1 = Medium,
              redeclare final package Medium2 = Medium2,
              final allowFlowReversal=allowFlowReversal,
              final facMul=facMulCoo,
              final facMulZon=1,
              final QCoo_flow_nominal=QCoo_flow_nominal/facMulCoo,
              final mLoaCoo_flow_nominal=mLoaCoo_flow_nominal,
              final T_aChiWat_nominal=T_aChiWat_nominal,
              final T_bChiWat_nominal=T_bChiWat_nominal,
              final T_aLoaCoo_nominal=T_aLoaCoo_nominal,
              final w_aLoaCoo_nominal=w_aLoaCoo_nominal)
              "Cooling terminal unit"
              annotation (Placement(transformation(extent={{70,36},{90,56}})));
            Buildings.Controls.OBC.CDL.Reals.Add addPPum
              "Sum pump power"
              annotation (Placement(transformation(extent={{240,70},{260,90}})));
            Buildings.Controls.OBC.CDL.Reals.Sources.Constant noCoo(
              k=0) if not have_chiWat
              "No cooling system"
              annotation (Placement(transformation(extent={{130,70},{150,90}})));
            Buildings.Controls.OBC.CDL.Reals.Sources.Constant noHea(
              k=0) if not have_heaWat
              "No heating system"
              annotation (Placement(transformation(extent={{130,110},{150,130}})));
            Buildings.Controls.OBC.CDL.Reals.Add addPFan
              "Sum fan power"
              annotation (Placement(transformation(extent={{240,110},{260,130}})));
            Buildings.Controls.OBC.CDL.Reals.MultiplyByParameter mulQReqHea_flow(
              u(final unit="W"),
              final k=facMul) if have_heaLoa "Scaling"
              annotation (Placement(transformation(extent={{272,30},{292,50}})));
            Buildings.Controls.OBC.CDL.Reals.MultiplyByParameter mulQReqCoo_flow(u(
                  final unit="W"), final k=facMul) if have_cooLoa "Scaling"
              annotation (Placement(transformation(extent={{272,-10},{292,10}})));
            Buildings.Controls.OBC.CDL.Reals.MultiplyByParameter mulQReqHot_flow(u(final
                  unit="W"), final k=facMul) if have_heaLoa "Scaling"
              annotation (Placement(transformation(extent={{270,-130},{290,-110}})));
          protected
            parameter Modelica.Units.SI.AbsolutePressure pSat_nominal=
              Buildings.Utilities.Psychrometrics.Functions.saturationPressure(T_aChiWat_nominal)
              "Saturation pressure at entering water temperature";
            parameter Modelica.Units.SI.AbsolutePressure pSat_nominal_ref=
              Buildings.Utilities.Psychrometrics.Functions.saturationPressure(T_aChiWat_nominal_ref)
              "Saturation pressure at entering water temperature for reference terminal unit";
            parameter Modelica.Units.SI.MassFraction X1_aLoaCoo_nominal=
               w_aLoaCoo_nominal / (1 + w_aLoaCoo_nominal)
               "Water vapor concentration in [kg/kg total air]";
            parameter Modelica.Units.SI.MassFraction X1Sat_nominal=
              Buildings.Utilities.Psychrometrics.Functions.X_pSatpphi(
                pSat=pSat_nominal, p=Medium2.p_default, phi=1.0)
              "Water vapor concentration at saturation in [kg/kg total air]";
            parameter Modelica.Units.SI.MassFraction X1_aLoaCoo_nominal_ref=
               w_aLoaCoo_nominal_ref / (1 + w_aLoaCoo_nominal_ref)
               "Water vapor concentration in [kg/kg total air]";
            parameter Modelica.Units.SI.MassFraction X1Sat_nominal_ref=
              Buildings.Utilities.Psychrometrics.Functions.X_pSatpphi(
                pSat=pSat_nominal_ref, p=Medium2.p_default, phi=1.0)
              "Water vapor concentration at saturation in [kg/kg total air]";
            parameter Modelica.Units.SI.SpecificEnthalpy h_aLoaCoo_nominal=
              Buildings.Media.Air.specificEnthalpy_pTX(
                p=Medium2.p_default, T=T_aLoaCoo_nominal, X={X1_aLoaCoo_nominal, 1-X1_aLoaCoo_nominal})
              "Specific enthalpy of enytering air at nominal conditions in cooling mode";
            parameter Modelica.Units.SI.SpecificEnthalpy hSat_nominal=
              Buildings.Media.Air.specificEnthalpy_pTX(
                p=Medium2.p_default, T=T_aChiWat_nominal, X={X1Sat_nominal, 1-X1Sat_nominal})
              "Specific enthalpy of saturated air at entering water temperature in cooling mode";
            parameter Modelica.Units.SI.SpecificEnthalpy h_aLoaCoo_nominal_ref=
              Buildings.Media.Air.specificEnthalpy_pTX(
                p=Medium2.p_default, T=T_aLoaCoo_nominal_ref, X={X1_aLoaCoo_nominal_ref, 1-X1_aLoaCoo_nominal_ref})
              "Specific enthalpy of enytering air at nominal conditions for reference terminal unit";
            parameter Modelica.Units.SI.SpecificEnthalpy hSat_nominal_ref=
              Buildings.Media.Air.specificEnthalpy_pTX(
                p=Medium2.p_default, T=T_aChiWat_nominal_ref, X={X1Sat_nominal_ref, 1-X1Sat_nominal_ref})
              "Specific enthalpy of saturated air at entering water temperature for reference terminal unit";
          initial equation
            if have_chiWat then
              assert(QCoo_flow_nominal < -Modelica.Constants.eps, "QCoo_flow_nominal must be negative.");
              assert(T_aChiWat_nominal - T_bChiWat_nominal < 0, "Temperature difference (T_aChiWat_nominal - T_bChiWat_nominal) has wrong sign.");
            end if;
            if have_heaWat then
              assert(T_aHeaWat_nominal - T_bHeaWat_nominal > 0, "Temperature difference (T_aHeaWat_nominal - T_bHeaWat_nominal) has wrong sign.");
            end if;

          equation
            connect(terUniHea.port_bHeaWat,disFloHea.ports_a1[1])
              annotation (Line(points={{90,-20.3333},{90,-20},{146,-20},{146,-54},{140,
                    -54}},                                                                   color={0,127,255}));
            connect(disFloHea.ports_b1[1],terUniHea.port_aHeaWat)
              annotation (Line(points={{120,-54},{64,-54},{64,-20.3333},{70,-20.3333}},color={0,127,255}));
            connect(terUniHea.mReqHeaWat_flow,disFloHea.mReq_flow[1])
              annotation (Line(points={{90.8333,-15.3333},{100,-15.3333},{100,-64},{119,
                    -64}},                                                                     color={0,0,127}));
            connect(loa.y[1],terUniCoo.QReqCoo_flow)
              annotation (Line(points={{-259,0},{40,0},{40,42.5},{69.1667,42.5}}, color={0,0,127}));
            connect(loa.y[2],terUniHea.QReqHea_flow)
              annotation (Line(points={{-259,0},{40,0},{40,-13.6667},{69.1667,-13.6667}}, color={0,0,127}));
            connect(disFloCoo.ports_b1[1],terUniCoo.port_aChiWat)
              annotation (Line(points={{120,-254},{60,-254},{60,39.3333},{70,39.3333}},color={0,127,255}));
            connect(terUniCoo.port_bChiWat,disFloCoo.ports_a1[1])
              annotation (Line(points={{90,39.3333},{160,39.3333},{160,-254},{140,-254}}, color={0,127,255}));
            connect(terUniCoo.mReqChiWat_flow,disFloCoo.mReq_flow[1])
              annotation (Line(points={{90.8333,41},{108,41},{108,-264},{119,-264}},color={0,0,127}));
            connect(minTSet.y,terUniHea.TSetHea)
              annotation (Line(points={{-258,180},{-20,180},{-20,-7},{69.1667,-7}}, color={0,0,127}));
            connect(maxTSet.y,terUniCoo.TSetCoo)
              annotation (Line(points={{-258,220},{0,220},{0,49.3333},{69.1667,49.3333}},color={0,0,127}));
            connect(disFloHea.PPum,addPPum.u1)
              annotation (Line(points={{141,-68},{170,-68},{170,86},{238,86}},color={0,0,127}));
            connect(disFloCoo.PPum,addPPum.u2)
              annotation (Line(points={{141,-268},{200,-268},{200,74},{238,74}},color={0,0,127}));
            connect(noHea.y,addPPum.u1)
              annotation (Line(points={{152,120},{170,120},{170,86},{238,86}}, color={0,0,127}));
            connect(noCoo.y,addPPum.u2)
              annotation (Line(points={{152,80},{200,80},{200,74},{238,74}}, color={0,0,127}));
            connect(noHea.y,addPFan.u1)
              annotation (Line(points={{152,120},{180,120},{180,126},{238,126}},
                                                                               color={0,0,127}));
            connect(noCoo.y,addPFan.u2)
              annotation (Line(points={{152,80},{200,80},{200,114},{238,114}},
                                                                             color={0,0,127}));
            connect(terUniCoo.PFan,addPFan.u2)
              annotation (Line(points={{90.8333,46},{160,46},{160,114},{238,114}},color={0,0,127}));
            connect(terUniHea.PFan,addPFan.u1)
              annotation (Line(points={{90.8333,-12},{180,-12},{180,126},{238,126}},color={0,0,127}));
            connect(disFloCoo.port_b, mulChiWatOut[1].port_a)
              annotation (Line(points={{140,-260},{260,-260}}, color={0,127,255}));
            connect(disFloHea.port_b, mulHeaWatOut[1].port_a)
              annotation (Line(points={{140,-60},{260,-60}}, color={0,127,255}));
            connect(mulHeaWatInl[1].port_b, disFloHea.port_a)
              annotation (Line(points={{-260,-60},{120,-60}}, color={0,127,255}));
            connect(mulChiWatInl[1].port_b, disFloCoo.port_a)
              annotation (Line(points={{-260,-260},{120,-260}}, color={0,127,255}));
            connect(addPFan.y, mulPFan.u)
              annotation (Line(points={{262,120},{268,120}}, color={0,0,127}));
            connect(addPPum.y, mulPPum.u)
              annotation (Line(points={{262,80},{268,80}}, color={0,0,127}));
            connect(mulQReqCoo_flow.y, QReqCoo_flow)
              annotation (Line(points={{294,0},{320,0}}, color={0,0,127}));
            connect(mulQReqHea_flow.y, QReqHea_flow)
              annotation (Line(points={{294,40},{320,40}}, color={0,0,127}));
            connect(loa.y[1], mulQReqCoo_flow.u)
              annotation (Line(points={{-259,0},{270,0}}, color={0,0,127}));
            connect(loa.y[2], mulQReqHea_flow.u) annotation (Line(points={{-259,0},{260,0},
                    {260,40},{270,40}}, color={0,0,127}));
            connect(disFloHea.QActTot_flow, mulQHea_flow.u) annotation (Line(points={{141,
                    -66},{220,-66},{220,280},{268,280}}, color={0,0,127}));
            connect(disFloCoo.QActTot_flow, mulQCoo_flow.u) annotation (Line(points={{141,
                    -266},{224,-266},{224,240},{268,240}}, color={0,0,127}));
            connect(mulQReqHot_flow.y, QReqHotWat_flow)
              annotation (Line(points={{292,-120},{320,-120}}, color={0,0,127}));
            connect(mulQReqHot_flow.u, loa.y[3]) annotation (Line(points={{268,-120},{40,-120},
                    {40,0},{-259,0}}, color={0,0,127}));
          annotation (
              Documentation(
                info="<html>
<p>
This is a simplified building model where the space heating and cooling 
loads are provided as time series. In order to approximate the emission 
characteristic of the building HVAC system,
this model uses idealized fan coil models that are parameterized with 
the peak load, determined from the provided time series, and design 
values of the hot water and chilled water supply and return temperatures. 
</p>
<p>
The time series that provide the loads are read from the file <code>filNam</code>.
This file must have columns as shown in this example:
<pre>
#1
#Heating, cooling and domestic hot water loads
#
#First column: Seconds in the year (loads are hourly)
#Second column: cooling loads in Watts (as negative numbers).
#Third column: space heating loads in Watts
#Fourth column: domestic hot water loads in Watts
#
#Peak space cooling load = -146960 Watts
#Peak space heating load = 167690 Watts
#Peak water heating load = 9390 Watts
double tab1(8760,4)
0;0;18230;0
3600;0;17520;0
7200;0;20170;0
10800;0;22450;0
[further rows omitted]
</pre>
Specificallly, the format must be as follows:
<ul>
<li>
The first column must be the time of the year in seconds.
</li>
<li>
If <code>have_chiWat = true</code>, then the next column must be the space cooling load in Watts.
Note that cooling is a negative number.<br/>
If <code>have_chiWat = false</code>, this column must be present but it will be ignored, and hence
it can be set to any number such as <code>0</code>.
</li>
<li>
If <code>have_heaWat = true</code>, the next column must be the space heating load in Watts.<br/>
If <code>have_heaWat = false</code>, this column must be present but it will be ignored, and hence
it can be set to any number such as <code>0</code>.
</li>
<li>
If <code>have_hotWat = true</code>, the next column must be the domestic hot water load in Watts.<br/>
If <code>have_hotWat = false</code>, this column must be present but it will be ignored, and hence
it can be set to any number such as <code>0</code>.
</li>
</ul>
<p>
The entry <code>double tab1(8760,4)</code> shows how many columns and rows are present.
</p>
<p>
The header also needs to contain the lines that start with <code>#Peak</code> as shown in the example above.
</p>
<h4>Implementation details</h4>
<p>
The total space heating (resp. cooling) load is split between
<code>facMulHea</code> (resp. <code>facMulCoo</code>)
identical terminal units with heat transfer performance approximated based on 
design specifications of a reference terminal unit.
It is not expected that the user modifies the default values 
that are proposed for <code>facMulHea</code> and <code>facMulCoo</code>
unless detailed design data are available for the building 
HVAC system.
In that latter case, the following set of parameters should be 
modified consistently to match the design data.
</p>
<ul>
<li>Hot water (resp. chilled water) supply and return temperature
<code>T_aHeaWat_nominal</code> and <code>T_bHeaWat_nominal</code>
(resp. <code>T_aChiWat_nominal</code> and <code>T_bChiWat_nominal</code>)
</li>
<li>Terminal unit entering air temperature <code>T_aLoaHea_nominal</code>
(resp. <code>T_aLoaCoo_nominal</code>) and humidity ratio
<code>w_aLoaCoo_nominal</code>
</li>
<li>Terminal unit air mass flow rate <code>mLoaHea_flow_nominal</code>
(resp. <code>mLoaCoo_flow_nominal</code>)
</li>
<li>Terminal unit scaling factor <code>facMulHea</code>
(resp. <code>facMulCoo</code>)
</li>
</ul>
<p>
For reference, the default reference terminal unit performance is based on 
manufacturer data (Carrier fan coil model 42NL/NH) at selection conditions
as specified in the \"Advanced\" tab.
</p>
</html>", revisions="<html>
<ul>
<li>
May 3, 2023, by David Blum:<br/>
Applied <code>facMul</code> to domestic hot water load.<br/>
This is for
<a href=\"https://github.com/lbl-srg/modelica-buildings/issues/3379\">
issue 3379</a>.
</li>
<li>
November 21, 2022, by David Blum:<br/>
Scale <code>facMulHea</code> and <code>facMulCoo</code> with peak load.<br/>
This is for
<a href=\"https://github.com/lbl-srg/modelica-buildings/issues/2302\">
issue 2302</a>.
</li>
<li>
December 21, 2020, by Antoine Gautier:<br/>
Refactored for optional hot water and multiplier factor.<br/>
This is for <a href=\"https://github.com/lbl-srg/modelica-buildings/issues/2291\">issue 2291</a>.
</li>
<li>
September 18, 2020, by Jianjun Hu:<br/>
Changed flow distribution components and the terminal units to be conditional depending
on if there is water-based heating, or cooling system.
This is for <a href=\"https://github.com/lbl-srg/modelica-buildings/issues/2147\">issue 2147</a>.
</li>
<li>
February 21, 2020, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>"),    Icon(
                coordinateSystem(
                  preserveAspectRatio=false,
                  extent={{-300,-300},{300,300}})));
          end BuildingTimeSeries;

          model FanCoil4Pipe
            "Model of a sensible only four-pipe fan coil unit computing a required water mass flow rate"
            extends PartialFanCoil4Pipe(
              final have_TSen=true,
              final have_fluPor=true,
              final have_heaPor=false);
          equation
            connect(TSen,conCoo.u_m)
              annotation (Line(points={{-220,140},{-40,140},{-40,160},{0,160},{0,168}},color={0,0,127}));
            connect(TSen,conHea.u_m)
              annotation (Line(points={{-220,140},{-40,140},{-40,200},{0,200},{0,208}},color={0,0,127}));
            connect(hexHea.port_b2,mulLoaMasFloOut.port_a)
              annotation (Line(points={{-80,0},{-160,0}},color={0,127,255}));
            connect(mulLoaMasFloInl.port_b,fan.port_a)
              annotation (Line(points={{160,0},{90,0}},color={0,127,255}));
            annotation (
              Documentation(
                info="<html>
<p>
This is a simplified model of a sensible only four-pipe fan coil unit for heating and cooling. 
It is intended to be coupled to a room model by means of fluid ports.
See 
<a href=\"modelica://Buildings.Experimental.DHC.Loads.BaseClasses.Examples.BaseClasses.PartialFanCoil4Pipe\">
Buildings.Experimental.DHC.Loads.BaseClasses.Examples.BaseClasses.PartialFanCoil4Pipe</a>
for a description of the modeling principles.
</p>
</html>",       revisions="<html>
<ul>
<li>
February 21, 2020, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>"));
          end FanCoil4Pipe;

          model FanCoil4PipeHeatPorts
            "Model of a sensible only four-pipe fan coil unit computing a required water mass flow rate"
            extends PartialFanCoil4Pipe(
              final have_heaPor=true,
              final have_fluPor=false,
              final have_TSen=false);
            Buildings.HeatTransfer.Sources.PrescribedHeatFlow heaFloHeaCon
              "Convective heat flow rate to load"
              annotation (Placement(transformation(extent={{-10,-10},{10,10}},rotation=0,origin={50,70})));
            Buildings.HeatTransfer.Sources.PrescribedHeatFlow heaFloCooCon
              "Convective heat flow rate to load"
              annotation (Placement(transformation(extent={{-10,-10},{10,10}},rotation=0,origin={50,50})));
            Buildings.Fluid.Sources.Boundary_pT retAir(
              redeclare package Medium = Medium2,
              use_T_in=true,
              nPorts=1) "Source for return air" annotation (Placement(
                  transformation(
                  extent={{10,-10},{-10,10}},
                  rotation=0,
                  origin={110,0})));
            Buildings.Fluid.Sources.Boundary_pT sinAir(
              redeclare package Medium = Medium2,
              use_T_in=false,
              nPorts=1) "Sink for supply air" annotation (Placement(
                  transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={-110,0})));
            Buildings.HeatTransfer.Sources.PrescribedHeatFlow heaFloHeaRad
              "Radiative heat flow rate to load" annotation (Placement(
                  transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={110,-40})));
            Buildings.HeatTransfer.Sources.PrescribedHeatFlow heaFloCooRad
              "Radiative heat flow rate to load" annotation (Placement(
                  transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={110,-80})));
            Buildings.Controls.OBC.CDL.Reals.Sources.Constant zero(
              k=0)
              "Zero"
              annotation (Placement(transformation(extent={{60,-50},{80,-30}})));
            Modelica.Thermal.HeatTransfer.Sensors.TemperatureSensor senT
              "Load temperature (measured)"
              annotation (Placement(transformation(extent={{180,10},{160,30}})));
          equation
            connect(hexHea.port_b2,sinAir.ports[1])
              annotation (Line(points={{-80,0},{-100,0}},color={0,127,255}));
            connect(Q_flowCoo.y,heaFloCooCon.Q_flow)
              annotation (Line(points={{-59,40},{30,40},{30,50},{40,50}},color={0,0,127}));
            connect(Q_flowHea.y,heaFloHeaCon.Q_flow)
              annotation (Line(points={{-59,60},{-20,60},{-20,70},{40,70}},color={0,0,127}));
            connect(zero.y,heaFloHeaRad.Q_flow)
              annotation (Line(points={{82,-40},{100,-40}},color={0,0,127}));
            connect(zero.y,heaFloCooRad.Q_flow)
              annotation (Line(points={{82,-40},{90,-40},{90,-80},{100,-80}},color={0,0,127}));
            connect(retAir.ports[1],fan.port_a)
              annotation (Line(points={{100,0},{90,0}},color={0,127,255}));
            connect(heaPorCon,senT.port)
              annotation (Line(points={{200,40},{190,40},{190,20},{180,20}},color={191,0,0}));
            connect(senT.T,retAir.T_in)
              annotation (Line(points={{160,20},{132,20},{132,4},{122,4}},color={0,0,127}));
            connect(senT.T,conCoo.u_m)
              annotation (Line(points={{160,20},{120,20},{120,160},{0,160},{0,168}},color={0,0,127}));
            connect(senT.T,conHea.u_m)
              annotation (Line(points={{160,20},{120,20},{120,204},{0,204},{0,208}},color={0,0,127}));
            connect(heaFloCooCon.port,mulHeaFloCon.port_a)
              annotation (Line(points={{60,50},{110,50},{110,40},{160,40}},color={191,0,0}));
            connect(heaFloHeaCon.port,mulHeaFloCon.port_a)
              annotation (Line(points={{60,70},{110,70},{110,40},{160,40}},color={191,0,0}));
            connect(heaFloHeaRad.port,mulHeaFloRad.port_a)
              annotation (Line(points={{120,-40},{160,-40}},color={191,0,0}));
            connect(heaFloCooRad.port,mulHeaFloRad.port_a)
              annotation (Line(points={{120,-80},{140,-80},{140,-40},{160,-40}},color={191,0,0}));
            annotation (
              Documentation(
                info="<html>
<p>
This is a simplified model of a sensible only four-pipe fan coil unit for heating and cooling.
It is intended to be coupled to a room model by means of heat ports.
See
<a href=\"modelica://Buildings.Experimental.DHC.Loads.BaseClasses.Examples.BaseClasses.PartialFanCoil4Pipe\">
Buildings.Experimental.DHC.Loads.BaseClasses.Examples.BaseClasses.PartialFanCoil4Pipe</a>
for a description of the modeling principles.
</p>
</html>",       revisions="<html>
<ul>
<li>
February 21, 2020, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>"));
          end FanCoil4PipeHeatPorts;

          partial model PartialFanCoil4Pipe
            "Partial model of a sensible only four-pipe fan coil unit computing a required water mass flow rate"
            extends estcp.DHC.Loads.BaseClasses.PartialTerminalUnit(
              redeclare package Medium1 = Buildings.Media.Water,
              redeclare package Medium2 = Buildings.Media.Air,
              final have_heaWat=true,
              final have_chiWat=true,
              final have_fan=true,
              final allowFlowReversal=false,
              final allowFlowReversalLoa=true,
              final have_chaOve=false,
              final have_eleHea=false,
              final have_eleCoo=false,
              final have_QReq_flow=false,
              final have_weaBus=false,
              final have_pum=false,
              final mHeaWat_flow_nominal=abs(QHea_flow_nominal/cpHeaWat_nominal
                  /(T_aHeaWat_nominal - T_bHeaWat_nominal)),
              final mChiWat_flow_nominal=abs(QCoo_flow_nominal/cpChiWat_nominal
                  /(T_aChiWat_nominal - T_bChiWat_nominal)));
            import hexConfiguration=Buildings.Fluid.Types.HeatExchangerConfiguration;
            final parameter hexConfiguration hexConHea=hexConfiguration.CounterFlow
              "Heating heat exchanger configuration";
            final parameter hexConfiguration hexConCoo=hexConfiguration.CounterFlow
              "Cooling heat exchanger configuration";
            Buildings.Controls.OBC.CDL.Reals.PID conHea(
              Ti=10,
              yMax=1,
              controllerType=Buildings.Controls.OBC.CDL.Types.SimpleController.PI,
              reverseActing=true,
              yMin=0)
              "PI controller for heating"
              annotation (Placement(transformation(extent={{-10,210},{10,230}})));
            Buildings.Fluid.Movers.FlowControlled_m_flow fan(
              redeclare final package Medium=Medium2,
              final m_flow_nominal=max(
                {mLoaHea_flow_nominal,mLoaCoo_flow_nominal}),
              redeclare final Buildings.Fluid.Movers.Data.Generic
                                                        per,
              nominalValuesDefineDefaultPressureCurve=true,
              energyDynamics=Modelica.Fluid.Types.Dynamics.SteadyState,
              use_inputFilter=false,
              dp_nominal=400,
              final allowFlowReversal=allowFlowReversalLoa)
              annotation (Placement(transformation(extent={{90,-10},{70,10}})));
            Buildings.Fluid.HeatExchangers.DryCoilEffectivenessNTU hexHea(
              redeclare final package Medium1=Medium1,
              redeclare final package Medium2=Medium2,
              final configuration=hexConHea,
              final m1_flow_nominal=mHeaWat_flow_nominal,
              final m2_flow_nominal=mLoaHea_flow_nominal,
              final dp1_nominal=0,
              dp2_nominal=200,
              final Q_flow_nominal=QHea_flow_nominal,
              final T_a1_nominal=T_aHeaWat_nominal,
              final T_a2_nominal=T_aLoaHea_nominal,
              final allowFlowReversal1=allowFlowReversal,
              final allowFlowReversal2=allowFlowReversalLoa)
              annotation (Placement(transformation(extent={{-80,4},{-60,-16}})));
            Buildings.Controls.OBC.CDL.Reals.MultiplyByParameter gaiHeaFloNom(k=
                  mHeaWat_flow_nominal)
              annotation (Placement(transformation(extent={{40,210},{60,230}})));
            Modelica.Blocks.Sources.RealExpression Q_flowHea(
              y=hexHea.Q2_flow)
              annotation (Placement(transformation(extent={{-80,50},{-60,70}})));
            Buildings.Fluid.HeatExchangers.WetCoilEffectivenessNTU hexWetNtu(
              redeclare final package Medium1 = Medium1,
              redeclare final package Medium2 = Medium2,
              final configuration=hexConCoo,
              final m1_flow_nominal=mChiWat_flow_nominal,
              final m2_flow_nominal=mLoaCoo_flow_nominal,
              final dp1_nominal=0,
              dp2_nominal=200,
              use_Q_flow_nominal=true,
              final Q_flow_nominal=QCoo_flow_nominal,
              final T_a1_nominal=T_aChiWat_nominal,
              final T_a2_nominal=T_aLoaCoo_nominal,
              final allowFlowReversal1=allowFlowReversal,
              final allowFlowReversal2=allowFlowReversalLoa,
              final w_a2_nominal=w_aLoaCoo_nominal)
              annotation (Placement(transformation(extent={{0,4},{20,-16}})));
            Modelica.Blocks.Sources.RealExpression Q_flowCoo(y=hexWetNtu.Q2_flow)
              annotation (Placement(transformation(extent={{-80,30},{-60,50}})));
            Buildings.Controls.OBC.CDL.Reals.MultiplyByParameter gaiFloNom2(k=max({
                  mLoaHea_flow_nominal,mLoaCoo_flow_nominal}))
              annotation (Placement(transformation(extent={{40,130},{60,150}})));
            Buildings.Controls.OBC.CDL.Reals.PID conCoo(
              Ti=10,
              yMax=1,
              controllerType=Buildings.Controls.OBC.CDL.Types.SimpleController.PI,
              reverseActing=false,
              yMin=0)
              "PI controller for cooling"
              annotation (Placement(transformation(extent={{-10,170},{10,190}})));
            Buildings.Controls.OBC.CDL.Reals.MultiplyByParameter gaiCooFloNom(k=
                  mChiWat_flow_nominal) "Scaling"
              annotation (Placement(transformation(extent={{40,170},{60,190}})));
            Buildings.Utilities.Math.SmoothMax smoothMax(deltaX=1E-2)
              "C1 maximum" annotation (Placement(transformation(extent={{-10,
                      130},{10,150}})));
          equation
            connect(hexWetNtu.port_b2, hexHea.port_a2)
              annotation (Line(points={{0,0},{-60,0}}, color={0,127,255}));
            connect(fan.port_b, hexWetNtu.port_a2)
              annotation (Line(points={{70,0},{20,0}}, color={0,127,255}));
            connect(gaiFloNom2.y,fan.m_flow_in)
              annotation (Line(points={{62,140},{80,140},{80,12}},color={0,0,127}));
            connect(conHea.y,gaiHeaFloNom.u)
              annotation (Line(points={{12,220},{38,220}},color={0,0,127}));
            connect(conCoo.y,gaiCooFloNom.u)
              annotation (Line(points={{12,180},{38,180}},color={0,0,127}));
            connect(gaiHeaFloNom.y,mulMasFloReqHeaWat.u)
              annotation (Line(points={{62,220},{134,220},{134,100},{158,100}},color={0,0,127}));
            connect(gaiCooFloNom.y,mulMasFloReqChiWat.u)
              annotation (Line(points={{62,180},{128,180},{128,80},{158,80}},color={0,0,127}));
            connect(fan.P,mulPFan.u)
              annotation (Line(points={{69,9},{60,9},{60,16},{152,16},{152,140},{158,140}},color={0,0,127}));
            connect(Q_flowHea.y,mulQActHea_flow.u)
              annotation (Line(points={{-59,60},{140,60},{140,220},{158,220}},color={0,0,127}));
            connect(Q_flowCoo.y,mulQActCoo_flow.u)
              annotation (Line(points={{-59,40},{146,40},{146,200},{158,200}},color={0,0,127}));
            connect(TSetCoo,conCoo.u_s)
              annotation (Line(points={{-220,180},{-20,180},{-20,180},{-12,180}},color={0,0,127}));
            connect(TSetHea,conHea.u_s)
              annotation (Line(points={{-220,220},{-60,220},{-60,220},{-12,220}},color={0,0,127}));
            connect(smoothMax.y,gaiFloNom2.u)
              annotation (Line(points={{11,140},{38,140}},color={0,0,127}));
            connect(conHea.y,smoothMax.u1)
              annotation (Line(points={{12,220},{20,220},{20,200},{-20,200},{-20,146},{-12,146}},color={0,0,127}));
            connect(conCoo.y,smoothMax.u2)
              annotation (Line(points={{12,180},{20,180},{20,120},{-20,120},{-20,134},{-12,134}},color={0,0,127}));
            connect(mulChiWatFloInl.port_b, hexWetNtu.port_a1) annotation (Line(points={{-160,
                    -180},{-20,-180},{-20,-12},{0,-12}}, color={0,127,255}));
            connect(hexWetNtu.port_b1, mulChiWatFloOut.port_a) annotation (Line(points={{20,
                    -12},{40,-12},{40,-180},{160,-180}}, color={0,127,255}));
            connect(hexHea.port_b1,mulHeaWatFloOut.port_a)
              annotation (Line(points={{-60,-12},{-40,-12},{-40,-220},{160,-220}},color={0,127,255}));
            connect(mulHeaWatFloInl.port_b,hexHea.port_a1)
              annotation (Line(points={{-160,-220},{-100,-220},{-100,-12},{-80,-12}},color={0,127,255}));
            annotation (
              Documentation(
                info="<html>
<p>
This is a simplified partial model of a sensible only four-pipe fan coil unit
for heating and cooling.
It is intended to be used in conjunction with
<a href=\"modelica://Buildings.Experimental.DHC.Loads.BaseClasses.FlowDistribution\">
Buildings.Experimental.DHC.Loads.BaseClasses.FlowDistribution</a>,
and hence it computes the water mass flow rate required to meet the temperature
set point.
</p>
<p>
For the sake of simplicity, a sensible only heat exchanger model is considered.
</p>
<p>
For the sake of computational performance, a PI controller is used instead of an inverse
model of the heat exchanger to assess the required water mass flow rate.
Each controller output signal is mapped linearly to the water mass flow rate,
from zero to its nominal value.
The maximum of the two output signals is mapped linearly to the air mass
flow rate, from zero to its nominal value.
</p>
<p>
The model takes the measured room air temperature as an input (as opposed to
the fan inlet temperature) to maintain a valid control loop output in case
of zero air flow rate.
</p>
<p>
The model is partial to allow various connectivity options on the load side:
either with fluid ports or with heat ports.
</p>
</html>",       revisions="<html>
<ul>
<li>
February 21, 2020, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>"));
          end PartialFanCoil4Pipe;

          package GeojsonExportRC "Package with RC building zone models"
            extends Modelica.Icons.Package;

            package OfficeBuilding "Package with RC building zone models"
              extends Modelica.Icons.Package;

              model Floor
                "This is the simulation model of Floor within building OfficeBuilding"
                Buildings.BoundaryConditions.SolarIrradiation.DiffusePerez HDifTil[6](
                  each outSkyCon=true,
                  each outGroCon=true,
                  til={1.5707963267949,1.5707963267949,1.5707963267949,1.5707963267949,0,0},
                  azi={3.1415926535898,0,1.5707963267949,-1.5707963267949,0,0})
                  "Calculates diffuse solar radiation on titled surface for all directions"
                  annotation (Placement(transformation(extent={{-68,20},{-48,40}})));
                Buildings.BoundaryConditions.SolarIrradiation.DirectTiltedSurface HDirTil[6](til={
                      1.5707963267949,1.5707963267949,1.5707963267949,1.5707963267949,0,0},
                    azi={3.1415926535898,0,1.5707963267949,-1.5707963267949,0,0})
                  "Calculates direct solar radiation on titled surface for all directions"
                  annotation (Placement(transformation(extent={{-68,52},{-48,72}})));
                Buildings.ThermalZones.ReducedOrder.SolarGain.CorrectionGDoublePane corGDoublePane(
                  n=6,
                  UWin=1.8936557576825381)
                  "Correction factor for solar transmission"
                  annotation (Placement(transformation(extent={{6,54},{26,74}})));
                Buildings.ThermalZones.ReducedOrder.RC.TwoElements thermalZoneTwoElements(
                  redeclare package Medium=Buildings.Media.Air,
                  VAir=3261.7921338576007,
                  hConExt=2.0490178828959134,
                  hConWin=2.7000000000000006,
                  gWin=0.6699999999999999,
                  ratioWinConRad=0.029999999999999995,
                  nExt=1,
                  RExt={2.3174831586466932e-05},
                  CExt={408244783.5430907},
                  hRad=5.0,
                  AInt=5119.003369012401,
                  hConInt=2.3902922093005254,
                  nInt=1,
                  RInt={1.3425684356446266e-05},
                  CInt={573809361.8851968},
                  RWin=0.002198739011727672,
                  RExtRem=0.0012526070384860479,
                  energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,
                  extWallRC(
                    thermCapExt(
                      each der_T(
                        fixed=true))),
                  intWallRC(
                    thermCapInt(
                      each der_T(
                        fixed=true))),
                  nOrientations=6,
                  AWin={74.54769655777831,74.54769655777831,6.910119334253305,6.910119334253305,0.0,0.0},
                  ATransparent={74.54769655777831,74.54769655777831,6.910119334253305,6.910119334253305,0.0,0.0},
                  AExt={223.64308967333497,223.64308967333497,20.730358002759914,20.730358002759914,455.8011269000001,455.8011269000001})
                  "Thermal zone"
                  annotation (Placement(transformation(extent={{44,-2},{92,34}})));
                Buildings.ThermalZones.ReducedOrder.EquivalentAirTemperature.VDI6007WithWindow eqAirTemp(
                  n=6,
                  wfGro=0.3626976838332763,
                  wfWall={0.15582361279765053,0.15582361279765053,0.014443903825944522,0.014443903825944522,0.2967672829195336,0.0},
                  wfWin={0.4575846758314001,0.4575846758314001,0.04241532416859994,0.04241532416859994,0.0,0.0},
                  withLongwave=true,
                  aExt=0.5,
                  hConWallOut=20.0,
                  hRad=5.0,
                  hConWinOut=20.0,
                  TGro=286.15)
                  "Computes equivalent air temperature"
                  annotation (Placement(transformation(extent={{-24,-14},{-4,6}})));
                Modelica.Blocks.Math.Add solRad[6]
                  "Sums up solar radiation of both directions"
                  annotation (Placement(transformation(extent={{-38,6},{-28,16}})));
                Modelica.Thermal.HeatTransfer.Sources.PrescribedTemperature prescribedTemperature
                  "Prescribed temperature for exterior walls outdoor surface temperature"
                  annotation (Placement(transformation(extent={{8,-6},{20,6}})));
                Modelica.Thermal.HeatTransfer.Sources.PrescribedTemperature prescribedTemperature1
                  "Prescribed temperature for windows outdoor surface temperature"
                  annotation (Placement(transformation(extent={{8,14},{20,26}})));
                Modelica.Thermal.HeatTransfer.Components.Convection thermalConductorWin
                  "Outdoor convective heat transfer of windows"
                  annotation (Placement(transformation(extent={{38,16},{28,26}})));
                Modelica.Thermal.HeatTransfer.Components.Convection thermalConductorWall
                  "Outdoor convective heat transfer of walls"
                  annotation (Placement(transformation(extent={{36,6},{26,-4}})));
                Modelica.Blocks.Sources.Constant const[6](
                  each k=0)
                  "Sets sunblind signal to zero (open)"
                  annotation (Placement(transformation(extent={{-20,14},{-14,20}})));
                Buildings.BoundaryConditions.WeatherData.Bus weaBus
                  "Weather data bus"
                  annotation (Placement(transformation(extent={{-100,-10},{-66,22}}),iconTransformation(extent={{-70,-12},{-50,8}})));
                Modelica.Blocks.Sources.Constant hConWall(
                  k=25.0*1400.34914915219)
                  "Outdoor coefficient of heat transfer for walls"
                  annotation (Placement(transformation(extent={{-4,-4},{4,4}},rotation=90,origin={30,-16})));
                Modelica.Blocks.Sources.Constant hConWin(
                  k=25.0*162.91563178406324)
                  "Outdoor coefficient of heat transfer for windows"
                  annotation (Placement(transformation(extent={{4,-4},{-4,4}},rotation=90,origin={32,38})));
                Modelica.Thermal.HeatTransfer.Sources.PrescribedHeatFlow personsRad
                  "Radiative heat flow of persons"
                  annotation (Placement(transformation(extent={{48,-42},{68,-22}})));
                Modelica.Thermal.HeatTransfer.Sources.PrescribedHeatFlow personsConv
                  "Convective heat flow of persons"
                  annotation (Placement(transformation(extent={{48,-62},{68,-42}})));
                Modelica.Thermal.HeatTransfer.Sources.PrescribedHeatFlow machinesConv
                  "Convective heat flow of machines"
                  annotation (Placement(transformation(extent={{48,-84},{68,-64}})));
                Modelica.Blocks.Sources.CombiTimeTable internalGains(
                  tableOnFile=true,
                  extrapolation=Modelica.Blocks.Types.Extrapolation.Periodic,
                  tableName="Internals",
                  fileName=Modelica.Utilities.Files.loadResource(
                    "modelica://Buildings/Resources/Data/Experimental/DHC/Loads/Examples/BaseClasses/GeojsonExportRC/OfficeBuilding/InternalGains_Floor.txt"),
                  columns={2,3,4})
                  "Table with profiles for persons (radiative and convective) and machines (convective)"
                  annotation (Placement(transformation(extent={{6,-60},{22,-44}})));
                Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_a port_a
                  "Heat port for sensible convective gains"
                  annotation (Placement(transformation(extent={{-10,90},{10,110}}),iconTransformation(extent={{-10,90},{10,110}})));
                Buildings.Controls.OBC.CDL.Interfaces.RealOutput TAir(
                  quantity="ThermodynamicTemperature",
                  unit="K",
                  displayUnit="degC")
                  "Room air temperature"
                  annotation (Placement(transformation(extent={{100,-10},{120,10}})));
              equation
                connect(eqAirTemp.TEqAirWin,prescribedTemperature1.T)
                  annotation (Line(points={{-3,-0.2},{0,-0.2},{0,20},{6.8,20}},color={0,0,127}));
                connect(eqAirTemp.TEqAir,prescribedTemperature.T)
                  annotation (Line(points={{-3,-4},{4,-4},{4,0},{6.8,0}},color={0,0,127}));
                connect(weaBus.TDryBul,eqAirTemp.TDryBul)
                  annotation (Line(points={{-83,6},{-83,-2},{-38,-2},{-38,-10},{-26,-10}},color={255,204,51},thickness=0.5),Text(string="%first",index=-1,extent={{-6,3},{-6,3}}));
                connect(internalGains.y[1],personsRad.Q_flow)
                  annotation (Line(points={{22.8,-52},{28,-52},{28,-32},{48,-32}},color={0,0,127}));
                connect(internalGains.y[2],personsConv.Q_flow)
                  annotation (Line(points={{22.8,-52},{36,-52},{48,-52}},color={0,0,127}));
                connect(internalGains.y[3],machinesConv.Q_flow)
                  annotation (Line(points={{22.8,-52},{28,-52},{28,-74},{48,-74}},color={0,0,127}));
                connect(const.y,eqAirTemp.sunblind)
                  annotation (Line(points={{-13.7,17},{-12,17},{-12,8},{-14,8},{-14,8}},color={0,0,127}));
                connect(HDifTil.HSkyDifTil,corGDoublePane.HSkyDifTil)
                  annotation (Line(points={{-47,36},{-28,36},{-6,36},{-6,66},{4,66}},color={0,0,127}));
                connect(HDirTil.H,corGDoublePane.HDirTil)
                  annotation (Line(points={{-47,62},{-10,62},{-10,70},{4,70}},color={0,0,127}));
                connect(HDirTil.H,solRad.u1)
                  annotation (Line(points={{-47,62},{-42,62},{-42,14},{-39,14}},color={0,0,127}));
                connect(HDirTil.inc,corGDoublePane.inc)
                  annotation (Line(points={{-47,58},{4,58},{4,58}},color={0,0,127}));
                connect(HDifTil.H,solRad.u2)
                  annotation (Line(points={{-47,30},{-44,30},{-44,8},{-39,8}},color={0,0,127}));
                connect(HDifTil.HGroDifTil,corGDoublePane.HGroDifTil)
                  annotation (Line(points={{-47,24},{-4,24},{-4,62},{4,62}},color={0,0,127}));
                connect(solRad.y,eqAirTemp.HSol)
                  annotation (Line(points={{-27.5,11},{-26,11},{-26,2},{-26,2}},color={0,0,127}));
                connect(weaBus,HDifTil[1].weaBus)
                  annotation (Line(points={{-83,6},{-74,6},{-74,30},{-68,30}},color={255,204,51},thickness=0.5));
                connect(weaBus,HDirTil[1].weaBus)
                  annotation (Line(points={{-83,6},{-68,6},{-68,62}},color={255,204,51},thickness=0.5));
                connect(weaBus,HDifTil[2].weaBus)
                  annotation (Line(points={{-83,6},{-74,6},{-74,30},{-68,30}},color={255,204,51},thickness=0.5));
                connect(weaBus,HDirTil[2].weaBus)
                  annotation (Line(points={{-83,6},{-68,6},{-68,62}},color={255,204,51},thickness=0.5));
                connect(weaBus,HDifTil[3].weaBus)
                  annotation (Line(points={{-83,6},{-74,6},{-74,30},{-68,30}},color={255,204,51},thickness=0.5));
                connect(weaBus,HDirTil[3].weaBus)
                  annotation (Line(points={{-83,6},{-68,6},{-68,62}},color={255,204,51},thickness=0.5));
                connect(weaBus,HDifTil[4].weaBus)
                  annotation (Line(points={{-83,6},{-74,6},{-74,30},{-68,30}},color={255,204,51},thickness=0.5));
                connect(weaBus,HDirTil[4].weaBus)
                  annotation (Line(points={{-83,6},{-68,6},{-68,62}},color={255,204,51},thickness=0.5));
                connect(weaBus,HDifTil[5].weaBus)
                  annotation (Line(points={{-83,6},{-74,6},{-74,30},{-68,30}},color={255,204,51},thickness=0.5));
                connect(weaBus,HDirTil[5].weaBus)
                  annotation (Line(points={{-83,6},{-68,6},{-68,62}},color={255,204,51},thickness=0.5));
                connect(weaBus,HDifTil[6].weaBus)
                  annotation (Line(points={{-83,6},{-74,6},{-74,30},{-68,30}},color={255,204,51},thickness=0.5));
                connect(weaBus,HDirTil[6].weaBus)
                  annotation (Line(points={{-83,6},{-68,6},{-68,62}},color={255,204,51},thickness=0.5));
                connect(personsRad.port,thermalZoneTwoElements.intGainsRad)
                  annotation (Line(points={{68,-32},{84,-32},{100,-32},{100,24},{92,24}},color={191,0,0}));
                connect(thermalConductorWin.solid,thermalZoneTwoElements.window)
                  annotation (Line(points={{38,21},{40,21},{40,20},{44,20}},color={191,0,0}));
                connect(prescribedTemperature1.port,thermalConductorWin.fluid)
                  annotation (Line(points={{20,20},{28,20},{28,21}},color={191,0,0}));
                connect(thermalZoneTwoElements.extWall,thermalConductorWall.solid)
                  annotation (Line(points={{44,12},{40,12},{40,1},{36,1}},color={191,0,0}));
                connect(thermalConductorWall.fluid,prescribedTemperature.port)
                  annotation (Line(points={{26,1},{24,1},{24,0},{20,0}},color={191,0,0}));
                connect(hConWall.y,thermalConductorWall.Gc)
                  annotation (Line(points={{30,-11.6},{30,-4},{31,-4}},color={0,0,127}));
                connect(hConWin.y,thermalConductorWin.Gc)
                  annotation (Line(points={{32,33.6},{32,26},{33,26}},color={0,0,127}));
                connect(weaBus.TBlaSky,eqAirTemp.TBlaSky)
                  annotation (Line(points={{-83,6},{-58,6},{-58,2},{-32,2},{-32,-4},{-26,-4}},color={255,204,51},thickness=0.5),Text(string="%first",index=-1,extent={{-6,3},{-6,3}}));
                connect(machinesConv.port,thermalZoneTwoElements.intGainsConv)
                  annotation (Line(points={{68,-74},{82,-74},{96,-74},{96,20},{92,20}},color={191,0,0}));
                connect(personsConv.port,thermalZoneTwoElements.intGainsConv)
                  annotation (Line(points={{68,-52},{96,-52},{96,20},{92,20}},color={191,0,0}));
                connect(corGDoublePane.solarRadWinTrans,thermalZoneTwoElements.solRad)
                  annotation (Line(points={{27,64},{34,64},{40,64},{40,31},{43,31}},color={0,0,127}));
                connect(port_a,thermalZoneTwoElements.intGainsConv)
                  annotation (Line(points={{0,100},{96,100},{96,20},{92,20}},color={191,0,0}));
                connect(thermalZoneTwoElements.TAir,TAir)
                  annotation (Line(points={{93,32},{98,32},{98,0},{110,0}},color={0,0,127}));
              end Floor;

              model ICT
                "This is the simulation model of ICT within building OfficeBuilding"
                Buildings.BoundaryConditions.SolarIrradiation.DiffusePerez HDifTil[6](
                  each outSkyCon=true,
                  each outGroCon=true,
                  til={1.5707963267949,1.5707963267949,1.5707963267949,1.5707963267949,0,0},
                  azi={3.1415926535898,0,1.5707963267949,-1.5707963267949,0,0})
                  "Calculates diffuse solar radiation on titled surface for all directions"
                  annotation (Placement(transformation(extent={{-68,20},{-48,40}})));
                Buildings.BoundaryConditions.SolarIrradiation.DirectTiltedSurface HDirTil[6](til={
                      1.5707963267949,1.5707963267949,1.5707963267949,1.5707963267949,0,0},
                    azi={3.1415926535898,0,1.5707963267949,-1.5707963267949,0,0})
                  "Calculates direct solar radiation on titled surface for all directions"
                  annotation (Placement(transformation(extent={{-68,52},{-48,72}})));
                Buildings.ThermalZones.ReducedOrder.SolarGain.CorrectionGDoublePane corGDoublePane(
                  n=6,
                  UWin=1.8936557576825384)
                  "Correction factor for solar transmission"
                  annotation (Placement(transformation(extent={{6,54},{26,74}})));
                Buildings.ThermalZones.ReducedOrder.RC.TwoElements thermalZoneTwoElements(
                  redeclare package Medium=Buildings.Media.Air,
                  VAir=260.9433707086081,
                  hConExt=2.0490178828959125,
                  hConWin=2.7000000000000006,
                  gWin=0.6700000000000002,
                  ratioWinConRad=0.030000000000000002,
                  nExt=1,
                  RExt={0.00028968539483083646},
                  CExt={32659582.683447275},
                  hRad=5.000000000000001,
                  AInt=257.303303274304,
                  hConInt=2.207073495341845,
                  nInt=1,
                  RInt={0.0002111894006425288},
                  CInt={37115084.57178593},
                  RWin=0.027484237646595907,
                  RExtRem=0.015657587981075596,
                  energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,
                  extWallRC(
                    thermCapExt(
                      each der_T(
                        fixed=true))),
                  intWallRC(
                    thermCapInt(
                      each der_T(
                        fixed=true))),
                  nOrientations=6,
                  AWin={5.963815724622265,5.963815724622265,0.5528095467402644,0.5528095467402644,0.0,0.0},
                  ATransparent={5.963815724622265,5.963815724622265,0.5528095467402644,0.5528095467402644,0.0,0.0},
                  AExt={17.891447173866798,17.891447173866798,1.658428640220793,1.658428640220793,36.46409015200001,36.46409015200001})
                  "Thermal zone"
                  annotation (Placement(transformation(extent={{44,-2},{92,34}})));
                Buildings.ThermalZones.ReducedOrder.EquivalentAirTemperature.VDI6007WithWindow eqAirTemp(
                  n=6,
                  wfGro=0.3626976838332763,
                  wfWall={0.15582361279765056,0.15582361279765056,0.014443903825944524,0.014443903825944524,0.2967672829195336,0.0},
                  wfWin={0.45758467583140006,0.45758467583140006,0.04241532416859994,0.04241532416859994,0.0,0.0},
                  withLongwave=true,
                  aExt=0.5,
                  hConWallOut=20.0,
                  hRad=5.0,
                  hConWinOut=20.0,
                  TGro=286.15)
                  "Computes equivalent air temperature"
                  annotation (Placement(transformation(extent={{-24,-14},{-4,6}})));
                Modelica.Blocks.Math.Add solRad[6]
                  "Sums up solar radiation of both directions"
                  annotation (Placement(transformation(extent={{-38,6},{-28,16}})));
                Modelica.Thermal.HeatTransfer.Sources.PrescribedTemperature prescribedTemperature
                  "Prescribed temperature for exterior walls outdoor surface temperature"
                  annotation (Placement(transformation(extent={{8,-6},{20,6}})));
                Modelica.Thermal.HeatTransfer.Sources.PrescribedTemperature prescribedTemperature1
                  "Prescribed temperature for windows outdoor surface temperature"
                  annotation (Placement(transformation(extent={{8,14},{20,26}})));
                Modelica.Thermal.HeatTransfer.Components.Convection thermalConductorWin
                  "Outdoor convective heat transfer of windows"
                  annotation (Placement(transformation(extent={{38,16},{28,26}})));
                Modelica.Thermal.HeatTransfer.Components.Convection thermalConductorWall
                  "Outdoor convective heat transfer of walls"
                  annotation (Placement(transformation(extent={{36,6},{26,-4}})));
                Modelica.Blocks.Sources.Constant const[6](
                  each k=0)
                  "Sets sunblind signal to zero (open)"
                  annotation (Placement(transformation(extent={{-20,14},{-14,20}})));
                Buildings.BoundaryConditions.WeatherData.Bus weaBus
                  "Weather data bus"
                  annotation (Placement(transformation(extent={{-100,-10},{-66,22}}),iconTransformation(extent={{-70,-12},{-50,8}})));
                Modelica.Blocks.Sources.Constant hConWall(
                  k=25.000000000000004*112.0279319321752)
                  "Outdoor coefficient of heat transfer for walls"
                  annotation (Placement(transformation(extent={{-4,-4},{4,4}},rotation=90,origin={30,-16})));
                Modelica.Blocks.Sources.Constant hConWin(
                  k=24.999999999999996*13.033250542725057)
                  "Outdoor coefficient of heat transfer for windows"
                  annotation (Placement(transformation(extent={{4,-4},{-4,4}},rotation=90,origin={32,38})));
                Modelica.Thermal.HeatTransfer.Sources.PrescribedHeatFlow personsRad
                  "Radiative heat flow of persons"
                  annotation (Placement(transformation(extent={{48,-42},{68,-22}})));
                Modelica.Thermal.HeatTransfer.Sources.PrescribedHeatFlow personsConv
                  "Convective heat flow of persons"
                  annotation (Placement(transformation(extent={{48,-62},{68,-42}})));
                Modelica.Thermal.HeatTransfer.Sources.PrescribedHeatFlow machinesConv
                  "Convective heat flow of machines"
                  annotation (Placement(transformation(extent={{48,-84},{68,-64}})));
                Modelica.Blocks.Sources.CombiTimeTable internalGains(
                  tableOnFile=true,
                  extrapolation=Modelica.Blocks.Types.Extrapolation.Periodic,
                  tableName="Internals",
                  fileName=Modelica.Utilities.Files.loadResource(
                    "modelica://Buildings/Resources/Data/Experimental/DHC/Loads/Examples/BaseClasses/GeojsonExportRC/OfficeBuilding/InternalGains_ICT.txt"),
                  columns={2,3,4})
                  "Table with profiles for persons (radiative and convective) and machines (convective)"
                  annotation (Placement(transformation(extent={{6,-60},{22,-44}})));
                Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_a port_a
                  "Heat port for sensible convective gains"
                  annotation (Placement(transformation(extent={{-10,90},{10,110}}),iconTransformation(extent={{-10,90},{10,110}})));
                Buildings.Controls.OBC.CDL.Interfaces.RealOutput TAir(
                  quantity="ThermodynamicTemperature",
                  unit="K",
                  displayUnit="degC")
                  "Room air temperature"
                  annotation (Placement(transformation(extent={{100,-10},{120,10}})));
              equation
                connect(eqAirTemp.TEqAirWin,prescribedTemperature1.T)
                  annotation (Line(points={{-3,-0.2},{0,-0.2},{0,20},{6.8,20}},color={0,0,127}));
                connect(eqAirTemp.TEqAir,prescribedTemperature.T)
                  annotation (Line(points={{-3,-4},{4,-4},{4,0},{6.8,0}},color={0,0,127}));
                connect(weaBus.TDryBul,eqAirTemp.TDryBul)
                  annotation (Line(points={{-83,6},{-83,-2},{-38,-2},{-38,-10},{-26,-10}},color={255,204,51},thickness=0.5),Text(string="%first",index=-1,extent={{-6,3},{-6,3}}));
                connect(internalGains.y[1],personsRad.Q_flow)
                  annotation (Line(points={{22.8,-52},{28,-52},{28,-32},{48,-32}},color={0,0,127}));
                connect(internalGains.y[2],personsConv.Q_flow)
                  annotation (Line(points={{22.8,-52},{36,-52},{48,-52}},color={0,0,127}));
                connect(internalGains.y[3],machinesConv.Q_flow)
                  annotation (Line(points={{22.8,-52},{28,-52},{28,-74},{48,-74}},color={0,0,127}));
                connect(const.y,eqAirTemp.sunblind)
                  annotation (Line(points={{-13.7,17},{-12,17},{-12,8},{-14,8},{-14,8}},color={0,0,127}));
                connect(HDifTil.HSkyDifTil,corGDoublePane.HSkyDifTil)
                  annotation (Line(points={{-47,36},{-28,36},{-6,36},{-6,66},{4,66}},color={0,0,127}));
                connect(HDirTil.H,corGDoublePane.HDirTil)
                  annotation (Line(points={{-47,62},{-10,62},{-10,70},{4,70}},color={0,0,127}));
                connect(HDirTil.H,solRad.u1)
                  annotation (Line(points={{-47,62},{-42,62},{-42,14},{-39,14}},color={0,0,127}));
                connect(HDirTil.inc,corGDoublePane.inc)
                  annotation (Line(points={{-47,58},{4,58},{4,58}},color={0,0,127}));
                connect(HDifTil.H,solRad.u2)
                  annotation (Line(points={{-47,30},{-44,30},{-44,8},{-39,8}},color={0,0,127}));
                connect(HDifTil.HGroDifTil,corGDoublePane.HGroDifTil)
                  annotation (Line(points={{-47,24},{-4,24},{-4,62},{4,62}},color={0,0,127}));
                connect(solRad.y,eqAirTemp.HSol)
                  annotation (Line(points={{-27.5,11},{-26,11},{-26,2},{-26,2}},color={0,0,127}));
                connect(weaBus,HDifTil[1].weaBus)
                  annotation (Line(points={{-83,6},{-74,6},{-74,30},{-68,30}},color={255,204,51},thickness=0.5));
                connect(weaBus,HDirTil[1].weaBus)
                  annotation (Line(points={{-83,6},{-68,6},{-68,62}},color={255,204,51},thickness=0.5));
                connect(weaBus,HDifTil[2].weaBus)
                  annotation (Line(points={{-83,6},{-74,6},{-74,30},{-68,30}},color={255,204,51},thickness=0.5));
                connect(weaBus,HDirTil[2].weaBus)
                  annotation (Line(points={{-83,6},{-68,6},{-68,62}},color={255,204,51},thickness=0.5));
                connect(weaBus,HDifTil[3].weaBus)
                  annotation (Line(points={{-83,6},{-74,6},{-74,30},{-68,30}},color={255,204,51},thickness=0.5));
                connect(weaBus,HDirTil[3].weaBus)
                  annotation (Line(points={{-83,6},{-68,6},{-68,62}},color={255,204,51},thickness=0.5));
                connect(weaBus,HDifTil[4].weaBus)
                  annotation (Line(points={{-83,6},{-74,6},{-74,30},{-68,30}},color={255,204,51},thickness=0.5));
                connect(weaBus,HDirTil[4].weaBus)
                  annotation (Line(points={{-83,6},{-68,6},{-68,62}},color={255,204,51},thickness=0.5));
                connect(weaBus,HDifTil[5].weaBus)
                  annotation (Line(points={{-83,6},{-74,6},{-74,30},{-68,30}},color={255,204,51},thickness=0.5));
                connect(weaBus,HDirTil[5].weaBus)
                  annotation (Line(points={{-83,6},{-68,6},{-68,62}},color={255,204,51},thickness=0.5));
                connect(weaBus,HDifTil[6].weaBus)
                  annotation (Line(points={{-83,6},{-74,6},{-74,30},{-68,30}},color={255,204,51},thickness=0.5));
                connect(weaBus,HDirTil[6].weaBus)
                  annotation (Line(points={{-83,6},{-68,6},{-68,62}},color={255,204,51},thickness=0.5));
                connect(personsRad.port,thermalZoneTwoElements.intGainsRad)
                  annotation (Line(points={{68,-32},{84,-32},{100,-32},{100,24},{92,24}},color={191,0,0}));
                connect(thermalConductorWin.solid,thermalZoneTwoElements.window)
                  annotation (Line(points={{38,21},{40,21},{40,20},{44,20}},color={191,0,0}));
                connect(prescribedTemperature1.port,thermalConductorWin.fluid)
                  annotation (Line(points={{20,20},{28,20},{28,21}},color={191,0,0}));
                connect(thermalZoneTwoElements.extWall,thermalConductorWall.solid)
                  annotation (Line(points={{44,12},{40,12},{40,1},{36,1}},color={191,0,0}));
                connect(thermalConductorWall.fluid,prescribedTemperature.port)
                  annotation (Line(points={{26,1},{24,1},{24,0},{20,0}},color={191,0,0}));
                connect(hConWall.y,thermalConductorWall.Gc)
                  annotation (Line(points={{30,-11.6},{30,-4},{31,-4}},color={0,0,127}));
                connect(hConWin.y,thermalConductorWin.Gc)
                  annotation (Line(points={{32,33.6},{32,26},{33,26}},color={0,0,127}));
                connect(weaBus.TBlaSky,eqAirTemp.TBlaSky)
                  annotation (Line(points={{-83,6},{-58,6},{-58,2},{-32,2},{-32,-4},{-26,-4}},color={255,204,51},thickness=0.5),Text(string="%first",index=-1,extent={{-6,3},{-6,3}}));
                connect(machinesConv.port,thermalZoneTwoElements.intGainsConv)
                  annotation (Line(points={{68,-74},{82,-74},{96,-74},{96,20},{92,20}},color={191,0,0}));
                connect(personsConv.port,thermalZoneTwoElements.intGainsConv)
                  annotation (Line(points={{68,-52},{96,-52},{96,20},{92,20}},color={191,0,0}));
                connect(corGDoublePane.solarRadWinTrans,thermalZoneTwoElements.solRad)
                  annotation (Line(points={{27,64},{34,64},{40,64},{40,31},{43,31}},color={0,0,127}));
                connect(port_a,thermalZoneTwoElements.intGainsConv)
                  annotation (Line(points={{0,100},{96,100},{96,20},{92,20}},color={191,0,0}));
                connect(thermalZoneTwoElements.TAir,TAir)
                  annotation (Line(points={{93,32},{98,32},{98,0},{110,0}},color={0,0,127}));
              end ICT;

              model Meeting
                "This is the simulation model of Meeting within building OfficeBuilding"
                Buildings.BoundaryConditions.SolarIrradiation.DiffusePerez HDifTil[6](
                  each outSkyCon=true,
                  each outGroCon=true,
                  til={1.5707963267949,1.5707963267949,1.5707963267949,1.5707963267949,0,0},
                  azi={3.1415926535898,0,1.5707963267949,-1.5707963267949,0,0})
                  "Calculates diffuse solar radiation on titled surface for all directions"
                  annotation (Placement(transformation(extent={{-68,20},{-48,40}})));
                Buildings.BoundaryConditions.SolarIrradiation.DirectTiltedSurface HDirTil[6](til={
                      1.5707963267949,1.5707963267949,1.5707963267949,1.5707963267949,0,0},
                    azi={3.1415926535898,0,1.5707963267949,-1.5707963267949,0,0})
                  "Calculates direct solar radiation on titled surface for all directions"
                  annotation (Placement(transformation(extent={{-68,52},{-48,72}})));
                Buildings.ThermalZones.ReducedOrder.SolarGain.CorrectionGDoublePane corGDoublePane(
                  n=6,
                  UWin=1.8936557576825384)
                  "Correction factor for solar transmission"
                  annotation (Placement(transformation(extent={{6,54},{26,74}})));
                Buildings.ThermalZones.ReducedOrder.RC.TwoElements thermalZoneTwoElements(
                  redeclare package Medium=Buildings.Media.Air,
                  VAir=521.8867414172162,
                  hConExt=2.0490178828959125,
                  hConWin=2.7000000000000006,
                  gWin=0.6700000000000002,
                  ratioWinConRad=0.030000000000000002,
                  nExt=1,
                  RExt={0.00014484269741541823},
                  CExt={65319165.36689455},
                  hRad=5.000000000000001,
                  AInt=514.606606548608,
                  hConInt=2.207073495341845,
                  nInt=1,
                  RInt={0.0001055947003212644},
                  CInt={74230169.14357185},
                  RWin=0.013742118823297953,
                  RExtRem=0.007828793990537798,
                  energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,
                  extWallRC(
                    thermCapExt(
                      each der_T(
                        fixed=true))),
                  intWallRC(
                    thermCapInt(
                      each der_T(
                        fixed=true))),
                  nOrientations=6,
                  AWin={11.92763144924453,11.92763144924453,1.1056190934805288,1.1056190934805288,0.0,0.0},
                  ATransparent={11.92763144924453,11.92763144924453,1.1056190934805288,1.1056190934805288,0.0,0.0},
                  AExt={35.782894347733595,35.782894347733595,3.316857280441586,3.316857280441586,72.92818030400002,72.92818030400002})
                  "Thermal zone"
                  annotation (Placement(transformation(extent={{44,-2},{92,34}})));
                Buildings.ThermalZones.ReducedOrder.EquivalentAirTemperature.VDI6007WithWindow eqAirTemp(
                  n=6,
                  wfGro=0.3626976838332763,
                  wfWall={0.15582361279765056,0.15582361279765056,0.014443903825944524,0.014443903825944524,0.2967672829195336,0.0},
                  wfWin={0.45758467583140006,0.45758467583140006,0.04241532416859994,0.04241532416859994,0.0,0.0},
                  withLongwave=true,
                  aExt=0.5,
                  hConWallOut=20.0,
                  hRad=5.0,
                  hConWinOut=20.0,
                  TGro=286.15)
                  "Computes equivalent air temperature"
                  annotation (Placement(transformation(extent={{-24,-14},{-4,6}})));
                Modelica.Blocks.Math.Add solRad[6]
                  "Sums up solar radiation of both directions"
                  annotation (Placement(transformation(extent={{-38,6},{-28,16}})));
                Modelica.Thermal.HeatTransfer.Sources.PrescribedTemperature prescribedTemperature
                  "Prescribed temperature for exterior walls outdoor surface temperature"
                  annotation (Placement(transformation(extent={{8,-6},{20,6}})));
                Modelica.Thermal.HeatTransfer.Sources.PrescribedTemperature prescribedTemperature1
                  "Prescribed temperature for windows outdoor surface temperature"
                  annotation (Placement(transformation(extent={{8,14},{20,26}})));
                Modelica.Thermal.HeatTransfer.Components.Convection thermalConductorWin
                  "Outdoor convective heat transfer of windows"
                  annotation (Placement(transformation(extent={{38,16},{28,26}})));
                Modelica.Thermal.HeatTransfer.Components.Convection thermalConductorWall
                  "Outdoor convective heat transfer of walls"
                  annotation (Placement(transformation(extent={{36,6},{26,-4}})));
                Modelica.Blocks.Sources.Constant const[6](
                  each k=0)
                  "Sets sunblind signal to zero (open)"
                  annotation (Placement(transformation(extent={{-20,14},{-14,20}})));
                Buildings.BoundaryConditions.WeatherData.Bus weaBus
                  "Weather data bus"
                  annotation (Placement(transformation(extent={{-100,-10},{-66,22}}),iconTransformation(extent={{-70,-12},{-50,8}})));
                Modelica.Blocks.Sources.Constant hConWall(
                  k=25.000000000000004*224.0558638643504)
                  "Outdoor coefficient of heat transfer for walls"
                  annotation (Placement(transformation(extent={{-4,-4},{4,4}},rotation=90,origin={30,-16})));
                Modelica.Blocks.Sources.Constant hConWin(
                  k=24.999999999999996*26.066501085450113)
                  "Outdoor coefficient of heat transfer for windows"
                  annotation (Placement(transformation(extent={{4,-4},{-4,4}},rotation=90,origin={32,38})));
                Modelica.Thermal.HeatTransfer.Sources.PrescribedHeatFlow personsRad
                  "Radiative heat flow of persons"
                  annotation (Placement(transformation(extent={{48,-42},{68,-22}})));
                Modelica.Thermal.HeatTransfer.Sources.PrescribedHeatFlow personsConv
                  "Convective heat flow of persons"
                  annotation (Placement(transformation(extent={{48,-62},{68,-42}})));
                Modelica.Thermal.HeatTransfer.Sources.PrescribedHeatFlow machinesConv
                  "Convective heat flow of machines"
                  annotation (Placement(transformation(extent={{48,-84},{68,-64}})));
                Modelica.Blocks.Sources.CombiTimeTable internalGains(
                  tableOnFile=true,
                  extrapolation=Modelica.Blocks.Types.Extrapolation.Periodic,
                  tableName="Internals",
                  fileName=Modelica.Utilities.Files.loadResource(
                    "modelica://Buildings/Resources/Data/Experimental/DHC/Loads/Examples/BaseClasses/GeojsonExportRC/OfficeBuilding/InternalGains_Meeting.txt"),
                  columns={2,3,4})
                  "Table with profiles for persons (radiative and convective) and machines (convective)"
                  annotation (Placement(transformation(extent={{6,-60},{22,-44}})));
                Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_a port_a
                  "Heat port for sensible convective gains"
                  annotation (Placement(transformation(extent={{-10,90},{10,110}}),iconTransformation(extent={{-10,90},{10,110}})));
                Buildings.Controls.OBC.CDL.Interfaces.RealOutput TAir(
                  quantity="ThermodynamicTemperature",
                  unit="K",
                  displayUnit="degC")
                  "Room air temperature"
                  annotation (Placement(transformation(extent={{100,-10},{120,10}})));
              equation
                connect(eqAirTemp.TEqAirWin,prescribedTemperature1.T)
                  annotation (Line(points={{-3,-0.2},{0,-0.2},{0,20},{6.8,20}},color={0,0,127}));
                connect(eqAirTemp.TEqAir,prescribedTemperature.T)
                  annotation (Line(points={{-3,-4},{4,-4},{4,0},{6.8,0}},color={0,0,127}));
                connect(weaBus.TDryBul,eqAirTemp.TDryBul)
                  annotation (Line(points={{-83,6},{-83,-2},{-38,-2},{-38,-10},{-26,-10}},color={255,204,51},thickness=0.5),Text(string="%first",index=-1,extent={{-6,3},{-6,3}}));
                connect(internalGains.y[1],personsRad.Q_flow)
                  annotation (Line(points={{22.8,-52},{28,-52},{28,-32},{48,-32}},color={0,0,127}));
                connect(internalGains.y[2],personsConv.Q_flow)
                  annotation (Line(points={{22.8,-52},{36,-52},{48,-52}},color={0,0,127}));
                connect(internalGains.y[3],machinesConv.Q_flow)
                  annotation (Line(points={{22.8,-52},{28,-52},{28,-74},{48,-74}},color={0,0,127}));
                connect(const.y,eqAirTemp.sunblind)
                  annotation (Line(points={{-13.7,17},{-12,17},{-12,8},{-14,8},{-14,8}},color={0,0,127}));
                connect(HDifTil.HSkyDifTil,corGDoublePane.HSkyDifTil)
                  annotation (Line(points={{-47,36},{-28,36},{-6,36},{-6,66},{4,66}},color={0,0,127}));
                connect(HDirTil.H,corGDoublePane.HDirTil)
                  annotation (Line(points={{-47,62},{-10,62},{-10,70},{4,70}},color={0,0,127}));
                connect(HDirTil.H,solRad.u1)
                  annotation (Line(points={{-47,62},{-42,62},{-42,14},{-39,14}},color={0,0,127}));
                connect(HDirTil.inc,corGDoublePane.inc)
                  annotation (Line(points={{-47,58},{4,58},{4,58}},color={0,0,127}));
                connect(HDifTil.H,solRad.u2)
                  annotation (Line(points={{-47,30},{-44,30},{-44,8},{-39,8}},color={0,0,127}));
                connect(HDifTil.HGroDifTil,corGDoublePane.HGroDifTil)
                  annotation (Line(points={{-47,24},{-4,24},{-4,62},{4,62}},color={0,0,127}));
                connect(solRad.y,eqAirTemp.HSol)
                  annotation (Line(points={{-27.5,11},{-26,11},{-26,2},{-26,2}},color={0,0,127}));
                connect(weaBus,HDifTil[1].weaBus)
                  annotation (Line(points={{-83,6},{-74,6},{-74,30},{-68,30}},color={255,204,51},thickness=0.5));
                connect(weaBus,HDirTil[1].weaBus)
                  annotation (Line(points={{-83,6},{-68,6},{-68,62}},color={255,204,51},thickness=0.5));
                connect(weaBus,HDifTil[2].weaBus)
                  annotation (Line(points={{-83,6},{-74,6},{-74,30},{-68,30}},color={255,204,51},thickness=0.5));
                connect(weaBus,HDirTil[2].weaBus)
                  annotation (Line(points={{-83,6},{-68,6},{-68,62}},color={255,204,51},thickness=0.5));
                connect(weaBus,HDifTil[3].weaBus)
                  annotation (Line(points={{-83,6},{-74,6},{-74,30},{-68,30}},color={255,204,51},thickness=0.5));
                connect(weaBus,HDirTil[3].weaBus)
                  annotation (Line(points={{-83,6},{-68,6},{-68,62}},color={255,204,51},thickness=0.5));
                connect(weaBus,HDifTil[4].weaBus)
                  annotation (Line(points={{-83,6},{-74,6},{-74,30},{-68,30}},color={255,204,51},thickness=0.5));
                connect(weaBus,HDirTil[4].weaBus)
                  annotation (Line(points={{-83,6},{-68,6},{-68,62}},color={255,204,51},thickness=0.5));
                connect(weaBus,HDifTil[5].weaBus)
                  annotation (Line(points={{-83,6},{-74,6},{-74,30},{-68,30}},color={255,204,51},thickness=0.5));
                connect(weaBus,HDirTil[5].weaBus)
                  annotation (Line(points={{-83,6},{-68,6},{-68,62}},color={255,204,51},thickness=0.5));
                connect(weaBus,HDifTil[6].weaBus)
                  annotation (Line(points={{-83,6},{-74,6},{-74,30},{-68,30}},color={255,204,51},thickness=0.5));
                connect(weaBus,HDirTil[6].weaBus)
                  annotation (Line(points={{-83,6},{-68,6},{-68,62}},color={255,204,51},thickness=0.5));
                connect(personsRad.port,thermalZoneTwoElements.intGainsRad)
                  annotation (Line(points={{68,-32},{84,-32},{100,-32},{100,24},{92,24}},color={191,0,0}));
                connect(thermalConductorWin.solid,thermalZoneTwoElements.window)
                  annotation (Line(points={{38,21},{40,21},{40,20},{44,20}},color={191,0,0}));
                connect(prescribedTemperature1.port,thermalConductorWin.fluid)
                  annotation (Line(points={{20,20},{28,20},{28,21}},color={191,0,0}));
                connect(thermalZoneTwoElements.extWall,thermalConductorWall.solid)
                  annotation (Line(points={{44,12},{40,12},{40,1},{36,1}},color={191,0,0}));
                connect(thermalConductorWall.fluid,prescribedTemperature.port)
                  annotation (Line(points={{26,1},{24,1},{24,0},{20,0}},color={191,0,0}));
                connect(hConWall.y,thermalConductorWall.Gc)
                  annotation (Line(points={{30,-11.6},{30,-4},{31,-4}},color={0,0,127}));
                connect(hConWin.y,thermalConductorWin.Gc)
                  annotation (Line(points={{32,33.6},{32,26},{33,26}},color={0,0,127}));
                connect(weaBus.TBlaSky,eqAirTemp.TBlaSky)
                  annotation (Line(points={{-83,6},{-58,6},{-58,2},{-32,2},{-32,-4},{-26,-4}},color={255,204,51},thickness=0.5),Text(string="%first",index=-1,extent={{-6,3},{-6,3}}));
                connect(machinesConv.port,thermalZoneTwoElements.intGainsConv)
                  annotation (Line(points={{68,-74},{82,-74},{96,-74},{96,20},{92,20}},color={191,0,0}));
                connect(personsConv.port,thermalZoneTwoElements.intGainsConv)
                  annotation (Line(points={{68,-52},{96,-52},{96,20},{92,20}},color={191,0,0}));
                connect(corGDoublePane.solarRadWinTrans,thermalZoneTwoElements.solRad)
                  annotation (Line(points={{27,64},{34,64},{40,64},{40,31},{43,31}},color={0,0,127}));
                connect(port_a,thermalZoneTwoElements.intGainsConv)
                  annotation (Line(points={{0,100},{96,100},{96,20},{92,20}},color={191,0,0}));
                connect(thermalZoneTwoElements.TAir,TAir)
                  annotation (Line(points={{93,32},{98,32},{98,0},{110,0}},color={0,0,127}));
              end Meeting;

              model Office
                "This is the simulation model of Office within building OfficeBuilding"
                Buildings.BoundaryConditions.SolarIrradiation.DiffusePerez HDifTil[6](
                  each outSkyCon=true,
                  each outGroCon=true,
                  til={1.5707963267949,1.5707963267949,1.5707963267949,1.5707963267949,0,0},
                  azi={3.1415926535898,0,1.5707963267949,-1.5707963267949,0,0})
                  "Calculates diffuse solar radiation on titled surface for all directions"
                  annotation (Placement(transformation(extent={{-68,20},{-48,40}})));
                Buildings.BoundaryConditions.SolarIrradiation.DirectTiltedSurface HDirTil[6](til={
                      1.5707963267949,1.5707963267949,1.5707963267949,1.5707963267949,0,0},
                    azi={3.1415926535898,0,1.5707963267949,-1.5707963267949,0,0})
                  "Calculates direct solar radiation on titled surface for all directions"
                  annotation (Placement(transformation(extent={{-68,52},{-48,72}})));
                Buildings.ThermalZones.ReducedOrder.SolarGain.CorrectionGDoublePane corGDoublePane(
                  n=6,
                  UWin=1.8936557576825381)
                  "Correction factor for solar transmission"
                  annotation (Placement(transformation(extent={{6,54},{26,74}})));
                Buildings.ThermalZones.ReducedOrder.RC.TwoElements thermalZoneTwoElements(
                  redeclare package Medium=Buildings.Media.Air,
                  VAir=6523.584267715201,
                  hConExt=2.0490178828959134,
                  hConWin=2.7000000000000006,
                  gWin=0.6699999999999999,
                  ratioWinConRad=0.029999999999999995,
                  nExt=1,
                  RExt={1.1587415793233466e-05},
                  CExt={816489567.0861814},
                  hRad=4.999999999999999,
                  AInt=6432.582581857601,
                  hConInt=2.2070734953418447,
                  nInt=1,
                  RInt={8.447576025701151e-06},
                  CInt={927877114.2946483},
                  RWin=0.001099369505863836,
                  RExtRem=0.0006263035192430239,
                  energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,
                  extWallRC(
                    thermCapExt(
                      each der_T(
                        fixed=true))),
                  intWallRC(
                    thermCapInt(
                      each der_T(
                        fixed=true))),
                  nOrientations=6,
                  AWin={149.09539311555662,149.09539311555662,13.82023866850661,13.82023866850661,0.0,0.0},
                  ATransparent={149.09539311555662,149.09539311555662,13.82023866850661,13.82023866850661,0.0,0.0},
                  AExt={447.28617934666994,447.28617934666994,41.46071600551983,41.46071600551983,911.6022538000002,911.6022538000002})
                  "Thermal zone"
                  annotation (Placement(transformation(extent={{44,-2},{92,34}})));
                Buildings.ThermalZones.ReducedOrder.EquivalentAirTemperature.VDI6007WithWindow eqAirTemp(
                  n=6,
                  wfGro=0.3626976838332763,
                  wfWall={0.15582361279765053,0.15582361279765053,0.014443903825944522,0.014443903825944522,0.2967672829195336,0.0},
                  wfWin={0.4575846758314001,0.4575846758314001,0.04241532416859994,0.04241532416859994,0.0,0.0},
                  withLongwave=true,
                  aExt=0.5,
                  hConWallOut=20.0,
                  hRad=5.0,
                  hConWinOut=20.0,
                  TGro=286.15)
                  "Computes equivalent air temperature"
                  annotation (Placement(transformation(extent={{-24,-14},{-4,6}})));
                Modelica.Blocks.Math.Add solRad[6]
                  "Sums up solar radiation of both directions"
                  annotation (Placement(transformation(extent={{-38,6},{-28,16}})));
                Modelica.Thermal.HeatTransfer.Sources.PrescribedTemperature prescribedTemperature
                  "Prescribed temperature for exterior walls outdoor surface temperature"
                  annotation (Placement(transformation(extent={{8,-6},{20,6}})));
                Modelica.Thermal.HeatTransfer.Sources.PrescribedTemperature prescribedTemperature1
                  "Prescribed temperature for windows outdoor surface temperature"
                  annotation (Placement(transformation(extent={{8,14},{20,26}})));
                Modelica.Thermal.HeatTransfer.Components.Convection thermalConductorWin
                  "Outdoor convective heat transfer of windows"
                  annotation (Placement(transformation(extent={{38,16},{28,26}})));
                Modelica.Thermal.HeatTransfer.Components.Convection thermalConductorWall
                  "Outdoor convective heat transfer of walls"
                  annotation (Placement(transformation(extent={{36,6},{26,-4}})));
                Modelica.Blocks.Sources.Constant const[6](
                  each k=0)
                  "Sets sunblind signal to zero (open)"
                  annotation (Placement(transformation(extent={{-20,14},{-14,20}})));
                Buildings.BoundaryConditions.WeatherData.Bus weaBus
                  "Weather data bus"
                  annotation (Placement(transformation(extent={{-102,-10},{-68,22}}),iconTransformation(extent={{-70,-12},{-50,8}})));
                Modelica.Blocks.Sources.Constant hConWall(
                  k=25.0*2800.69829830438)
                  "Outdoor coefficient of heat transfer for walls"
                  annotation (Placement(transformation(extent={{-4,-4},{4,4}},rotation=90,origin={30,-16})));
                Modelica.Blocks.Sources.Constant hConWin(
                  k=25.0*325.8312635681265)
                  "Outdoor coefficient of heat transfer for windows"
                  annotation (Placement(transformation(extent={{4,-4},{-4,4}},rotation=90,origin={32,38})));
                Modelica.Thermal.HeatTransfer.Sources.PrescribedHeatFlow personsRad
                  "Radiative heat flow of persons"
                  annotation (Placement(transformation(extent={{48,-42},{68,-22}})));
                Modelica.Thermal.HeatTransfer.Sources.PrescribedHeatFlow personsConv
                  "Convective heat flow of persons"
                  annotation (Placement(transformation(extent={{48,-62},{68,-42}})));
                Modelica.Thermal.HeatTransfer.Sources.PrescribedHeatFlow machinesConv
                  "Convective heat flow of machines"
                  annotation (Placement(transformation(extent={{48,-84},{68,-64}})));
                Modelica.Blocks.Sources.CombiTimeTable internalGains(
                  tableOnFile=true,
                  extrapolation=Modelica.Blocks.Types.Extrapolation.Periodic,
                  tableName="Internals",
                  fileName=Modelica.Utilities.Files.loadResource(
                    "modelica://Buildings/Resources/Data/Experimental/DHC/Loads/Examples/BaseClasses/GeojsonExportRC/OfficeBuilding/InternalGains_Office.txt"),
                  columns={2,3,4})
                  "Table with profiles for persons (radiative and convective) and machines (convective)"
                  annotation (Placement(transformation(extent={{6,-60},{22,-44}})));
                Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_a port_a
                  "Heat port for sensible convective gains"
                  annotation (Placement(transformation(extent={{-10,90},{10,110}}),iconTransformation(extent={{-10,90},{10,110}})));
                Buildings.Controls.OBC.CDL.Interfaces.RealOutput TAir(
                  quantity="ThermodynamicTemperature",
                  unit="K",
                  displayUnit="degC")
                  "Room air temperature"
                  annotation (Placement(transformation(extent={{100,-10},{120,10}})));
              equation
                connect(eqAirTemp.TEqAirWin,prescribedTemperature1.T)
                  annotation (Line(points={{-3,-0.2},{0,-0.2},{0,20},{6.8,20}},color={0,0,127}));
                connect(eqAirTemp.TEqAir,prescribedTemperature.T)
                  annotation (Line(points={{-3,-4},{4,-4},{4,0},{6.8,0}},color={0,0,127}));
                connect(weaBus.TDryBul,eqAirTemp.TDryBul)
                  annotation (Line(points={{-85,6},{-85,-2},{-38,-2},{-38,-10},{-26,-10}},color={255,204,51},thickness=0.5),Text(string="%first",index=-1,extent={{-6,3},{-6,3}}));
                connect(internalGains.y[1],personsRad.Q_flow)
                  annotation (Line(points={{22.8,-52},{28,-52},{28,-32},{48,-32}},color={0,0,127}));
                connect(internalGains.y[2],personsConv.Q_flow)
                  annotation (Line(points={{22.8,-52},{36,-52},{48,-52}},color={0,0,127}));
                connect(internalGains.y[3],machinesConv.Q_flow)
                  annotation (Line(points={{22.8,-52},{28,-52},{28,-74},{48,-74}},color={0,0,127}));
                connect(const.y,eqAirTemp.sunblind)
                  annotation (Line(points={{-13.7,17},{-12,17},{-12,8},{-14,8},{-14,8}},color={0,0,127}));
                connect(HDifTil.HSkyDifTil,corGDoublePane.HSkyDifTil)
                  annotation (Line(points={{-47,36},{-28,36},{-6,36},{-6,66},{4,66}},color={0,0,127}));
                connect(HDirTil.H,corGDoublePane.HDirTil)
                  annotation (Line(points={{-47,62},{-10,62},{-10,70},{4,70}},color={0,0,127}));
                connect(HDirTil.H,solRad.u1)
                  annotation (Line(points={{-47,62},{-42,62},{-42,14},{-39,14}},color={0,0,127}));
                connect(HDirTil.inc,corGDoublePane.inc)
                  annotation (Line(points={{-47,58},{4,58},{4,58}},color={0,0,127}));
                connect(HDifTil.H,solRad.u2)
                  annotation (Line(points={{-47,30},{-44,30},{-44,8},{-39,8}},color={0,0,127}));
                connect(HDifTil.HGroDifTil,corGDoublePane.HGroDifTil)
                  annotation (Line(points={{-47,24},{-4,24},{-4,62},{4,62}},color={0,0,127}));
                connect(solRad.y,eqAirTemp.HSol)
                  annotation (Line(points={{-27.5,11},{-26,11},{-26,2},{-26,2}},color={0,0,127}));
                connect(weaBus,HDifTil[1].weaBus)
                  annotation (Line(points={{-85,6},{-74,6},{-74,30},{-68,30}},color={255,204,51},thickness=0.5));
                connect(weaBus,HDirTil[1].weaBus)
                  annotation (Line(points={{-85,6},{-68,6},{-68,62}},color={255,204,51},thickness=0.5));
                connect(weaBus,HDifTil[2].weaBus)
                  annotation (Line(points={{-85,6},{-74,6},{-74,30},{-68,30}},color={255,204,51},thickness=0.5));
                connect(weaBus,HDirTil[2].weaBus)
                  annotation (Line(points={{-85,6},{-68,6},{-68,62}},color={255,204,51},thickness=0.5));
                connect(weaBus,HDifTil[3].weaBus)
                  annotation (Line(points={{-85,6},{-74,6},{-74,30},{-68,30}},color={255,204,51},thickness=0.5));
                connect(weaBus,HDirTil[3].weaBus)
                  annotation (Line(points={{-85,6},{-68,6},{-68,62}},color={255,204,51},thickness=0.5));
                connect(weaBus,HDifTil[4].weaBus)
                  annotation (Line(points={{-85,6},{-74,6},{-74,30},{-68,30}},color={255,204,51},thickness=0.5));
                connect(weaBus,HDirTil[4].weaBus)
                  annotation (Line(points={{-85,6},{-68,6},{-68,62}},color={255,204,51},thickness=0.5));
                connect(weaBus,HDifTil[5].weaBus)
                  annotation (Line(points={{-85,6},{-74,6},{-74,30},{-68,30}},color={255,204,51},thickness=0.5));
                connect(weaBus,HDirTil[5].weaBus)
                  annotation (Line(points={{-85,6},{-68,6},{-68,62}},color={255,204,51},thickness=0.5));
                connect(weaBus,HDifTil[6].weaBus)
                  annotation (Line(points={{-85,6},{-74,6},{-74,30},{-68,30}},color={255,204,51},thickness=0.5));
                connect(weaBus,HDirTil[6].weaBus)
                  annotation (Line(points={{-85,6},{-68,6},{-68,62}},color={255,204,51},thickness=0.5));
                connect(personsRad.port,thermalZoneTwoElements.intGainsRad)
                  annotation (Line(points={{68,-32},{84,-32},{100,-32},{100,24},{92,24}},color={191,0,0}));
                connect(thermalConductorWin.solid,thermalZoneTwoElements.window)
                  annotation (Line(points={{38,21},{40,21},{40,20},{44,20}},color={191,0,0}));
                connect(prescribedTemperature1.port,thermalConductorWin.fluid)
                  annotation (Line(points={{20,20},{28,20},{28,21}},color={191,0,0}));
                connect(thermalZoneTwoElements.extWall,thermalConductorWall.solid)
                  annotation (Line(points={{44,12},{40,12},{40,1},{36,1}},color={191,0,0}));
                connect(thermalConductorWall.fluid,prescribedTemperature.port)
                  annotation (Line(points={{26,1},{24,1},{24,0},{20,0}},color={191,0,0}));
                connect(hConWall.y,thermalConductorWall.Gc)
                  annotation (Line(points={{30,-11.6},{30,-4},{31,-4}},color={0,0,127}));
                connect(hConWin.y,thermalConductorWin.Gc)
                  annotation (Line(points={{32,33.6},{32,26},{33,26}},color={0,0,127}));
                connect(weaBus.TBlaSky,eqAirTemp.TBlaSky)
                  annotation (Line(points={{-85,6},{-58,6},{-58,2},{-32,2},{-32,-4},{-26,-4}},color={255,204,51},thickness=0.5),Text(string="%first",index=-1,extent={{-6,3},{-6,3}}));
                connect(machinesConv.port,thermalZoneTwoElements.intGainsConv)
                  annotation (Line(points={{68,-74},{82,-74},{96,-74},{96,20},{92,20}},color={191,0,0}));
                connect(personsConv.port,thermalZoneTwoElements.intGainsConv)
                  annotation (Line(points={{68,-52},{96,-52},{96,20},{92,20}},color={191,0,0}));
                connect(corGDoublePane.solarRadWinTrans,thermalZoneTwoElements.solRad)
                  annotation (Line(points={{27,64},{34,64},{40,64},{40,31},{43,31}},color={0,0,127}));
                connect(port_a,thermalZoneTwoElements.intGainsConv)
                  annotation (Line(points={{0,100},{96,100},{96,20},{92,20}},color={191,0,0}));
                connect(thermalZoneTwoElements.TAir,TAir)
                  annotation (Line(points={{93,32},{98,32},{98,0},{110,0}},color={0,0,127}));
              end Office;

              model Restroom
                "This is the simulation model of Restroom within building OfficeBuilding"
                Buildings.BoundaryConditions.SolarIrradiation.DiffusePerez HDifTil[6](
                  each outSkyCon=true,
                  each outGroCon=true,
                  til={1.5707963267949,1.5707963267949,1.5707963267949,1.5707963267949,0,0},
                  azi={3.1415926535898,0,1.5707963267949,-1.5707963267949,0,0})
                  "Calculates diffuse solar radiation on titled surface for all directions"
                  annotation (Placement(transformation(extent={{-68,20},{-48,40}})));
                Buildings.BoundaryConditions.SolarIrradiation.DirectTiltedSurface HDirTil[6](til={
                      1.5707963267949,1.5707963267949,1.5707963267949,1.5707963267949,0,0},
                    azi={3.1415926535898,0,1.5707963267949,-1.5707963267949,0,0})
                  "Calculates direct solar radiation on titled surface for all directions"
                  annotation (Placement(transformation(extent={{-68,52},{-48,72}})));
                Buildings.ThermalZones.ReducedOrder.SolarGain.CorrectionGDoublePane corGDoublePane(
                  n=6,
                  UWin=1.8936557576825384)
                  "Correction factor for solar transmission"
                  annotation (Placement(transformation(extent={{6,54},{26,74}})));
                Buildings.ThermalZones.ReducedOrder.RC.TwoElements thermalZoneTwoElements(
                  redeclare package Medium=Buildings.Media.Air,
                  VAir=521.8867414172162,
                  hConExt=2.0490178828959125,
                  hConWin=2.7000000000000006,
                  gWin=0.6700000000000002,
                  ratioWinConRad=0.030000000000000002,
                  nExt=1,
                  RExt={0.00014484269741541823},
                  CExt={65319165.36689455},
                  hRad=5.000000000000001,
                  AInt=688.5688536876802,
                  hConInt=2.3316080309449254,
                  nInt=1,
                  RInt={9.201439908964808e-05},
                  CInt={84275425.00414628},
                  RWin=0.013742118823297953,
                  RExtRem=0.007828793990537798,
                  energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,
                  extWallRC(
                    thermCapExt(
                      each der_T(
                        fixed=true))),
                  intWallRC(
                    thermCapInt(
                      each der_T(
                        fixed=true))),
                  nOrientations=6,
                  AWin={11.92763144924453,11.92763144924453,1.1056190934805288,1.1056190934805288,0.0,0.0},
                  ATransparent={11.92763144924453,11.92763144924453,1.1056190934805288,1.1056190934805288,0.0,0.0},
                  AExt={35.782894347733595,35.782894347733595,3.316857280441586,3.316857280441586,72.92818030400002,72.92818030400002})
                  "Thermal zone"
                  annotation (Placement(transformation(extent={{44,-2},{92,34}})));
                Buildings.ThermalZones.ReducedOrder.EquivalentAirTemperature.VDI6007WithWindow eqAirTemp(
                  n=6,
                  wfGro=0.3626976838332763,
                  wfWall={0.15582361279765056,0.15582361279765056,0.014443903825944524,0.014443903825944524,0.2967672829195336,0.0},
                  wfWin={0.45758467583140006,0.45758467583140006,0.04241532416859994,0.04241532416859994,0.0,0.0},
                  withLongwave=true,
                  aExt=0.5,
                  hConWallOut=20.0,
                  hRad=5.0,
                  hConWinOut=20.0,
                  TGro=286.15)
                  "Computes equivalent air temperature"
                  annotation (Placement(transformation(extent={{-24,-14},{-4,6}})));
                Modelica.Blocks.Math.Add solRad[6]
                  "Sums up solar radiation of both directions"
                  annotation (Placement(transformation(extent={{-38,6},{-28,16}})));
                Modelica.Thermal.HeatTransfer.Sources.PrescribedTemperature prescribedTemperature
                  "Prescribed temperature for exterior walls outdoor surface temperature"
                  annotation (Placement(transformation(extent={{8,-6},{20,6}})));
                Modelica.Thermal.HeatTransfer.Sources.PrescribedTemperature prescribedTemperature1
                  "Prescribed temperature for windows outdoor surface temperature"
                  annotation (Placement(transformation(extent={{8,14},{20,26}})));
                Modelica.Thermal.HeatTransfer.Components.Convection thermalConductorWin
                  "Outdoor convective heat transfer of windows"
                  annotation (Placement(transformation(extent={{38,16},{28,26}})));
                Modelica.Thermal.HeatTransfer.Components.Convection thermalConductorWall
                  "Outdoor convective heat transfer of walls"
                  annotation (Placement(transformation(extent={{36,6},{26,-4}})));
                Modelica.Blocks.Sources.Constant const[6](
                  each k=0)
                  "Sets sunblind signal to zero (open)"
                  annotation (Placement(transformation(extent={{-20,14},{-14,20}})));
                Buildings.BoundaryConditions.WeatherData.Bus weaBus
                  "Weather data bus"
                  annotation (Placement(transformation(extent={{-100,-10},{-66,22}}),iconTransformation(extent={{-70,-12},{-50,8}})));
                Modelica.Blocks.Sources.Constant hConWall(
                  k=25.000000000000004*224.0558638643504)
                  "Outdoor coefficient of heat transfer for walls"
                  annotation (Placement(transformation(extent={{-4,-4},{4,4}},rotation=90,origin={30,-16})));
                Modelica.Blocks.Sources.Constant hConWin(
                  k=24.999999999999996*26.066501085450113)
                  "Outdoor coefficient of heat transfer for windows"
                  annotation (Placement(transformation(extent={{4,-4},{-4,4}},rotation=90,origin={32,38})));
                Modelica.Thermal.HeatTransfer.Sources.PrescribedHeatFlow personsRad
                  "Radiative heat flow of persons"
                  annotation (Placement(transformation(extent={{48,-42},{68,-22}})));
                Modelica.Thermal.HeatTransfer.Sources.PrescribedHeatFlow personsConv
                  "Convective heat flow of persons"
                  annotation (Placement(transformation(extent={{48,-62},{68,-42}})));
                Modelica.Thermal.HeatTransfer.Sources.PrescribedHeatFlow machinesConv
                  "Convective heat flow of machines"
                  annotation (Placement(transformation(extent={{48,-84},{68,-64}})));
                Modelica.Blocks.Sources.CombiTimeTable internalGains(
                  tableOnFile=true,
                  extrapolation=Modelica.Blocks.Types.Extrapolation.Periodic,
                  tableName="Internals",
                  fileName=Modelica.Utilities.Files.loadResource(
                    "modelica://Buildings/Resources/Data/Experimental/DHC/Loads/Examples/BaseClasses/GeojsonExportRC/OfficeBuilding/InternalGains_Restroom.txt"),
                  columns={2,3,4})
                  "Table with profiles for persons (radiative and convective) and machines (convective)"
                  annotation (Placement(transformation(extent={{6,-60},{22,-44}})));
                Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_a port_a
                  "Heat port for sensible convective gains"
                  annotation (Placement(transformation(extent={{-10,90},{10,110}}),iconTransformation(extent={{-10,90},{10,110}})));
                Buildings.Controls.OBC.CDL.Interfaces.RealOutput TAir(
                  quantity="ThermodynamicTemperature",
                  unit="K",
                  displayUnit="degC")
                  "Room air temperature"
                  annotation (Placement(transformation(extent={{100,-10},{120,10}})));
              equation
                connect(eqAirTemp.TEqAirWin,prescribedTemperature1.T)
                  annotation (Line(points={{-3,-0.2},{0,-0.2},{0,20},{6.8,20}},color={0,0,127}));
                connect(eqAirTemp.TEqAir,prescribedTemperature.T)
                  annotation (Line(points={{-3,-4},{4,-4},{4,0},{6.8,0}},color={0,0,127}));
                connect(weaBus.TDryBul,eqAirTemp.TDryBul)
                  annotation (Line(points={{-83,6},{-83,-2},{-38,-2},{-38,-10},{-26,-10}},color={255,204,51},thickness=0.5),Text(string="%first",index=-1,extent={{-6,3},{-6,3}}));
                connect(internalGains.y[1],personsRad.Q_flow)
                  annotation (Line(points={{22.8,-52},{28,-52},{28,-32},{48,-32}},color={0,0,127}));
                connect(internalGains.y[2],personsConv.Q_flow)
                  annotation (Line(points={{22.8,-52},{36,-52},{48,-52}},color={0,0,127}));
                connect(internalGains.y[3],machinesConv.Q_flow)
                  annotation (Line(points={{22.8,-52},{28,-52},{28,-74},{48,-74}},color={0,0,127}));
                connect(const.y,eqAirTemp.sunblind)
                  annotation (Line(points={{-13.7,17},{-12,17},{-12,8},{-14,8},{-14,8}},color={0,0,127}));
                connect(HDifTil.HSkyDifTil,corGDoublePane.HSkyDifTil)
                  annotation (Line(points={{-47,36},{-28,36},{-6,36},{-6,66},{4,66}},color={0,0,127}));
                connect(HDirTil.H,corGDoublePane.HDirTil)
                  annotation (Line(points={{-47,62},{-10,62},{-10,70},{4,70}},color={0,0,127}));
                connect(HDirTil.H,solRad.u1)
                  annotation (Line(points={{-47,62},{-42,62},{-42,14},{-39,14}},color={0,0,127}));
                connect(HDirTil.inc,corGDoublePane.inc)
                  annotation (Line(points={{-47,58},{4,58},{4,58}},color={0,0,127}));
                connect(HDifTil.H,solRad.u2)
                  annotation (Line(points={{-47,30},{-44,30},{-44,8},{-39,8}},color={0,0,127}));
                connect(HDifTil.HGroDifTil,corGDoublePane.HGroDifTil)
                  annotation (Line(points={{-47,24},{-4,24},{-4,62},{4,62}},color={0,0,127}));
                connect(solRad.y,eqAirTemp.HSol)
                  annotation (Line(points={{-27.5,11},{-26,11},{-26,2},{-26,2}},color={0,0,127}));
                connect(weaBus,HDifTil[1].weaBus)
                  annotation (Line(points={{-83,6},{-74,6},{-74,30},{-68,30}},color={255,204,51},thickness=0.5));
                connect(weaBus,HDirTil[1].weaBus)
                  annotation (Line(points={{-83,6},{-68,6},{-68,62}},color={255,204,51},thickness=0.5));
                connect(weaBus,HDifTil[2].weaBus)
                  annotation (Line(points={{-83,6},{-74,6},{-74,30},{-68,30}},color={255,204,51},thickness=0.5));
                connect(weaBus,HDirTil[2].weaBus)
                  annotation (Line(points={{-83,6},{-68,6},{-68,62}},color={255,204,51},thickness=0.5));
                connect(weaBus,HDifTil[3].weaBus)
                  annotation (Line(points={{-83,6},{-74,6},{-74,30},{-68,30}},color={255,204,51},thickness=0.5));
                connect(weaBus,HDirTil[3].weaBus)
                  annotation (Line(points={{-83,6},{-68,6},{-68,62}},color={255,204,51},thickness=0.5));
                connect(weaBus,HDifTil[4].weaBus)
                  annotation (Line(points={{-83,6},{-74,6},{-74,30},{-68,30}},color={255,204,51},thickness=0.5));
                connect(weaBus,HDirTil[4].weaBus)
                  annotation (Line(points={{-83,6},{-68,6},{-68,62}},color={255,204,51},thickness=0.5));
                connect(weaBus,HDifTil[5].weaBus)
                  annotation (Line(points={{-83,6},{-74,6},{-74,30},{-68,30}},color={255,204,51},thickness=0.5));
                connect(weaBus,HDirTil[5].weaBus)
                  annotation (Line(points={{-83,6},{-68,6},{-68,62}},color={255,204,51},thickness=0.5));
                connect(weaBus,HDifTil[6].weaBus)
                  annotation (Line(points={{-83,6},{-74,6},{-74,30},{-68,30}},color={255,204,51},thickness=0.5));
                connect(weaBus,HDirTil[6].weaBus)
                  annotation (Line(points={{-83,6},{-68,6},{-68,62}},color={255,204,51},thickness=0.5));
                connect(personsRad.port,thermalZoneTwoElements.intGainsRad)
                  annotation (Line(points={{68,-32},{84,-32},{100,-32},{100,24},{92,24}},color={191,0,0}));
                connect(thermalConductorWin.solid,thermalZoneTwoElements.window)
                  annotation (Line(points={{38,21},{40,21},{40,20},{44,20}},color={191,0,0}));
                connect(prescribedTemperature1.port,thermalConductorWin.fluid)
                  annotation (Line(points={{20,20},{28,20},{28,21}},color={191,0,0}));
                connect(thermalZoneTwoElements.extWall,thermalConductorWall.solid)
                  annotation (Line(points={{44,12},{40,12},{40,1},{36,1}},color={191,0,0}));
                connect(thermalConductorWall.fluid,prescribedTemperature.port)
                  annotation (Line(points={{26,1},{24,1},{24,0},{20,0}},color={191,0,0}));
                connect(hConWall.y,thermalConductorWall.Gc)
                  annotation (Line(points={{30,-11.6},{30,-4},{31,-4}},color={0,0,127}));
                connect(hConWin.y,thermalConductorWin.Gc)
                  annotation (Line(points={{32,33.6},{32,26},{33,26}},color={0,0,127}));
                connect(weaBus.TBlaSky,eqAirTemp.TBlaSky)
                  annotation (Line(points={{-83,6},{-58,6},{-58,2},{-32,2},{-32,-4},{-26,-4}},color={255,204,51},thickness=0.5),Text(string="%first",index=-1,extent={{-6,3},{-6,3}}));
                connect(machinesConv.port,thermalZoneTwoElements.intGainsConv)
                  annotation (Line(points={{68,-74},{82,-74},{96,-74},{96,20},{92,20}},color={191,0,0}));
                connect(personsConv.port,thermalZoneTwoElements.intGainsConv)
                  annotation (Line(points={{68,-52},{96,-52},{96,20},{92,20}},color={191,0,0}));
                connect(corGDoublePane.solarRadWinTrans,thermalZoneTwoElements.solRad)
                  annotation (Line(points={{27,64},{34,64},{40,64},{40,31},{43,31}},color={0,0,127}));
                connect(port_a,thermalZoneTwoElements.intGainsConv)
                  annotation (Line(points={{0,100},{96,100},{96,20},{92,20}},color={191,0,0}));
                connect(thermalZoneTwoElements.TAir,TAir)
                  annotation (Line(points={{93,32},{98,32},{98,0},{110,0}},color={0,0,127}));
              end Restroom;

              model Storage
                "This is the simulation model of Storage within building OfficeBuilding"
                Buildings.BoundaryConditions.SolarIrradiation.DiffusePerez HDifTil[6](
                  each outSkyCon=true,
                  each outGroCon=true,
                  til={1.5707963267949,1.5707963267949,1.5707963267949,1.5707963267949,0,0},
                  azi={3.1415926535898,0,1.5707963267949,-1.5707963267949,0,0})
                  "Calculates diffuse solar radiation on titled surface for all directions"
                  annotation (Placement(transformation(extent={{-68,20},{-48,40}})));
                Buildings.BoundaryConditions.SolarIrradiation.DirectTiltedSurface HDirTil[6](til={
                      1.5707963267949,1.5707963267949,1.5707963267949,1.5707963267949,0,0},
                    azi={3.1415926535898,0,1.5707963267949,-1.5707963267949,0,0})
                  "Calculates direct solar radiation on titled surface for all directions"
                  annotation (Placement(transformation(extent={{-68,52},{-48,72}})));
                Buildings.ThermalZones.ReducedOrder.SolarGain.CorrectionGDoublePane corGDoublePane(
                  n=6,
                  UWin=1.8936557576825388)
                  "Correction factor for solar transmission"
                  annotation (Placement(transformation(extent={{6,54},{26,74}})));
                Buildings.ThermalZones.ReducedOrder.RC.TwoElements thermalZoneTwoElements(
                  redeclare package Medium=Buildings.Media.Air,
                  VAir=1957.0752803145606,
                  hConExt=2.049017882895913,
                  hConWin=2.7,
                  gWin=0.67,
                  ratioWinConRad=0.03,
                  nExt=1,
                  RExt={3.86247193107782e-05},
                  CExt={244946870.12585458},
                  hRad=4.999999999999999,
                  AInt=1929.7747745572801,
                  hConInt=2.207073495341845,
                  nInt=1,
                  RInt={2.8158586752337178e-05},
                  CInt={278363134.2883944},
                  RWin=0.0036645650195461206,
                  RExtRem=0.0020876783974767463,
                  energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,
                  extWallRC(
                    thermCapExt(
                      each der_T(
                        fixed=true))),
                  intWallRC(
                    thermCapInt(
                      each der_T(
                        fixed=true))),
                  nOrientations=6,
                  AWin={44.728617934666985,44.728617934666985,4.146071600551982,4.146071600551982,0.0,0.0},
                  ATransparent={44.728617934666985,44.728617934666985,4.146071600551982,4.146071600551982,0.0,0.0},
                  AExt={134.185853804001,134.185853804001,12.438214801655947,12.438214801655947,273.48067614000007,273.48067614000007})
                  "Thermal zone"
                  annotation (Placement(transformation(extent={{44,-2},{92,34}})));
                Buildings.ThermalZones.ReducedOrder.EquivalentAirTemperature.VDI6007WithWindow eqAirTemp(
                  n=6,
                  wfGro=0.36269768383327633,
                  wfWall={0.15582361279765056,0.15582361279765056,0.014443903825944526,0.014443903825944526,0.2967672829195335,0.0},
                  wfWin={0.4575846758314,0.4575846758314,0.04241532416859994,0.04241532416859994,0.0,0.0},
                  withLongwave=true,
                  aExt=0.5,
                  hConWallOut=20.000000000000004,
                  hRad=4.999999999999999,
                  hConWinOut=19.999999999999996,
                  TGro=286.15)
                  "Computes equivalent air temperature"
                  annotation (Placement(transformation(extent={{-24,-14},{-4,6}})));
                Modelica.Blocks.Math.Add solRad[6]
                  "Sums up solar radiation of both directions"
                  annotation (Placement(transformation(extent={{-38,6},{-28,16}})));
                Modelica.Thermal.HeatTransfer.Sources.PrescribedTemperature prescribedTemperature
                  "Prescribed temperature for exterior walls outdoor surface temperature"
                  annotation (Placement(transformation(extent={{8,-6},{20,6}})));
                Modelica.Thermal.HeatTransfer.Sources.PrescribedTemperature prescribedTemperature1
                  "Prescribed temperature for windows outdoor surface temperature"
                  annotation (Placement(transformation(extent={{8,14},{20,26}})));
                Modelica.Thermal.HeatTransfer.Components.Convection thermalConductorWin
                  "Outdoor convective heat transfer of windows"
                  annotation (Placement(transformation(extent={{38,16},{28,26}})));
                Modelica.Thermal.HeatTransfer.Components.Convection thermalConductorWall
                  "Outdoor convective heat transfer of walls"
                  annotation (Placement(transformation(extent={{36,6},{26,-4}})));
                Modelica.Blocks.Sources.Constant const[6](
                  each k=0)
                  "Sets sunblind signal to zero (open)"
                  annotation (Placement(transformation(extent={{-20,14},{-14,20}})));
                Buildings.BoundaryConditions.WeatherData.Bus weaBus
                  "Weather data bus"
                  annotation (Placement(transformation(extent={{-100,-10},{-66,22}}),iconTransformation(extent={{-70,-12},{-50,8}})));
                Modelica.Blocks.Sources.Constant hConWall(
                  k=25.000000000000004*840.2094894913139)
                  "Outdoor coefficient of heat transfer for walls"
                  annotation (Placement(transformation(extent={{-4,-4},{4,4}},rotation=90,origin={30,-16})));
                Modelica.Blocks.Sources.Constant hConWin(
                  k=25.000000000000004*97.74937907043793)
                  "Outdoor coefficient of heat transfer for windows"
                  annotation (Placement(transformation(extent={{4,-4},{-4,4}},rotation=90,origin={32,38})));
                Modelica.Thermal.HeatTransfer.Sources.PrescribedHeatFlow personsRad
                  "Radiative heat flow of persons"
                  annotation (Placement(transformation(extent={{48,-42},{68,-22}})));
                Modelica.Thermal.HeatTransfer.Sources.PrescribedHeatFlow personsConv
                  "Convective heat flow of persons"
                  annotation (Placement(transformation(extent={{48,-62},{68,-42}})));
                Modelica.Thermal.HeatTransfer.Sources.PrescribedHeatFlow machinesConv
                  "Convective heat flow of machines"
                  annotation (Placement(transformation(extent={{48,-84},{68,-64}})));
                Modelica.Blocks.Sources.CombiTimeTable internalGains(
                  tableOnFile=true,
                  extrapolation=Modelica.Blocks.Types.Extrapolation.Periodic,
                  tableName="Internals",
                  fileName=Modelica.Utilities.Files.loadResource(
                    "modelica://Buildings/Resources/Data/Experimental/DHC/Loads/Examples/BaseClasses/GeojsonExportRC/OfficeBuilding/InternalGains_Storage.txt"),
                  columns={2,3,4})
                  "Table with profiles for persons (radiative and convective) and machines (convective)"
                  annotation (Placement(transformation(extent={{6,-60},{22,-44}})));
                Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_a port_a
                  "Heat port for sensible convective gains"
                  annotation (Placement(transformation(extent={{-10,90},{10,110}}),iconTransformation(extent={{-10,90},{10,110}})));
                Buildings.Controls.OBC.CDL.Interfaces.RealOutput TAir(
                  quantity="ThermodynamicTemperature",
                  unit="K",
                  displayUnit="degC")
                  "Room air temperature"
                  annotation (Placement(transformation(extent={{100,-10},{120,10}})));
              equation
                connect(eqAirTemp.TEqAirWin,prescribedTemperature1.T)
                  annotation (Line(points={{-3,-0.2},{0,-0.2},{0,20},{6.8,20}},color={0,0,127}));
                connect(eqAirTemp.TEqAir,prescribedTemperature.T)
                  annotation (Line(points={{-3,-4},{4,-4},{4,0},{6.8,0}},color={0,0,127}));
                connect(weaBus.TDryBul,eqAirTemp.TDryBul)
                  annotation (Line(points={{-83,6},{-83,-2},{-38,-2},{-38,-10},{-26,-10}},color={255,204,51},thickness=0.5),Text(string="%first",index=-1,extent={{-6,3},{-6,3}}));
                connect(internalGains.y[1],personsRad.Q_flow)
                  annotation (Line(points={{22.8,-52},{28,-52},{28,-32},{48,-32}},color={0,0,127}));
                connect(internalGains.y[2],personsConv.Q_flow)
                  annotation (Line(points={{22.8,-52},{36,-52},{48,-52}},color={0,0,127}));
                connect(internalGains.y[3],machinesConv.Q_flow)
                  annotation (Line(points={{22.8,-52},{28,-52},{28,-74},{48,-74}},color={0,0,127}));
                connect(const.y,eqAirTemp.sunblind)
                  annotation (Line(points={{-13.7,17},{-12,17},{-12,8},{-14,8},{-14,8}},color={0,0,127}));
                connect(HDifTil.HSkyDifTil,corGDoublePane.HSkyDifTil)
                  annotation (Line(points={{-47,36},{-28,36},{-6,36},{-6,66},{4,66}},color={0,0,127}));
                connect(HDirTil.H,corGDoublePane.HDirTil)
                  annotation (Line(points={{-47,62},{-10,62},{-10,70},{4,70}},color={0,0,127}));
                connect(HDirTil.H,solRad.u1)
                  annotation (Line(points={{-47,62},{-42,62},{-42,14},{-39,14}},color={0,0,127}));
                connect(HDirTil.inc,corGDoublePane.inc)
                  annotation (Line(points={{-47,58},{4,58},{4,58}},color={0,0,127}));
                connect(HDifTil.H,solRad.u2)
                  annotation (Line(points={{-47,30},{-44,30},{-44,8},{-39,8}},color={0,0,127}));
                connect(HDifTil.HGroDifTil,corGDoublePane.HGroDifTil)
                  annotation (Line(points={{-47,24},{-4,24},{-4,62},{4,62}},color={0,0,127}));
                connect(solRad.y,eqAirTemp.HSol)
                  annotation (Line(points={{-27.5,11},{-26,11},{-26,2},{-26,2}},color={0,0,127}));
                connect(weaBus,HDifTil[1].weaBus)
                  annotation (Line(points={{-83,6},{-74,6},{-74,30},{-68,30}},color={255,204,51},thickness=0.5));
                connect(weaBus,HDirTil[1].weaBus)
                  annotation (Line(points={{-83,6},{-68,6},{-68,62}},color={255,204,51},thickness=0.5));
                connect(weaBus,HDifTil[2].weaBus)
                  annotation (Line(points={{-83,6},{-74,6},{-74,30},{-68,30}},color={255,204,51},thickness=0.5));
                connect(weaBus,HDirTil[2].weaBus)
                  annotation (Line(points={{-83,6},{-68,6},{-68,62}},color={255,204,51},thickness=0.5));
                connect(weaBus,HDifTil[3].weaBus)
                  annotation (Line(points={{-83,6},{-74,6},{-74,30},{-68,30}},color={255,204,51},thickness=0.5));
                connect(weaBus,HDirTil[3].weaBus)
                  annotation (Line(points={{-83,6},{-68,6},{-68,62}},color={255,204,51},thickness=0.5));
                connect(weaBus,HDifTil[4].weaBus)
                  annotation (Line(points={{-83,6},{-74,6},{-74,30},{-68,30}},color={255,204,51},thickness=0.5));
                connect(weaBus,HDirTil[4].weaBus)
                  annotation (Line(points={{-83,6},{-68,6},{-68,62}},color={255,204,51},thickness=0.5));
                connect(weaBus,HDifTil[5].weaBus)
                  annotation (Line(points={{-83,6},{-74,6},{-74,30},{-68,30}},color={255,204,51},thickness=0.5));
                connect(weaBus,HDirTil[5].weaBus)
                  annotation (Line(points={{-83,6},{-68,6},{-68,62}},color={255,204,51},thickness=0.5));
                connect(weaBus,HDifTil[6].weaBus)
                  annotation (Line(points={{-83,6},{-74,6},{-74,30},{-68,30}},color={255,204,51},thickness=0.5));
                connect(weaBus,HDirTil[6].weaBus)
                  annotation (Line(points={{-83,6},{-68,6},{-68,62}},color={255,204,51},thickness=0.5));
                connect(personsRad.port,thermalZoneTwoElements.intGainsRad)
                  annotation (Line(points={{68,-32},{84,-32},{100,-32},{100,24},{92,24}},color={191,0,0}));
                connect(thermalConductorWin.solid,thermalZoneTwoElements.window)
                  annotation (Line(points={{38,21},{40,21},{40,20},{44,20}},color={191,0,0}));
                connect(prescribedTemperature1.port,thermalConductorWin.fluid)
                  annotation (Line(points={{20,20},{28,20},{28,21}},color={191,0,0}));
                connect(thermalZoneTwoElements.extWall,thermalConductorWall.solid)
                  annotation (Line(points={{44,12},{40,12},{40,1},{36,1}},color={191,0,0}));
                connect(thermalConductorWall.fluid,prescribedTemperature.port)
                  annotation (Line(points={{26,1},{24,1},{24,0},{20,0}},color={191,0,0}));
                connect(hConWall.y,thermalConductorWall.Gc)
                  annotation (Line(points={{30,-11.6},{30,-4},{31,-4}},color={0,0,127}));
                connect(hConWin.y,thermalConductorWin.Gc)
                  annotation (Line(points={{32,33.6},{32,26},{33,26}},color={0,0,127}));
                connect(weaBus.TBlaSky,eqAirTemp.TBlaSky)
                  annotation (Line(points={{-83,6},{-58,6},{-58,2},{-32,2},{-32,-4},{-26,-4}},color={255,204,51},thickness=0.5),Text(string="%first",index=-1,extent={{-6,3},{-6,3}}));
                connect(machinesConv.port,thermalZoneTwoElements.intGainsConv)
                  annotation (Line(points={{68,-74},{82,-74},{96,-74},{96,20},{92,20}},color={191,0,0}));
                connect(personsConv.port,thermalZoneTwoElements.intGainsConv)
                  annotation (Line(points={{68,-52},{96,-52},{96,20},{92,20}},color={191,0,0}));
                connect(corGDoublePane.solarRadWinTrans,thermalZoneTwoElements.solRad)
                  annotation (Line(points={{27,64},{34,64},{40,64},{40,31},{43,31}},color={0,0,127}));
                connect(port_a,thermalZoneTwoElements.intGainsConv)
                  annotation (Line(points={{0,100},{96,100},{96,20},{92,20}},color={191,0,0}));
                connect(thermalZoneTwoElements.TAir,TAir)
                  annotation (Line(points={{93,32},{98,32},{98,0},{110,0}},color={0,0,127}));
              end Storage;
              annotation (
                Documentation(
                  info="<html>
<p>
This package contains RC building zone models programmatically generated from 
a GeoJSON file.
</p>
</html>"));
            end OfficeBuilding;
            annotation (
              Documentation(
                info="
<html>
<p>
This package contains RC building zone models programmatically generated from 
a GeoJSON file.
</p>
</html>"));
          end GeojsonExportRC;
          annotation (
            preferredView="info",
            Documentation(
              info="<html>
<p>
This package contains base classes that are used to construct the classes in
<a href=\"modelica://Buildings.Experimental.DHC.Loads.BaseClasses.Examples\">
Buildings.Experimental.DHC.Loads.BaseClasses.Examples</a>.
</p>
</html>"));
        end BaseClasses;
        annotation (
          preferredView="info",
          Documentation(
            info="<html>
<p>
This package contains advanced examples illustrating the use of the models in
<a href=\"modelica://Buildings.Experimental.DHC.Loads\">
Buildings.Experimental.DHC.Loads</a>.
</p>
</html>"));
      end Examples;

      package Validation "Collection of validation models"
        extends Modelica.Icons.ExamplesPackage;

        model BenchmarkFlowDistribution1
          "Performance benchmark of building heating water flow distribution modeling"
          extends Modelica.Icons.Example;
          package Medium1=Buildings.Media.Water
            "Source side medium";
          package Medium2=Buildings.Media.Air
            "Load side medium";
          parameter String filNam="modelica://Buildings/Resources/Data/Experimental/DHC/Loads/Examples/SwissResidential_20190916.mos"
            "File name with thermal loads as time series";
          parameter Integer nLoa=5
            "Number of served loads"
            annotation (Evaluate=true);
          parameter Modelica.Units.SI.Temperature T_aHeaWat_nominal(
            min=273.15,
            displayUnit="degC") = 273.15 + 40
            "Heating water inlet temperature at nominal conditions"
            annotation (Dialog(group="Nominal condition"));
          parameter Modelica.Units.SI.Temperature T_bHeaWat_nominal(
            min=273.15,
            displayUnit="degC") = T_aHeaWat_nominal - 5
            "Heating water outlet temperature at nominal conditions"
            annotation (Dialog(group="Nominal condition"));
          parameter Modelica.Units.SI.Temperature T_aLoaHea_nominal(
            min=273.15,
            displayUnit="degC") = 273.15 + 20
            "Load side inlet temperature at nominal conditions in heating mode"
            annotation (Dialog(group="Nominal condition"));
          parameter Modelica.Units.SI.MassFlowRate mLoaHea_flow_nominal(min=0) = 1
            "Load side mass flow rate at nominal conditions in heating mode"
            annotation (Dialog(group="Nominal condition"));
          parameter Modelica.Units.SI.PressureDifference dp_nominal=nLoa*1500*2 + 2*500
               + 30000 "Nominal pressure drop in the distribution line";
          parameter Real facMul=10
            "Mulitplier factor for terminal units"
            annotation (Dialog(group="Scaling"));
          final parameter Modelica.Units.SI.MassFlowRate m_flow_nominal=sum(ter.mHeaWat_flow_nominal)
              *facMul "Nominal mass flow rate in the distribution line";
          final parameter Modelica.Units.SI.HeatFlowRate QHea_flow_nominal(min=Modelica.Constants.eps)
             = estcp.DHC.Loads.BaseClasses.getPeakLoad(                 string=
            "#Peak space heating load", filNam=Modelica.Utilities.Files.loadResource(
            filNam))/facMul "Design heating heat flow rate (>=0)"
            annotation (Dialog(group="Design parameter"));
          estcp.DHC.Loads.BaseClasses.FlowDistribution disFloHea(
            redeclare package Medium = Medium1,
            m_flow_nominal=m_flow_nominal,
            have_pum=true,
            dp_nominal=dp_nominal,
            nPorts_a1=nLoa,
            nPorts_b1=nLoa) "Heating water distribution system"
            annotation (Placement(transformation(extent={{40,-90},{60,-70}})));
          estcp.DHC.Loads.BaseClasses.Validation.BaseClasses.FanCoil2PipeHeating
            ter[nLoa](
            each final facMul=facMul,
            redeclare each final package Medium1 = Medium1,
            redeclare each final package Medium2 = Medium2,
            each final QHea_flow_nominal=QHea_flow_nominal,
            each final mLoaHea_flow_nominal=mLoaHea_flow_nominal,
            each final T_aHeaWat_nominal=T_aHeaWat_nominal,
            each final T_bHeaWat_nominal=T_bHeaWat_nominal,
            each final T_aLoaHea_nominal=T_aLoaHea_nominal)
            "Heating terminal unit"
            annotation (Placement(transformation(extent={{40,38},{60,58}})));
          Modelica.Blocks.Sources.CombiTimeTable loa(
            tableOnFile=true,
            tableName="tab1",
            fileName=Modelica.Utilities.Files.loadResource(
              filNam),
            extrapolation=Modelica.Blocks.Types.Extrapolation.Periodic,
            y(each unit="W"),
            offset={0,0,0},
            columns={2,3,4},
            smoothness=Modelica.Blocks.Types.Smoothness.MonotoneContinuousDerivative1)
            "Reader for thermal loads (y[1] is cooling load, y[2] is heating load)"
            annotation (Placement(transformation(extent={{-100,-10},{-80,10}})));
          Buildings.Controls.OBC.CDL.Reals.Sources.Constant minTSet(
            k=293.15,
            y(final unit="K",
              displayUnit="degC"))
            "Minimum temperature set point"
            annotation (Placement(transformation(extent={{-100,50},{-80,70}})));
          Buildings.Controls.OBC.CDL.Routing.RealScalarReplicator reaRep(
            nout=nLoa)
            "Repeat input to output an array"
            annotation (Placement(transformation(extent={{-60,50},{-40,70}})));
          Buildings.Controls.OBC.CDL.Routing.RealScalarReplicator reaRep1(
            nout=nLoa)
            "Repeat input to output an array"
            annotation (Placement(transformation(extent={{-60,-10},{-40,10}})));
          Buildings.Fluid.Sources.Boundary_pT supHeaWat(
            redeclare package Medium = Medium1,
            use_T_in=true,
            nPorts=1) "Heating water supply" annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={-50,-80})));
          Buildings.Fluid.Sources.Boundary_pT sinHeaWat(
            redeclare package Medium = Medium1,
            p=300000,
            nPorts=1) "Sink for heating water" annotation (Placement(
                transformation(
                extent={{10,-10},{-10,10}},
                rotation=0,
                origin={90,-80})));
          Buildings.Controls.OBC.CDL.Reals.Sources.Constant THeaWatSup(
            k=max(
              ter.T_aHeaWat_nominal))
            "Supply temperature"
            annotation (Placement(transformation(extent={{-100,-90},{-80,-70}})));
        equation
          connect(ter.port_bHeaWat,disFloHea.ports_a1)
            annotation (Line(points={{60,39.6667},{70,39.6667},{70,-74},{60,-74}},color={0,127,255}));
          connect(disFloHea.ports_b1,ter.port_aHeaWat)
            annotation (Line(points={{40,-74},{30,-74},{30,39.6667},{40,39.6667}},color={0,127,255}));
          connect(reaRep.y,ter.TSetHea)
            annotation (Line(points={{-38,60},{20,60},{20,53},{39.1667,53}},color={0,0,127}));
          connect(loa.y[2],reaRep1.u)
            annotation (Line(points={{-79,0},{-62,0}},color={0,0,127}));
          connect(reaRep1.y,ter.QReqHea_flow)
            annotation (Line(points={{-38,0},{0,0},{0,46.3333},{39.1667,46.3333}},color={0,0,127}));
          connect(supHeaWat.ports[1],disFloHea.port_a)
            annotation (Line(points={{-40,-80},{40,-80}},color={0,127,255}));
          connect(disFloHea.port_b,sinHeaWat.ports[1])
            annotation (Line(points={{60,-80},{80,-80}},color={0,127,255}));
          connect(ter.mReqHeaWat_flow,disFloHea.mReq_flow)
            annotation (Line(points={{60.8333,44.6667},{80,44.6667},{80,-60},{20,-60},{
                  20,-84},{39,-84}},                                                                     color={0,0,127}));
          connect(THeaWatSup.y,supHeaWat.T_in)
            annotation (Line(points={{-78,-80},{-72,-80},{-72,-76},{-62,-76}},color={0,0,127}));
          connect(minTSet.y,reaRep.u)
            annotation (Line(points={{-78,60},{-62,60}},color={0,0,127}));
          annotation (
            Documentation(
              info="<html>
<p>
This model is part of a computational performance benchmark between
</p>
<ul>
<li>
a simplified modeling of the piping network as implemented in
<a href=\"modelica://Buildings.Experimental.DHC.Loads.BaseClasses.FlowDistribution\">
Buildings.Experimental.DHC.Loads.BaseClasses.FlowDistribution</a>
(see the corresponding example
<a href=\"modelica://Buildings.Experimental.DHC.Loads.BaseClasses.Validation.BenchmarkFlowDistribution1\">
Buildings.Experimental.DHC.Loads.BaseClasses.Validation.BenchmarkFlowDistribution1</a>), and
</li>
<li>
an explicit modeling of the piping network (see the corresponding example
<a href=\"modelica://Buildings.Experimental.DHC.Loads.BaseClasses.Validation.BenchmarkFlowDistribution2\">
Buildings.Experimental.DHC.Loads.BaseClasses.Validation.BenchmarkFlowDistribution2</a>).
</li>
</ul>
</html>",     revisions="<html>
<ul>
<li>
February 21, 2020, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>"),  Icon(
              coordinateSystem(
                preserveAspectRatio=false)),
            Diagram(
              coordinateSystem(
                preserveAspectRatio=false,
                extent={{-120,-120},{120,120}})),
            experiment(
              StopTime=2000000,
              Tolerance=1e-06),
            __Dymola_Commands(
              file="modelica://Buildings/Resources/Scripts/Dymola/Experimental/DHC/Loads/BaseClasses/Validation/BenchmarkFlowDistribution1.mos" "Simulate and plot"));
        end BenchmarkFlowDistribution1;

        model BenchmarkFlowDistribution2
          "Performance benchmark of building heating water flow distribution modeling"
          extends Modelica.Icons.Example;
          package Medium1=Buildings.Media.Water
            "Source side medium";
          package Medium2=Buildings.Media.Air
            "Load side medium";
          parameter String filNam="modelica://Buildings/Resources/Data/Experimental/DHC/Loads/Examples/SwissResidential_20190916.mos"
            "File name with thermal loads as time series";
          parameter Integer nLoa=5
            "Number of served loads"
            annotation (Evaluate=true);
          parameter Modelica.Units.SI.Temperature T_aHeaWat_nominal=273.15 + 40
            "Heating water inlet temperature at nominal conditions"
            annotation (Dialog(group="Nominal condition"));
          parameter Modelica.Units.SI.Temperature T_bHeaWat_nominal(
            min=273.15,
            displayUnit="degC") = T_aHeaWat_nominal - 5
            "Heating water outlet temperature at nominal conditions"
            annotation (Dialog(group="Nominal condition"));
          parameter Modelica.Units.SI.Temperature T_aLoaHea_nominal=273.15 + 20
            "Load side inlet temperature at nominal conditions in heating mode"
            annotation (Dialog(group="Nominal condition"));
          parameter Modelica.Units.SI.MassFlowRate mLoaHea_flow_nominal=1
            "Load side mass flow rate at nominal conditions in heating mode"
            annotation (Dialog(group="Nominal condition"));
          parameter Modelica.Units.SI.Time tau=120
            "Time constant of fluid temperature variation at nominal flow rate"
            annotation (Dialog(tab="Dynamics", group="Nominal condition"));
          parameter Real facMul=10
            "Mulitplier factor for terminal units"
            annotation (Dialog(group="Scaling"));
          final parameter Modelica.Units.SI.MassFlowRate mCon_flow_nominal[nLoa]=ter.mHeaWat_flow_nominal
              *facMul "Nominal mass flow rate in each connection line";
          final parameter Modelica.Units.SI.MassFlowRate m_flow_nominal=sum(
              mCon_flow_nominal) "Nominal mass flow rate in the distribution line";
          final parameter Modelica.Units.SI.PressureDifference dp_nominal=sum(dis.con.pipDisSup.dp_nominal)
               + sum(dis.con.pipDisRet.dp_nominal) + max(ter.dpSou_nominal)
            "Nominal pressure drop in the distribution line";
          final parameter Modelica.Units.SI.HeatFlowRate QHea_flow_nominal=
              estcp.DHC.Loads.BaseClasses.getPeakLoad(                 string="#Peak space heating load", filNam=
              Modelica.Utilities.Files.loadResource(filNam))/facMul
            "Design heating heat flow rate (>=0)"
            annotation (Dialog(group="Design parameter"));
          estcp.DHC.Loads.BaseClasses.Validation.BaseClasses.FanCoil2PipeHeatingValve
            ter[nLoa](
            each final facMul=facMul,
            redeclare each final package Medium1 = Medium1,
            redeclare each final package Medium2 = Medium2,
            each final QHea_flow_nominal=QHea_flow_nominal,
            each final mLoaHea_flow_nominal=mLoaHea_flow_nominal,
            each final T_aHeaWat_nominal=T_aHeaWat_nominal,
            each final T_bHeaWat_nominal=T_bHeaWat_nominal,
            each final T_aLoaHea_nominal=T_aLoaHea_nominal)
            "Heating terminal unit"
            annotation (Placement(transformation(extent={{50,38},{70,58}})));
          Modelica.Blocks.Sources.CombiTimeTable loa(
            tableOnFile=true,
            tableName="tab1",
            fileName=Modelica.Utilities.Files.loadResource(
              filNam),
            extrapolation=Modelica.Blocks.Types.Extrapolation.Periodic,
            y(each unit="W"),
            offset={0,0,0},
            columns={2,3,4},
            smoothness=Modelica.Blocks.Types.Smoothness.MonotoneContinuousDerivative1)
            "Reader for thermal loads (y[1] is cooling load, y[2] is heating load)"
            annotation (Placement(transformation(extent={{-100,-10},{-80,10}})));
          Buildings.Controls.OBC.CDL.Reals.Sources.Constant minTSet(
            k=293.15,
            y(final unit="K",
              displayUnit="degC"))
            "Minimum temperature set point"
            annotation (Placement(transformation(extent={{-100,50},{-80,70}})));
          Buildings.Controls.OBC.CDL.Routing.RealScalarReplicator reaRep(
            nout=nLoa)
            "Repeat input to output an array"
            annotation (Placement(transformation(extent={{-60,50},{-40,70}})));
          Buildings.Controls.OBC.CDL.Routing.RealScalarReplicator reaRep1(
            nout=nLoa)
            "Repeat input to output an array"
            annotation (Placement(transformation(extent={{-60,-10},{-40,10}})));
          Buildings.Fluid.Sources.Boundary_pT supHeaWat(
            redeclare package Medium = Medium1,
            use_T_in=true,
            nPorts=2) "Heating water supply" annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={-50,-80})));
          estcp.DHC.Networks.Distribution2Pipe dis(
            redeclare final package Medium = Medium1,
            nCon=nLoa,
            allowFlowReversal=false,
            mDis_flow_nominal=m_flow_nominal,
            mCon_flow_nominal=mCon_flow_nominal,
            dpDis_nominal=fill(1500, nLoa))
            annotation (Placement(transformation(extent={{40,-90},{80,-70}})));
          Buildings.Fluid.Movers.FlowControlled_dp pum(
            redeclare package Medium = Medium1,
            per(final motorCooledByFluid=false),
            energyDynamics=Modelica.Fluid.Types.Dynamics.SteadyState,
            m_flow_nominal=m_flow_nominal,
            addPowerToMedium=false,
            nominalValuesDefineDefaultPressureCurve=true,
            use_inputFilter=false,
            dp_nominal=dp_nominal)
            annotation (Placement(transformation(extent={{10,-90},{30,-70}})));
          Buildings.Fluid.MixingVolumes.MixingVolume vol(
            final prescribedHeatFlowRate=true,
            redeclare final package Medium = Medium1,
            V=m_flow_nominal*tau/rho_default,
            final mSenFac=1,
            final m_flow_nominal=m_flow_nominal,
            final energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,
            nPorts=2) "Volume for fluid stream" annotation (Placement(
                transformation(extent={{-31,-80},{-11,-60}})));
          Buildings.Controls.OBC.CDL.Reals.Sources.Constant dpPum(
            k=dp_nominal)
            "Prescribed head"
            annotation (Placement(transformation(extent={{-100,-50},{-80,-30}})));
          Buildings.Controls.OBC.CDL.Reals.Sources.Constant THeaWatSup(
            k=max(
              ter.T_aHeaWat_nominal))
            "Supply temperature"
            annotation (Placement(transformation(extent={{-100,-90},{-80,-70}})));
        protected
          parameter Medium1.ThermodynamicState sta_default=Medium1.setState_pTX(
            T=Medium1.T_default,
            p=Medium1.p_default,
            X=Medium1.X_default);
          parameter Modelica.Units.SI.Density rho_default=Medium1.density(sta_default)
            "Density, used to compute fluid volume";
        equation
          connect(loa.y[2],reaRep1.u)
            annotation (Line(points={{-79,0},{-62,0}},color={0,0,127}));
          connect(reaRep.y,ter.TSetHea)
            annotation (Line(points={{-38,60},{20,60},{20,53},{49.1667,53}},color={0,0,127}));
          connect(reaRep1.y,ter.QReqHea_flow)
            annotation (Line(points={{-38,0},{0,0},{0,46.3333},{49.1667,46.3333}},color={0,0,127}));
          connect(ter.port_bHeaWat,dis.ports_aCon)
            annotation (Line(points={{70,39.6667},{80,39.6667},{80,0},{72,0},{72,-70}},color={0,127,255}));
          connect(dis.ports_bCon,ter.port_aHeaWat)
            annotation (Line(points={{48,-70},{48,0},{40,0},{40,39.6667},{50,39.6667}},color={0,127,255}));
          connect(pum.port_b,dis.port_aDisSup)
            annotation (Line(points={{30,-80},{40,-80}},color={0,127,255}));
          connect(dis.port_bDisRet,supHeaWat.ports[1])
            annotation (Line(points={{40,-86},{32,-86},{32,-100},{-40,-100},{-40,-78}},color={0,127,255}));
          connect(vol.ports[1],pum.port_a)
            annotation (Line(points={{-23,-80},{10,-80}},color={0,127,255}));
          connect(supHeaWat.ports[2],vol.ports[2])
            annotation (Line(points={{-40,-82},{-40,-80},{-19,-80}},color={0,127,255}));
          connect(THeaWatSup.y,supHeaWat.T_in)
            annotation (Line(points={{-78,-80},{-70,-80},{-70,-76},{-62,-76}},color={0,0,127}));
          connect(dpPum.y,pum.dp_in)
            annotation (Line(points={{-78,-40},{20,-40},{20,-68}},color={0,0,127}));
          connect(reaRep.u,minTSet.y)
            annotation (Line(points={{-62,60},{-78,60}},color={0,0,127}));
          annotation (
            Documentation(
              info="<html>
<p>
This model is part of a computational performance benchmark between
</p>
<ul>
<li>
a simplified modeling of the piping network as implemented in
<a href=\"modelica://Buildings.Experimental.DHC.Loads.BaseClasses.FlowDistribution\">
Buildings.Experimental.DHC.Loads.BaseClasses.FlowDistribution</a>
(see the corresponding example
<a href=\"modelica://Buildings.Experimental.DHC.Loads.BaseClasses.Validation.BenchmarkFlowDistribution1\">
Buildings.Experimental.DHC.Loads.BaseClasses.Validation.BenchmarkFlowDistribution1</a>), and
</li>
<li>
an explicit modeling of the piping network (see the corresponding example
<a href=\"modelica://Buildings.Experimental.DHC.Loads.BaseClasses.Validation.BenchmarkFlowDistribution2\">
Buildings.Experimental.DHC.Loads.BaseClasses.Validation.BenchmarkFlowDistribution2</a>).
</li>
</ul>
</html>",     revisions="<html>
<ul>
<li>
February 21, 2020, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>"),  experiment(
              StopTime=2000000,
              Tolerance=1e-06),
            Icon(
              coordinateSystem(
                preserveAspectRatio=false)),
            Diagram(
              coordinateSystem(
                preserveAspectRatio=false,
                extent={{-120,-120},{120,120}})),
            __Dymola_Commands(
              file="modelica://Buildings/Resources/Scripts/Dymola/Experimental/DHC/Loads/BaseClasses/Validation/BenchmarkFlowDistribution2.mos" "Simulate and plot"));
        end BenchmarkFlowDistribution2;

        model BuildingWithETS
          "Validation of the base class PartialBuildingWithPartialETS"
          extends Modelica.Icons.Example;
          import TypDisSys=estcp.DHC.Types.DistrictSystemType
            "District system type enumeration";
          package MediumW=Buildings.Media.Water
            "Water";
          package MediumS=Modelica.Media.Water.WaterIF97_ph (
            h_default=2770E3)
            "Steam";
          parameter Modelica.Units.SI.MassFlowRate m_flow_nominal=1
            "Nominal mass flow rate";
          parameter Modelica.Units.SI.HeatFlowRate QHeaWat_flow_nominal=1E4
            "Nominal mass flow rate";
          parameter Modelica.Units.SI.HeatFlowRate QChiWat_flow_nominal=-1E4
            "Nominal mass flow rate";
          estcp.DHC.Loads.BaseClasses.Validation.BaseClasses.BuildingWithETS buiHeaGen1(
            redeclare final package MediumSerHea_a = MediumS,
            redeclare final package MediumSer = MediumW,
            redeclare final package MediumBui = MediumW,
            nPorts_heaWat=1,
            bui(final have_heaWat=true),
            ets(
              final typ=TypDisSys.HeatingGeneration1,
              final m_flow_nominal=m_flow_nominal,
              final have_heaWat=true,
              QHeaWat_flow_nominal=QHeaWat_flow_nominal))
            "Building and ETS component - Heating only (steam)" annotation (
              Placement(transformation(extent={{-160,210},{-140,230}})));
          Buildings.Fluid.Sources.MassFlowSource_T souDisSup(
            redeclare final package Medium = MediumS,
            m_flow=m_flow_nominal,
            nPorts=1) "Source for district supply" annotation (Placement(
                transformation(extent={{-240,210},{-220,230}})));
          Buildings.Fluid.Sources.Boundary_pT sinDisRet(redeclare final package
              Medium = MediumW, nPorts=1) "Sink for district return"
            annotation (Placement(transformation(extent={{-240,170},{-220,190}})));
          estcp.DHC.Networks.BaseClasses.DifferenceEnthalpyFlowRate senDifEntFlo(
            redeclare final package Medium1 = MediumS,
            redeclare final package Medium2 = MediumW,
            final m_flow_nominal=m_flow_nominal)
            "Change in enthalpy flow rate " annotation (Placement(
                transformation(extent={{-200,196},{-180,216}})));
          estcp.DHC.Loads.BaseClasses.Validation.BaseClasses.BuildingWithETS buiComGen1(
            redeclare final package MediumSerHea_a = MediumS,
            redeclare final package MediumSer = MediumW,
            redeclare final package MediumBui = MediumW,
            nPorts_heaWat=1,
            nPorts_chiWat=1,
            bui(final have_heaWat=true, final have_chiWat=true),
            ets(
              final typ=TypDisSys.CombinedGeneration1,
              final m_flow_nominal=m_flow_nominal,
              final have_heaWat=true,
              final have_chiWat=true,
              QHeaWat_flow_nominal=QHeaWat_flow_nominal,
              QChiWat_flow_nominal=QChiWat_flow_nominal))
            "Building and ETS component - Combined heating (steam) and cooling"
            annotation (Placement(transformation(extent={{-160,-10},{-140,10}})));
          Buildings.Fluid.Sources.MassFlowSource_T souDisSup1(
            redeclare final package Medium = MediumS,
            m_flow=m_flow_nominal,
            nPorts=1) "Source for district supply" annotation (Placement(
                transformation(extent={{-240,-10},{-220,10}})));
          Buildings.Fluid.Sources.Boundary_pT sinDisRet1(redeclare final
              package Medium = MediumW, nPorts=1) "Sink for district return"
            annotation (Placement(transformation(extent={{-240,-50},{-220,-30}})));
          estcp.DHC.Networks.BaseClasses.DifferenceEnthalpyFlowRate senDifEntFlo1(
            redeclare final package Medium1 = MediumS,
            redeclare final package Medium2 = Buildings.Media.Water,
            final m_flow_nominal=m_flow_nominal)
            "Change in enthalpy flow rate " annotation (Placement(
                transformation(extent={{-200,-24},{-180,-4}})));
          Buildings.Fluid.Sources.MassFlowSource_T souDisSup2(
            redeclare final package Medium = MediumW,
            m_flow=m_flow_nominal,
            nPorts=1) "Source for district supply" annotation (Placement(
                transformation(extent={{-200,-50},{-180,-30}})));
          Buildings.Fluid.Sources.Boundary_pT sinDisRet2(redeclare final
              package Medium = MediumW, nPorts=1) "Sink for district return"
            annotation (Placement(transformation(extent={{-200,-90},{-180,-70}})));
          estcp.DHC.Networks.BaseClasses.DifferenceEnthalpyFlowRate senDifEntFlo2(
              redeclare final package Medium1 = MediumW, final m_flow_nominal=
                m_flow_nominal) "Change in enthalpy flow rate " annotation (
              Placement(transformation(extent={{-160,-64},{-140,-44}})));
          Buildings.Fluid.Sources.MassFlowSource_T souDisSup3(
            redeclare final package Medium = MediumW,
            m_flow=m_flow_nominal,
            nPorts=1) "Source for district supply" annotation (Placement(
                transformation(extent={{-240,90},{-220,110}})));
          Buildings.Fluid.Sources.Boundary_pT sinDisRet3(redeclare final
              package Medium = MediumW, nPorts=1) "Sink for district return"
            annotation (Placement(transformation(extent={{-240,50},{-220,70}})));
          estcp.DHC.Networks.BaseClasses.DifferenceEnthalpyFlowRate senDifEntFlo3(
              redeclare final package Medium1 = MediumW, final m_flow_nominal=
                m_flow_nominal) "Change in enthalpy flow rate " annotation (
              Placement(transformation(extent={{-200,76},{-180,96}})));
          estcp.DHC.Loads.BaseClasses.Validation.BaseClasses.BuildingWithETS buiCoo(
            redeclare final package MediumSer = MediumW,
            redeclare final package MediumBui = MediumW,
            nPorts_chiWat=1,
            bui(final have_chiWat=true),
            ets(
              final typ=TypDisSys.Cooling,
              final m_flow_nominal=m_flow_nominal,
              final have_chiWat=true,
              QChiWat_flow_nominal=QChiWat_flow_nominal))
            "Building and ETS component - Cooling only" annotation (Placement(
                transformation(extent={{-160,90},{-140,110}})));
          estcp.DHC.Loads.BaseClasses.Validation.BaseClasses.BuildingWithETS buiComGen2to4(
            redeclare final package MediumSer = MediumW,
            redeclare final package MediumBui = MediumW,
            nPorts_heaWat=1,
            nPorts_chiWat=1,
            bui(final have_heaWat=true, final have_chiWat=true),
            ets(
              final typ=TypDisSys.CombinedGeneration2to4,
              final m_flow_nominal=m_flow_nominal,
              final have_heaWat=true,
              final have_chiWat=true,
              QHeaWat_flow_nominal=QHeaWat_flow_nominal,
              QChiWat_flow_nominal=QChiWat_flow_nominal))
            "Building and ETS component - Combined heating and cooling"
            annotation (Placement(transformation(extent={{0,-10},{20,10}})));
          Buildings.Fluid.Sources.MassFlowSource_T souDisSup5(
            redeclare final package Medium = MediumW,
            m_flow=m_flow_nominal,
            nPorts=1) "Source for district supply"
            annotation (Placement(transformation(extent={{-80,-10},{-60,10}})));
          Buildings.Fluid.Sources.Boundary_pT sinDisRet5(redeclare final
              package Medium = MediumW, nPorts=1) "Sink for district return"
            annotation (Placement(transformation(extent={{-80,-50},{-60,-30}})));
          estcp.DHC.Networks.BaseClasses.DifferenceEnthalpyFlowRate senDifEntFlo5(
              redeclare final package Medium1 = MediumW, final m_flow_nominal=
                m_flow_nominal) "Change in enthalpy flow rate "
            annotation (Placement(transformation(extent={{-40,-24},{-20,-4}})));
          Buildings.Fluid.Sources.MassFlowSource_T souDisSup6(
            redeclare final package Medium = MediumW,
            m_flow=m_flow_nominal,
            nPorts=1) "Source for district supply" annotation (Placement(
                transformation(extent={{-40,-50},{-20,-30}})));
          Buildings.Fluid.Sources.Boundary_pT sinDisRet6(redeclare final
              package Medium = MediumW, nPorts=1) "Sink for district return"
            annotation (Placement(transformation(extent={{-40,-90},{-20,-70}})));
          estcp.DHC.Networks.BaseClasses.DifferenceEnthalpyFlowRate senDifEntFlo6(
              redeclare final package Medium1 = MediumW, final m_flow_nominal=
                m_flow_nominal) "Change in enthalpy flow rate "
            annotation (Placement(transformation(extent={{0,-64},{20,-44}})));
          estcp.DHC.Loads.BaseClasses.Validation.BaseClasses.BuildingWithETS buiHeaGen2to4(
            redeclare final package MediumSer = MediumW,
            redeclare final package MediumBui = MediumW,
            nPorts_heaWat=1,
            bui(final have_heaWat=true),
            ets(
              final typ=TypDisSys.HeatingGeneration2to4,
              final m_flow_nominal=m_flow_nominal,
              final have_heaWat=true,
              QHeaWat_flow_nominal=QHeaWat_flow_nominal))
            "Building and ETS component - Heating only"
            annotation (Placement(transformation(extent={{0,210},{20,230}})));
          Buildings.Fluid.Sources.MassFlowSource_T souDisSup7(
            redeclare final package Medium = MediumW,
            m_flow=m_flow_nominal,
            nPorts=1) "Source for district supply" annotation (Placement(
                transformation(extent={{-80,210},{-60,230}})));
          Buildings.Fluid.Sources.Boundary_pT sinDisRet7(redeclare final
              package Medium = MediumW, nPorts=1) "Sink for district return"
            annotation (Placement(transformation(extent={{-80,170},{-60,190}})));
          estcp.DHC.Networks.BaseClasses.DifferenceEnthalpyFlowRate senDifEntFlo7(
              redeclare final package Medium1 = MediumW, final m_flow_nominal=
                m_flow_nominal) "Change in enthalpy flow rate " annotation (
              Placement(transformation(extent={{-40,196},{-20,216}})));
          Buildings.Fluid.Sources.MassFlowSource_T souDisSup4(
            redeclare final package Medium = MediumW,
            m_flow=m_flow_nominal,
            nPorts=1) "Source for district supply"
            annotation (Placement(transformation(extent={{120,-10},{140,10}})));
          Buildings.Fluid.Sources.Boundary_pT sinDisRet4(redeclare final
              package Medium = MediumW, nPorts=1) "Sink for district return"
            annotation (Placement(transformation(extent={{120,-50},{140,-30}})));
          estcp.DHC.Networks.BaseClasses.DifferenceEnthalpyFlowRate senDifEntFlo4(
              redeclare final package Medium1 = MediumW, final m_flow_nominal=
                m_flow_nominal) "Change in enthalpy flow rate "
            annotation (Placement(transformation(extent={{160,-24},{180,-4}})));
          estcp.DHC.Loads.BaseClasses.Validation.BaseClasses.BuildingWithETS buiComGen5(
            redeclare final package MediumSer = MediumW,
            redeclare final package MediumBui = MediumW,
            nPorts_heaWat=1,
            nPorts_chiWat=1,
            bui(final have_heaWat=true, final have_chiWat=true),
            ets(
              final typ=TypDisSys.CombinedGeneration5,
              final m_flow_nominal=m_flow_nominal,
              final have_heaWat=true,
              final have_chiWat=true,
              QHeaWat_flow_nominal=QHeaWat_flow_nominal,
              QChiWat_flow_nominal=QChiWat_flow_nominal))
            "Building and ETS component - Combined heating and cooling (ambient)"
            annotation (Placement(transformation(extent={{200,-10},{220,10}})));
          Buildings.Fluid.Sources.MassFlowSource_T souDisSup8(
            redeclare final package Medium = MediumW,
            m_flow=m_flow_nominal,
            nPorts=1) "Source for district supply" annotation (Placement(
                transformation(extent={{-240,-170},{-220,-150}})));
          Buildings.Fluid.Sources.Boundary_pT sinDisRet8(redeclare final
              package Medium = MediumW, nPorts=1) "Sink for district return"
            annotation (Placement(transformation(extent={{-240,-210},{-220,-190}})));
          estcp.DHC.Networks.BaseClasses.DifferenceEnthalpyFlowRate senDifEntFlo8(
              redeclare final package Medium1 = MediumW, final m_flow_nominal=
                m_flow_nominal) "Change in enthalpy flow rate " annotation (
              Placement(transformation(extent={{-200,-184},{-180,-164}})));
          estcp.DHC.Loads.BaseClasses.Validation.BaseClasses.BuildingWithETS buiTesOutETS(
            redeclare final package MediumSer = MediumW,
            redeclare final package MediumBui = MediumW,
            nPorts_heaWat=1,
            nPorts_chiWat=1,
            bui(final have_heaWat=true, final have_chiWat=true),
            ets(
              final typ=TypDisSys.CombinedGeneration5,
              final m_flow_nominal=m_flow_nominal,
              final have_heaWat=true,
              final have_chiWat=true,
              QHeaWat_flow_nominal=QHeaWat_flow_nominal,
              QChiWat_flow_nominal=QChiWat_flow_nominal,
              final have_fan=true,
              final have_pum=true,
              final have_eleHea=true,
              final have_eleCoo=true))
            "Building and ETS component - Testing ETS output connectors"
            annotation (Placement(transformation(extent={{-160,-170},{-140,-150}})));
          Buildings.Fluid.Sources.MassFlowSource_T souDisSup9(
            redeclare final package Medium = MediumW,
            m_flow=m_flow_nominal,
            nPorts=1) "Source for district supply" annotation (Placement(
                transformation(extent={{-80,-170},{-60,-150}})));
          Buildings.Fluid.Sources.Boundary_pT sinDisRet9(redeclare final
              package Medium = MediumW, nPorts=1) "Sink for district return"
            annotation (Placement(transformation(extent={{-80,-210},{-60,-190}})));
          estcp.DHC.Networks.BaseClasses.DifferenceEnthalpyFlowRate senDifEntFlo9(
              redeclare final package Medium1 = MediumW, final m_flow_nominal=
                m_flow_nominal) "Change in enthalpy flow rate " annotation (
              Placement(transformation(extent={{-40,-184},{-20,-164}})));
          estcp.DHC.Loads.BaseClasses.Validation.BaseClasses.BuildingWithETS buiTesOutETSBui(
            redeclare final package MediumSer = MediumW,
            redeclare final package MediumBui = MediumW,
            nPorts_heaWat=1,
            nPorts_chiWat=1,
            bui(
              final have_heaWat=true,
              final have_chiWat=true,
              final have_fan=true,
              final have_pum=true,
              final have_eleHea=true,
              final have_eleCoo=true),
            ets(
              final typ=TypDisSys.CombinedGeneration5,
              final m_flow_nominal=m_flow_nominal,
              final have_heaWat=true,
              final have_chiWat=true,
              QHeaWat_flow_nominal=QHeaWat_flow_nominal,
              QChiWat_flow_nominal=QChiWat_flow_nominal,
              final have_fan=true,
              final have_pum=true,
              final have_eleHea=true,
              final have_eleCoo=true))
            "Building and ETS component - Testing ETS and building output connectors"
            annotation (Placement(transformation(extent={{0,-170},{20,-150}})));
          Buildings.Fluid.Sources.MassFlowSource_T souDisSup10(
            redeclare final package Medium = MediumW,
            m_flow=m_flow_nominal,
            nPorts=1) "Source for district supply" annotation (Placement(
                transformation(extent={{100,-170},{120,-150}})));
          Buildings.Fluid.Sources.Boundary_pT sinDisRet10(redeclare final
              package Medium = MediumW, nPorts=1) "Sink for district return"
            annotation (Placement(transformation(extent={{100,-210},{120,-190}})));
          estcp.DHC.Networks.BaseClasses.DifferenceEnthalpyFlowRate senDifEntFlo10(
              redeclare final package Medium1 = MediumW, final m_flow_nominal=
                m_flow_nominal) "Change in enthalpy flow rate " annotation (
              Placement(transformation(extent={{140,-184},{160,-164}})));
          estcp.DHC.Loads.BaseClasses.Validation.BaseClasses.BuildingWithETS buiTesFacMul(
            redeclare final package MediumSer = MediumW,
            redeclare final package MediumBui = MediumW,
            nPorts_heaWat=1,
            nPorts_chiWat=1,
            facMul=2,
            bui(
              final have_heaWat=true,
              final have_chiWat=true,
              final have_fan=true,
              final have_pum=true,
              final have_eleHea=true,
              final have_eleCoo=true),
            ets(
              final typ=TypDisSys.CombinedGeneration5,
              final m_flow_nominal=m_flow_nominal,
              final have_heaWat=true,
              final have_chiWat=true,
              QHeaWat_flow_nominal=QHeaWat_flow_nominal,
              QChiWat_flow_nominal=QChiWat_flow_nominal,
              final have_fan=true,
              final have_pum=true,
              final have_eleHea=true,
              final have_eleCoo=true))
            "Building and ETS component - Testing scaling factor" annotation (
              Placement(transformation(extent={{180,-170},{200,-150}})));
        equation
          connect(souDisSup.ports[1],senDifEntFlo.port_a1)
            annotation (Line(points={{-220,220},{-212,220},{-212,212},{-200,212}},color={0,127,255}));
          connect(senDifEntFlo.port_b2,sinDisRet.ports[1])
            annotation (Line(points={{-200,200},{-212,200},{-212,180},{-220,180}},color={0,127,255}));
          connect(souDisSup1.ports[1],senDifEntFlo1.port_a1)
            annotation (Line(points={{-220,0},{-212,0},{-212,-8},{-200,-8}},  color={0,127,255}));
          connect(senDifEntFlo1.port_b2,sinDisRet1.ports[1])
            annotation (Line(points={{-200,-20},{-212,-20},{-212,-40},{-220,-40}},
                                                                              color={0,127,255}));
          connect(souDisSup2.ports[1],senDifEntFlo2.port_a1)
            annotation (Line(points={{-180,-40},{-170,-40},{-170,-48},{-160,-48}},
                                                                            color={0,127,255}));
          connect(senDifEntFlo2.port_b2,sinDisRet2.ports[1])
            annotation (Line(points={{-160,-60},{-170,-60},{-170,-80},{-180,-80}},
                                                                            color={0,127,255}));
          connect(souDisSup3.ports[1],senDifEntFlo3.port_a1)
            annotation (Line(points={{-220,100},{-210,100},{-210,92},{-200,92}},color={0,127,255}));
          connect(sinDisRet3.ports[1],senDifEntFlo3.port_b2)
            annotation (Line(points={{-220,60},{-210,60},{-210,80},{-200,80}},color={0,127,255}));
          connect(senDifEntFlo.port_b1, buiHeaGen1.port_aSerHea) annotation (Line(
                points={{-180,212},{-170,212},{-170,216},{-160,216}}, color={0,127,255}));
          connect(senDifEntFlo.port_a2, buiHeaGen1.port_bSerHea) annotation (Line(
                points={{-180,200},{-120,200},{-120,216},{-140,216}}, color={0,127,255}));
          connect(senDifEntFlo1.port_b1, buiComGen1.port_aSerHea) annotation (Line(
                points={{-180,-8},{-170,-8},{-170,-4},{-160,-4}},
                                                                color={0,127,255}));
          connect(buiComGen1.port_bSerHea, senDifEntFlo1.port_a2) annotation (Line(
                points={{-140,-4},{-120,-4},{-120,-20},{-180,-20}},
                                                               color={0,127,255}));
          connect(senDifEntFlo2.port_b1, buiComGen1.port_aSerCoo) annotation (Line(
                points={{-140,-48},{-120,-48},{-120,-30},{-166,-30},{-166,-8},{-160,-8}},
                                                                               color={0,
                  127,255}));
          connect(buiComGen1.port_bSerCoo, senDifEntFlo2.port_a2) annotation (Line(
                points={{-140,-8},{-100,-8},{-100,-60},{-140,-60}},
                                                              color={0,127,255}));
          connect(senDifEntFlo3.port_b1, buiCoo.port_aSerCoo)
            annotation (Line(points={{-180,92},{-160,92}}, color={0,127,255}));
          connect(buiCoo.port_bSerCoo, senDifEntFlo3.port_a2) annotation (Line(points={{
                  -140,92},{-120,92},{-120,80},{-180,80}}, color={0,127,255}));
          connect(souDisSup5.ports[1],senDifEntFlo5.port_a1)
            annotation (Line(points={{-60,0},{-52,0},{-52,-8},{-40,-8}},      color={0,127,255}));
          connect(senDifEntFlo5.port_b2,sinDisRet5.ports[1])
            annotation (Line(points={{-40,-20},{-52,-20},{-52,-40},{-60,-40}},color={0,127,255}));
          connect(souDisSup6.ports[1],senDifEntFlo6.port_a1)
            annotation (Line(points={{-20,-40},{-10,-40},{-10,-48},{0,-48}},color={0,127,255}));
          connect(senDifEntFlo6.port_b2,sinDisRet6.ports[1])
            annotation (Line(points={{0,-60},{-10,-60},{-10,-80},{-20,-80}},color={0,127,255}));
          connect(senDifEntFlo5.port_b1, buiComGen2to4.port_aSerHea) annotation (Line(
                points={{-20,-8},{-10,-8},{-10,-4},{0,-4}}, color={0,127,255}));
          connect(buiComGen2to4.port_bSerHea, senDifEntFlo5.port_a2) annotation (Line(
                points={{20,-4},{40,-4},{40,-20},{-20,-20}}, color={0,127,255}));
          connect(senDifEntFlo6.port_b1, buiComGen2to4.port_aSerCoo) annotation (Line(
                points={{20,-48},{40,-48},{40,-30},{-6,-30},{-6,-8},{0,-8}}, color={0,127,
                  255}));
          connect(buiComGen2to4.port_bSerCoo, senDifEntFlo6.port_a2) annotation (Line(
                points={{20,-8},{60,-8},{60,-60},{20,-60}}, color={0,127,255}));
          connect(souDisSup7.ports[1], senDifEntFlo7.port_a1) annotation (Line(points={{
                  -60,220},{-52,220},{-52,212},{-40,212}}, color={0,127,255}));
          connect(senDifEntFlo7.port_b2, sinDisRet7.ports[1]) annotation (Line(points={{
                  -40,200},{-52,200},{-52,180},{-60,180}}, color={0,127,255}));
          connect(senDifEntFlo7.port_b1, buiHeaGen2to4.port_aSerHea) annotation (Line(
                points={{-20,212},{-10,212},{-10,216},{0,216}}, color={0,127,255}));
          connect(senDifEntFlo7.port_a2, buiHeaGen2to4.port_bSerHea) annotation (Line(
                points={{-20,200},{40,200},{40,216},{20,216}}, color={0,127,255}));
          connect(souDisSup4.ports[1],senDifEntFlo4.port_a1)
            annotation (Line(points={{140,0},{150,0},{150,-8},{160,-8}},        color={0,127,255}));
          connect(sinDisRet4.ports[1],senDifEntFlo4.port_b2)
            annotation (Line(points={{140,-40},{150,-40},{150,-20},{160,-20}},color={0,127,255}));
          connect(senDifEntFlo4.port_b1,buiComGen5. port_aSerAmb) annotation (Line(
                points={{180,-8},{190,-8},{190,0},{200,0}},     color={0,127,255}));
          connect(buiComGen5.port_bSerAmb,senDifEntFlo4. port_a2) annotation (Line(
                points={{220,0},{240,0},{240,-20},{180,-20}},     color={0,127,255}));
          connect(souDisSup8.ports[1],senDifEntFlo8.port_a1)
            annotation (Line(points={{-220,-160},{-210,-160},{-210,-168},{-200,-168}},
                                                                                color={0,127,255}));
          connect(sinDisRet8.ports[1],senDifEntFlo8.port_b2)
            annotation (Line(points={{-220,-200},{-210,-200},{-210,-180},{-200,-180}},
                                                                              color={0,127,255}));
          connect(senDifEntFlo8.port_b1,buiTesOutETS. port_aSerAmb) annotation (Line(
                points={{-180,-168},{-170,-168},{-170,-160},{-160,-160}}, color={0,127,255}));
          connect(buiTesOutETS.port_bSerAmb,senDifEntFlo8. port_a2) annotation (Line(
                points={{-140,-160},{-120,-160},{-120,-180},{-180,-180}}, color={0,127,255}));
          connect(souDisSup9.ports[1],senDifEntFlo9.port_a1)
            annotation (Line(points={{-60,-160},{-52,-160},{-52,-168},{-40,-168}},
                                                                                color={0,127,255}));
          connect(sinDisRet9.ports[1],senDifEntFlo9.port_b2)
            annotation (Line(points={{-60,-200},{-52,-200},{-52,-180},{-40,-180}},
                                                                              color={0,127,255}));
          connect(senDifEntFlo9.port_b1,buiTesOutETSBui. port_aSerAmb) annotation (Line(
                points={{-20,-168},{-12,-168},{-12,-160},{0,-160}},  color={0,127,255}));
          connect(buiTesOutETSBui.port_bSerAmb,senDifEntFlo9. port_a2) annotation (Line(
                points={{20,-160},{40,-160},{40,-180},{-20,-180}}, color={0,127,255}));
          connect(souDisSup10.ports[1],senDifEntFlo10. port_a1) annotation (Line(points={{120,
                  -160},{130,-160},{130,-168},{140,-168}},      color={0,127,255}));
          connect(sinDisRet10.ports[1],senDifEntFlo10. port_b2) annotation (Line(points={{120,
                  -200},{130,-200},{130,-180},{140,-180}},      color={0,127,255}));
          connect(senDifEntFlo10.port_b1,buiTesFacMul. port_aSerAmb) annotation (Line(
                points={{160,-168},{170,-168},{170,-160},{180,-160}}, color={0,127,255}));
          connect(buiTesFacMul.port_bSerAmb,senDifEntFlo10. port_a2) annotation (Line(
                points={{200,-160},{220,-160},{220,-180},{160,-180}}, color={0,127,255}));
          annotation (
            experiment(
              Tolerance=1e-6,
              StopTime=1.0),
            __Dymola_Commands(
              file="modelica://Buildings/Resources/Scripts/Dymola/Experimental/DHC/Loads/BaseClasses/Validation/BuildingWithETS.mos"
              "Simulate and plot"),
            Icon(
              coordinateSystem(
                preserveAspectRatio=false)),
            Diagram(
              coordinateSystem(
                preserveAspectRatio=false,
                extent={{-260,-260},{260,260}})),
            Documentation(info="<html>
<p>
This model validates
<a href=\"modelica://Buildings.Experimental.DHC.Loads.BaseClasses.PartialBuildingWithPartialETS\">
Buildings.Experimental.DHC.Loads.BaseClasses.PartialBuildingWithPartialETS</a>
for various types of district system.
</p>
</html>",         revisions="<html>
<ul>
<li>
March 12, 2021, by Michael Wetter:<br/>
Changed steam medium.<br/>
This is for <a href=\"https://github.com/lbl-srg/modelica-buildings/issues/2395\">#2395</a>.
</li>
<li>
December 14, 2020, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>"));
        end BuildingWithETS;

        model FlowDistributionPumpControl
          "Validation of the pump head computation in FlowDistribution"
          extends Modelica.Icons.Example;
          package Medium1=Buildings.Media.Water
            "Source side medium";
          package Medium2=Buildings.Media.Air
            "Load side medium";
          parameter String filNam="modelica://Buildings/Resources/Data/Experimental/DHC/Loads/Examples/SwissResidential_20190916.mos"
            "File name with thermal loads as time series";
          parameter Integer nLoa=5
            "Number of served loads"
            annotation (Evaluate=true);
          parameter Real facMul=10
            "Scaling factor for terminal units"
            annotation (Dialog(group="Scaling"));
          parameter Modelica.Units.SI.MassFlowRate mLoaHea_flow_nominal=1
            "Load side mass flow rate at nominal conditions in heating mode"
            annotation (Dialog(group="Nominal condition"));
          parameter Modelica.Units.SI.Temperature T_aHeaWat_nominal=273.15 + 40
            "Heating water inlet temperature at nominal conditions"
            annotation (Dialog(group="Nominal condition"));
          parameter Modelica.Units.SI.Temperature T_bHeaWat_nominal(
            min=273.15,
            displayUnit="degC") = T_aHeaWat_nominal - 5
            "Heating water outlet temperature at nominal conditions"
            annotation (Dialog(group="Nominal condition"));
          parameter Modelica.Units.SI.Temperature T_aLoaHea_nominal=273.15 + 20
            "Load side inlet temperature at nominal conditions in heating mode"
            annotation (Dialog(group="Nominal condition"));
          parameter Modelica.Units.SI.Time tau=120
            "Time constant of fluid temperature variation at nominal flow rate"
            annotation (Dialog(tab="Dynamics", group="Nominal condition"));
          parameter Modelica.Units.SI.PressureDifference dpDis_nominal[nLoa](
            each min=0,
            each displayUnit="Pa") = 1/2 .* cat(
            1,
            {dp_nominal*0.2},
            fill(dp_nominal*0.8/(nLoa - 1), nLoa - 1))
            "Pressure drop between each connected unit at nominal conditions (supply line)";
          parameter Modelica.Units.SI.PressureDifference dpSet=max(terUniHea.dpSou_nominal)
            "Pressure difference set point";
          final parameter Modelica.Units.SI.MassFlowRate mCon_flow_nominal[nLoa]=
              terUniHea.mHeaWat_flow_nominal*facMul
            "Nominal mass flow rate in each connection line";
          final parameter Modelica.Units.SI.MassFlowRate m_flow_nominal=sum(
              mCon_flow_nominal) "Nominal mass flow rate in the distribution line";
          final parameter Modelica.Units.SI.PressureDifference dp_nominal=max(terUniHea.dpSou_nominal)
               + 2*nLoa*5000 "Nominal pressure drop in the distribution line";
          final parameter Modelica.Units.SI.HeatFlowRate QHea_flow_nominal=
              estcp.DHC.Loads.BaseClasses.getPeakLoad(                 string="#Peak space heating load", filNam=
              Modelica.Utilities.Files.loadResource(filNam))/facMul
            "Design heating heat flow rate (>=0)"
            annotation (Dialog(group="Nominal condition"));
          estcp.DHC.Loads.BaseClasses.Validation.BaseClasses.FanCoil2PipeHeatingValve
            terUniHea[nLoa](
            redeclare each final package Medium1 = Medium1,
            redeclare each final package Medium2 = Medium2,
            each final facMul=facMul,
            each final QHea_flow_nominal=QHea_flow_nominal,
            each final mLoaHea_flow_nominal=mLoaHea_flow_nominal,
            each final T_aHeaWat_nominal=T_aHeaWat_nominal,
            each final T_bHeaWat_nominal=T_bHeaWat_nominal,
            each final T_aLoaHea_nominal=T_aLoaHea_nominal,
            each final have_speVar=false) "Heating terminal unit" annotation (
              Placement(transformation(extent={{50,-122},{70,-102}})));
          Modelica.Blocks.Sources.CombiTimeTable loa(
            tableOnFile=true,
            tableName="tab1",
            fileName=Modelica.Utilities.Files.loadResource(
              filNam),
            extrapolation=Modelica.Blocks.Types.Extrapolation.Periodic,
            y(each unit="W"),
            offset={0,0,0},
            columns={2,3,4},
            smoothness=Modelica.Blocks.Types.Smoothness.MonotoneContinuousDerivative1)
            "Reader for thermal loads (y[1] is cooling load, y[2] is heating load)"
            annotation (Placement(transformation(extent={{-180,20},{-160,40}})));
          Buildings.Controls.OBC.CDL.Reals.Sources.Constant minTSet(
            k=20+273.15,
            y(final unit="K",
              displayUnit="degC"))
            "Minimum temperature set point"
            annotation (Placement(transformation(extent={{-180,60},{-160,80}})));
          Buildings.Controls.OBC.CDL.Routing.RealScalarReplicator reaRep(
            nout=nLoa)
            "Repeat input to output an array"
            annotation (Placement(transformation(extent={{-128,60},{-108,80}})));
          Buildings.Controls.OBC.CDL.Routing.RealScalarReplicator reaRep1(
            nout=nLoa)
            "Repeat input to output an array"
            annotation (Placement(transformation(extent={{-128,20},{-108,40}})));
          estcp.DHC.Networks.Distribution2Pipe dis(
            redeclare final package Medium = Medium1,
            final nCon=nLoa,
            final allowFlowReversal=false,
            final iConDpSen=nLoa,
            final mDis_flow_nominal=m_flow_nominal,
            final mCon_flow_nominal=mCon_flow_nominal,
            final dpDis_nominal=dpDis_nominal) "Distribution network"
            annotation (Placement(transformation(extent={{40,-180},{80,-160}})));
          Buildings.Fluid.Movers.Preconfigured.FlowControlled_dp pumCstDp(
            redeclare package Medium=Medium1,
            m_flow_nominal=m_flow_nominal,
            dp_nominal=dp_nominal)
            "Pump controlled to track a pressure drop over the last connected load"
            annotation (Placement(transformation(extent={{-10,-170},{10,-150}})));
          Buildings.Fluid.MixingVolumes.MixingVolume vol(
            final prescribedHeatFlowRate=true,
            redeclare final package Medium = Medium1,
            V=m_flow_nominal*tau/rho_default,
            final mSenFac=1,
            final m_flow_nominal=m_flow_nominal,
            final energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,
            nPorts=2) "Volume for fluid stream" annotation (Placement(
                transformation(extent={{-59,-160},{-39,-140}})));
          Buildings.Fluid.Sources.Boundary_pT supHeaWat1(
            redeclare package Medium = Medium1,
            use_T_in=true,
            nPorts=3) "Heating water source" annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={-130,0})));
          estcp.DHC.Loads.BaseClasses.FlowDistribution disCstDp(
            redeclare package Medium = Medium1,
            m_flow_nominal=m_flow_nominal,
            have_pum=true,
            typCtr=estcp.DHC.Loads.BaseClasses.Types.PumpControlType.ConstantDp,

            dp_nominal=dp_nominal,
            dpDis_nominal=dpDis_nominal,
            dpMin=dpSet,
            mUni_flow_nominal=mCon_flow_nominal,
            nPorts_a1=nLoa,
            nPorts_b1=nLoa)
            "Distribution system with pump controlled to track a pressure drop over the last connected unit"
            annotation (Placement(transformation(extent={{-10,-70},{10,-50}})));
          Buildings.Fluid.Sources.Boundary_pT sinHeaWat(
            redeclare package Medium = Medium1,
            p=300000,
            nPorts=3) "Sink for heating water" annotation (Placement(
                transformation(
                extent={{10,-10},{-10,10}},
                rotation=0,
                origin={150,0})));
          estcp.DHC.Loads.BaseClasses.Validation.BaseClasses.FanCoil2PipeHeating
            terUniHea1[nLoa](
            redeclare each final package Medium1 = Medium1,
            redeclare each final package Medium2 = Medium2,
            each final facMul=facMul,
            each final QHea_flow_nominal=QHea_flow_nominal,
            each final mLoaHea_flow_nominal=mLoaHea_flow_nominal,
            each final T_aHeaWat_nominal=T_aHeaWat_nominal,
            each final T_bHeaWat_nominal=T_bHeaWat_nominal,
            each final T_aLoaHea_nominal=T_aLoaHea_nominal,
            each final have_speVar=false) "Heating terminal unit"
            annotation (Placement(transformation(extent={{-10,-22},{10,-2}})));
          Buildings.Fluid.Movers.Preconfigured.SpeedControlled_y pumCstSpe(
            redeclare package Medium=Medium1,
            m_flow_nominal=m_flow_nominal,
            dp_nominal=dp_nominal)
            "Pump controlled at constant speed"
            annotation (Placement(transformation(extent={{-80,170},{-60,190}})));
          Buildings.Fluid.Movers.BaseClasses.IdealSource pipPre(
            redeclare final package Medium = Medium1,
            dp_start=dp_nominal,
            m_flow_start=m_flow_nominal,
            m_flow_small=1E-4*m_flow_nominal,
            final show_T=false,
            final show_V_flow=false,
            final control_m_flow=true,
            final control_dp=false)
            "Fictitious pipe used to prescribe pump flow rate"
            annotation (Placement(transformation(extent={{-8,170},{12,190}})));
          Buildings.Controls.OBC.CDL.Reals.Sources.Constant one1(
            k=1)
            "Constant one"
            annotation (Placement(transformation(extent={{-180,190},{-160,210}})));
          estcp.DHC.Loads.BaseClasses.Validation.BaseClasses.FanCoil2PipeHeating
            terUniHea2[nLoa](
            redeclare each final package Medium1 = Medium1,
            redeclare each final package Medium2 = Medium2,
            each final facMul=facMul,
            each final QHea_flow_nominal=QHea_flow_nominal,
            each final mLoaHea_flow_nominal=mLoaHea_flow_nominal,
            each final T_aHeaWat_nominal=T_aHeaWat_nominal,
            each final T_bHeaWat_nominal=T_bHeaWat_nominal,
            each final T_aLoaHea_nominal=T_aLoaHea_nominal,
            each final have_speVar=false) "Heating terminal unit"
            annotation (Placement(transformation(extent={{-10,118},{10,138}})));
          estcp.DHC.Loads.BaseClasses.FlowDistribution disCstSpe(
            redeclare package Medium = Medium1,
            m_flow_nominal=m_flow_nominal,
            have_pum=true,
            typCtr=estcp.DHC.Loads.BaseClasses.Types.PumpControlType.ConstantSpeed,

            dp_nominal=dp_nominal,
            dpDis_nominal=dpDis_nominal,
            dpMin=dpSet,
            mUni_flow_nominal=mCon_flow_nominal,
            nPorts_a1=5,
            nPorts_b1=5)
            "Distribution system with pump controlled at constant speed"
            annotation (Placement(transformation(extent={{-10,70},{10,90}})));
          Buildings.Controls.OBC.CDL.Reals.Sources.Constant THeaWatSup(
            k=T_aHeaWat_nominal)
            "Heating water supply temperature"
            annotation (Placement(transformation(extent={{-180,-10},{-160,10}})));
          Buildings.Fluid.Sources.Boundary_pT supHeaWat(
            redeclare package Medium = Medium1,
            use_T_in=true,
            nPorts=2) "Heating water source" annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={-130,-180})));
          Buildings.Controls.OBC.CDL.Reals.Sources.Constant setDp(
            k=dpSet)
            "Pressure difference set-point"
            annotation (Placement(transformation(extent={{-180,-140},{-160,-120}})));
        protected
          parameter Medium1.ThermodynamicState sta_default=Medium1.setState_pTX(
            T=Medium1.T_default,
            p=Medium1.p_default,
            X=Medium1.X_default);
          parameter Modelica.Units.SI.Density rho_default=Medium1.density(sta_default)
            "Density, used to compute fluid volume";
        equation
          connect(loa.y[2],reaRep1.u)
            annotation (Line(points={{-159,30},{-130,30}},color={0,0,127}));
          connect(reaRep.y,terUniHea.TSetHea)
            annotation (Line(points={{-106,70},{-40,70},{-40,-106},{49.1667,-106},{
                  49.1667,-107}},                                                                 color={0,0,127}));
          connect(reaRep1.y,terUniHea.QReqHea_flow)
            annotation (Line(points={{-106,30},{-46,30},{-46,-113.667},{49.1667,
                  -113.667}},                                                              color={0,0,127}));
          connect(terUniHea.port_bHeaWat,dis.ports_aCon)
            annotation (Line(points={{70,-120.333},{70,-120},{80,-120},{80,-140},{72,
                  -140},{72,-160}},                                                                   color={0,127,255}));
          connect(dis.ports_bCon,terUniHea.port_aHeaWat)
            annotation (Line(points={{48,-160},{48,-140},{40,-140},{40,-120.333},{50,
                  -120.333}},                                                                   color={0,127,255}));
          connect(pumCstDp.port_b,dis.port_aDisSup)
            annotation (Line(points={{10,-160},{20,-160},{20,-170},{40,-170}},color={0,127,255}));
          connect(vol.ports[1],pumCstDp.port_a)
            annotation (Line(points={{-51,-160},{-10,-160}},color={0,127,255}));
          connect(disCstDp.port_b,sinHeaWat.ports[1])
            annotation (Line(points={{10,-60},{120,-60},{120,2.66667},{140,2.66667}},color={0,127,255}));
          connect(supHeaWat1.ports[1],disCstDp.port_a)
            annotation (Line(points={{-120,2.66667},{-100,2.66667},{-100,-60},{-10,-60}},color={0,127,255}));
          connect(terUniHea1.port_bHeaWat,disCstDp.ports_a1)
            annotation (Line(points={{10,-20.3333},{20,-20.3333},{20,-54},{10,-54}},color={0,127,255}));
          connect(disCstDp.ports_b1,terUniHea1.port_aHeaWat)
            annotation (Line(points={{-10,-54},{-20,-54},{-20,-20.3333},{-10,-20.3333}},color={0,127,255}));
          connect(reaRep.y,terUniHea1.TSetHea)
            annotation (Line(points={{-106,70},{-40,70},{-40,-7},{-10.8333,-7}},color={0,0,127}));
          connect(reaRep1.y,terUniHea1.QReqHea_flow)
            annotation (Line(points={{-106,30},{-46,30},{-46,-13.6667},{-10.8333,
                  -13.6667},{-10.8333,-13.6667}},                                                               color={0,0,127}));
          connect(terUniHea1.mReqHeaWat_flow,disCstDp.mReq_flow)
            annotation (Line(points={{10.8333,-15.3333},{26,-15.3333},{26,-80},{-20,-80},
                  {-20,-64},{-11,-64}},                                                                       color={0,0,127}));
          connect(supHeaWat1.ports[2],pumCstSpe.port_a)
            annotation (Line(points={{-120,-2.22045e-16},{-100,-2.22045e-16},{-100,180},{-80,180}},color={0,127,255}));
          connect(pumCstSpe.port_b,pipPre.port_a)
            annotation (Line(points={{-60,180},{-8,180}},color={0,127,255}));
          connect(pipPre.port_b,sinHeaWat.ports[2])
            annotation (Line(points={{12,180},{120,180},{120,0},{140,0}},color={0,127,255}));
          connect(one1.y,pumCstSpe.y)
            annotation (Line(points={{-158,200},{-70,200},{-70,192}},color={0,0,127}));
          connect(supHeaWat1.ports[3],disCstSpe.port_a)
            annotation (Line(points={{-120,-2.66667},{-116,-2.66667},{-116,-2},{-100,-2},{-100,80},{-10,80}},color={0,127,255}));
          connect(disCstSpe.port_b,sinHeaWat.ports[3])
            annotation (Line(points={{10,80},{120,80},{120,-2.66667},{140,-2.66667}},color={0,127,255}));
          connect(disCstSpe.ports_b1[1:5],terUniHea2.port_aHeaWat)
            annotation (Line(points={{-10,89.2},{-20,89.2},{-20,120},{-10,120},{-10,
                  119.667}},                                                                  color={0,127,255}));
          connect(terUniHea2.port_bHeaWat,disCstSpe.ports_a1[1:5])
            annotation (Line(points={{10,119.667},{20,119.667},{20,89.2},{10,89.2}},color={0,127,255}));
          connect(terUniHea2.mReqHeaWat_flow,disCstSpe.mReq_flow)
            annotation (Line(points={{10.8333,124.667},{26,124.667},{26,60},{-20,60},{
                  -20,76},{-11,76}},                                                                    color={0,0,127}));
          connect(reaRep.y,terUniHea2.TSetHea)
            annotation (Line(points={{-106,70},{-40,70},{-40,132},{-10.8333,132},{
                  -10.8333,133}},                                                                color={0,0,127}));
          connect(reaRep1.y,terUniHea2.QReqHea_flow)
            annotation (Line(points={{-106,30},{-46,30},{-46,126},{-10.8333,126},{
                  -10.8333,126.333}},                                                                color={0,0,127}));
          connect(disCstSpe.mReqTot_flow,pipPre.m_flow_in)
            annotation (Line(points={{11,76},{40,76},{40,200},{-4,200},{-4,188}},color={0,0,127}));
          connect(THeaWatSup.y,supHeaWat1.T_in)
            annotation (Line(points={{-158,0},{-152,0},{-152,4},{-142,4}},color={0,0,127}));
          connect(dis.port_bDisRet,supHeaWat.ports[1])
            annotation (Line(points={{40,-176},{20,-176},{20,-200},{-120,-200},{-120,-178}},color={0,127,255}));
          connect(supHeaWat.ports[2],vol.ports[2])
            annotation (Line(points={{-120,-182},{-120,-174},{-80,-174},{-80,-160},{-47,-160}},color={0,127,255}));
          connect(THeaWatSup.y,supHeaWat.T_in)
            annotation (Line(points={{-158,0},{-152,0},{-152,-176},{-142,-176}},color={0,0,127}));
          connect(minTSet.y,reaRep.u)
            annotation (Line(points={{-158,70},{-130,70}},color={0,0,127}));
          connect(dis.dp,pumCstDp.dpMea)
            annotation (Line(points={{82,-167},{120,-167},{120,-190},{-20,-190},{-20,-140},
                  {-8,-140},{-8,-148}},                                                                         color={0,0,127}));
          connect(setDp.y,pumCstDp.dp_in)
            annotation (Line(points={{-158,-130},{0,-130},{0,-148}},color={0,0,127}));
          annotation (
            Documentation(
              info="<html>
<p>
This model validates the pump head computation algorithm implemented in
<a href=\"modelica://Buildings.Experimental.DHC.Loads.BaseClasses.FlowDistribution\">
Buildings.Experimental.DHC.Loads.BaseClasses.FlowDistribution</a>.
</p>
</html>",     revisions="<html>
<ul>
<li>
August 30, 2022, by Hongxiang Fu:<br/>
Swapped the pump models for preconfigured versions and removed the pump curve
record <code>per</code>.
This is for
<a href=\"https://github.com/lbl-srg/modelica-buildings/issues/3099\">#3099</a>.
</li>
<li>
February 21, 2020, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>"),  experiment(
              StopTime=400000,
              Tolerance=1e-06),
            Icon(
              coordinateSystem(
                preserveAspectRatio=false)),
            Diagram(
              coordinateSystem(
                preserveAspectRatio=false,
                extent={{-220,-240},{200,240}})),
            __Dymola_Commands(
              file="modelica://Buildings/Resources/Scripts/Dymola/Experimental/DHC/Loads/BaseClasses/Validation/FlowDistributionPumpControl.mos" "Simulate and plot"));
        end FlowDistributionPumpControl;

        model GetPeakLoad
          "Model that validates the getPeakLoad function"
          extends Modelica.Icons.Example;
          parameter Modelica.Units.SI.HeatFlowRate QCoo_flow=
              estcp.DHC.Loads.BaseClasses.getPeakLoad(                 string=
              "#Peak space cooling load", filNam=Modelica.Utilities.Files.loadResource(
              "modelica://Buildings/Resources/Data/Experimental/DHC/Loads/BaseClasses/Validation/RefBldgLargeOfficeNew2004_7.1_5.0_3C_USA_CA_SAN_FRANCISCO.mos"))
            "Peak heat flow rate";
          parameter Modelica.Units.SI.HeatFlowRate QHea_flow=
              estcp.DHC.Loads.BaseClasses.getPeakLoad(                 string=
              "#Peak space heating load", filNam=Modelica.Utilities.Files.loadResource(
              "modelica://Buildings/Resources/Data/Experimental/DHC/Loads/BaseClasses/Validation/RefBldgLargeOfficeNew2004_7.1_5.0_3C_USA_CA_SAN_FRANCISCO.mos"))
            "Peak heat flow rate";
          parameter Modelica.Units.SI.HeatFlowRate QWatHea_flow=
              estcp.DHC.Loads.BaseClasses.getPeakLoad(                 string=
              "#Peak water heating load", filNam=Modelica.Utilities.Files.loadResource(
              "modelica://Buildings/Resources/Data/Experimental/DHC/Loads/BaseClasses/Validation/RefBldgLargeOfficeNew2004_7.1_5.0_3C_USA_CA_SAN_FRANCISCO.mos"))
            "Peak water heating flow rate";
        equation
          assert(
            abs(
              QCoo_flow-(-383165.6989)) < 1E-3,
            "Error in reading the peak heating load. Read "+String(
              QCoo_flow));
          assert(
            abs(
              QHea_flow-893931.4335) < 1E-3,
            "Error in reading the peak heating load. Read "+String(
              QHea_flow));
          assert(
            abs(
              QWatHea_flow-19496.90012) < 1E-3,
            "Error in reading the peak water heating load. Read "+String(
              QWatHea_flow));
          annotation (
            experiment(
              Tolerance=1e-6,
              StopTime=1.0),
            __Dymola_Commands(
              file="modelica://Buildings/Resources/Scripts/Dymola/Experimental/DHC/Loads/BaseClasses/Validation/GetPeakLoad.mos" "Simulate and plot"),
            Documentation(
              info="<html>
<p>
This model tests reading the peak loads from the load file.
If the wrong values are read, then the simulation stops with an error.
</p>
</html>",     revisions="<html>
<ul>
<li>
November 28, 2016, by Michael Wetter:<br/>
Added call to <code>Modelica.Utilities.Files.loadResource</code>.<br/>
This is for
<a href=\"https://github.com/lbl-srg/modelica-buildings/issues/585\">#585</a>.
</li>
<li>
November 8, 2016, by Michael Wetter:<br/>
Removed test for equality of real variables.<br/>
This is for
<a href=\"https://github.com/lbl-srg/modelica-buildings/issues/572\">#572</a>.
</li>
<li>
December 1, 2015, by Michael Wetter:<br/>
First implementation.
</li>
</ul>
</html>"));
        end GetPeakLoad;

        model SimpleRoomODE
          "Validation of the model SimpleRoomODE"
          extends Modelica.Icons.Example;
          package Medium1=Buildings.Media.Water
            "Source side medium";
          package Medium2=Buildings.Media.Air
            "Load side medium";
          parameter Modelica.Units.SI.HeatFlowRate QHea_flow_nominal=112000 "Design heating heat flow rate (for TInd=TIndHea_nominal, TOut=TOutHea_nominal,
    with no internal gains, no solar radiation)"
            annotation (Dialog(group="Nominal condition"));
          parameter Modelica.Units.SI.HeatFlowRate QCoo_flow_nominal=-200000
            "Design cooling heat flow rate"
            annotation (Dialog(group="Nominal condition"));
          parameter Modelica.Units.SI.Time tau=1800
            "Time constant of the indoor temperature";
          estcp.DHC.Loads.BaseClasses.Examples.BaseClasses.GeojsonExportRC.OfficeBuilding.Office
            romHeaMet "ROM where the heating load is always met"
            annotation (Placement(transformation(extent={{-10,90},{10,110}})));
          Buildings.BoundaryConditions.WeatherData.ReaderTMY3 weaDat(
            TDryBulSou=Buildings.BoundaryConditions.Types.DataSource.Parameter,

            TDryBul=276.15,
            calTSky=Buildings.BoundaryConditions.Types.SkyTemperatureCalculation.HorizontalRadiation,

            computeWetBulbTemperature=false,
            filNam=Modelica.Utilities.Files.loadResource(
                "modelica://Buildings/Resources/weatherdata/USA_CA_San.Francisco.Intl.AP.724940_TMY3.mos"))
            "Weather data reader" annotation (Placement(transformation(extent={
                    {-140,90},{-120,110}})));
          Buildings.Controls.Continuous.LimPID conHea(
            controllerType=Modelica.Blocks.Types.SimpleController.PI,
            Ti=10)
            annotation (Placement(transformation(extent={{30,110},{50,130}})));
          Buildings.Controls.OBC.CDL.Reals.Sources.Constant minTSet(
            k=293.15,
            y(final unit="K",
              displayUnit="degC"))
            "Minimum temperature set point"
            annotation (Placement(transformation(extent={{-140,150},{-120,170}})));
          Buildings.Controls.OBC.CDL.Reals.MultiplyByParameter gai(k=
                QHea_flow_nominal) "Scaling"
            annotation (Placement(transformation(extent={{60,110},{80,130}})));
          Buildings.HeatTransfer.Sources.PrescribedHeatFlow prescribedHeatFlow
            "Prescribed heat flow rate"
            annotation (Placement(transformation(extent={{82,130},{62,150}})));
          estcp.DHC.Loads.BaseClasses.Examples.BaseClasses.GeojsonExportRC.OfficeBuilding.Office
            romHeaUnm "ROM where the heating load is not met"
            annotation (Placement(transformation(extent={{-10,50},{10,70}})));
          Buildings.Controls.OBC.CDL.Reals.MultiplyByParameter gai1(k=0.7)
            "Scaling "
            annotation (Placement(transformation(extent={{92,90},{112,110}})));
          Buildings.HeatTransfer.Sources.PrescribedHeatFlow prescribedHeatFlow1
            "Prescribed heat flow rate"
            annotation (Placement(transformation(extent={{82,70},{62,90}})));
          estcp.DHC.Loads.BaseClasses.SimpleRoomODE rooOdeHea(
            dTEnv_nominal=20,
            TAir_start=293.15,
            QEnv_flow_nominal=QHea_flow_nominal,
            tau=tau) "ODE heated room model"
            annotation (Placement(transformation(extent={{-10,10},{10,30}})));
          Buildings.Controls.OBC.CDL.Reals.Sources.Constant maxTSet(
            k=297.15,
            y(final unit="K",
              displayUnit="degC"))
            "Maximum temperature set point"
            annotation (Placement(transformation(extent={{-140,-170},{-120,-150}})));
          Buildings.Controls.Continuous.LimPID conCoo(
            controllerType=Modelica.Blocks.Types.SimpleController.PI,
            Ti=10,
            reverseActing=false)
            "PI controller tracking the room maximum temperature"
            annotation (Placement(transformation(extent={{30,-110},{50,-90}})));
          Buildings.Controls.OBC.CDL.Reals.MultiplyByParameter gai2(k=
                QCoo_flow_nominal) "Scaling"
            annotation (Placement(transformation(extent={{60,-110},{80,-90}})));
          estcp.DHC.Loads.BaseClasses.SimpleRoomODE rooOdeCoo(
            dTEnv_nominal=20,
            TAir_start=293.15,
            QEnv_flow_nominal=QHea_flow_nominal,
            tau=tau) "ODE cooled room model"
            annotation (Placement(transformation(extent={{-10,-30},{10,-10}})));
          Buildings.Controls.OBC.CDL.Reals.MultiplyByParameter gai3(k=0.8)
            "Scaling"
            annotation (Placement(transformation(extent={{92,-90},{112,-70}})));
          Buildings.BoundaryConditions.WeatherData.ReaderTMY3 weaDat1(
            TDryBulSou=Buildings.BoundaryConditions.Types.DataSource.Parameter,

            TDryBul=293.15,
            calTSky=Buildings.BoundaryConditions.Types.SkyTemperatureCalculation.HorizontalRadiation,

            computeWetBulbTemperature=false,
            filNam=Modelica.Utilities.Files.loadResource(
                "modelica://Buildings/Resources/weatherdata/USA_CA_San.Francisco.Intl.AP.724940_TMY3.mos"))
            "Weather data reader" annotation (Placement(transformation(extent={
                    {-140,-110},{-120,-90}})));
          estcp.DHC.Loads.BaseClasses.Examples.BaseClasses.GeojsonExportRC.OfficeBuilding.Office
            romCooMet "ROM where the cooling load is always met" annotation (
              Placement(transformation(extent={{-10,-130},{10,-110}})));
          estcp.DHC.Loads.BaseClasses.Examples.BaseClasses.GeojsonExportRC.OfficeBuilding.Office
            romCooUnm "ROM where the cooling load is not met"
            annotation (Placement(transformation(extent={{-10,-90},{10,-70}})));
          Buildings.HeatTransfer.Sources.PrescribedHeatFlow prescribedHeatFlow2
            "Prescribed heat flow rate"
            annotation (Placement(transformation(extent={{80,-70},{60,-50}})));
          Buildings.HeatTransfer.Sources.PrescribedHeatFlow prescribedHeatFlow3
            "Prescribed heat flow rate" annotation (Placement(transformation(
                  extent={{82,-150},{62,-130}})));
        equation
          connect(weaDat.weaBus,romHeaMet.weaBus)
            annotation (Line(points={{-120,100},{0,100},{0,99.8},{-6,99.8}},color={255,204,51},thickness=0.5));
          connect(romHeaMet.TAir,conHea.u_m)
            annotation (Line(points={{11,100},{40,100},{40,108}},color={0,0,127}));
          connect(conHea.y,gai.u)
            annotation (Line(points={{51,120},{58,120}},color={0,0,127}));
          connect(gai.y,prescribedHeatFlow.Q_flow)
            annotation (Line(points={{82,120},{126,120},{126,140},{82,140}},color={0,0,127}));
          connect(prescribedHeatFlow.port,romHeaMet.port_a)
            annotation (Line(points={{62,140},{0,140},{0,110}},color={191,0,0}));
          connect(conCoo.y,gai2.u)
            annotation (Line(points={{51,-100},{58,-100}},color={0,0,127}));
          connect(gai1.y,prescribedHeatFlow1.Q_flow)
            annotation (Line(points={{114,100},{120,100},{120,80},{82,80}},color={0,0,127}));
          connect(gai1.y,rooOdeHea.QAct_flow)
            annotation (Line(points={{114,100},{120,100},{120,6},{-14,6},{-14,12},{-12,12}},color={0,0,127}));
          connect(gai2.y,rooOdeCoo.QReq_flow)
            annotation (Line(points={{82,-100},{126,-100},{126,-34},{-20,-34},{-20,-20},{-12,-20}},color={0,0,127}));
          connect(prescribedHeatFlow1.port,romHeaUnm.port_a)
            annotation (Line(points={{62,80},{0,80},{0,70}},color={191,0,0}));
          connect(gai2.y,gai3.u)
            annotation (Line(points={{82,-100},{86,-100},{86,-80},{90,-80}},color={0,0,127}));
          connect(gai3.y,rooOdeCoo.QAct_flow)
            annotation (Line(points={{114,-80},{120,-80},{120,-40},{-14,-40},{-14,-28},{-12,-28}},color={0,0,127}));
          connect(weaDat.weaBus,romHeaUnm.weaBus)
            annotation (Line(points={{-120,100},{-20,100},{-20,59.8},{-6,59.8}},color={255,204,51},thickness=0.5));
          connect(weaDat1.weaBus,romCooMet.weaBus)
            annotation (Line(points={{-120,-100},{-20,-100},{-20,-120.2},{-6,-120.2}},color={255,204,51},thickness=0.5));
          connect(weaDat1.weaBus,romCooUnm.weaBus)
            annotation (Line(points={{-120,-100},{-20,-100},{-20,-80.2},{-6,-80.2}},color={255,204,51},thickness=0.5));
          connect(romCooMet.TAir,conCoo.u_m)
            annotation (Line(points={{11,-120},{40,-120},{40,-112}},color={0,0,127}));
          connect(gai.y,gai1.u)
            annotation (Line(points={{82,120},{86,120},{86,100},{90,100}},color={0,0,127}));
          connect(gai.y,rooOdeHea.QReq_flow)
            annotation (Line(points={{82,120},{126,120},{126,0},{-20,0},{-20,20},{-12,20}},color={0,0,127}));
          connect(gai3.y,prescribedHeatFlow2.Q_flow)
            annotation (Line(points={{114,-80},{120,-80},{120,-60},{80,-60}},color={0,0,127}));
          connect(prescribedHeatFlow2.port,romCooUnm.port_a)
            annotation (Line(points={{60,-60},{0,-60},{0,-70}},color={191,0,0}));
          connect(gai2.y,prescribedHeatFlow3.Q_flow)
            annotation (Line(points={{82,-100},{120,-100},{120,-140},{82,-140}},color={0,0,127}));
          connect(prescribedHeatFlow3.port,romCooMet.port_a)
            annotation (Line(points={{62,-140},{0,-140},{0,-110}},color={191,0,0}));
          connect(minTSet.y,conHea.u_s)
            annotation (Line(points={{-118,160},{20,160},{20,120},{28,120}},color={0,0,127}));
          connect(minTSet.y,rooOdeHea.TSet)
            annotation (Line(points={{-118,160},{-40,160},{-40,28},{-12,28}},color={0,0,127}));
          connect(maxTSet.y,conCoo.u_s)
            annotation (Line(points={{-118,-160},{20,-160},{20,-100},{28,-100}},color={0,0,127}));
          connect(maxTSet.y,rooOdeCoo.TSet)
            annotation (Line(points={{-118,-160},{-40,-160},{-40,-12},{-12,-12}},color={0,0,127}));
          annotation (
            experiment(
              StopTime=1209600,
              Tolerance=1e-06),
            Documentation(
              info="
<html>
<p>
This example validates
<a href=\"modelica://Buildings.Experimental.DHC.Loads.BaseClasses.SimpleRoomODE\">
Buildings.Experimental.DHC.Loads.BaseClasses.SimpleRoomODE</a> by comparison with
<a href=\"modelica://Buildings.ThermalZones.ReducedOrder.RC.TwoElements\">
Buildings.ThermalZones.ReducedOrder.RC.TwoElements</a>.
<p>
A first instance of the reduced order model is used to assess the heating and
cooling loads. A second instance is used to assess the indoor air temperature
variation when the rate at which heating or cooling is provided is lower than
the load. That second instance is used as a reference for the validation.
</p>
<p>
Eventually the validation is performed with two sets of ambient conditions,
one requiring heating, and the second requiring cooling.
</p>
</html>",     revisions="<html>
<ul>
<li>
January 26, 2023, by Michael Wetter:<br/>
Updated parameter names.
</li>
<li>
February 21, 2020, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>"),  __Dymola_Commands(
              file="modelica://Buildings/Resources/Scripts/Dymola/Experimental/DHC/Loads/BaseClasses/Validation/SimpleRoomODE.mos" "Simulate and plot"),
            Diagram(
              coordinateSystem(
                extent={{-180,-200},{180,200}})));
        end SimpleRoomODE;

        model TerminalUnitScaling
          "Validation of the scaling factor of the terminal unit model"
          extends Modelica.Icons.Example;
          package Medium1=Buildings.Media.Water
            "Source side medium";
          package Medium2=Buildings.Media.Air
            "Load side medium";
          parameter Real facMul=2
            "Multiplier factor";
          parameter Modelica.Units.SI.Temperature T_aHeaWat_nominal(
            min=273.15,
            displayUnit="degC") = 273.15 + 40
            "Heating water inlet temperature at nominal conditions"
            annotation (Dialog(group="Nominal condition"));
          parameter Modelica.Units.SI.Temperature T_bHeaWat_nominal(
            min=273.15,
            displayUnit="degC") = T_aHeaWat_nominal - 5
            "Heating water outlet temperature at nominal conditions"
            annotation (Dialog(group="Nominal condition"));
          parameter Modelica.Units.SI.Temperature T_aLoaHea_nominal(
            min=273.15,
            displayUnit="degC") = 273.15 + 20
            "Load side inlet temperature at nominal conditions in heating mode"
            annotation (Dialog(group="Nominal condition"));
          parameter Modelica.Units.SI.Temperature T_bLoaHea_nominal(
            min=273.15,
            displayUnit="degC") = T_aLoaHea_nominal + 12
            "Load side ourtlet temperature at nominal conditions in heating mode"
            annotation (Dialog(group="Nominal condition"));
          parameter Modelica.Units.SI.MassFlowRate mLoaHeaUni_flow_nominal(min=0) =
            QHeaUni_flow_nominal/(T_bLoaHea_nominal - T_aLoaHea_nominal)/
            Medium2.specificHeatCapacityCp(Medium2.setState_pTX(Medium2.p_default,
            T_aLoaHea_nominal))
            "Load side mass flow rate at nominal conditions for 1 unit"
            annotation (Dialog(group="Nominal condition"));
          final parameter Modelica.Units.SI.MassFlowRate mLoaHea_flow_nominal(min=0) =
            mLoaHeaUni_flow_nominal*facMul
            "Load side mass flow rate at nominal conditions"
            annotation (Dialog(group="Nominal condition"));
          parameter Modelica.Units.SI.HeatFlowRate QHeaUni_flow_nominal(min=0) = 1000
            "Design heating heat flow rate (>=0) for 1 unit"
            annotation (Dialog(group="Nominal condition"));
          final parameter Modelica.Units.SI.HeatFlowRate QHea_flow_nominal=
              QHeaUni_flow_nominal*facMul "Design heating heat flow rate (>=0)"
            annotation (Dialog(group="Nominal condition"));
          Buildings.Fluid.Sources.MassFlowSource_T supHeaWat(
            use_m_flow_in=true,
            redeclare package Medium=Medium1,
            use_T_in=false,
            T=T_aHeaWat_nominal,
            nPorts=1)
            "Heating water supply"
            annotation (Placement(transformation(extent={{-10,-10},{10,10}},rotation=0,origin={-50,80})));
          Buildings.Fluid.Sources.Boundary_pT sinHeaWat(
            redeclare package Medium=Medium1,
            p=300000,
            nPorts=3)
            "Sink for heating water"
            annotation (Placement(transformation(extent={{10,-10},{-10,10}},rotation=0,origin={90,0})));
          estcp.DHC.Loads.BaseClasses.Validation.BaseClasses.FanCoil2PipeHeating
            ter(
            have_speVar=false,
            redeclare package Medium1 = Medium1,
            redeclare package Medium2 = Medium2,
            final QHea_flow_nominal=QHea_flow_nominal,
            final mLoaHea_flow_nominal=mLoaHea_flow_nominal,
            final T_aHeaWat_nominal=T_aHeaWat_nominal,
            final T_bHeaWat_nominal=T_bHeaWat_nominal,
            final T_aLoaHea_nominal=T_aLoaHea_nominal)
            "Terminal unit with no multiplier"
            annotation (Placement(transformation(extent={{8,78},{32,102}})));
          Buildings.Controls.OBC.CDL.Reals.Sources.Constant TSet(k=293.15, y(
                final unit="K", displayUnit="degC")) "Temperature set point"
            annotation (Placement(transformation(extent={{-100,50},{-80,70}})));
         estcp.DHC.Loads.BaseClasses.Validation.BaseClasses.FanCoil2PipeHeating
            terUniMul(
            have_speVar=false,
            redeclare package Medium1 = Medium1,
            redeclare package Medium2 = Medium2,
            final QHea_flow_nominal=QHeaUni_flow_nominal,
            final facMul=facMul,
            final mLoaHea_flow_nominal=mLoaHeaUni_flow_nominal,
            final T_aHeaWat_nominal=T_aHeaWat_nominal,
            final T_bHeaWat_nominal=T_bHeaWat_nominal,
            final T_aLoaHea_nominal=T_aLoaHea_nominal)
            "Terminal unit with unit multiplier"
            annotation (Placement(transformation(extent={{6,-22},{30,2}})));
          Buildings.Fluid.Sources.MassFlowSource_T supHeaWat1(
            use_m_flow_in=true,
            redeclare package Medium = Medium1,
            use_T_in=false,
            T=T_aHeaWat_nominal,
            nPorts=1) "Heating water supply" annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={-50,-20})));
          Buildings.Controls.OBC.CDL.Reals.Sources.Ramp ram(
            height=1.2*QHea_flow_nominal,
            duration=500)
            "Required heat flow rate"
            annotation (Placement(transformation(extent={{-100,10},{-80,30}})));
         estcp.DHC.Loads.BaseClasses.Validation.BaseClasses.FanCoil2PipeHeating
            terUniMulZonMul(
            facMulZon=facMul,
            have_speVar=false,
            redeclare package Medium1 = Medium1,
            redeclare package Medium2 = Medium2,
            final QHea_flow_nominal=QHeaUni_flow_nominal,
            final facMul=facMul,
            final mLoaHea_flow_nominal=mLoaHeaUni_flow_nominal,
            final T_aHeaWat_nominal=T_aHeaWat_nominal,
            final T_bHeaWat_nominal=T_bHeaWat_nominal,
            final T_aLoaHea_nominal=T_aLoaHea_nominal)
            "Terminal unit with unit multiplier and zone multiplier"
            annotation (Placement(transformation(extent={{8,-82},{32,-58}})));
          Buildings.Fluid.Sources.MassFlowSource_T supHeaWat2(
            use_m_flow_in=true,
            redeclare package Medium = Medium1,
            use_T_in=false,
            T=T_aHeaWat_nominal,
            nPorts=1) "Heating water supply" annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={-50,-80})));
        equation
          connect(ter.mReqHeaWat_flow, supHeaWat.m_flow_in) annotation (Line(points={{33,
                  86},{40,86},{40,110},{-80,110},{-80,88},{-62,88}}, color={0,0,127}));
          connect(supHeaWat.ports[1], ter.port_aHeaWat)
            annotation (Line(points={{-40,80},{8,80}}, color={0,127,255}));
          connect(ter.port_bHeaWat, sinHeaWat.ports[1]) annotation (Line(points={{32,80},
                  {60,80},{60,2.66667},{80,2.66667}}, color={0,127,255}));
          connect(terUniMul.port_bHeaWat,sinHeaWat.ports[2])
            annotation (Line(points={{30,-20},{60,-20},{60,-2.22045e-16},{80,-2.22045e-16}},
                                                                        color={0,127,255}));
          connect(supHeaWat1.ports[1],terUniMul.port_aHeaWat)
            annotation (Line(points={{-40,-20},{6,-20}},color={0,127,255}));
          connect(terUniMul.mReqHeaWat_flow,supHeaWat1.m_flow_in)
            annotation (Line(points={{31,-14},{40,-14},{40,-40},{-80,-40},{-80,-12},{-62,
                  -12}},                                                                         color={0,0,127}));
          connect(ram.y, ter.QReqHea_flow)
            annotation (Line(points={{-78,20},{0,20},{0,88},{7,88}}, color={0,0,127}));
          connect(ram.y,terUniMul.QReqHea_flow)
            annotation (Line(points={{-78,20},{0,20},{0,-12},{5,-12}},
                                                                    color={0,0,127}));
          connect(TSet.y, ter.TSetHea) annotation (Line(points={{-78,60},{-20,60},{-20,96},
                  {7,96}}, color={0,0,127}));
          connect(TSet.y, terUniMul.TSetHea) annotation (Line(points={{-78,60},{-20,60},
                  {-20,-4},{5,-4}}, color={0,0,127}));
          connect(terUniMulZonMul.port_bHeaWat, sinHeaWat.ports[3]) annotation (Line(
                points={{32,-80},{60,-80},{60,-2.66667},{80,-2.66667}}, color={0,127,255}));
          connect(supHeaWat2.ports[1], terUniMulZonMul.port_aHeaWat)
            annotation (Line(points={{-40,-80},{8,-80}}, color={0,127,255}));
          connect(TSet.y, terUniMulZonMul.TSetHea) annotation (Line(points={{-78,60},{-20,
                  60},{-20,-64},{7,-64}}, color={0,0,127}));
          connect(ram.y, terUniMulZonMul.QReqHea_flow) annotation (Line(points={{-78,20},
                  {0,20},{0,-72},{7,-72}}, color={0,0,127}));
          connect(terUniMulZonMul.mReqHeaWat_flow, supHeaWat2.m_flow_in) annotation (
              Line(points={{33,-74},{40,-74},{40,-100},{-80,-100},{-80,-72},{-62,-72}},
                color={0,0,127}));
          annotation (
            experiment(
              StopTime=1000,
              Tolerance=1e-06),
            Documentation(
              info="<html>
<p>
This example validates the use of the unit multiplier and zone multiplier factors
for models of terminal units inheriting from
<a href=\"modelica://Buildings.Experimental.DHC.Loads.BaseClasses.PartialTerminalUnit\">
Buildings.Experimental.DHC.Loads.BaseClasses.PartialTerminalUnit</a>.
</p>
</html>",     revisions="<html>
<ul>
<li>
February 21, 2020, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>"),  Diagram(
              coordinateSystem(
                preserveAspectRatio=false,
                extent={{-120,-120},{120,120}})),
            __Dymola_Commands(
              file="modelica://Buildings/Resources/Scripts/Dymola/Experimental/DHC/Loads/BaseClasses/Validation/TerminalUnitScaling.mos" "Simulate and plot"));
        end TerminalUnitScaling;

        package BaseClasses "Package with base classes"
          extends Modelica.Icons.BasesPackage;

          model Building
            "Dummy building model for validation purposes"
            extends estcp.DHC.Loads.BaseClasses.PartialBuilding;
            parameter Modelica.Units.SI.HeatFlowRate QChiWat_flow_nominal
              "Design heat flow rate for chilled water production (<0)"
              annotation (Dialog(group="Nominal condition", enable=have_chiWat));
            parameter Modelica.Units.SI.HeatFlowRate QHeaWat_flow_nominal
              "Design heat flow rate for heating water production (>0)"
              annotation (Dialog(group="Nominal condition", enable=have_heaWat));
            parameter Modelica.Units.SI.MassFlowRate m_flow_nominal
              "Nominal mass flow rate";
            Buildings.Controls.OBC.CDL.Reals.Sources.Constant souPHea(
              k=1)
              annotation (Placement(transformation(extent={{240,190},{260,210}})));
            Buildings.Controls.OBC.CDL.Reals.Sources.Constant souPCoo(
              k=1)
              annotation (Placement(transformation(extent={{240,150},{260,170}})));
            Buildings.Controls.OBC.CDL.Reals.Sources.Constant souPFan(
              k=1)
              annotation (Placement(transformation(extent={{240,110},{260,130}})));
            Buildings.Controls.OBC.CDL.Reals.Sources.Constant souPPum(
              k=1)
              annotation (Placement(transformation(extent={{240,70},{260,90}})));
            Buildings.Fluid.HeatExchangers.HeaterCooler_u loaHea(
              redeclare final package Medium = Medium,
              energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,
              final Q_flow_nominal=-QHeaWat_flow_nominal,
              final m_flow_nominal=m_flow_nominal,
              dp_nominal=0) if have_heaWat "Heating load" annotation (Placement(
                  transformation(extent={{-10,-70},{10,-50}})));
            Buildings.Fluid.HeatExchangers.HeaterCooler_u loaCoo(
              redeclare final package Medium = Medium,
              energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,
              final Q_flow_nominal=-QChiWat_flow_nominal,
              final m_flow_nominal=m_flow_nominal,
              dp_nominal=0) if have_chiWat "Cooling load" annotation (Placement(
                  transformation(extent={{-10,-270},{10,-250}})));
            Buildings.Controls.OBC.CDL.Reals.Sources.Constant one(k=1) "One"
              annotation (Placement(transformation(extent={{-80,-170},{-60,-150}})));
            Buildings.Controls.OBC.CDL.Reals.MultiplyByParameter gai(
              k=-1)  if have_heaWat
              "Opposite"
              annotation (Placement(transformation(extent={{30,-50},{50,-30}})));
            Buildings.Controls.OBC.CDL.Reals.MultiplyByParameter gai1(
              k=-1)  if have_chiWat
              "Opposite"
              annotation (Placement(transformation(extent={{30,-250},{50,-230}})));
          equation
            connect(souPHea.y, mulPHea.u)
              annotation (Line(points={{262,200},{268,200}}, color={0,0,127}));
            connect(souPCoo.y, mulPCoo.u)
              annotation (Line(points={{262,160},{268,160}}, color={0,0,127}));
            connect(souPFan.y, mulPFan.u)
              annotation (Line(points={{262,120},{268,120}}, color={0,0,127}));
            connect(souPPum.y, mulPPum.u)
              annotation (Line(points={{262,80},{268,80}}, color={0,0,127}));
            connect(mulHeaWatInl[1].port_b, loaHea.port_a)
              annotation (Line(points={{-260,-60},{-10,-60}}, color={0,127,255}));
            connect(loaHea.port_b, mulHeaWatOut[1].port_a) annotation (Line(points={{10,-60},
                    {136,-60},{136,-60},{260,-60}}, color={0,127,255}));
            connect(loaCoo.port_b, mulChiWatOut[1].port_a) annotation (Line(points={{10,-260},
                    {260,-260},{260,-260}}, color={0,127,255}));
            connect(mulChiWatInl[1].port_b, loaCoo.port_a) annotation (Line(points={{-260,
                    -260},{-136,-260},{-136,-260},{-10,-260}}, color={0,127,255}));
            connect(loaHea.Q_flow, gai.u) annotation (Line(points={{11,-54},{20,-54},{20,
                    -40},{28,-40}}, color={0,0,127}));
            connect(loaCoo.Q_flow, gai1.u) annotation (Line(points={{11,-254},{20,-254},
                    {20,-240},{28,-240}}, color={0,0,127}));
            connect(gai.y, mulQHea_flow.u) annotation (Line(points={{52,-40},{80,-40},{
                    80,280},{268,280}}, color={0,0,127}));
            connect(gai1.y, mulQCoo_flow.u) annotation (Line(points={{52,-240},{100,-240},
                    {100,240},{268,240}}, color={0,0,127}));
            connect(one.y, loaHea.u) annotation (Line(points={{-58,-160},{-40,-160},{-40,
                    -54},{-12,-54}}, color={0,0,127}));
            connect(one.y, loaCoo.u) annotation (Line(points={{-58,-160},{-40,-160},{-40,
                    -254},{-12,-254}}, color={0,0,127}));
            annotation (
              Icon(
                coordinateSystem(
                  preserveAspectRatio=false)),
              Diagram(
                coordinateSystem(
                  preserveAspectRatio=false)),
              Documentation(info="<html>
<p>
This is a minimum example of a class extending
<a href=\"modelica://Buildings.Experimental.DHC.Loads.BaseClasses.PartialBuilding\">
Buildings.Experimental.DHC.Loads.BaseClasses.PartialBuilding</a>
developed for testing purposes only.
</p>
</html>",           revisions="<html>
<ul>
<li>
December 14, 2020, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>"));
          end Building;

          model BuildingWithETS
            "Dummy building with ETS model for validation purposes"
            extends estcp.DHC.Loads.BaseClasses.PartialBuildingWithPartialETS(
                redeclare ETS ets, redeclare Building bui(
                final QChiWat_flow_nominal=QChiWat_flow_nominal,
                final QHeaWat_flow_nominal=QHeaWat_flow_nominal,
                final m_flow_nominal=ets.m_flow_nominal));
            annotation (
              Icon(
                coordinateSystem(
                  preserveAspectRatio=false)),
              Diagram(
                coordinateSystem(
                  preserveAspectRatio=false)),
              Documentation(info="<html>
<p>
This is a minimum example of a class extending
<a href=\"modelica://Buildings.Experimental.DHC.Loads.BaseClasses.PartialBuildingWithPartialETS\">
Buildings.Experimental.DHC.Loads.BaseClasses.PartialBuildingWithPartialETS</a>
developed for testing purposes only.
</p>
</html>",           revisions="<html>
<ul>
<li>
December 14, 2020, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>"));
          end BuildingWithETS;

          model ETS
            "Dummy ETS model for validation purposes"
            extends estcp.DHC.EnergyTransferStations.BaseClasses.PartialETS;
            parameter Modelica.Units.SI.MassFlowRate m_flow_nominal
              "Nominal mass flow rate";
            Buildings.Controls.OBC.CDL.Reals.Sources.Constant souPHea(
              k=1)
              annotation (Placement(transformation(extent={{260,50},{280,70}})));
            Buildings.Controls.OBC.CDL.Reals.Sources.Constant souPCoo(
              k=1)
              annotation (Placement(transformation(extent={{260,10},{280,30}})));
            Buildings.Controls.OBC.CDL.Reals.Sources.Constant souPFan(
              k=1)
              annotation (Placement(transformation(extent={{260,-30},{280,-10}})));
            Buildings.Controls.OBC.CDL.Reals.Sources.Constant souPPum(
              k=1)
              annotation (Placement(transformation(extent={{260,-70},{280,-50}})));
            Buildings.Fluid.Sources.Boundary_pT sinSerAmbSup(redeclare final
                package Medium = MediumSer, nPorts=1)
              if typ == estcp.DHC.Types.DistrictSystemType.CombinedGeneration5
              "Sink for service supply" annotation (Placement(transformation(
                    extent={{-260,-210},{-280,-190}})));
            Buildings.Fluid.Sources.MassFlowSource_T souSerAmbRet(
              redeclare final package Medium = MediumSer,
              m_flow=m_flow_nominal,
              nPorts=1)
              if typ == estcp.DHC.Types.DistrictSystemType.CombinedGeneration5
              "Source for service return" annotation (Placement(transformation(
                    extent={{260,-210},{280,-190}})));
            Buildings.Fluid.Sources.Boundary_pT sinSerHeaSup(redeclare final
                package Medium = MediumSerHea_a, nPorts=1) if typ <> estcp.DHC.Types.DistrictSystemType.Cooling
               and typ <> estcp.DHC.Types.DistrictSystemType.CombinedGeneration5
              "Sink for service supply" annotation (Placement(transformation(
                    extent={{-260,-250},{-280,-230}})));
            Buildings.Fluid.Sources.MassFlowSource_T souSerHeaReat(
              redeclare final package Medium = MediumSer,
              m_flow=m_flow_nominal,
              nPorts=1) if typ <> estcp.DHC.Types.DistrictSystemType.Cooling
               and typ <> estcp.DHC.Types.DistrictSystemType.CombinedGeneration5
              "Source for service return" annotation (Placement(transformation(
                    extent={{260,-250},{280,-230}})));
            Buildings.Fluid.Sources.Boundary_pT sinHeaWat(redeclare final
                package Medium = MediumBui, nPorts=nPorts_aHeaWat)
              if have_heaWat "Sink for heating water" annotation (Placement(
                  transformation(extent={{-260,250},{-280,270}})));
            Buildings.Fluid.Sources.Boundary_pT sinChiWat(redeclare final
                package Medium = MediumBui, nPorts=nPorts_aChiWat)
              if have_chiWat "Sink for chilled water" annotation (Placement(
                  transformation(extent={{-260,190},{-280,210}})));
            Buildings.Fluid.Sources.MassFlowSource_T souHeaWat(
              redeclare final package Medium = MediumBui,
              m_flow=m_flow_nominal,
              nPorts=nPorts_bHeaWat) if have_heaWat "Source for heating water"
              annotation (Placement(transformation(extent={{258,250},{278,270}})));
            Buildings.Fluid.Sources.MassFlowSource_T souChiWat(
              redeclare final package Medium = MediumBui,
              m_flow=m_flow_nominal,
              nPorts=nPorts_bChiWat) if have_chiWat "Source for chilled water"
              annotation (Placement(transformation(extent={{260,190},{280,210}})));
          equation
            connect(port_aSerCoo, port_bSerCoo) annotation (Line(points={{-300,-280},{0,
                    -280},{0,-280},{300,-280}}, color={0,127,255}));
            connect(souPCoo.y,PCoo)
              annotation (Line(points={{282,20},{320,20}},color={0,0,127}));
            connect(souPFan.y,PFan)
              annotation (Line(points={{282,-20},{320,-20}},color={0,0,127}));
            connect(souPPum.y,PPum)
              annotation (Line(points={{282,-60},{320,-60}},color={0,0,127}));
            connect(souPHea.y,PHea)
              annotation (Line(points={{282,60},{294,60},{294,60},{320,60}},color={0,0,127}));
            connect(port_aSerAmb, sinSerAmbSup.ports[1])
              annotation (Line(points={{-300,-200},{-280,-200}}, color={0,127,255}));
            connect(souSerAmbRet.ports[1], port_bSerAmb)
              annotation (Line(points={{280,-200},{300,-200}}, color={0,127,255}));
            connect(port_aSerHea, sinSerHeaSup.ports[1])
              annotation (Line(points={{-300,-240},{-280,-240}}, color={0,127,255}));
            connect(souSerHeaReat.ports[1], port_bSerHea)
              annotation (Line(points={{280,-240},{300,-240}}, color={0,127,255}));
            connect(ports_aChiWat, sinChiWat.ports)
              annotation (Line(points={{-300,200},{-280,200}}, color={0,127,255}));
            connect(ports_aHeaWat, sinHeaWat.ports)
              annotation (Line(points={{-300,260},{-280,260}}, color={0,127,255}));
            connect(souChiWat.ports, ports_bChiWat)
              annotation (Line(points={{280,200},{300,200}}, color={0,127,255}));
            connect(souHeaWat.ports, ports_bHeaWat)
              annotation (Line(points={{278,260},{300,260}}, color={0,127,255}));
            annotation (
              Icon(
                coordinateSystem(
                  preserveAspectRatio=false)),
              Diagram(
                coordinateSystem(
                  preserveAspectRatio=false)),
              Documentation(info="<html>
<p>
This is a minimum example of a class extending
<a href=\"modelica://Buildings.Experimental.DHC.EnergyTransferStations.BaseClasses.PartialETS\">
Buildings.Experimental.DHC.EnergyTransferStations.BaseClasses.PartialETS</a>
developed for testing purposes only.
</p>
</html>",           revisions="<html>
<ul>
<li>
December 14, 2020, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>"));
          end ETS;

          model FanCoil2PipeCooling
            "Model of a sensible only two-pipe fan coil unit for cooling,
  computing a required chilled water mass flow rate"
            extends estcp.DHC.Loads.BaseClasses.PartialTerminalUnit(
              redeclare package Medium1 = Buildings.Media.Water,
              redeclare package Medium2 = Buildings.Media.Air,
              final have_heaPor=false,
              final have_fluPor=false,
              final have_fan=true,
              final have_heaWat=false,
              final have_chiWat=true,
              final have_QReq_flow=true,
              allowFlowReversal=false,
              final allowFlowReversalLoa=false,
              final have_chaOve=false,
              final have_eleHea=false,
              final have_eleCoo=false,
              final have_TSen=false,
              final have_weaBus=false,
              final have_pum=false,
              mChiWat_flow_nominal=abs(QCoo_flow_nominal/cpChiWat_nominal/(
                  T_aChiWat_nominal - T_bChiWat_nominal)));
            import hexConfiguration=Buildings.Fluid.Types.HeatExchangerConfiguration;
            parameter Real k(
              min=0)=1
              "Gain of controller";
            parameter Modelica.Units.SI.Time Ti(min=Modelica.Constants.small) = 10
              "Time constant of integrator block";
            parameter Modelica.Units.SI.PressureDifference dpLoa_nominal(displayUnit="Pa")=
                 250 "Load side pressure drop"
              annotation (Dialog(group="Nominal condition"));
            final parameter hexConfiguration hexConCoo=hexConfiguration.CounterFlow
              "Cooling heat exchanger configuration";
            parameter Boolean have_speVar=true
              "Set to true for a variable speed fan (otherwise fan is always on)"
              annotation (Evaluate=true, Dialog(group="Configuration"));
            parameter Modelica.Units.SI.HeatFlowRate QEnv_flow_nominal(min=0)
              "Nominal envelope heat loss (for room air temperature prediction)"
              annotation (Dialog(group="Nominal condition"));
            parameter Modelica.Units.SI.TemperatureDifference dTEnv_nominal = 15
              "Design temperature difference at which envelope heat loss is QEnv_flow_nominal"
              annotation (Dialog(group="Nominal condition"));

            Buildings.Controls.OBC.CDL.Reals.PIDWithReset con(
              final k=k,
              final Ti=Ti,
              controllerType=Buildings.Controls.OBC.CDL.Types.SimpleController.PI,
              final reverseActing=true)
              "PI controller"
              annotation (Placement(transformation(extent={{-10,210},{10,230}})));
            Buildings.Fluid.Movers.FlowControlled_m_flow fan(
              redeclare final package Medium=Medium2,
              final allowFlowReversal=allowFlowReversalLoa,
              final m_flow_nominal=mLoaCoo_flow_nominal,
              redeclare final Buildings.Fluid.Movers.Data.Generic
                                                        per,
              nominalValuesDefineDefaultPressureCurve=true,
              energyDynamics=Modelica.Fluid.Types.Dynamics.SteadyState,
              use_inputFilter=false,
              final dp_nominal=dpLoa_nominal)
              "Fan"
              annotation (Placement(transformation(extent={{50,-10},{30,10}})));
            Buildings.Fluid.HeatExchangers.WetCoilEffectivenessNTU hexWetNtu(
              redeclare final package Medium1 = Medium1,
              redeclare final package Medium2 = Medium2,
              final configuration=hexConCoo,
              final m1_flow_nominal=mChiWat_flow_nominal,
              final m2_flow_nominal=mLoaCoo_flow_nominal,
              final dp1_nominal=0,
              final dp2_nominal=0,
              use_Q_flow_nominal=true,
              final Q_flow_nominal=QCoo_flow_nominal,
              final T_a1_nominal=T_aChiWat_nominal,
              final T_a2_nominal=T_aLoaCoo_nominal,
              final allowFlowReversal1=allowFlowReversal,
              final allowFlowReversal2=allowFlowReversalLoa,
              final w_a2_nominal=w_aLoaCoo_nominal) "Cooling coil" annotation (
                Placement(transformation(extent={{-80,4},{-60,-16}})));
            Buildings.Controls.OBC.CDL.Reals.MultiplyByParameter gaiMasFlo(k=
                  mChiWat_flow_nominal) "Scale water flow rate"
              annotation (Placement(transformation(extent={{40,210},{60,230}})));
            Modelica.Blocks.Sources.RealExpression Q_flowCoo(
              final y=hexWetNtu.Q2_flow)
              annotation (Placement(transformation(extent={{120,190},{140,210}})));
            Buildings.Controls.OBC.CDL.Reals.MultiplyByParameter gaiFloNom2(k=
                  mLoaCoo_flow_nominal) "Scale air flow rate"
              annotation (Placement(transformation(extent={{52,170},{72,190}})));
            Buildings.Fluid.Sources.Boundary_pT sinAir(
              redeclare package Medium = Medium2,
              use_T_in=false,
              nPorts=1) "Sink for supply air" annotation (Placement(
                  transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={-110,0})));
            Buildings.Fluid.Sources.Boundary_pT retAir(
              redeclare package Medium = Medium2,
              use_T_in=true,
              nPorts=1) "Source for return air" annotation (Placement(
                  transformation(
                  extent={{10,-10},{-10,10}},
                  rotation=0,
                  origin={112,0})));
            estcp.DHC.Loads.BaseClasses.SimpleRoomODE TLoaODE(
              final dTEnv_nominal=dTEnv_nominal,
              TAir_start=297.15,
              final QEnv_flow_nominal=QEnv_flow_nominal)
              "Predicted room air temperature"
              annotation (Placement(transformation(extent={{-10,30},{10,50}})));
            Buildings.Controls.OBC.CDL.Reals.MultiplyByParameter gaiHeaFlo(k=1/
                  QCoo_flow_nominal)
              annotation (Placement(transformation(extent={{-88,210},{-68,230}})));
            Buildings.Controls.OBC.CDL.Reals.MultiplyByParameter gaiHeaFlo1(k=1/
                  QCoo_flow_nominal) annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=90,
                  origin={0,190})));
            Buildings.Controls.OBC.CDL.Reals.GreaterThreshold greThr(
              t=1E-4,
              h=0.5E-4)
              "Reset when demand rises from zero"
              annotation (Placement(transformation(extent={{-50,190},{-30,210}})));
            Buildings.Fluid.FixedResistances.PressureDrop resLoa(
              redeclare final package Medium = Medium2,
              final allowFlowReversal=allowFlowReversalLoa,
              final m_flow_nominal=mLoaCoo_flow_nominal,
              final dp_nominal=dpLoa_nominal) "Load side pressure drop"
              annotation (Placement(transformation(extent={{80,-10},{60,10}})));
            Buildings.Controls.OBC.CDL.Reals.Sources.Constant one(k=1)
              "One constant"
              annotation (Placement(transformation(extent={{-10,130},{10,150}})));
            Buildings.Controls.OBC.CDL.Logical.Sources.Constant con1(k=have_speVar)
              annotation (Placement(transformation(extent={{-50,150},{-30,170}})));
            Buildings.Controls.OBC.CDL.Reals.Switch swi
              "Logical switch"
              annotation (Placement(transformation(extent={{26,170},{46,190}})));
          equation
            connect(gaiFloNom2.y,fan.m_flow_in)
              annotation (Line(points={{74,180},{80,180},{80,20},{40,20},{40,12}},
                                                                  color={0,0,127}));
            connect(con.y,gaiMasFlo.u)
              annotation (Line(points={{12,220},{38,220}},color={0,0,127}));
            connect(fan.P,mulPFan.u)
              annotation (Line(points={{29,9},{20,9},{20,140},{158,140}},color={0,0,127}));
            connect(fan.port_b, hexWetNtu.port_a2)
              annotation (Line(points={{30,0},{-60,0}}, color={0,127,255}));
            connect(hexWetNtu.port_b2, sinAir.ports[1])
              annotation (Line(points={{-80,0},{-100,0}}, color={0,127,255}));
            connect(Q_flowCoo.y,TLoaODE.QAct_flow)
              annotation (Line(points={{141,200},{150,200},{150,160},{-20,160},{-20,32},{-12,32}},color={0,0,127}));
            connect(TLoaODE.TAir,retAir.T_in)
              annotation (Line(points={{12,40},{140,40},{140,4},{124,4}},color={0,0,127}));
            connect(gaiMasFlo.y,mulMasFloReqChiWat.u)
              annotation (Line(points={{62,220},{100,220},{100,80},{158,80}},color={0,0,127}));
            connect(mulQReqCoo_flow.y,TLoaODE.QReq_flow)
              annotation (Line(points={{-158,60},{-100,60},{-100,40},{-12,40}},color={0,0,127}));
            connect(Q_flowCoo.y,mulQActCoo_flow.u)
              annotation (Line(points={{141,200},{158,200}},color={0,0,127}));
            connect(TSetCoo,TLoaODE.TSet)
              annotation (Line(points={{-220,180},{-120,180},{-120,48},{-12,48}},color={0,0,127}));
            connect(mulQReqCoo_flow.y,gaiHeaFlo.u)
              annotation (Line(points={{-158,60},{-100,60},{-100,220},{-90,220}},color={0,0,127}));
            connect(gaiHeaFlo.y,con.u_s)
              annotation (Line(points={{-66,220},{-12,220}},color={0,0,127}));
            connect(con.u_m,gaiHeaFlo1.y)
              annotation (Line(points={{0,208},{0,202},{6.66134e-16,202}},color={0,0,127}));
            connect(Q_flowCoo.y,gaiHeaFlo1.u)
              annotation (Line(points={{141,200},{150,200},{150,160},{0,160},{0,178},{-8.88178e-16,178}},color={0,0,127}));
            connect(greThr.y,con.trigger)
              annotation (Line(points={{-28,200},{-6,200},{-6,208}},color={255,0,255}));
            connect(gaiHeaFlo.y,greThr.u)
              annotation (Line(points={{-66,220},{-60,220},{-60,200},{-52,200}},color={0,0,127}));
            connect(mulChiWatFloInl.port_b, hexWetNtu.port_a1) annotation (Line(points={{
                    -160,-180},{-100,-180},{-100,-12},{-80,-12}}, color={0,127,255}));
            connect(hexWetNtu.port_b1, mulChiWatFloOut.port_a) annotation (Line(points={{
                    -60,-12},{-40,-12},{-40,-180},{160,-180}}, color={0,127,255}));
            connect(retAir.ports[1], resLoa.port_a)
              annotation (Line(points={{102,0},{80,0}}, color={0,127,255}));
            connect(resLoa.port_b, fan.port_a)
              annotation (Line(points={{60,0},{50,0}}, color={0,127,255}));
            connect(gaiFloNom2.u, swi.y)
              annotation (Line(points={{50,180},{48,180}}, color={0,0,127}));
            connect(con.y, swi.u1) annotation (Line(points={{12,220},{20,220},{20,188},{24,
                    188}}, color={0,0,127}));
            connect(con1.y, swi.u2) annotation (Line(points={{-28,160},{-24,160},{-24,168},
                    {16,168},{16,180},{24,180}}, color={255,0,255}));
            connect(one.y, swi.u3) annotation (Line(points={{12,140},{18,140},{18,172},{24,
                    172}}, color={0,0,127}));
            annotation (
              Documentation(
                info="<html>
<p>
This is a simplified model of a two-pipe fan coil unit for cooling.
It is intended to be used
</p>
<ul>
<li>
in a case where the room thermal loads are provided as time series: it therefore
takes the load as an input, and
</li>
<li>
in conjunction with
<a href=\"modelica://Buildings.Experimental.DHC.Loads.BaseClasses.FlowDistribution\">
Buildings.Experimental.DHC.Loads.BaseClasses.FlowDistribution</a>:
it therefore computes the water mass flow rate required to meet the load.
</li>
</ul>
<p>
For the sake of computational performance, a PI controller is used instead of an inverse
model of the heat exchanger to assess the required water mass flow rate.
The controller output signal is mapped linearly to both,
</p>
<ul>
<li>
the water mass flow rate, from zero to its nominal value, and
</li>
<li>
the air mass flow rate, from zero to its nominal value.
</li>
</ul>
<p>
The controller tracks the load while the impact of an unmet load on the room
air temperature is assessed with
<a href=\"modelica://Buildings.Experimental.DHC.Loads.BaseClasses.SimpleRoomODE\">
Buildings.Experimental.DHC.Loads.BaseClasses.SimpleRoomODE</a>.
</p>
</html>",       revisions="<html>
<ul>
<li>
February 21, 2020, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>"),           Icon(graphics={
                  Ellipse(
                    extent={{-100,100},{100,-100}},
                    lineColor={28,108,200},
                    fillColor={0,0,255},
                    fillPattern=FillPattern.Solid,
                    pattern=LinePattern.None),
                  Line(
                    points={{-120,-1.46958e-14},{-80,-9.79717e-15},{-40,60},{40,-60},{80,9.79717e-15},{120,1.46958e-14}},
                    color={255,255,255},
                    thickness=1,
                    rotation=180),
                  Polygon(
                    points={{46,62},{70,70},{62,46},{46,62}},
                    lineColor={255,255,255},
                    lineThickness=1,
                    fillColor={255,255,255},
                    fillPattern=FillPattern.Solid),
                  Line(
                    points={{-118,-118},{120,120}},
                    color={255,255,255},
                    thickness=1)}));
          end FanCoil2PipeCooling;

          model FanCoil2PipeHeating
            "Model of a two-pipe fan coil unit for heating,
  computing a required heating water mass flow rate"
            extends estcp.DHC.Loads.BaseClasses.PartialTerminalUnit(
              redeclare package Medium1 = Buildings.Media.Water,
              redeclare package Medium2 = Buildings.Media.Air,
              final have_heaPor=false,
              final have_fluPor=false,
              final have_fan=true,
              final have_heaWat=true,
              final have_chiWat=false,
              final have_QReq_flow=true,
              allowFlowReversal=false,
              final allowFlowReversalLoa=false,
              final have_chaOve=false,
              final have_eleHea=false,
              final have_eleCoo=false,
              final have_TSen=false,
              final have_weaBus=false,
              final have_pum=false,
              mHeaWat_flow_nominal=abs(QHea_flow_nominal/cpHeaWat_nominal/(
                  T_aHeaWat_nominal - T_bHeaWat_nominal)));
            import hexConfiguration=Buildings.Fluid.Types.HeatExchangerConfiguration;
            parameter Real k(
              min=0)=1
              "Gain of controller";
            parameter Modelica.Units.SI.Time Ti(min=Modelica.Constants.small) = 10
              "Time constant of integrator block";
            parameter Modelica.Units.SI.PressureDifference dpLoa_nominal(displayUnit="Pa")=
                 250 "Load side pressure drop"
              annotation (Dialog(group="Nominal condition"));
            final parameter hexConfiguration hexConHea=hexConfiguration.CounterFlow
              "Heating heat exchanger configuration";
            parameter Boolean have_speVar=true
              "Set to true for a variable speed fan (otherwise fan is always on)"
              annotation (Evaluate=true, Dialog(group="Configuration"));
            Buildings.Fluid.Movers.FlowControlled_m_flow fan(
              redeclare final package Medium=Medium2,
              final allowFlowReversal=allowFlowReversalLoa,
              final m_flow_nominal=mLoaHea_flow_nominal,
              redeclare final Buildings.Fluid.Movers.Data.Generic
                                                        per,
              nominalValuesDefineDefaultPressureCurve=true,
              energyDynamics=Modelica.Fluid.Types.Dynamics.SteadyState,
              use_inputFilter=false,
              final dp_nominal=dpLoa_nominal)
              "Fan"
              annotation (Placement(transformation(extent={{50,-10},{30,10}})));
            Buildings.Controls.OBC.CDL.Reals.PIDWithReset con(
              final k=k,
              final Ti=Ti,
              controllerType=Buildings.Controls.OBC.CDL.Types.SimpleController.PI,
              final reverseActing=true)
              "PI controller"
              annotation (Placement(transformation(extent={{-10,210},{10,230}})));
            Buildings.Fluid.HeatExchangers.DryCoilEffectivenessNTU hex(
              redeclare final package Medium1=Medium1,
              redeclare final package Medium2=Medium2,
              final configuration=hexConHea,
              final m1_flow_nominal=mHeaWat_flow_nominal,
              final m2_flow_nominal=mLoaHea_flow_nominal,
              final dp1_nominal=0,
              final dp2_nominal=0,
              final Q_flow_nominal=QHea_flow_nominal,
              final T_a1_nominal=T_aHeaWat_nominal,
              final T_a2_nominal=T_aLoaHea_nominal,
              final allowFlowReversal1=allowFlowReversal,
              final allowFlowReversal2=allowFlowReversalLoa)
              "Heating coil"
              annotation (Placement(transformation(extent={{-80,4},{-60,-16}})));
            Buildings.Controls.OBC.CDL.Reals.MultiplyByParameter gaiMasFlo(k=
                  mHeaWat_flow_nominal) "Scale water flow rate"
              annotation (Placement(transformation(extent={{40,210},{60,230}})));
            Modelica.Blocks.Sources.RealExpression Q_flowHea(
              y=hex.Q2_flow)
              annotation (Placement(transformation(extent={{120,210},{140,230}})));
            Buildings.Controls.OBC.CDL.Reals.MultiplyByParameter gaiFloNom2(k=
                  mLoaHea_flow_nominal) "Scale air flow rate"
              annotation (Placement(transformation(extent={{56,170},{76,190}})));
            Buildings.Fluid.Sources.Boundary_pT sinAir(
              redeclare package Medium = Medium2,
              use_p_in=false,
              nPorts=1) "Sink for supply air" annotation (Placement(
                  transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={-110,0})));
            Buildings.Fluid.Sources.Boundary_pT retAir(
              redeclare package Medium = Medium2,
              p(displayUnit="Pa"),
              use_T_in=true,
              nPorts=1) "Source for return air" annotation (Placement(
                  transformation(
                  extent={{10,-10},{-10,10}},
                  rotation=0,
                  origin={112,0})));
            estcp.DHC.Loads.BaseClasses.SimpleRoomODE TLoaODE(
              dTEnv_nominal=25,
              TAir_start=293.15,
              QEnv_flow_nominal=QHea_flow_nominal)
              "Predicted room air temperature"
              annotation (Placement(transformation(extent={{-10,30},{10,50}})));
            Buildings.Controls.OBC.CDL.Reals.MultiplyByParameter gaiHeaFlo(k=1/
                  QHea_flow_nominal)
              annotation (Placement(transformation(extent={{-88,210},{-68,230}})));
            Buildings.Controls.OBC.CDL.Reals.MultiplyByParameter gaiHeaFlo1(k=1/
                  QHea_flow_nominal) annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=90,
                  origin={0,190})));
            Buildings.Controls.OBC.CDL.Reals.Switch swi
              "Logical switch"
              annotation (Placement(transformation(extent={{30,170},{50,190}})));
            Buildings.Controls.OBC.CDL.Reals.Sources.Constant one(
              k=1)
              "One constant"
              annotation (Placement(transformation(extent={{0,130},{20,150}})));
            Buildings.Controls.OBC.CDL.Logical.Sources.Constant con1(
              k=have_speVar)
              annotation (Placement(transformation(extent={{-50,160},{-30,180}})));
            Buildings.Controls.OBC.CDL.Reals.GreaterThreshold greThr(
              t=1E-4,
              h=0.5E-4)
              "Reset when demand rises from zero"
              annotation (Placement(transformation(extent={{-50,190},{-30,210}})));
            Buildings.Fluid.FixedResistances.PressureDrop resLoa(
              redeclare final package Medium = Medium2,
              final allowFlowReversal=allowFlowReversalLoa,
              final m_flow_nominal=mLoaHea_flow_nominal,
              final dp_nominal=dpLoa_nominal) "Load side pressure drop"
              annotation (Placement(transformation(extent={{80,-10},{60,10}})));
          equation
            connect(gaiFloNom2.y,fan.m_flow_in)
              annotation (Line(points={{78,180},{80,180},{80,140},{40,140},{40,12}},
                                                                  color={0,0,127}));
            connect(con.y,gaiMasFlo.u)
              annotation (Line(points={{12,220},{38,220}},color={0,0,127}));
            connect(gaiMasFlo.y,mulMasFloReqHeaWat.u)
              annotation (Line(points={{62,220},{100,220},{100,100},{158,100}},color={0,0,127}));
            connect(fan.P,mulPFan.u)
              annotation (Line(points={{29,9},{20,9},{20,20},{150,20},{150,140},{158,140}},color={0,0,127}));
            connect(Q_flowHea.y,mulQActHea_flow.u)
              annotation (Line(points={{141,220},{150,220},{150,220},{158,220}},color={0,0,127}));
            connect(fan.port_b,hex.port_a2)
              annotation (Line(points={{30,0},{-60,0}},color={0,127,255}));
            connect(hex.port_b2,sinAir.ports[1])
              annotation (Line(points={{-80,0},{-100,0}},color={0,127,255}));
            connect(TSetHea,TLoaODE.TSet)
              annotation (Line(points={{-220,220},{-120,220},{-120,48},{-12,48}},color={0,0,127}));
            connect(TLoaODE.TAir,retAir.T_in)
              annotation (Line(points={{12,40},{140,40},{140,4},{124,4}},color={0,0,127}));
            connect(gaiHeaFlo.y,con.u_s)
              annotation (Line(points={{-66,220},{-12,220}},color={0,0,127}));
            connect(con.u_m,gaiHeaFlo1.y)
              annotation (Line(points={{0,208},{0,207},{8.88178e-16,207},{8.88178e-16,202}},color={0,0,127}));
            connect(swi.y,gaiFloNom2.u)
              annotation (Line(points={{52,180},{54,180}},color={0,0,127}));
            connect(con.y,swi.u1)
              annotation (Line(points={{12,220},{24,220},{24,188},{28,188}},color={0,0,127}));
            connect(one.y,swi.u3)
              annotation (Line(points={{22,140},{24,140},{24,172},{28,172}},color={0,0,127}));
            connect(con1.y,swi.u2)
              annotation (Line(points={{-28,170},{20,170},{20,180},{28,180}},color={255,0,255}));
            connect(mulQReqHea_flow.y,gaiHeaFlo.u)
              annotation (Line(points={{-158,100},{-100,100},{-100,220},{-90,220}},color={0,0,127}));
            connect(mulQReqHea_flow.y,TLoaODE.QReq_flow)
              annotation (Line(points={{-158,100},{-100,100},{-100,40},{-12,40}},color={0,0,127}));
            connect(Q_flowHea.y,gaiHeaFlo1.u)
              annotation (Line(points={{141,220},{150,220},{150,160},{0,160},{0,178}},color={0,0,127}));
            connect(Q_flowHea.y,TLoaODE.QAct_flow)
              annotation (Line(points={{141,220},{150,220},{150,160},{-20,160},{-20,32},{-12,32}},color={0,0,127}));
            connect(mulHeaWatFloInl.port_b,hex.port_a1)
              annotation (Line(points={{-160,-220},{-100,-220},{-100,-12},{-80,-12}},color={0,127,255}));
            connect(hex.port_b1,mulHeaWatFloOut.port_a)
              annotation (Line(points={{-60,-12},{-40,-12},{-40,-220},{160,-220}},color={0,127,255}));
            connect(gaiHeaFlo.y,greThr.u)
              annotation (Line(points={{-66,220},{-60,220},{-60,200},{-52,200}},color={0,0,127}));
            connect(greThr.y,con.trigger)
              annotation (Line(points={{-28,200},{-6,200},{-6,208}},color={255,0,255}));
            connect(retAir.ports[1], resLoa.port_a)
              annotation (Line(points={{102,0},{80,0}}, color={0,127,255}));
            connect(resLoa.port_b, fan.port_a)
              annotation (Line(points={{60,0},{50,0}}, color={0,127,255}));
            annotation (
              Documentation(
                info="<html>
<p>
This is a simplified model of a two-pipe fan coil unit for heating.
It is intended to be used
</p>
<ul>
<li>
in a case where the room thermal loads are provided as time series: it
therefore takes the load as an input, and
</li>
<li>
in conjunction with
<a href=\"modelica://Buildings.Experimental.DHC.Loads.BaseClasses.FlowDistribution\">
Buildings.Experimental.DHC.Loads.BaseClasses.FlowDistribution</a>:
it therefore computes the water mass flow rate required to meet the load.
</li>
</ul>
<p>
For the sake of computational performance, a PI controller is used instead of an inverse
model of the heat exchanger to assess the required water mass flow rate.
The controller output signal is mapped linearly to both,
</p>
<ul>
<li>
the water mass flow rate, from zero to its nominal value, and
</li>
<li>
the air mass flow rate, from zero to its nominal value.
</li>
</ul>
<p>
The controller tracks the load while the impact of an unmet load on the room
air temperature is assessed with
<a href=\"modelica://Buildings.Experimental.DHC.Loads.BaseClasses.SimpleRoomODE\">
Buildings.Experimental.DHC.Loads.BaseClasses.SimpleRoomODE</a>.
</p>
</html>",           revisions="<html>
<ul>
<li>
February 21, 2020, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>"),           Icon(graphics={
                  Ellipse(
                    extent={{-100,100},{100,-100}},
                    lineColor={28,108,200},
                    fillColor={127,0,0},
                    fillPattern=FillPattern.Solid,
                    pattern=LinePattern.None),
                  Line(
                    points={{-120,-1.46958e-14},{-80,-9.79717e-15},{-40,60},{40,-60},{80,9.79717e-15},{120,1.46958e-14}},
                    color={255,255,255},
                    thickness=1,
                    rotation=180),
                  Polygon(
                    points={{46,62},{70,70},{62,46},{46,62}},
                    lineColor={255,255,255},
                    lineThickness=1,
                    fillColor={255,255,255},
                    fillPattern=FillPattern.Solid),
                  Line(
                    points={{-118,-118},{120,120}},
                    color={255,255,255},
                    thickness=1)}));
          end FanCoil2PipeHeating;

          model FanCoil2PipeHeatingValve
            "Model of a two-pipe fan coil unit for heating, with a two-way control valve"
            extends estcp.DHC.Loads.BaseClasses.PartialTerminalUnit(
              redeclare package Medium1 = Buildings.Media.Water,
              redeclare package Medium2 = Buildings.Media.Air,
              final have_heaPor=false,
              final have_fluPor=false,
              final have_fan=true,
              final have_heaWat=true,
              final have_chiWat=false,
              final have_QReq_flow=true,
              final allowFlowReversal=false,
              final allowFlowReversalLoa=false,
              final have_chaOve=false,
              final have_eleHea=false,
              final have_eleCoo=false,
              final have_TSen=false,
              final have_weaBus=false,
              final have_pum=false,
              final mHeaWat_flow_nominal=abs(QHea_flow_nominal/cpHeaWat_nominal
                  /(T_aHeaWat_nominal - T_bHeaWat_nominal)));
            import hexConfiguration=Buildings.Fluid.Types.HeatExchangerConfiguration;
            final parameter hexConfiguration hexConHea=hexConfiguration.CounterFlow
              "Heating heat exchanger configuration";
            parameter Boolean have_speVar=true
              "Set to true for a variable speed fan (otherwise fan is always on)";
            parameter Modelica.Units.SI.PressureDifference dpLoa_nominal(displayUnit="Pa")=
                 250 "Load side pressure drop"
              annotation (Dialog(group="Nominal condition"));
            parameter Modelica.Units.SI.PressureDifference dpSou_nominal=30000
              "Nominal pressure drop on source side";
            Buildings.Fluid.Movers.FlowControlled_m_flow fan(
              redeclare final package Medium=Medium2,
              final allowFlowReversal=allowFlowReversalLoa,
              final m_flow_nominal=mLoaHea_flow_nominal,
              redeclare final Buildings.Fluid.Movers.Data.Generic
                                                        per,
              addPowerToMedium=true,
              nominalValuesDefineDefaultPressureCurve=true,
              energyDynamics=Modelica.Fluid.Types.Dynamics.SteadyState,
              use_inputFilter=false,
              final dp_nominal=dpLoa_nominal)
              "Fan"
              annotation (Placement(transformation(extent={{70,-10},{50,10}})));
            Buildings.Controls.OBC.CDL.Reals.PID con(
              Ti=10,
              yMax=1,
              controllerType=Buildings.Controls.OBC.CDL.Types.SimpleController.PI,
              reverseActing=true,
              yMin=0)
              "PI controller"
              annotation (Placement(transformation(extent={{-10,210},{10,230}})));
            Buildings.Fluid.HeatExchangers.DryCoilEffectivenessNTU hex(
              redeclare final package Medium1=Medium1,
              redeclare final package Medium2=Medium2,
              final configuration=hexConHea,
              final m1_flow_nominal=mHeaWat_flow_nominal,
              final m2_flow_nominal=mLoaHea_flow_nominal,
              final dp1_nominal=0,
              final dp2_nominal=0,
              final Q_flow_nominal=QHea_flow_nominal,
              final T_a1_nominal=T_aHeaWat_nominal,
              final T_a2_nominal=T_aLoaHea_nominal,
              final allowFlowReversal1=allowFlowReversal,
              final allowFlowReversal2=allowFlowReversalLoa)
              "Heating coil"
              annotation (Placement(transformation(extent={{-80,4},{-60,-16}})));
            Modelica.Blocks.Sources.RealExpression Q_flowHea(
              y=hex.Q2_flow)
              annotation (Placement(transformation(extent={{120,210},{140,230}})));
            Buildings.Controls.OBC.CDL.Reals.MultiplyByParameter gaiFloNom2(k=
                  mLoaHea_flow_nominal)
              annotation (Placement(transformation(extent={{56,170},{76,190}})));
            Buildings.Fluid.Sources.Boundary_pT sinAir(
              redeclare package Medium = Medium2,
              use_T_in=false,
              nPorts=1) "Sink for supply air" annotation (Placement(
                  transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={-110,0})));
            Buildings.Fluid.Sources.Boundary_pT retAir(
              redeclare package Medium = Medium2,
              use_T_in=true,
              nPorts=1) "Source for return air" annotation (Placement(
                  transformation(
                  extent={{10,-10},{-10,10}},
                  rotation=0,
                  origin={110,0})));
            estcp.DHC.Loads.BaseClasses.SimpleRoomODE TLoaODE(
              dTEnv_nominal=25,
              TAir_start=293.15,
              QEnv_flow_nominal=QHea_flow_nominal)
              "Predicted room air temperature"
              annotation (Placement(transformation(extent={{-10,30},{10,50}})));
            Buildings.Fluid.Actuators.Valves.TwoWayEqualPercentage val(
              redeclare final package Medium = Medium1,
              final m_flow_nominal=mHeaWat_flow_nominal,
              dpValve_nominal=10000,
              use_inputFilter=false,
              final allowFlowReversal=allowFlowReversal,
              dpFixed_nominal=dpSou_nominal - 10000) annotation (Placement(
                  transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=-90,
                  origin={-40,-80})));
            Buildings.Fluid.Sensors.MassFlowRate senMasFlo(redeclare final
                package Medium = Medium1, final allowFlowReversal=
                  allowFlowReversal) annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=-90,
                  origin={-40,-120})));
            Buildings.Controls.OBC.CDL.Reals.MultiplyByParameter gaiHeaFlo(k=1/
                  QHea_flow_nominal)
              annotation (Placement(transformation(extent={{-40,210},{-20,230}})));
            Buildings.Controls.OBC.CDL.Reals.MultiplyByParameter gaiHeaFlo1(k=1/
                  QHea_flow_nominal) annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=90,
                  origin={0,190})));
            Buildings.Controls.OBC.CDL.Reals.Sources.Constant one(
              k=1)
              "One constant"
              annotation (Placement(transformation(extent={{-10,130},{10,150}})));
            Buildings.Controls.OBC.CDL.Logical.Sources.Constant con1(
              k=have_speVar)
              annotation (Placement(transformation(extent={{-60,160},{-40,180}})));
            Buildings.Controls.OBC.CDL.Reals.Switch swi
              "Logical switch"
              annotation (Placement(transformation(extent={{30,170},{50,190}})));
            Buildings.Fluid.FixedResistances.PressureDrop resLoa(
              redeclare final package Medium = Medium2,
              final allowFlowReversal=allowFlowReversalLoa,
              final m_flow_nominal=mLoaHea_flow_nominal,
              final dp_nominal=dpLoa_nominal) "Load side pressure drop"
              annotation (Placement(transformation(extent={{94,-10},{74,10}})));
          equation
            connect(gaiFloNom2.y,fan.m_flow_in)
              annotation (Line(points={{78,180},{60,180},{60,12}},color={0,0,127}));
            connect(fan.P,mulPFan.u)
              annotation (Line(points={{49,9},{40,9},{40,140},{158,140}},color={0,0,127}));
            connect(Q_flowHea.y,mulQActHea_flow.u)
              annotation (Line(points={{141,220},{150,220},{150,220},{158,220}},color={0,0,127}));
            connect(fan.port_b,hex.port_a2)
              annotation (Line(points={{50,0},{-60,0}},color={0,127,255}));
            connect(hex.port_b2,sinAir.ports[1])
              annotation (Line(points={{-80,0},{-100,0}},color={0,127,255}));
            connect(TSetHea,TLoaODE.TSet)
              annotation (Line(points={{-220,220},{-120,220},{-120,48},{-12,48}},color={0,0,127}));
            connect(mulQReqHea_flow.y,TLoaODE.QReq_flow)
              annotation (Line(points={{-158,100},{-100,100},{-100,40},{-12,40}},color={0,0,127}));
            connect(Q_flowHea.y,TLoaODE.QAct_flow)
              annotation (Line(points={{141,220},{150,220},{150,160},{-20,160},{-20,32},{-12,32}},color={0,0,127}));
            connect(TLoaODE.TAir,retAir.T_in)
              annotation (Line(points={{12,40},{130,40},{130,4},{122,4}},color={0,0,127}));
            connect(hex.port_b1,val.port_a)
              annotation (Line(points={{-60,-12},{-40,-12},{-40,-70}},color={0,127,255}));
            connect(val.port_b,senMasFlo.port_a)
              annotation (Line(points={{-40,-90},{-40,-110}},color={0,127,255}));
            connect(con.y,val.y)
              annotation (Line(points={{12,220},{20,220},{20,-80},{-28,-80}},color={0,0,127}));
            connect(senMasFlo.m_flow,mulMasFloReqHeaWat.u)
              annotation (Line(points={{-29,-120},{140,-120},{140,100},{158,100}},color={0,0,127}));
            connect(mulQReqHea_flow.y,gaiHeaFlo.u)
              annotation (Line(points={{-158,100},{-100,100},{-100,220},{-42,220}},color={0,0,127}));
            connect(gaiHeaFlo.y,con.u_s)
              annotation (Line(points={{-18,220},{-12,220}},color={0,0,127}));
            connect(Q_flowHea.y,gaiHeaFlo1.u)
              annotation (Line(points={{141,220},{150,220},{150,160},{0,160},{0,178},{-8.88178e-16,178}},color={0,0,127}));
            connect(con.u_m,gaiHeaFlo1.y)
              annotation (Line(points={{0,208},{0,207},{6.66134e-16,207},{6.66134e-16,202}},color={0,0,127}));
            connect(gaiFloNom2.u,swi.y)
              annotation (Line(points={{54,180},{52,180}},color={0,0,127}));
            connect(con.y,swi.u1)
              annotation (Line(points={{12,220},{20,220},{20,188},{28,188}},color={0,0,127}));
            connect(con1.y,swi.u2)
              annotation (Line(points={{-38,170},{24,170},{24,180},{28,180}},color={255,0,255}));
            connect(one.y,swi.u3)
              annotation (Line(points={{12,140},{26,140},{26,172},{28,172}},color={0,0,127}));
            connect(senMasFlo.port_b,mulHeaWatFloOut.port_a)
              annotation (Line(points={{-40,-130},{-40,-220},{160,-220}},color={0,127,255}));
            connect(mulHeaWatFloInl.port_b,hex.port_a1)
              annotation (Line(points={{-160,-220},{-100,-220},{-100,-12},{-80,-12}},color={0,127,255}));
            connect(retAir.ports[1], resLoa.port_a)
              annotation (Line(points={{100,0},{94,0}}, color={0,127,255}));
            connect(resLoa.port_b, fan.port_a)
              annotation (Line(points={{74,0},{70,0}}, color={0,127,255}));
            annotation (
              Documentation(
                info="<html>
<p>
This is a simplified model of a two-pipe fan coil unit for heating. It is
intended to be used in a case where the room thermal loads are provided
as time series, and hence it takes the load as an input.
</p>
<p>
A PI controller tracks the load.
The controller output signal is mapped linearly to both,
</p>
<ul>
<li>
the opening of a two-way control valve, and
</li>
<li>
the air mass flow rate, from zero to its nominal value.
</li>
</ul>
<p>
The impact of an unmet load on the room air temperature is assessed with
<a href=\"modelica://Buildings.Experimental.DHC.Loads.BaseClasses.SimpleRoomODE\">
Buildings.Experimental.DHC.Loads.BaseClasses.SimpleRoomODE</a>.
</p>
</html>",       revisions="<html>
<ul>
<li>
February 21, 2020, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>"),           Icon(graphics={
                  Ellipse(
                    extent={{-100,100},{100,-100}},
                    lineColor={28,108,200},
                    fillColor={127,0,0},
                    fillPattern=FillPattern.Solid,
                    pattern=LinePattern.None),
                  Line(
                    points={{-120,-1.46958e-14},{-80,-9.79717e-15},{-40,60},{40,-60},{80,9.79717e-15},{120,1.46958e-14}},
                    color={255,255,255},
                    thickness=1,
                    rotation=180),
                  Polygon(
                    points={{46,62},{70,70},{62,46},{46,62}},
                    lineColor={255,255,255},
                    lineThickness=1,
                    fillColor={255,255,255},
                    fillPattern=FillPattern.Solid),
                  Line(
                    points={{-118,-118},{120,120}},
                    color={255,255,255},
                    thickness=1),
              Polygon(
                points={{-72,-100},{-86,-90},{-86,-112},{-72,-100}},
                lineColor={0,0,0},
                fillColor=DynamicSelect({0,0,0}, y*{255,255,255}),
                fillPattern=FillPattern.Solid),
              Polygon(
                points={{-72,-100},{-60,-90},{-60,-112},{-72,-100}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid)}));
          end FanCoil2PipeHeatingValve;
        annotation (Documentation(info="<html>
<p>
This package contains base classes that are used to construct the classes in
<a href=\"modelica://Buildings.Experimental.DHC.Loads.BaseClasses.Validation\">
Buildings.Experimental.DHC.Loads.BaseClasses.Validation</a>.
</p>
</html>"));
        end BaseClasses;
        annotation (
          preferredView="info",
          Documentation(
            info="<html>
<p>
This package contains models that validate the base classes in
<a href=\"modelica://Buildings.Experimental.DHC.Loads.BaseClasses\">
Buildings.Experimental.DHC.Loads.BaseClasses</a>.
</p>
</html>"));
      end Validation;
      annotation (
        preferredView="info",
        Documentation(
          info="<html>
<p>
This package contains base classes that are used to construct the classes in
<a href=\"modelica://Buildings.Experimental.DHC.Loads\">
Buildings.Experimental.DHC.Loads</a>.
</p>
</html>"));
    end BaseClasses;
    annotation (
      preferredView="info",
      Documentation(
        info="<html>
<p>
This package contains models for the thermal and domestic hot water demand
prediction in buildings.
</p>
</html>"));
  end Loads;

  package Networks "Package of models for district energy network"
    extends Modelica.Icons.VariantsPackage;

    model Connection2Pipe
      "Model for connecting an agent to a two-pipe distribution network, using fixed resistance pipe model"
      extends estcp.DHC.Networks.BaseClasses.PartialConnection2Pipe(
        redeclare model Model_pipDisSup =
            Buildings.Fluid.FixedResistances.PressureDrop (final dp_nominal=
                dpDis_nominal),
        redeclare model Model_pipDisRet =
            Buildings.Fluid.FixedResistances.PressureDrop (final dp_nominal=
                dpDis_nominal),
        redeclare model Model_pipCon =
            Buildings.Fluid.FixedResistances.LosslessPipe);
      parameter Modelica.Units.SI.PressureDifference dpDis_nominal(
        displayUnit="Pa")
        "Pressure drop in distribution line (supply only, not counting return line)";
      annotation (
        Documentation(
          info="<html>
<p>
This is a model of a connection with a two-pipe distribution network using 
as pipe model a fixed hydraulic resistance with no heat loss.
The pressure drop of this hydraulic resistance is scaled based on the
mass flow rate.
</p>
</html>", revisions="<html>
<ul>
<li>
April 17, 2022, by Katy Hinkelman:<br/>
Removed renamed model redeclare to solve error and allow separate pipe 
declarations on sup/ret of DHC networks.
</li>
<li>
February 21, 2020, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>"));
    end Connection2Pipe;

    model Connection2PipePlugFlow
      "Model for connecting an agent to a two-pipe distribution network, using plug flow pipe models in the main line"
      extends estcp.DHC.Networks.BaseClasses.PartialConnection2Pipe(
        redeclare model Model_pipDisSup =
            Buildings.Fluid.FixedResistances.PlugFlowPipe (
            final length=length,
            final dIns=dIns,
            final kIns=kIns),
        redeclare model Model_pipDisRet =
            Buildings.Fluid.FixedResistances.PlugFlowPipe (
            final length=length,
            final dIns=dIns,
            final kIns=kIns),
        redeclare model Model_pipCon =
            Buildings.Fluid.FixedResistances.LosslessPipe);
      parameter Modelica.Units.SI.Length length
        "Pipe length"
        annotation (Dialog(group="Pipe"));
      parameter Modelica.Units.SI.Length dIns
        "Thickness of pipe insulation, used to compute R"
        annotation (Dialog(group="Pipe"));
      parameter Modelica.Units.SI.ThermalConductivity kIns
        "Heat conductivity of pipe insulation, used to compute R"
        annotation (Dialog(group="Pipe"));
      Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_a heatPort
        "Heat transfer to or from surroundings (positive if pipe is colder than surrounding)"
        annotation (Placement(transformation(extent={{-110,60},{-90,80}})));
    equation
      connect(pipDisRet.heatPort, heatPort) annotation (Line(points={{-70,-70},{-70,
              -60},{-52,-60},{-52,70},{-100,70}},
                                        color={191,0,0}));
      connect(pipDisSup.heatPort, heatPort) annotation (Line(points={{-70,-30},{-70,
              -20},{-52,-20},{-52,70},{-100,70}}, color={191,0,0}));
      annotation (
        Documentation(
          info="<html>
<p>
This is a model of a connection with a two-pipe distribution network using 
a plug flow pipe model that includes pressure drop, heat transfer, and transport
delays.
</p>
<p>
The plug flow pipe model is used in the main distribution line,
but not in the connection to the building, as the latter is typically short.
</p>
</html>", revisions="<html>
<ul>
<li>
June 14, 2023, by David Blum:<br/>
Fix redeclare of dis pipe models in connections.
</li>
<li>
January 2, 2023, by Kathryn Hinkelman:<br/>
First implementation.
</li>
</ul>
</html>"));
    end Connection2PipePlugFlow;

    model Distribution2Pipe
      "Model of a two-pipe distribution network, using fixed resistance pipe model"
      extends estcp.DHC.Networks.BaseClasses.PartialDistribution2Pipe(
          redeclare Connection2Pipe con[nCon](final dpDis_nominal=dpDis_nominal),
          redeclare model Model_pipDis =
            Buildings.Fluid.FixedResistances.LosslessPipe);
      parameter Modelica.Units.SI.PressureDifference dpDis_nominal[nCon]
        "Pressure drop in distribution line (supply only, not counting return line)"
        annotation (Dialog(tab="General", group="Nominal condition"));
      annotation (
        Documentation(
          info="<html>
<p>
This is a model of a two-pipe distribution network using
</p>
<ul>
<li>
a connection model with fixed hydraulic resistance with no heat loss as a pipe
model in the main line, and
</li>
<li>
a dummy pipe model with no hydraulic resistance and no heat loss for the end of
the distribution line (after the last connection). 
</li>
</ul>
</html>", revisions="<html>
<ul>
<li>
February 21, 2020, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>"));
    end Distribution2Pipe;

    model Distribution2PipePlugFlow
      "Model of a two-pipe distribution network, using plug flow pipe models in the main line"
      extends estcp.DHC.Networks.BaseClasses.PartialDistribution2Pipe(
          redeclare Connection2PipePlugFlow con[nCon](
          final length=length,
          final dIns=dIns,
          final kIns=kIns), redeclare model Model_pipDis =
            Buildings.Fluid.FixedResistances.LosslessPipe);
      parameter Modelica.Units.SI.Length length[nCon]
        "Pipe length"
        annotation (Dialog(group="Pipe"));
      parameter Modelica.Units.SI.Length dIns[nCon]=fill(0.05, nCon)
        "Thickness of pipe insulation, used to compute R"
        annotation (Dialog(group="Pipe"));
      parameter Modelica.Units.SI.ThermalConductivity kIns[nCon]=fill(0.028, nCon)
        "Heat conductivity of pipe insulation, used to compute R"
        annotation (Dialog(group="Pipe"));
      Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_a heatPort
        "Heat transfer to or from surroundings (positive if pipe is colder than surrounding)"
        annotation (Placement(transformation(extent={{-110,20},{-90,40}}),
            iconTransformation(extent={{-140,-110},{-120,-90}})));
    protected
      Modelica.Thermal.HeatTransfer.Components.ThermalCollector theCol(final m=nCon)
        "Thermal collector" annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=270,
            origin={-58,30})));
    equation
      connect(heatPort, theCol.port_b)
        annotation (Line(points={{-100,30},{-68,30}}, color={191,0,0}));
      connect(con.heatPort, theCol.port_a) annotation (Line(points={{-10,7},{-40,7},
              {-40,30},{-48,30}}, color={191,0,0}));
      annotation (
        Documentation(
          info="<html>
<p>
This is a model of a two-pipe distribution network using
</p>
<ul>
<li>
a connection model with a plug flow pipe
model (pressure drop, heat transfer, transport delays)in the main line, and
</li>
<li>
a dummy pipe model with no hydraulic resistance and no heat loss for the end of
the distribution line (after the last connection).
</li>
</ul>
</html>", revisions="<html>
<ul>
<li>
January 27, 2023, by Michael Wetter:<br/>
Removed connection to itself.
</li>
<li>
January 2, 2023, by Kathryn Hinkelman:<br/>
First implementation.
</li>
</ul>
</html>"));
    end Distribution2PipePlugFlow;

    package Combined "Package of models for DHC distribution networks"
      extends Modelica.Icons.Package;
      model UnidirectionalParallel
        "Hydronic network for unidirectional parallel DHC system"
        extends estcp.DHC.Networks.BaseClasses.PartialDistribution2Pipe(
          tau=5*60,
          redeclare
            estcp.DHC.Networks.Combined.BaseClasses.ConnectionParallelAutosize
            con[nCon](
            each final dp_length_nominal=dp_length_nominal,
            final lDis=lDis,
            final lCon=lCon,
            final dhDis=dhDis,
            final dhDisRet=dhDisRet,
            final dhCon=dhCon),
          redeclare model Model_pipDis =
              estcp.DHC.Networks.Combined.BaseClasses.PipeAutosize (
              roughness=7e-6,
              fac=1.5,
              final dp_length_nominal=dp_length_nominal,
              final dh(fixed=true) = dhEnd,
              final length=2*lEnd));
        parameter Real dp_length_nominal(final unit="Pa/m") = 250
          "Pressure drop per pipe length at nominal flow rate";
        parameter Modelica.Units.SI.Length lDis[nCon]
          "Length of the distribution pipe before each connection (supply only, not counting return line)";
        parameter Modelica.Units.SI.Length lCon[nCon]
          "Length of each connection pipe (supply only, not counting return line)";
        parameter Modelica.Units.SI.Length lEnd
          "Length of the end of the distribution line (supply only, not counting return line)";
        parameter Modelica.Units.SI.Length dhDis[nCon](
          each fixed=false,
          each start=0.05,
          each min=0.01)
          "Hydraulic diameter of the distribution pipe before each connection";
        parameter Modelica.Units.SI.Length dhDisRet[nCon](
          each fixed=false,
          each start=0.05,
          each min=0.01)
          "Hydraulic diameter of the distribution pipe before each connection";
        parameter Modelica.Units.SI.Length dhCon[nCon](
          each fixed=false,
          each start=0.05,
          each min=0.01) "Hydraulic diameter of each connection pipe";
        parameter Modelica.Units.SI.Length dhEnd(
          fixed=false,
          start=0.05,
          min=0.01) "Hydraulic diameter of the end of the distribution line";
        annotation (Documentation(info="<html>
<p>
This model represents a two-pipe distribution network with built-in computation
of the pipe diameters based on the pressure drop per pipe length
at nominal flow rate.
</p>
</html>",       revisions="<html>
<ul>
<li>
February 23, 2021, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>"));
      end UnidirectionalParallel;

      model UnidirectionalSeries
        "Hydronic network for unidirectional series DHC system"
        extends estcp.DHC.Networks.BaseClasses.PartialDistribution1Pipe(
          tau=5*60,
          redeclare
            estcp.DHC.Networks.Combined.BaseClasses.ConnectionSeriesAutosize
            con[nCon](
            each final dp_length_nominal=dp_length_nominal,
            final lDis=lDis,
            final lCon=lCon,
            final dhDis=dhDis,
            final dhCon=dhCon),
          redeclare model Model_pipDis =
              estcp.DHC.Networks.Combined.BaseClasses.PipeAutosize (
              roughness=7e-6,
              fac=1.5,
              final dp_length_nominal=dp_length_nominal,
              final dh(fixed=true) = dhEnd,
              final length=lEnd));
        parameter Real dp_length_nominal(final unit="Pa/m") = 250
          "Pressure drop per pipe length at nominal flow rate";
        parameter Modelica.Units.SI.Length lDis[nCon]
          "Length of the distribution pipe before each connection";
        parameter Modelica.Units.SI.Length lCon[nCon]
          "Length of each connection pipe (supply only, not counting return line)";
        parameter Modelica.Units.SI.Length lEnd
          "Length of the end of the distribution line (after last connection)";
        parameter Modelica.Units.SI.Length dhDis[nCon](
          each fixed=false,
          each start=0.05,
          each min=0.01)
          "Hydraulic diameter of the distribution pipe before each connection";
        parameter Modelica.Units.SI.Length dhCon[nCon](
          each fixed=false,
          each start=0.05,
          each min=0.01) "Hydraulic diameter of each connection pipe";
        parameter Modelica.Units.SI.Length dhEnd(
          fixed=false,
          start=0.05,
          min=0.01)
          "Hydraulic diameter of of the end of the distribution line (after last connection)";
        annotation (Documentation(info="<html>
<p>
This model represents a one-pipe distribution network with built-in computation
of the pipe diameter based on the pressure drop per pipe length
at nominal flow rate.
</p>
<h4>Modeling considerations</h4>
<p>
Note that <code>dhDis</code> needs to be vectorized, even if the same value
is computed for each array element in case of a one-pipe network.
This is because the pipe diameter is computed at initialization by the model
<a href=\"modelica://Buildings.Experimental.DHC.Networks.Combined.BaseClasses.ConnectionSeriesAutosize\">
Buildings.Experimental.DHC.Networks.Combined.BaseClasses.ConnectionSeriesAutosize</a>
which is instantiated for each connection.
So the initialization system of equations would be overdetermined if using
a parameter binding with a scalar variable.
</p>
</html>",       revisions="<html>
<ul>
<li>
February 23, 2021, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>"));
      end UnidirectionalSeries;

      package BaseClasses "Package with base classes for Buildings.Experimental.DHC.Networks.Combined"
        extends Modelica.Icons.BasesPackage;

        model ConnectionParallelAutosize
          "Model for connecting an agent to the DHC system"
          extends ConnectionParallelStandard(
            tau=5*60,
            redeclare replaceable model Model_pipDisSup = PipeAutosize (
              roughness=7e-6,
              fac=1.5,
              dh(fixed=true)=dhDis,
              final length=lDis,
              final dp_length_nominal=dp_length_nominal),
            redeclare replaceable model Model_pipDisRet = PipeAutosize (
              roughness=7e-6,
              fac=1.5,
              dh(fixed=true)=dhDisRet,
              final length=lDis,
              final dp_length_nominal=dp_length_nominal),
            redeclare replaceable model Model_pipCon = PipeAutosize (
              roughness=2.5e-5,
              fac=2,
              final length=2*lCon,
              final dh(fixed=true)=dhCon,
              final dp_length_nominal=dp_length_nominal));
          parameter Real dp_length_nominal(final unit="Pa/m") = 250
            "Pressure drop per pipe length at nominal flow rate";
          parameter Modelica.Units.SI.Length dhDisRet
            "Hydraulic diameter of the return distribution pipe";
          annotation (Documentation(revisions="<html>
<ul>
<li>
February 23, 2021, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>",         info="<html>
<p>
This model represents the supply and return lines to connect an
agent (e.g., an energy transfer station) to a two-pipe main distribution
system.
The instances of the pipe model are autosized based on the pressure 
drop per pipe length at nominal flow rate.
</p>
</html>"));
        end ConnectionParallelAutosize;

        model ConnectionParallelStandard
          "Model for connecting an agent to the DHC system"
          extends estcp.DHC.Networks.BaseClasses.PartialConnection2Pipe(
            tau=5*60,
            redeclare replaceable model Model_pipDisSup = PipeStandard (
                roughness=7e-6,
                fac=1.5,
                final length=lDis,
                final dh=dhDis),
            redeclare replaceable model Model_pipDisRet = PipeStandard (
                roughness=7e-6,
                fac=1.5,
                final length=lDis,
                final dh=dhDis),
            redeclare replaceable model Model_pipCon = PipeStandard (
                roughness=2.5e-5,
                fac=2,
                final length=2*lCon,
                final dh=dhCon));
          parameter Modelica.Units.SI.Length lDis
            "Length of the distribution pipe before the connection";
          parameter Modelica.Units.SI.Length lCon
            "Length of the connection pipe (supply only, not counting return line)";
          parameter Modelica.Units.SI.Length dhDis
            "Hydraulic diameter of the distribution pipe";
          parameter Modelica.Units.SI.Length dhCon
            "Hydraulic diameter of the connection pipe";
          annotation (Documentation(revisions="<html>
<ul>
<li>
February 23, 2021, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>",         info="<html>
<p>
This model represents the supply and return lines to connect an
agent (e.g., an energy transfer station) to a two-pipe main distribution
system.
The instances of the pipe model are parameterized with the
hydraulic diameter.
</p>
</html>"));
        end ConnectionParallelStandard;

        model ConnectionSeriesAutosize
          "Model for connecting an agent to the DHC system"
          extends ConnectionSeriesStandard(
            tau=5*60,
            redeclare replaceable model Model_pipDis = PipeAutosize (
              roughness=7e-6,
              fac=1.5,
              final length=lDis,
              final dh(fixed=true)=dhDis,
              final dp_length_nominal=dp_length_nominal),
            redeclare replaceable model Model_pipCon = PipeAutosize (
              roughness=2.5e-5,
              fac=2,
              final length=2*lCon,
              final dh(fixed=true)=dhCon,
              final dp_length_nominal=dp_length_nominal));
          parameter Real dp_length_nominal(final unit="Pa/m") = 250
            "Pressure drop per pipe length at nominal flow rate";
          annotation (Documentation(revisions="<html>
<ul>
<li>
February 23, 2021, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>",         info="<html>
<p>
This model represents the supply and return lines to connect an
agent (e.g., an energy transfer station) to a one-pipe main distribution
system.
The instances of the pipe model are autosized based on the pressure drop per pipe length 
at nominal flow rate.
</p>
</html>"));
        end ConnectionSeriesAutosize;

        model ConnectionSeriesStandard
          "Model for connecting an agent to the DHC system"
          extends estcp.DHC.Networks.BaseClasses.PartialConnection1Pipe(
            tau=5*60,
            redeclare replaceable model Model_pipDis = PipeStandard (
                roughness=7e-6,
                fac=1.5,
                final length=lDis,
                final dh=dhDis),
            redeclare replaceable model Model_pipCon = PipeStandard (
                roughness=2.5e-5,
                fac=2,
                final length=2*lCon,
                final dh=dhCon));
          parameter Modelica.Units.SI.Length lDis
            "Length of the distribution pipe before the connection";
          parameter Modelica.Units.SI.Length lCon
            "Length of the connection pipe (supply only, not counting return line)";
          parameter Modelica.Units.SI.Length dhDis
            "Hydraulic diameter of the distribution pipe";
          parameter Modelica.Units.SI.Length dhCon
            "Hydraulic diameter of the connection pipe";
          annotation (Documentation(revisions="<html>
<ul>
<li>
February 23, 2021, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>",         info="<html>
<p>
This model represents the supply and return lines to connect an
agent (e.g., an energy transfer station) to a one-pipe main distribution
system.
The instances of the pipe model are parameterized with the
hydraulic diameter.
</p>
</html>"));
        end ConnectionSeriesStandard;

        model PipeAutosize "Pipe model parameterized with pressure drop per pipe length"
          extends Buildings.Fluid.FixedResistances.PressureDrop(
            final deltaM =  eta_default*dh/4*Modelica.Constants.pi*ReC/m_flow_nominal_pos,
            final dp_nominal=dp_length_nominal*length);

          parameter Modelica.Units.SI.Length dh(
            fixed=false,
            start=0.01,
            min=0.001) "Hydraulic diameter (assuming a round cross section area)";

          parameter Real dp_length_nominal(final unit="Pa/m") = 250
            "Pressure drop per pipe length at nominal flow rate";

          parameter Modelica.Units.SI.Length length "Length of the pipe";

          parameter Real ReC(min=0)=4000
            "Reynolds number where transition to turbulence starts";

          parameter Modelica.Units.SI.Velocity v_nominal=m_flow_nominal/(rho_default*
              ARound)
            "Velocity at m_flow_nominal (used to compute default value for hydraulic diameter dh)"
            annotation (Dialog(group="Nominal condition"));

          parameter Modelica.Units.SI.Length roughness(min=0) = 2.5e-5
            "Absolute roughness of pipe, with a default for a smooth steel pipe (PE100: 7E-6)";

          parameter Real fac(min=1) = 2
            "Factor to take into account resistance of bends etc., fac=dp_nominal/dpStraightPipe_nominal";

          final parameter Modelica.Units.SI.PressureDifference dpStraightPipe_nominal(
              displayUnit="Pa")=
            Modelica.Fluid.Pipes.BaseClasses.WallFriction.Detailed.pressureLoss_m_flow(
            m_flow=m_flow_nominal,
            rho_a=rho_default,
            rho_b=rho_default,
            mu_a=mu_default,
            mu_b=mu_default,
            length=length,
            diameter=dh,
            roughness=roughness,
            m_flow_small=m_flow_small)
            "Pressure loss of a straight pipe at m_flow_nominal";

          Modelica.Units.SI.Velocity v=m_flow/(rho_default*ARound)
            "Flow velocity (assuming a round cross section area)";

        protected
          parameter Modelica.Units.SI.Area ARound=dh^2*Modelica.Constants.pi/4
            "Cross sectional area (assuming a round cross section area)";

          parameter Medium.ThermodynamicState state_default=
            Medium.setState_pTX(
              T=Medium.T_default,
              p=Medium.p_default,
              X=Medium.X_default[1:Medium.nXi]) "Default state";

          parameter Modelica.Units.SI.Density rho_default=Medium.density(state_default)
            "Density at nominal condition";

          parameter Modelica.Units.SI.DynamicViscosity mu_default=
              Medium.dynamicViscosity(state_default)
            "Dynamic viscosity at nominal condition";
        initial equation
          dp_nominal = fac*dpStraightPipe_nominal;

        annotation (
            DefaultComponentName="pipCon",
            Icon(graphics={
                Rectangle(
                  extent={{-100,22},{100,-24}},
                  lineColor={0,0,0},
                  fillPattern=FillPattern.HorizontalCylinder,
                  fillColor={0,140,72})}),
            Documentation(info="<html>
<p>
This model is similar to
<a href=\"modelica://Buildings.Fluid.FixedResistances.HydraulicDiameter\">
Buildings.Fluid.FixedResistances.HydraulicDiameter</a>
except for the modifications below which allow to use this model for computing the
hydraulic diameter at initialization, based on the pressure drop per pipe length
at nominal flow rate.
</p>
<ul>
<li>
The parameter <code>v_nominal</code> is computed based on the nominal flow rate.
</li>
<li>
The equation <code>dp_nominal = fac*dpStraightPipe_nominal</code> is
solved at initialization for the hydraulic diameter <code>dh</code>.
</li>
<li>
The parameter <code>dp_nominal</code> is assigned a value that does not need
to be computed at initialization.
This is required per Modelica specification because
the structural parameter <code>computeFlowResistance</code>
depends on <code>dp_nominal</code> and must be evaluated at compile time.
</li>
</ul>
</html>",         revisions="<html>
<ul>
<li>
November 18, 2022, by David Blum:<br/>
<code>start</code> attribute for parameter <code>dh</code> changed to 0.01.<br/>
<code>min</code> attribute for parameter <code>dh</code> changed to 0.001.<br/>
This is for <a href=\"https://github.com/lbl-srg/modelica-buildings/issues/2510\">issue 2510</a>.
</li>
<li>
February 23, 2021, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>"));
        end PipeAutosize;

        model PipeStandard "Pipe model parameterized with hydraulic diameter"
          extends Buildings.Fluid.FixedResistances.HydraulicDiameter(
            dp(nominal=1E5),
            final linearized=false,
            final v_nominal=m_flow_nominal * 4 / (rho_default * dh^2 * Modelica.Constants.pi));

        annotation (
          DefaultComponentName="pipDis",
          Icon(graphics={
                Rectangle(
                  extent={{-100,22},{100,-24}},
                  lineColor={0,0,0},
                  fillPattern=FillPattern.HorizontalCylinder,
                  fillColor={0,140,72})}),
            Documentation(revisions="<html>
<ul>
<li>
February 23, 2021, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>",         info="<html>
<p>
This model is similar to
<a href=\"modelica://Buildings.Fluid.FixedResistances.HydraulicDiameter\">
Buildings.Fluid.FixedResistances.HydraulicDiameter</a>
except that a binding equation is provided to compute the nominal fluid velocity
from the hydraulic diameter (as opposed to the hydraulic diameter being
computed from the nominal fluid velocity in the original model).
</p>
</html>"));
        end PipeStandard;

        package Validation "Validation models for BaseClasses"
          extends Modelica.Icons.ExamplesPackage;

          model Pipe "Validates the PipeAutosize model initialization"
            extends Modelica.Icons.Example;
            package Medium = Buildings.Media.Water "Medium model";
            parameter Real dp1_length_nominal(final unit="Pa/m")=1000 "Pressure drop per unit length 1";
            parameter Real dp2_length_nominal(final unit="Pa/m")=0.1 "Pressure drop per unit length 2";
            parameter Modelica.Units.SI.MassFlowRate m1_flow_nominal=0.01 "Nominal mass flow rate 1";
            parameter Modelica.Units.SI.MassFlowRate m2_flow_nominal=1000 "Nominal mass flow rate 2";
            Buildings.Fluid.Sources.Boundary_pT sin(redeclare final package
                Medium =
                  Medium, nPorts=4) "Sink for water flow" annotation (Placement(
                  transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=180,
                  origin={50,0})));
            estcp.DHC.Networks.Combined.BaseClasses.PipeStandard pipSta1(
              redeclare final package Medium = Medium,
              m_flow_nominal=m1_flow_nominal,
              dh=0.00548,
              length=100) "Pipe 1 with standard hydraulic diameter" annotation
              (Placement(transformation(extent={{-10,-30},{10,-10}})));
            Buildings.Fluid.Sources.MassFlowSource_T souSta1(
              redeclare final package Medium = Medium,
              m_flow=m1_flow_nominal,
              nPorts=1) "Source of water flow for standard pipe 1"
              annotation (Placement(transformation(extent={{-60,-30},{-40,-10}})));
            Buildings.Fluid.Sources.MassFlowSource_T souAut2(
              redeclare final package Medium = Medium,
              m_flow=m2_flow_nominal,
              nPorts=1) "Source of water flow for autosized pipe 2"
              annotation (Placement(transformation(extent={{-60,10},{-40,30}})));
            estcp.DHC.Networks.Combined.BaseClasses.PipeAutosize pipAut2(
              redeclare final package Medium = Medium,
              m_flow_nominal=m2_flow_nominal,
              dp_length_nominal=dp2_length_nominal,
              length=100) "Pipe 2 with autosized hydraulic diameter"
              annotation (Placement(transformation(extent={{-10,10},{10,30}})));
            Buildings.Fluid.Sources.MassFlowSource_T souAut1(
              redeclare final package Medium = Medium,
              m_flow=m1_flow_nominal,
              nPorts=1) "Source of water flow for autosized pipe 1" annotation
              (Placement(transformation(extent={{-60,50},{-40,70}})));
            PipeAutosize pipAut1(
              redeclare final package Medium = Medium,
              m_flow_nominal=m1_flow_nominal,
              dp_length_nominal=dp1_length_nominal,
              length=100) "Pipe 1 with autosized hydraulic diameter"
              annotation (Placement(transformation(extent={{-10,50},{10,70}})));
            PipeStandard pipSta2(
              redeclare final package Medium = Medium,
              m_flow_nominal=m2_flow_nominal,
              dh=2.943,
              length=100) "Pipe 2 with standard hydraulic diameter"
              annotation (Placement(transformation(extent={{-10,-70},{10,-50}})));
            Buildings.Fluid.Sources.MassFlowSource_T souSta2(
              redeclare final package Medium = Medium,
              m_flow=m2_flow_nominal,
              nPorts=1) "Source of water flow for standard pipe 2" annotation (
                Placement(transformation(extent={{-60,-70},{-40,-50}})));
          equation
            connect(souSta1.ports[1], pipSta1.port_a)
              annotation (Line(points={{-40,-20},{-10,-20}}, color={0,127,255}));
            connect(souAut2.ports[1], pipAut2.port_a)
              annotation (Line(points={{-40,20},{-10,20}}, color={0,127,255}));
            connect(souAut1.ports[1], pipAut1.port_a)
              annotation (Line(points={{-40,60},{-10,60}}, color={0,127,255}));
            connect(souSta2.ports[1], pipSta2.port_a)
              annotation (Line(points={{-40,-60},{-10,-60}}, color={0,127,255}));
            connect(pipAut1.port_b, sin.ports[1])
              annotation (Line(points={{10,60},{40,60},{40,1.5}}, color={0,127,255}));
            connect(pipAut2.port_b, sin.ports[2]) annotation (Line(points={{10,20},{20,20},
                    {20,0.5},{40,0.5}}, color={0,127,255}));
            connect(pipSta1.port_b, sin.ports[3]) annotation (Line(points={{10,-20},{20,-20},
                    {20,-0.5},{40,-0.5}}, color={0,127,255}));
            connect(pipSta2.port_b, sin.ports[4])
              annotation (Line(points={{10,-60},{40,-60},{40,-1.5}}, color={0,127,255}));
            annotation (Documentation(info="<html>
<p>
Validation model for <a href=\"modelica://Buildings.Experimental.DHC.Networks.Combined.BaseClasses.PipeAutosize\">
Buildings.Experimental.DHC.Networks.Combined.BaseClasses.PipeAutosize</a>
for range of flow rates and pressure drops per unit length.
</p>
</html>",           revisions="<html>
<ul>
<li>
November 18, 2022 by David Blum:<br/>
First implementation.<br/>
This is for <a href=\"https://github.com/lbl-srg/modelica-buildings/issues/2510\">issue 2510</a>.
</li>
</ul>
</html>"),__Dymola_Commands(file="modelica://Buildings/Resources/Scripts/Dymola/Experimental/DHC/Networks/Combined/BaseClasses/Validation/Pipe.mos"
                  "Simulate and plot"),
          experiment(
                StopTime=1,
                Tolerance=1e-06));
          end Pipe;
        annotation (preferredView="info", Documentation(info="<html>
<p>
This package contains validation cases for the BaseClasses found in
<a href=\"modelica://Buildings.Experimental.DHC.Networks.Combined.BaseClasses\">
Buildings.Experimental.DHC.Networks.Combined.BaseClasses</a>.
</p>
</html>"));
        end Validation;
      annotation (preferredView="info", Documentation(info="<html>
<p>
This package contains base classes that are used to construct the models in
<a href=\"modelica://Buildings.Experimental.DHC.Networks.Combined\">
Buildings.Experimental.DHC.Networks.Combined</a>.
</p>
</html>"));
      end BaseClasses;
    annotation (preferredView="info", Documentation(info="<html>
<p>
This package contains models for heating, cooling or combined distribution
networks.
</p>
</html>"));
    end Combined;

    package Controls "Package of control blocks for distribution systems"

      model MainPump "Main pump controller"
        extends Modelica.Blocks.Icons.Block;
        parameter Integer nMix(min=1) "Number of mixing points after the substations";
        parameter Integer nSou(min=1) "Number of heat sources (and heat sinks)";
        parameter Real yPumMin(min=0.01, max=1, final unit="1") = 0.05
          "Minimum pump speed";
        parameter Modelica.Units.SI.Temperature TMin(displayUnit="degC") = 281.15
          "Minimum loop temperature";
        parameter Modelica.Units.SI.Temperature TMax(displayUnit="degC") = 291.15
          "Maximum loop temperature";
        parameter Modelica.Units.SI.TemperatureDifference dTSlo(min=1) = 2
          "Temperature difference for slope";
        parameter Boolean use_temperatureShift = true
          "Set to false to disable temperature shift of slopes";
        final parameter Modelica.Units.SI.TemperatureDifference delta=if
            use_temperatureShift then TMax - TMin - 3*dTSlo else 0
          "Maximum shift of slopes";
        parameter Modelica.Units.SI.TemperatureDifference dTSou_nominal[nSou](
          each min=0) = fill(4, nSou)
          "Nominal temperature difference over source";
        parameter Real k=0.01
          "Gain of controller that shifts upper and lower temperature setpoints";
        parameter Modelica.Units.SI.Time Ti(displayUnit="min") = 300
          "Time constant of integrator block that shifts upper and lower temperature setpoints";
        Buildings.Controls.OBC.CDL.Interfaces.RealInput TMix[nMix](
          each final unit="K",
          each displayUnit="degC")
          "Temperatures at the mixing points"
          annotation (Placement(transformation(extent={{-140,40},{-100,80}})));
        Buildings.Controls.OBC.CDL.Interfaces.RealInput TSouIn[nSou](
          each final unit="K",
          each displayUnit="degC")
          "Temperatures at the inlets of the sources"
          annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));
        Buildings.Controls.OBC.CDL.Interfaces.RealInput TSouOut[nSou](
          each final unit="K",
          each displayUnit="degC")
          "Temperatures at the outlets of the sources"
          annotation (Placement(transformation(extent={{-140,-80},{-100,-40}})));
        Buildings.Controls.OBC.CDL.Interfaces.RealOutput y(min=0, max=1, unit="1")
          "Pump control signal"
          annotation (Placement(transformation(extent={{100,-20},{140,20}})));
        Buildings.Controls.OBC.CDL.Reals.MultiMin TMixMin(
          final nin=nMix,
          y(final unit="K",
            displayUnit="degC"))
          "Minimum temperature at mixing points"
          annotation (Placement(transformation(extent={{-70,-30},{-50,-10}})));
        Buildings.Controls.OBC.CDL.Reals.MultiMax TMixMax(
          final nin=nMix,
          y(final unit="K", displayUnit="degC"))
          "Maximum temperature at mixing points"
          annotation (Placement(transformation(extent={{-70,10},{-50,30}})));
        Buildings.Controls.OBC.CDL.Reals.MultiSum mulSum(
          nin=nSou,
          k=fill(1, nSou))
          annotation (Placement(transformation(extent={{-50,-130},{-30,-110}})));
        Buildings.Controls.OBC.CDL.Reals.Subtract dTSou[nSou]
          "Temperature differences over source"
          annotation (Placement(transformation(extent={{-80,-130},{-60,-110}})));
        Buildings.Controls.OBC.CDL.Reals.MultiplyByParameter dTSou_nor(k=1/(
              sum(dTSou_nominal)))
          "Normalization of temperature difference over source"
          annotation (Placement(transformation(extent={{-20,-130},{0,-110}})));
        Buildings.Controls.OBC.CDL.Reals.PID conShi(
          controllerType=Buildings.Controls.OBC.CDL.Types.SimpleController.PI,
          final k=k,
          Ti(displayUnit="min") = Ti,
          final yMax=1,
          final yMin=-1)
          "Controller to shift the min/max slopes"
          annotation (Placement(transformation(extent={{10,-110},{30,-90}})));
        Buildings.Controls.OBC.CDL.Reals.Sources.Constant zer(k=0)
          "Set point for source dT"
          annotation (Placement(transformation(extent={{-50,-90},{-30,-70}})));
        Buildings.Controls.OBC.CDL.Reals.Line uppCur "Upper curve"
          annotation (Placement(transformation(extent={{30,10},{50,30}})));
        Buildings.Controls.OBC.CDL.Reals.Sources.Constant one(k=1) "Constant 1"
          annotation (Placement(transformation(extent={{-70,70},{-50,90}})));
        Buildings.Controls.OBC.CDL.Reals.Sources.Constant yMin(k=yPumMin)
          "Minimum pump speed"
          annotation (Placement(transformation(extent={{-70,40},{-50,60}})));
        Buildings.Controls.OBC.CDL.Reals.Sources.Constant TMax_nominal(k=TMax)
          "Maximum temperature"
          annotation (Placement(transformation(extent={{-70,150},{-50,170}})));
        Buildings.Controls.OBC.CDL.Reals.Add TMax_upper(
          y(final unit="K", displayUnit="degC"))
          "Upper value of upper slope after shifting it"
          annotation (Placement(transformation(extent={{-30,150},{-10,170}})));
        Buildings.Controls.OBC.CDL.Reals.Max sPos "Positive shift"
          annotation (Placement(transformation(extent={{60,-70},{80,-50}})));
        Buildings.Controls.OBC.CDL.Reals.Min sNeg "Negative shift"
          annotation (Placement(transformation(extent={{60,-150},{80,-130}})));
        Buildings.Controls.OBC.CDL.Reals.AddParameter TMax_lower(
          final p=-dTSlo,
          y(final unit="K", displayUnit="degC"))
          "Minimum temperatuer value of upper slope after shifting it"
          annotation (Placement(transformation(extent={{10,149},{30,171}})));
        Buildings.Controls.OBC.CDL.Reals.Line lowCur "Lower curve"
          annotation (Placement(transformation(extent={{30,-30},{50,-10}})));
        Buildings.Controls.OBC.CDL.Reals.Sources.Constant TMin_nominal(k=TMin)
          "Minimum temperature"
          annotation (Placement(transformation(extent={{-70,110},{-50,130}})));
        Buildings.Controls.OBC.CDL.Reals.Add TMin_lower(
          y(unit="K", displayUnit="degC"))
          "Lower value of lower slope after shifting it"
          annotation (Placement(transformation(extent={{-30,110},{-10,130}})));
        Buildings.Controls.OBC.CDL.Reals.AddParameter TMin_upper(
          final p=dTSlo,
          y(final unit="K", displayUnit="degC"))
          "Maximum temperatuer value of lower slope after shifting it"
          annotation (Placement(transformation(extent={{10,110},{30,130}})));
        Buildings.Controls.OBC.CDL.Reals.Max ySetPum "Change in pump signal"
          annotation (Placement(transformation(extent={{60,-10},{80,10}})));
        Buildings.Controls.OBC.CDL.Reals.MultiplyByParameter gai(
          final k=-delta)
          "Gain factor"
          annotation (Placement(transformation(extent={{60,70},{80,90}})));
        Buildings.Controls.OBC.CDL.Reals.MultiplyByParameter gai1(
          final k=-delta)
          "Gain factor"
          annotation (Placement(transformation(extent={{60,-110},{80,-90}})));
      equation
        connect(TMix, TMixMin.u) annotation (Line(points={{-120,60},{-80,60},{-80,-20},
                {-72,-20}}, color={0,0,127}));
        connect(TMix, TMixMax.u) annotation (Line(points={{-120,60},{-80,60},{-80,20},
                {-72,20}}, color={0,0,127}));
        connect(mulSum.u, dTSou.y)
          annotation (Line(points={{-52,-120},{-58,-120}}, color={0,0,127}));
        connect(mulSum.y, dTSou_nor.u)
          annotation (Line(points={{-28,-120},{-22,-120}}, color={0,0,127}));
        connect(dTSou_nor.y, conShi.u_m)
          annotation (Line(points={{2,-120},{20,-120},{20,-112}},  color={0,0,127}));
        connect(conShi.u_s, zer.y) annotation (Line(points={{8,-100},{0,-100},{0,
                -80},{-28,-80}},
                       color={0,0,127}));
        connect(uppCur.u, TMixMax.y)
          annotation (Line(points={{28,20},{-48,20}}, color={0,0,127}));
        connect(uppCur.f1, yMin.y) annotation (Line(points={{28,24},{-30,24},{-30,50},
                {-48,50}}, color={0,0,127}));
        connect(uppCur.f2, one.y) annotation (Line(points={{28,12},{-26,12},{-26,80},{
                -48,80}}, color={0,0,127}));
        connect(TMax_nominal.y, TMax_upper.u1)
          annotation (Line(points={{-48,160},{-40,160},{-40,166},{-32,166}},
                                                         color={0,0,127}));
        connect(zer.y, sPos.u1) annotation (Line(points={{-28,-80},{46,-80},{46,-54},
                {58,-54}},
                       color={0,0,127}));
        connect(zer.y, sNeg.u1) annotation (Line(points={{-28,-80},{46,-80},{46,
                -134},{58,-134}},
                       color={0,0,127}));
        connect(conShi.y, sPos.u2) annotation (Line(points={{32,-100},{50,-100},{50,-66},
                {58,-66}}, color={0,0,127}));
        connect(conShi.y, sNeg.u2) annotation (Line(points={{32,-100},{50,-100},{50,-146},
                {58,-146}},color={0,0,127}));
        connect(TMax_lower.u, TMax_upper.y)
          annotation (Line(points={{8,160},{-8,160}},   color={0,0,127}));
        connect(uppCur.x1, TMax_lower.y) annotation (Line(points={{28,28},{20,28},{
                20,80},{40,80},{40,160},{32,160}},
                                                color={0,0,127}));
        connect(TMax_upper.y, uppCur.x2) annotation (Line(points={{-8,160},{0,160},
                {0,16},{28,16}},
                              color={0,0,127}));
        connect(TMixMin.y, lowCur.u)
          annotation (Line(points={{-48,-20},{28,-20}}, color={0,0,127}));
        connect(TMin_nominal.y, TMin_lower.u1) annotation (Line(points={{-48,120},{
                -40,120},{-40,126},{-32,126}},
                                           color={0,0,127}));
        connect(TMin_lower.y, TMin_upper.u)
          annotation (Line(points={{-8,120},{8,120}}, color={0,0,127}));
        connect(TMin_upper.y, lowCur.x2) annotation (Line(points={{32,120},{36,120},
                {36,84},{16,84},{16,-24},{28,-24}},
                                                color={0,0,127}));
        connect(TMin_lower.y, lowCur.x1) annotation (Line(points={{-8,120},{-4,120},
                {-4,-12},{28,-12}},
                              color={0,0,127}));
        connect(lowCur.f1, one.y) annotation (Line(points={{28,-16},{-26,-16},{-26,80},
                {-48,80}},color={0,0,127}));
        connect(lowCur.f2, yMin.y) annotation (Line(points={{28,-28},{-30,-28},{-30,50},
                {-48,50}}, color={0,0,127}));
        connect(uppCur.y, ySetPum.u1)
          annotation (Line(points={{52,20},{56,20},{56,6},{58,6}}, color={0,0,127}));
        connect(lowCur.y, ySetPum.u2) annotation (Line(points={{52,-20},{56,-20},{56,-6},
                {58,-6}}, color={0,0,127}));
        connect(ySetPum.y, y)
          annotation (Line(points={{82,0},{120,0}}, color={0,0,127}));
        connect(TSouOut, dTSou.u1) annotation (Line(points={{-120,-60},{-94,-60},{-94,
                -114},{-82,-114}}, color={0,0,127}));
        connect(TSouIn, dTSou.u2) annotation (Line(points={{-120,0},{-88,0},{-88,-126},
                {-82,-126}}, color={0,0,127}));
        connect(sNeg.y, gai1.u) annotation (Line(points={{82,-140},{94,-140},{94,-120},
                {54,-120},{54,-100},{58,-100}}, color={0,0,127}));
        connect(gai1.y, TMin_lower.u2) annotation (Line(points={{82,-100},{94,-100},{94,
                100},{-40,100},{-40,114},{-32,114}}, color={0,0,127}));
        connect(sPos.y, gai.u) annotation (Line(points={{82,-60},{88,-60},{88,60},{54,
                60},{54,80},{58,80}}, color={0,0,127}));
        connect(gai.y, TMax_upper.u2) annotation (Line(points={{82,80},{88,80},{88,140},
                {-40,140},{-40,154},{-32,154}}, color={0,0,127}));
        annotation (
          defaultComponentName="conPum",
          Diagram(coordinateSystem(extent={{-100,-180},{100,180}})), Icon(
              coordinateSystem(extent={{-100,-100},{100,100}}), graphics={
              Ellipse(
                extent={{-52,52},{54,-52}},
                lineColor={0,0,0},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-94,68},{-76,54}},
                textColor={0,0,127},
                textString="TMix"),
              Text(
                extent={{-94,12},{-66,-12}},
                textColor={0,0,127},
                textString="TSouIn"),
              Text(
                extent={{-94,-44},{-62,-78}},
                textColor={0,0,127},
                textString="TSouOut"),
              Text(
                extent={{80,8},{96,-4}},
                textColor={0,0,127},
                textString="y"),
              Ellipse(
                extent={{-50,50},{52,-50}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Polygon(
                points={{0,50},{0,-50},{52,0},{0,50}},
                lineColor={0,0,0},
                lineThickness=1,
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid)}),
          Documentation(revisions="<html>
<ul>
<li>
September 12, 2019, by Michael Wetter:<br/>
First implementation.
</li>
</ul>
</html>",
        info="<html>
<p>
Controller for the main circulation pump.
</p>
<p>
This controller adjusts the pump speed in order to reduce it, unless
the water temperature at the mixing points after the agents in the district is too high
or too low, as measured by the difference to <code>TMin</code> and <code>TMax</code>.
In that case, the pump speed is increased to prevent the loop getting too cold or too warm.
The control is as follows:
Let <code>TMixMin</code> and <code>TMixMax</code> be the
minimum and maximum mixing temperatures.
If <code>TMax-TMixMax</code> or <code>TMixMin-TMin</code> is too small,
the pump speed is increased.
If the difference is larger than <code>dTSlo</code>, then the pump speed
is set to the minimum speed <code>yPumMin</code>.
This calculation is done for both, <code>TMixMin</code> and <code>TMixMax</code>.
The actual pump speed is then the larger of the two pump signals.
Therefore, the pump speeds are calculated as shown in the figure below.
</p>
<p>
<br/>
<img alt=\"Image of the control that adjusts the pump speed\"
src=\"modelica://Buildings/Resources/Images/Experimental/DHC/Networks/Controls/MainPump.png\"/>
<br/>
</p>
<p>
Moreover, if the parameter <code>use_temperatureShift</code> is set to <code>true</code>,
then the district loop temperature is adjusted by changing the mass
flow rate of the pump to increase the overall efficiency if there is net
cooling or net heating on the loop. Specifically,
if the district heating or cooling loop is in net heating (cooling) mode,
it may be favorable to increase (decrease) the loop temperature, which can
be done by increasing the pump speed. Whether the loop
is in heating or cooling mode is determined based on the temperature differences
across the loop sources, which are the inputs <code>TSouIn</code> and <code>TSouOut</code>.
Each heat source or sink needs to be connected to one element of these
vectorized input signals.
This net difference is then used with a PI-controller to determine how much the slopes
should be shifted in order to increase the pump speed.
The shift of these slopes is indicated by the arrows
in the figure.
Note that this controller must be configured to be slow reacting, as it requires the
feedback from the district heating and cooling loop.
</p>
<p>
For a typical usage of this controller, see
<a href=\"modelica://Buildings.Experimental.DHC.Examples.Combined.SeriesVariableFlow\">
Buildings.Experimental.DHC.Examples.Combined.SeriesVariableFlow</a>.
</p>
</html>"));
      end MainPump;
      annotation (
        preferredView="info",
        Documentation(
          info="<html>
<p>
This package contains models for control of distribution networks.
</p>
</html>"),
        Icon(graphics={
            Rectangle(
              lineColor={200,200,200},
              fillColor={248,248,248},
              fillPattern=FillPattern.HorizontalCylinder,
              extent={{-100,-100},{100,100}},
              radius=25.0),
            Rectangle(
              lineColor={128,128,128},
              extent={{-100,-100},{100,100}},
              radius=25.0),
          Rectangle(
            origin={0,35.1488},
            fillColor={255,255,255},
            extent={{-30.0,-20.1488},{30.0,20.1488}}),
          Rectangle(
            origin={0,-34.8512},
            fillColor={255,255,255},
            extent={{-30.0,-20.1488},{30.0,20.1488}}),
          Line(
            origin={-51.25,0},
            points={{21.25,-35.0},{-13.75,-35.0},{-13.75,35.0},{6.25,35.0}}),
          Polygon(
            origin={-40,35},
            pattern=LinePattern.None,
            fillPattern=FillPattern.Solid,
            points={{10.0,0.0},{-5.0,5.0},{-5.0,-5.0}}),
          Line(
            origin={51.25,0},
            points={{-21.25,35.0},{13.75,35.0},{13.75,-35.0},{-6.25,-35.0}}),
          Polygon(
            origin={40,-35},
            pattern=LinePattern.None,
            fillPattern=FillPattern.Solid,
            points={{-10.0,0.0},{5.0,5.0},{5.0,-5.0}})}));
    end Controls;

    package Steam "Collection of models for distribution networks involving steam"
      extends Modelica.Icons.VariantsPackage;

      model ConnectionCondensatePipe
        "Connection for a steam district heating network featuring the condensate return pipe"
        extends estcp.DHC.Networks.BaseClasses.PartialConnection2Pipe2Medium(
            redeclare final model Model_pipDisRet =
              Buildings.Fluid.FixedResistances.PressureDrop (final dp_nominal=
                  dp_nominal), redeclare model Model_pipDisSup =
              Buildings.Fluid.FixedResistances.LosslessPipe);
        parameter Modelica.Units.SI.PressureDifference dp_nominal(displayUnit="Pa")
          "Pressure drop at nominal mass flow rate"
          annotation (Dialog(group="Nominal condition"));
        Buildings.Fluid.FixedResistances.PressureDrop pipConRet(
          redeclare package Medium = MediumRet,
          m_flow_nominal=mCon_flow_nominal,
          final dp_nominal=dp_nominal)
          "Connection return pipe"
          annotation (Placement(transformation(
            extent={{10,-10},{-10,10}},rotation=90,origin={20,-10})));
      equation
        connect(port_aCon, pipConRet.port_a)
          annotation (Line(points={{20,120},{20,0}}, color={0,127,255}));
        connect(pipConRet.port_b, junConRet.port_3)
          annotation (Line(points={{20,-20},{20,-70}}, color={0,127,255}));
        connect(port_bCon, junConSup.port_3)
          annotation (Line(points={{-20,120},{-20,-30}}, color={0,127,255}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
              Rectangle(
                extent={{48,76},{72,24}},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                pattern=LinePattern.None,
                lineColor={0,0,0}),
              Rectangle(
                extent={{-76,-48},{-20,-72}},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                pattern=LinePattern.None,
                lineColor={0,0,0})}),
              Diagram(
                coordinateSystem(preserveAspectRatio=false)),
                defaultComponentName="con",
          Documentation(info="<html>
<p>
This network connection model contains one pipe declaration
for the condensate pipe, featuring a fixed hydraulic resistance.
This model is intended for steam heating systems that utilize
a split-medium approach with two separate medium declarations
between liquid and vapor states.
</p>
<p>
In this model, it is assumed that there are no mass losses in
the network connection. Further, heat transfer with the external
environment and transport delays are also not included.
</p>
<h4>References </h4>
<p>
Kathryn Hinkelman, Saranya Anbarasu, Michael Wetter, Antoine Gautier, Wangda Zuo. 2022.
&ldquo;A Fast and Accurate Modeling Approach for Water and Steam
Thermodynamics with Practical Applications in District Heating System Simulation,&rdquo;
<i>Energy</i>, 254(A), pp. 124227.
<a href=\"https://doi.org/10.1016/j.energy.2022.124227\">10.1016/j.energy.2022.124227</a>
</p>
<p>
Kathryn Hinkelman, Saranya Anbarasu, Michael Wetter, Antoine Gautier, Baptiste Ravache, Wangda Zuo 2022.
&ldquo;Towards Open-Source Modelica Models For Steam-Based District Heating Systems.&rdquo;
<i>Proc. of the 1st International Workshop On Open Source Modelling And Simulation Of
Energy Systems (OSMSES 2022)</i>, Aachen, German, April 4-5, 2022.
<a href=\"https://doi.org/10.1109/OSMSES54027.2022.9769121\">10.1109/OSMSES54027.2022.9769121</a>
</p>
</html>",       revisions="<html>
<ul>
<li>
September 15, 2023, by Kathryn Hinkelman:<br/>
Updated publication references.
</li>
<li>
March 2, 2022, by Kathryn Hinkelman:<br/>
First implementation.
</li>
</ul>
</html>"));
      end ConnectionCondensatePipe;

      model DistributionCondensatePipe
        "Model of a steam distribution network using fixed resistance pipe model for condensate returns"
        extends estcp.DHC.Networks.BaseClasses.PartialDistribution2Pipe2Medium(
            redeclare ConnectionCondensatePipe con[nCon](each final dp_nominal=
                dp_nominal), redeclare model Model_pipDis =
              Buildings.Fluid.FixedResistances.LosslessPipe);
        parameter Modelica.Units.SI.PressureDifference dp_nominal(displayUnit="Pa")
          "Pressure drop at nominal mass flow rate"
          annotation (Dialog(group="Nominal condition"));
        annotation (
        defaultComponentName="dis",
          Documentation(
            info="<html>
<p>
This is a model of a distribution network for steam heating systems.
The model utilizes a split-medium approach with two separate medium
declarations between liquid (condensate return) and vapor (steam
supply) states. The piping network features:
</p>
<ul>
<li>
a connection model with fixed hydraulic resistance and no heat loss
in the condensate return pipe segments;
</li>
<li>
a dummy pipe model with no hydraulic resistance and no heat loss for
the steam supply pipes; and
</li>
<li>
a dummy pipe model with no hydraulic resistance and no heat loss for the end of
the distribution line (after the last connection).
</li>
</ul>
<h4>References </h4>
<p>
Kathryn Hinkelman, Saranya Anbarasu, Michael Wetter, Antoine Gautier, Wangda Zuo. 2022.
&ldquo;A Fast and Accurate Modeling Approach for Water and Steam
Thermodynamics with Practical Applications in District Heating System Simulation,&rdquo;
<i>Energy</i>, 254(A), pp. 124227.
<a href=\"https://doi.org/10.1016/j.energy.2022.124227\">10.1016/j.energy.2022.124227</a>
</p>
<p>
Kathryn Hinkelman, Saranya Anbarasu, Michael Wetter, Antoine Gautier, Baptiste Ravache, Wangda Zuo 2022.
&ldquo;Towards Open-Source Modelica Models For Steam-Based District Heating Systems.&rdquo;
<i>Proc. of the 1st International Workshop On Open Source Modelling And Simulation Of
Energy Systems (OSMSES 2022)</i>, Aachen, German, April 4-5, 2022.
<a href=\"https://doi.org/10.1109/OSMSES54027.2022.9769121\">10.1109/OSMSES54027.2022.9769121</a>
</p>
</html>",   revisions="<html>
<ul>
<li>
September 15, 2023, by Kathryn Hinkelman:<br/>
Updated publication references.
</li>
<li>
March 2, 2022, by Kathryn Hinkelman:<br/>
First implementation.
</li>
</ul>
</html>"));
      end DistributionCondensatePipe;

      package Examples "Collection of models that illustrate model use and test models"
        extends Modelica.Icons.ExamplesPackage;

        model ConnectionCondensatePipe "Example model for the steam heating connection block"
          extends Modelica.Icons.Example;

          package MediumSte = Buildings.Media.Steam "Steam medium";
          package MediumWat =
            Buildings.Media.Specialized.Water.TemperatureDependentDensity
            "Water medium";

          parameter Modelica.Units.SI.AbsolutePressure pSat=150000
            "Saturation pressure";
          parameter Modelica.Units.SI.Temperature TSat=
             MediumSte.saturationTemperature(pSat)
             "Saturation temperature";
          parameter Modelica.Units.SI.SpecificEnthalpy dh_nominal=
            MediumSte.specificEnthalpy(MediumSte.setState_pTX(
                p=pSat,
                T=TSat,
                X=MediumSte.X_default)) -
              MediumWat.specificEnthalpy(MediumWat.setState_pTX(
                p=pSat,
                T=TSat,
                X=MediumWat.X_default))
            "Nominal change in enthalpy due to vaporization";
          parameter Modelica.Units.SI.Power Q_flow_nominal=200E3
            "Nominal heat flow rate";
          parameter Real QHeaLoa[:, :]= [0, 200E3; 6, 200E3; 6, 50E3; 18, 50E3; 18, 75E3; 24, 75E3]
            "Heating load profile for the building";
          parameter Modelica.Units.SI.PressureDifference dp_nominal=6000
            "Pressure drop at nominal mass flow rate";
          parameter Modelica.Units.SI.MassFlowRate m_flow_nominal=
            Q_flow_nominal/dh_nominal
            "Nominal mass flow rate";

          Modelica.Blocks.Sources.Ramp ram(duration=60, startTime=60) "Ramp signal"
            annotation (Placement(transformation(extent={{-80,40},{-60,60}})));
          Buildings.Fluid.Sources.MassFlowSource_T souWat(
            redeclare package Medium = MediumWat,
            use_m_flow_in=true,
            nPorts=1) "Water source"
            annotation (Placement(transformation(extent={{80,-20},{60,0}})));
          Buildings.Fluid.Sources.MassFlowSource_T souSte(
            redeclare package Medium = MediumSte,
            use_m_flow_in=true,
            nPorts=1) "Steam source" annotation (Placement(transformation(
                  extent={{-40,-40},{-20,-20}})));
          Buildings.Fluid.Sources.Boundary_pT sinWat(
            redeclare package Medium = MediumWat,
            p(displayUnit="Pa") = 101325,
            nPorts=1)
            "Water condensate sink"
            annotation (Placement(transformation(extent={{-40,-80},{-20,-60}})));
          Buildings.Fluid.Sources.Boundary_pT sinSte(
            redeclare package Medium = MediumSte,
            p=pSat,
            T=TSat,
            nPorts=1) "Steam sink"
            annotation (Placement(transformation(extent={{80,20},{60,40}})));
          estcp.DHC.Networks.Steam.ConnectionCondensatePipe con(
            redeclare package MediumSup = MediumSte,
            redeclare package MediumRet = MediumWat,
            mDis_flow_nominal=m_flow_nominal,
            mCon_flow_nominal=m_flow_nominal,
            energyDynamics=Modelica.Fluid.Types.Dynamics.SteadyState,
            dp_nominal=1500) "Connection block for steam systems"
            annotation (Placement(transformation(extent={{20,-40},{40,-20}})));

        equation
          connect(con.port_bDisRet, sinWat.ports[1]) annotation (Line(points={{20,-36},
                  {0,-36},{0,-70},{-20,-70}},
                                           color={0,127,255}));
          connect(con.port_bCon, sinSte.ports[1])
            annotation (Line(points={{30,-20},{30,30},{60,30}}, color={0,127,255}));
          connect(souSte.ports[1], con.port_aDisSup)
            annotation (Line(points={{-20,-30},{20,-30}}, color={0,127,255}));
          connect(souWat.ports[1], con.port_aCon)
            annotation (Line(points={{60,-10},{36,-10},{36,-20}}, color={0,127,255}));
          connect(ram.y, souSte.m_flow_in) annotation (Line(points={{-59,50},{-50,50},{
                  -50,-22},{-42,-22}}, color={0,0,127}));
          connect(ram.y, souWat.m_flow_in) annotation (Line(points={{-59,50},{90,50},{
                  90,-2},{82,-2}}, color={0,0,127}));
          annotation (Icon(coordinateSystem(preserveAspectRatio=false)),
            Diagram(coordinateSystem(preserveAspectRatio=false)),
            experiment(StopTime=86400, Tolerance=1e-6),
            __Dymola_Commands(file="modelica://Buildings/Resources/Scripts/Dymola/Experimental/DHC/Networks/Steam/Examples/ConnectionCondensatePipe.mos"
                "Simulate and plot"),
            Documentation(revisions="<html>
<ul>
<li>
March 2, 2022, by Kathryn Hinkelman:<br/>
First implementation.
</li>
</ul>
</html>",         info="<html>
<p>
This model demonstrates the performance of the 
connection block for steam heating systems with a 
ramp input for the mass flow rate at the building 
interconnection.
</p>
</html>"));
        end ConnectionCondensatePipe;

        model DistributionCondensatePipe
          "Example model for the steam heating distribution network"
          extends Modelica.Icons.Example;

          package MediumSte = Buildings.Media.Steam "Steam medium";
          package MediumWat =
            Buildings.Media.Specialized.Water.TemperatureDependentDensity
            "Water medium";

          parameter Modelica.Units.SI.AbsolutePressure pSat=150000
            "Saturation pressure";
          parameter Modelica.Units.SI.Temperature TSat=
             MediumSte.saturationTemperature(pSat)
             "Saturation temperature";
          parameter Modelica.Units.SI.SpecificEnthalpy dh_nominal=
            MediumSte.specificEnthalpy(MediumSte.setState_pTX(
                p=pSat,
                T=TSat,
                X=MediumSte.X_default)) -
              MediumWat.specificEnthalpy(MediumWat.setState_pTX(
                p=pSat,
                T=TSat,
                X=MediumWat.X_default))
            "Nominal change in enthalpy due to vaporization";
          parameter Modelica.Units.SI.Power Q1_flow_nominal=200E3
            "Nominal heat flow rate, building 1";
          parameter Modelica.Units.SI.Power Q2_flow_nominal=300E3
            "Nominal heat flow rate, building 2";
          parameter Real QHeaLoa1[:, :]= [0, 200E3; 6, 200E3; 6, 50E3; 18, 50E3; 18, 75E3; 24, 75E3]
            "Heating load profile for the building 1";
          parameter Real QHeaLoa2[:, :]= [0, 100E3; 6, 200E3; 6, 200E3; 10, 300E3; 18, 300E3; 24, 100E3]
            "Heating load profile for the building 2";
          parameter Modelica.Units.SI.PressureDifference dp_nominal=6000
            "Pressure drop at nominal mass flow rate";
          parameter Modelica.Units.SI.MassFlowRate m1_flow_nominal=
            Q1_flow_nominal/dh_nominal
            "Nominal mass flow rate, building 1";
          parameter Modelica.Units.SI.MassFlowRate m2_flow_nominal=
            Q2_flow_nominal/dh_nominal
            "Nominal mass flow rate, building 2";

          Buildings.Fluid.Sources.Boundary_pT souSte(
            redeclare package Medium = MediumSte,
            p=pSat,
            T=TSat,
            nPorts=1)
            "Steam source"
            annotation (Placement(transformation(extent={{-80,0},{-60,20}})));
          Buildings.Fluid.Sources.Boundary_pT sinWat(
            redeclare package Medium = MediumWat,
            p(displayUnit="Pa") = 101325,
            nPorts=1)
            "Water condensate sink"
            annotation (Placement(transformation(extent={{-80,-40},{-60,-20}})));
          estcp.DHC.Networks.Steam.DistributionCondensatePipe dis(
            redeclare package MediumSup = MediumSte,
            redeclare package MediumRet = MediumWat,
            nCon=2,
            mDis_flow_nominal=m1_flow_nominal + m2_flow_nominal,
            mCon_flow_nominal={m1_flow_nominal,m2_flow_nominal},
            energyDynamics=Modelica.Fluid.Types.Dynamics.SteadyState,
            dp_nominal=dp_nominal)
            annotation (Placement(transformation(extent={{-20,0},{20,20}})));
          estcp.DHC.Loads.Steam.BuildingTimeSeriesAtETS bui[2](
            redeclare package MediumSte = MediumSte,
            redeclare package MediumWat = MediumWat,
            each pSte_nominal=pSat,
            each TSte_nominal=TSat,
            each dh_nominal=dh_nominal,
            Q_flow_nominal={Q1_flow_nominal,Q2_flow_nominal},
            each dp_nominal=dp_nominal,
            each energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,
            QHeaLoa={QHeaLoa1,QHeaLoa2},
            each timeScale(displayUnit="s") = 3600)
            "Building vector consisting of 2 buildings"
            annotation (Placement(transformation(extent={{60,40},{40,60}})));

        equation
          connect(souSte.ports[1], dis.port_aDisSup)
            annotation (Line(points={{-60,10},{-20,10}}, color={0,127,255}));
          connect(sinWat.ports[1], dis.port_bDisRet) annotation (Line(points={{-60,-30},
                  {-40,-30},{-40,4},{-20,4}},   color={0,127,255}));
          connect(dis.ports_bCon, bui.port_a)
            annotation (Line(points={{-12,20},{-12,50},{40,50}}, color={0,127,255}));
          connect(bui.port_b, dis.ports_aCon)
            annotation (Line(points={{40,44},{12,44},{12,20}}, color={0,127,255}));
          annotation (Icon(coordinateSystem(preserveAspectRatio=false)),
            Diagram(coordinateSystem(preserveAspectRatio=false)),
            experiment(StopTime=86400, Tolerance=1e-6),
            __Dymola_Commands(file=
              "modelica://Buildings/Resources/Scripts/Dymola/Experimental/DHC/Networks/Steam/Examples/DistributionCondensatePipe.mos"
              "Simulate and plot"),
            Documentation(revisions="<html>
<ul>
<li>
March 2, 2022, by Kathryn Hinkelman:<br/>
First implementation.
</li>
</ul>
</html>",         info="<html>
<p>
This model demonstrates the performance of the distribution 
network block for steam heating systems with two connected 
buildings with unique heating load profiles.
</p>
</html>"));
        end DistributionCondensatePipe;
      annotation (Documentation(info="<html>
<p>
This package contains examples illustrating the use of the models in
<a href=\"modelica://Buildings.Experimental.DHC.Networks.Steam\">
Buildings.Experimental.DHC.Networks.Steam</a>.
</p>
</html>"));
      end Examples;
    annotation (Documentation(info="<html>
<p>
This package contains models for steam heating distribution networks.
</p>
</html>"));
    end Steam;

    package BaseClasses "Package with base classes that are used by multiple models"
      extends Modelica.Icons.BasesPackage;

      model DifferenceEnthalpyFlowRate
        "Sensor outputting the difference between two enthalpy flow rates"
        extends Buildings.Fluid.Interfaces.PartialFourPortInterface(
          redeclare replaceable package Medium2 = Medium1,
          final m1_flow_nominal=m_flow_nominal,
          final m2_flow_nominal=m_flow_nominal,
          final allowFlowReversal1=allowFlowReversal,
          final allowFlowReversal2=allowFlowReversal,
          final m1_flow_small=m_flow_small,
          final m2_flow_small=m_flow_small,
          final show_T=false);
        parameter Boolean have_integrator=false
          "Set to true to output the time integral"
          annotation (Evaluate=true);
        parameter Modelica.Units.SI.MassFlowRate m_flow_nominal(min=0)
          "Nominal mass flow rate" annotation (Dialog(group="Nominal condition"));
        parameter Modelica.Units.SI.Time tau(min=0) = 0
          "Time constant at nominal flow rate";
        parameter Modelica.Blocks.Types.Init initType=Modelica.Blocks.Types.Init.InitialState
          "Type of initialization (InitialState and InitialOutput are identical)"
          annotation (Evaluate=true,Dialog(group="Initialization"));
        parameter Boolean allowFlowReversal=true
          "= false to simplify equations, assuming, but not enforcing, no flow reversal"
          annotation (Dialog(tab="Assumptions"),Evaluate=true);
        parameter Modelica.Units.SI.SpecificEnthalpy h1_out_start=
            Medium1.specificEnthalpy_pTX(
            p=Medium1.p_default,
            T=Medium1.T_default,
            X=Medium1.X_default)
          "Initial or guess value of measured specific enthalpy"
          annotation (Dialog(group="Initialization"));
        parameter Modelica.Units.SI.SpecificEnthalpy h2_out_start=
            Medium2.specificEnthalpy_pTX(
            p=Medium2.p_default,
            T=Medium2.T_default,
            X=Medium2.X_default)
          "Initial or guess value of measured specific enthalpy"
          annotation (Dialog(group="Initialization"));
        parameter Medium1.MassFlowRate m_flow_small(min=0)=1E-4*abs(m_flow_nominal)
          "Small mass flow rate for regularization of zero flow"
          annotation (Dialog(tab="Advanced"));
        Buildings.Controls.OBC.CDL.Interfaces.RealOutput dH_flow(
          final unit="W")
          "Difference in enthalpy flow rate between stream 1 and 2"
          annotation (Placement(transformation(origin={120,20},extent={{-20,-20},{20,20}},rotation=0),
            iconTransformation(extent={{-20,-20},{20,20}},rotation=0,origin={120,30})));
        Buildings.Controls.OBC.CDL.Interfaces.RealOutput E(
          final unit="J") if have_integrator
          "Time integral of enthalpy flow rate difference between stream 1 and 2"
          annotation (Placement(transformation(origin={120,-20},extent={{-20,-20},{20,20}},rotation=0),
            iconTransformation(extent={{-20,-20},{20,20}},rotation=0,origin={120,-30})));
        Buildings.Fluid.Sensors.EnthalpyFlowRate senEntFlo1(
          redeclare final package Medium = Medium1,
          final m_flow_nominal=m_flow_nominal,
          final tau=tau,
          final initType=initType,
          final allowFlowReversal=allowFlowReversal,
          final h_out_start=h1_out_start)
          "Enthalpy flow rate of fluid stream 1"
          annotation (Placement(transformation(extent={{-10,70},{10,50}})));
        Buildings.Fluid.Sensors.EnthalpyFlowRate senEntFlo2(
          redeclare final package Medium = Medium2,
          final m_flow_nominal=m_flow_nominal,
          final tau=tau,
          final initType=initType,
          final allowFlowReversal=allowFlowReversal,
          final h_out_start=h2_out_start)
          "Enthalpy flow rate of fluid stream 2"
          annotation (Placement(transformation(extent={{10,-70},{-10,-50}})));
        Buildings.Controls.OBC.CDL.Reals.Subtract dif
          "Compute the difference"
          annotation (Placement(transformation(extent={{40,10},{60,30}})));
        Modelica.Blocks.Continuous.Integrator int(
          y(unit="J")) if have_integrator
          "Time integral computation"
          annotation (Placement(transformation(extent={{40,-30},{60,-10}})));
      equation
        connect(port_a1,senEntFlo1.port_a)
          annotation (Line(points={{-100,60},{-10,60}},color={0,127,255}));
        connect(senEntFlo1.port_b,port_b1)
          annotation (Line(points={{10,60},{100,60}},color={0,127,255}));
        connect(port_b2,senEntFlo2.port_b)
          annotation (Line(points={{-100,-60},{-10,-60}},color={0,127,255}));
        connect(senEntFlo2.port_a,port_a2)
          annotation (Line(points={{10,-60},{100,-60}},color={0,127,255}));
        connect(dif.y,dH_flow)
          annotation (Line(points={{62,20},{120,20}},color={0,0,127}));
        connect(senEntFlo1.H_flow,dif.u1)
          annotation (Line(points={{0,49},{0,26},{38,26}},color={0,0,127}));
        connect(senEntFlo2.H_flow,dif.u2)
          annotation (Line(points={{0,-49},{0,14},{38,14}},color={0,0,127}));
        connect(int.y,E)
          annotation (Line(points={{61,-20},{120,-20}},color={0,0,127}));
        connect(dif.y,int.u)
          annotation (Line(points={{62,20},{80,20},{80,0},{20,0},{20,-20},{38,-20}},color={0,0,127}));
        annotation (
          defaultComponentName="senDifEntFlo",
          Icon(
            graphics={
              Ellipse(
                fillColor={245,245,245},
                fillPattern=FillPattern.Solid,
                extent={{-70,-70},{70,70}}),
              Line(
                points={{0,70},{0,40}}),
              Line(
                points={{22.9,32.8},{40.2,57.3}}),
              Line(
                points={{-22.9,32.8},{-40.2,57.3}}),
              Line(
                points={{37.6,13.7},{65.8,23.9}}),
              Line(
                points={{-37.6,13.7},{-65.8,23.9}}),
              Ellipse(
                lineColor={64,64,64},
                fillColor={255,255,255},
                extent={{-12,-12},{12,12}}),
              Polygon(
                rotation=-17.5,
                fillColor={64,64,64},
                pattern=LinePattern.None,
                fillPattern=FillPattern.Solid,
                points={{-5.0,0.0},{-2.0,60.0},{0.0,65.0},{2.0,60.0},{5.0,0.0}},
                origin={0,0}),
              Ellipse(
                fillColor={64,64,64},
                pattern=LinePattern.None,
                fillPattern=FillPattern.Solid,
                extent={{-7,-7},{7,7}}),
              Line(
                points={{100,0},{70,0}},
                color={0,0,127}),
              Text(
                extent={{173,26},{79,-4}},
                textColor={0,0,0},
                textString="dH_flow"),
              Line(
                points={{-100,60},{-36,60}},
                color={0,128,255}),
              Line(
                points={{36,60},{100,60}},
                color={0,128,255}),
              Line(
                points={{-100,-60},{-36,-60}},
                color={0,128,255}),
              Line(
                points={{36,-60},{100,-60}},
                color={0,128,255}),
              Text(
                visible=have_integrator,
                extent={{135,-16},{41,-46}},
                textColor={0,0,0},
                textString="E"),
              Text(
                extent={{132,112},{12,62}},
                textColor={0,0,0},
                textString=DynamicSelect("",String(dH_flow,
                  leftJustified=false,
                  significantDigits=0))),
              Text(
                visible=have_integrator,
                extent={{132,-56},{12,-106}},
                textColor={0,0,0},
                textString=DynamicSelect("",String(E,
                  leftJustified=false,
                  significantDigits=0)))}),
          Documentation(
            info="<html>
<p>
This model outputs the difference in enthalpy flow rate
between two different streams:
<i>&Delta;H&#775; = m&#775;<sub>1</sub> h<sub>1</sub> - m&#775;<sub>2</sub> h<sub>2</sub></i>.
Optionally the time integral of this quantity can be output.
The sensor is ideal, i.e., it does not influence the fluid.
</p>
<p>
By default
</p>
<ul>
<li>
the parameter <code>tau</code> is zero, so the
specific enthalpy that is used to compute each enthalpy flow rate
is computed in steady-state,
</li>
<li>
the medium is the same in both streams but the model
allows for specifying two different media to represent for
instance the gaseous and liquid state of the same substance.
</li>
</ul>
</html>",   revisions="<html>
<ul>
<li>
October 8, 2020, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>"));
      end DifferenceEnthalpyFlowRate;

      partial model PartialConnection1Pipe
        "Partial model for connecting an agent to a one-pipe distribution network"
        replaceable package Medium=Modelica.Media.Interfaces.PartialMedium
          "Medium model";
        replaceable model Model_pipDis=
            Buildings.Fluid.Interfaces.PartialTwoPortInterface (
            redeclare final package Medium = Medium,
            final m_flow_nominal=mDis_flow_nominal,
            final allowFlowReversal=allowFlowReversal);
        replaceable model Model_pipCon=
            Buildings.Fluid.Interfaces.PartialTwoPortInterface (
            redeclare final package Medium = Medium,
            final m_flow_nominal=mCon_flow_nominal,
            final allowFlowReversal=allowFlowReversal);
        parameter Boolean show_entFlo=false
          "Set to true to output enthalpy flow rate difference"
          annotation (Evaluate=true);
        parameter Boolean show_TOut=false
          "Set to true to output temperature at connection outlet"
          annotation (Evaluate=true);
        parameter Modelica.Units.SI.MassFlowRate mDis_flow_nominal
          "Nominal mass flow rate in the distribution line";
        parameter Modelica.Units.SI.MassFlowRate mCon_flow_nominal
          "Nominal mass flow rate in the connection line";
        parameter Boolean allowFlowReversal=false
          "= true to allow flow reversal, false restricts to design direction (port_a -> port_b)"
          annotation (Dialog(tab="Assumptions"), Evaluate=true);
        parameter Modelica.Fluid.Types.Dynamics energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial
          "Type of energy balance: dynamic (3 initialization options) or steady state"
          annotation (Evaluate=true,Dialog(tab="Dynamics",group="Conservation equations"));
        final parameter Modelica.Fluid.Types.Dynamics massDynamics=energyDynamics
          "Type of mass balance: dynamic (3 initialization options) or steady state, must be steady state if energyDynamics is steady state"
          annotation(Evaluate=true, Dialog(tab = "Advanced", group="Dynamics"));
        parameter Modelica.Units.SI.Time tau=10
          "Time constant at nominal flow for dynamic energy and momentum balance"
          annotation (Dialog(
            tab="Dynamics",
            group="Nominal condition",
            enable=not energyDynamics == Modelica.Fluid.Types.Dynamics.SteadyState));
        // IO CONNECTORS
        Modelica.Fluid.Interfaces.FluidPort_a port_aDis(
          redeclare final package Medium=Medium,
          m_flow(
            min=
              if allowFlowReversal then
                -Modelica.Constants.inf
              else
                0),
          h_outflow(
            start=Medium.h_default,
            nominal=Medium.h_default))
          "Distribution inlet port"
          annotation (Placement(transformation(extent={{-110,-50},{-90,-30}}),
            iconTransformation(extent={{-110,-10},{-90,10}})));
        Modelica.Fluid.Interfaces.FluidPort_b port_bDis(
          redeclare final package Medium=Medium,
          m_flow(
            max=
              if allowFlowReversal then
                +Modelica.Constants.inf
              else
                0),
          h_outflow(
            start=Medium.h_default,
            nominal=Medium.h_default))
          "Distribution outlet port"
          annotation (Placement(transformation(extent={{90,-50},{110,-30}}),
            iconTransformation(extent={{90,-10},{110,10}})));
        Modelica.Fluid.Interfaces.FluidPort_a port_aCon(
          redeclare final package Medium=Medium,
          m_flow(
            min=
              if allowFlowReversal then
                -Modelica.Constants.inf
              else
                0),
          h_outflow(
            start=Medium.h_default,
            nominal=Medium.h_default))
          "Connection return port"
          annotation (Placement(transformation(extent={{30,110},{50,130}}),
            iconTransformation(extent={{50,90},{70,110}})));
        Modelica.Fluid.Interfaces.FluidPort_b port_bCon(
          redeclare final package Medium=Medium,
          m_flow(
            max=
              if allowFlowReversal then
                +Modelica.Constants.inf
              else
                0),
          h_outflow(
            start=Medium.h_default,
            nominal=Medium.h_default))
          "Connection supply port"
          annotation (Placement(transformation(extent={{-50,110},{-30,130}}),
            iconTransformation(extent={{-10,90},{10,110}})));
        Buildings.Controls.OBC.CDL.Interfaces.RealOutput mCon_flow(
          final unit="kg/s")
          "Connection supply mass flow rate (measured)"
          annotation (Placement(transformation(extent={{100,40},{140,80}}),
            iconTransformation(extent={{100,30},{140,70}})));
        Buildings.Controls.OBC.CDL.Interfaces.RealOutput dH_flow(
            final unit="W") if show_entFlo
          "Difference in enthalpy flow rate between connection supply and return"
          annotation (Placement(transformation(extent={{100,80},{140,120}}),
              iconTransformation(extent={{100,50},{140,90}})));
        Buildings.Controls.OBC.CDL.Interfaces.RealOutput mByp_flow(
          final unit="kg/s") "Bypass mass flow rate"
          annotation (Placement(transformation(extent={{100,0},{140,40}}),
            iconTransformation(extent={{100,10},{140,50}})));
        Buildings.Controls.OBC.CDL.Interfaces.RealOutput TOut(
          final unit="K",
          displayUnit="degC") if show_TOut
          "Temperature in distribution line at connection outlet"
          annotation (
            Placement(transformation(extent={{100,-100},{140,-60}}),
              iconTransformation(extent={{100,70},{140,110}})));
        // COMPONENTS
        Buildings.Fluid.FixedResistances.Junction junConSup(
          redeclare final package Medium = Medium,
          final portFlowDirection_1=if allowFlowReversal then Modelica.Fluid.Types.PortFlowDirection.Bidirectional
               else Modelica.Fluid.Types.PortFlowDirection.Entering,
          final portFlowDirection_2=if allowFlowReversal then Modelica.Fluid.Types.PortFlowDirection.Bidirectional
               else Modelica.Fluid.Types.PortFlowDirection.Leaving,
          final portFlowDirection_3=if allowFlowReversal then Modelica.Fluid.Types.PortFlowDirection.Bidirectional
               else Modelica.Fluid.Types.PortFlowDirection.Leaving,
          final dp_nominal={0,0,0},
          final energyDynamics=energyDynamics,
          final tau=tau,
          final m_flow_nominal={mDis_flow_nominal,-mDis_flow_nominal,-
              mCon_flow_nominal}) "Junction with connection supply"
          annotation (Placement(transformation(extent={{-50,-30},{-30,-50}})));
        Buildings.Fluid.FixedResistances.Junction junConRet(
          redeclare final package Medium = Medium,
          final portFlowDirection_1=if allowFlowReversal then Modelica.Fluid.Types.PortFlowDirection.Bidirectional
               else Modelica.Fluid.Types.PortFlowDirection.Entering,
          final portFlowDirection_2=if allowFlowReversal then Modelica.Fluid.Types.PortFlowDirection.Bidirectional
               else Modelica.Fluid.Types.PortFlowDirection.Leaving,
          final portFlowDirection_3=if allowFlowReversal then Modelica.Fluid.Types.PortFlowDirection.Bidirectional
               else Modelica.Fluid.Types.PortFlowDirection.Entering,
          final dp_nominal={0,0,0},
          final energyDynamics=energyDynamics,
          final tau=tau,
          final m_flow_nominal={mDis_flow_nominal,-mDis_flow_nominal,
              mCon_flow_nominal}) "Junction with connection return"
          annotation (Placement(transformation(extent={{30,-30},{50,-50}})));
        Model_pipDis pipDis
          "Distribution pipe"
          annotation (Placement(transformation(extent={{-80,-50},{-60,-30}})));
        Model_pipCon pipCon
          "Connection pipe"
          annotation (Placement(
            transformation(extent={{-10,-10},{10,10}},rotation=90,origin={-40,10})));
        Buildings.Fluid.Sensors.MassFlowRate senMasFloCon(
          redeclare final package Medium=Medium,
          final allowFlowReversal=allowFlowReversal)
          "Connection supply mass flow rate (measured)"
          annotation (Placement(
            transformation(extent={{-10,10},{10,-10}},rotation=90,origin={-40,60})));
        Buildings.Fluid.Sensors.MassFlowRate senMasFloByp(
          redeclare final package Medium=Medium,
          final allowFlowReversal=allowFlowReversal)
          "Bypass mass flow rate (measured)"
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},rotation=0,origin={0,-40})));
        DifferenceEnthalpyFlowRate senDifEntFlo(
          redeclare final package Medium1=Medium,
          final allowFlowReversal=allowFlowReversal,
          final m_flow_nominal=mCon_flow_nominal) if show_entFlo
          "Difference in enthalpy flow rate"
          annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=90,
            origin={0,90})));
        Buildings.Fluid.Sensors.TemperatureTwoPort senTOut(
          redeclare final package Medium = Medium,
          final allowFlowReversal=allowFlowReversal,
          final m_flow_nominal=mDis_flow_nominal) if show_TOut
          "Temperature in distribution line at connection outlet" annotation (
            Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=180,
              origin={80,-60})));
      protected
        parameter Modelica.Units.SI.SpecificHeatCapacity cp_default=
            Medium.specificHeatCapacityCp(Medium.setState_pTX(
            p=Medium.p_default,
            T=Medium.T_default,
            X=Medium.X_default))
          "Specific heat capacity of medium at default medium state";

      equation
        // Connect statements involving conditionally removed components are
        // removed at translation time by Modelica specification.
        // Only obsolete statements corresponding to the default model structure need
        // to be programmatically removed.
        if not show_entFlo then
          connect(port_bCon,senMasFloCon.port_b)
            annotation (Line(points={{-40,120},{-40,70}},color={0,127,255}));
          connect(port_aCon,junConRet.port_3)
            annotation (Line(points={{40,120},{40,-30}},color={0,127,255}));
        end if;
        if not show_TOut then
          connect(junConRet.port_2,port_bDis)
            annotation (Line(points={{50,-40},{100,-40}},color={0,127,255}));
        end if;
        connect(junConSup.port_3,pipCon.port_a)
          annotation (Line(points={{-40,-30},{-40,0}},color={0,127,255}));
        connect(pipDis.port_b,junConSup.port_1)
          annotation (Line(points={{-60,-40},{-50,-40}},color={0,127,255}));
        connect(senMasFloCon.m_flow,mCon_flow)
          annotation (Line(points={{-29,60},{120,60}},color={0,0,127}));
        connect(pipCon.port_b,senMasFloCon.port_a)
          annotation (Line(points={{-40,20},{-40,50}},color={0,127,255}));
        connect(port_aDis,pipDis.port_a)
          annotation (Line(points={{-100,-40},{-80,-40}},color={0,127,255}));
        connect(junConSup.port_2,senMasFloByp.port_a)
          annotation (Line(points={{-30,-40},{-10,-40}},color={0,127,255}));
        connect(senMasFloByp.port_b,junConRet.port_1)
          annotation (Line(points={{10,-40},{30,-40}},color={0,127,255}));
        connect(senMasFloByp.m_flow,mByp_flow)
          annotation (Line(points={{0,-29},{0,20},{120,20}},color={0,0,127}));
        connect(senMasFloCon.port_b, senDifEntFlo.port_a1) annotation (Line(points={{-40,
                70},{-40,74},{-6,74},{-6,80}}, color={0,127,255}));
        connect(senDifEntFlo.port_b1, port_bCon) annotation (Line(points={{-6,100},{-6,
                106},{-40,106},{-40,120}}, color={0,127,255}));
        connect(senDifEntFlo.port_b2, junConRet.port_3) annotation (Line(points={{6,80},
                {6,74},{40,74},{40,-30}}, color={0,127,255}));
        connect(senDifEntFlo.port_a2, port_aCon) annotation (Line(points={{6,100},{6,106},
                {40,106},{40,120}}, color={0,127,255}));
        connect(senDifEntFlo.dH_flow, dH_flow) annotation (Line(points={{-3,102},{-3,110},
                {80,110},{80,100},{120,100}}, color={0,0,127}));
        connect(port_bDis, senTOut.port_b) annotation (Line(points={{100,-40},{96,-40},
                {96,-60},{90,-60}}, color={0,127,255}));
        connect(junConRet.port_2, senTOut.port_a) annotation (Line(points={{50,-40},{60,
                -40},{60,-60},{70,-60}}, color={0,127,255}));
        connect(senTOut.T, TOut)
          annotation (Line(points={{80,-71},{80,-80},{120,-80}}, color={0,0,127}));
        annotation (
          defaultComponentName="con",
          Documentation(
            info="
<html>
<p>
Partial model to be used for connecting an agent (e.g. energy transfer station)
to a one-pipe distribution network.
</p>
<p>
Two instances of a replaceable partial model are used to represent the pipes:
</p>
<ul>
<li>
One representing the main distribution pipe immediately upstream the connection.
</li>
<li>
The other one representing both the supply and return lines of the connection.
When replacing that model with a pipe model computing the pressure drop,
one must double the length so that both the supply and return lines are
accounted for.
</li>
</ul>
</html>",   revisions="<html>
<ul>
<li>
March 3, 2022, by Michael Wetter:<br/>
Removed <code>massDynamics</code>.<br/>
This is for
<a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1542\">issue 1542</a>.
</li>
<li>
February 21, 2020, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>"),Icon(
            graphics={
              Rectangle(
                extent={{-100,-100},{100,100}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-100,2},{100,-2}},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                pattern=LinePattern.None,
                lineColor={0,0,0}),
              Rectangle(
                extent={{-2,-2},{2,100}},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                pattern=LinePattern.None,
                lineColor={0,0,0}),
              Text(
                extent={{-152,-104},{148,-144}},
                textString="%name",
                textColor={0,0,255}),
              Rectangle(
                extent={{-76,12},{-20,-12}},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                pattern=LinePattern.None,
                lineColor={0,0,0}),
              Rectangle(
                extent={{-25.5,7.5},{25.5,-7.5}},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                pattern=LinePattern.None,
                lineColor={0,0,0},
                origin={-0.5,45.5},
                rotation=90),
              Rectangle(
                extent={{58,-2},{62,100}},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                pattern=LinePattern.None,
                lineColor={0,0,0}),
              Rectangle(
                extent={{-25.5,7.5},{25.5,-7.5}},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                pattern=LinePattern.None,
                lineColor={0,0,0},
                origin={59.5,45.5},
                rotation=90)}),
          Diagram(
            coordinateSystem(
              extent={{-100,-100},{100,120}})));
      end PartialConnection1Pipe;

      partial model PartialConnection2Pipe
        "Partial model for connecting an agent to a two-pipe distribution network"
        extends estcp.DHC.Networks.BaseClasses.PartialConnection2Pipe2Medium(
            redeclare final package MediumSup = Medium, redeclare final package
            MediumRet = Medium);
        replaceable package Medium=Modelica.Media.Interfaces.PartialMedium
          "Medium model";
        replaceable model Model_pipCon=
            Buildings.Fluid.Interfaces.PartialTwoPortInterface (
            redeclare final package Medium = Medium,
            final m_flow_nominal=mCon_flow_nominal,
            final allowFlowReversal=allowFlowReversal);
        parameter Boolean show_entFlo=false
          "Set to true to output enthalpy flow rate difference"
          annotation (Evaluate=true);

        // OUTPUTS
        Buildings.Controls.OBC.CDL.Interfaces.RealOutput mCon_flow(
          final quantity="MassFlowRate",
          final unit="kg/s")
          "Connection supply mass flow rate"
          annotation (Placement(transformation(extent={{100,20},{140,60}}),
            iconTransformation(extent={{100,50},{140,90}})));
        Buildings.Controls.OBC.CDL.Interfaces.RealOutput dp(
          final quantity="PressureDifference",
          final unit="Pa",
          final displayUnit="Pa")
          "Pressure drop accross the connection (measured)"
          annotation (Placement(transformation(extent={{100,-20},{140,20}}),
            iconTransformation(extent={{100,30},{140,70}})));
        Buildings.Controls.OBC.CDL.Interfaces.RealOutput dH_flow(
          final unit="W") if show_entFlo
          "Difference in enthalpy flow rate between connection supply and return"
          annotation (Placement(transformation(extent={{100,70},{140,110}}),
              iconTransformation(extent={{100,70},{140,110}})));
        // COMPONENTS
        Model_pipCon pipCon
          "Connection pipe"
          annotation (Placement(
            transformation(extent={{-10,-10},{10,10}},rotation=90,origin={-20,-10})));
        Buildings.Fluid.Sensors.MassFlowRate senMasFloCon(
          redeclare final package Medium=Medium,
          final allowFlowReversal=allowFlowReversal)
          "Connection supply mass flow rate (measured)"
          annotation (Placement(transformation(extent={{-10,10},{10,-10}},rotation=90,origin={-20,40})));
        Buildings.Fluid.Sensors.RelativePressure senRelPre(redeclare final
            package Medium = Medium) "Relative pressure sensor" annotation (
            Placement(transformation(
              extent={{-10,10},{10,-10}},
              rotation=-90,
              origin={-40,-60})));
        DifferenceEnthalpyFlowRate senDifEntFlo(
          redeclare final package Medium1 = Medium,
          final allowFlowReversal=allowFlowReversal,
          final m_flow_nominal=mCon_flow_nominal) if show_entFlo
          "Difference in enthalpy flow rate"
          annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=90,
            origin={0,80})));
      equation
        // Connect statements involving conditionally removed components are
        // removed at translation time by Modelica specification.
        // Only obsolete statements corresponding to the default model structure need
        // to be programmatically removed.
        if not show_entFlo then
          connect(port_bCon,senMasFloCon.port_b)
            annotation (Line(points={{-20,120},{-20,50}},color={0,127,255}));
          connect(port_aCon, junConRet.port_3)
            annotation (Line(points={{20,120},{20,-70}}, color={0,127,255}));
        end if;
        connect(senMasFloCon.m_flow,mCon_flow)
          annotation (Line(points={{-9,40},{120,40}},color={0,0,127}));
        connect(senRelPre.port_a,junConSup.port_1)
          annotation (Line(points={{-40,-50},{-40,-40},{-30,-40}},color={0,127,255}));
        connect(senRelPre.port_b,junConRet.port_2)
          annotation (Line(points={{-40,-70},{-40,-80},{10,-80}},color={0,127,255}));
        connect(senRelPre.p_rel,dp)
          annotation (Line(points={{-31,-60},{80,-60},{80,0},{120,0}},color={0,0,127}));
        connect(port_bCon, senDifEntFlo.port_b1)
          annotation (Line(points={{-20,120},{-20,
                100},{-6,100},{-6,90}}, color={0,127,255}));
        connect(senDifEntFlo.port_a2, port_aCon)
          annotation (Line(points={{6,90},{6,100},
                {20,100},{20,120}}, color={0,127,255}));
        connect(senDifEntFlo.dH_flow, dH_flow)
          annotation (Line(points={{-3,92},{-3,
                106},{40,106},{40,90},{120,90}},color={0,0,127}));
        connect(senMasFloCon.port_b, senDifEntFlo.port_a1)
          annotation (Line(points={{-20,
                50},{-20,60},{-6,60},{-6,70}}, color={0,127,255}));
        connect(senDifEntFlo.port_b2, junConRet.port_3) annotation (Line(points={{6,70},
                {6,60},{20,60},{20,-70}}, color={0,127,255}));
        connect(pipCon.port_a, junConSup.port_3)
          annotation (Line(points={{-20,-20},{-20,-30}}, color={0,127,255}));
        connect(senMasFloCon.port_a, pipCon.port_b)
          annotation (Line(points={{-20,30},{-20,0},{-20,0}}, color={0,127,255}));
        annotation (
          defaultComponentName="con",
          Documentation(
            info="
<html>
<p>
Partial model to be used for connecting an agent (e.g. an energy transfer station)
to a two-pipe distribution network.
</p>
<p>
Three instances of a replaceable partial model are used to represent the pipes:
</p>
<ul>
<li>
One representing the main distribution supply pipe immediately upstream
the connection.
</li>
<li>
Another one representing the main distribution return pipe immediately downstream
the connection.
</li>
<li>
The last one representing both the supply and return lines of the connection.
When replacing that model with a pipe model computing the pressure drop,
one must double the length so that both the supply and return lines are
accounted for.
</li>
</ul>
</html>",   revisions="<html>
<ul>
<li>
March 28, 2022, by Kathryn Hinkelman:<br/>
Refactored to extend shared two medium base class.
</li>
<li>
March 3, 2022, by Michael Wetter:<br/>
Removed <code>massDynamics</code>.<br/>
This is for
<a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1542\">issue 1542</a>.
</li>
<li>
February 21, 2020, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>"),Icon(
            graphics={
              Rectangle(
                extent={{-100,-100},{100,100}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-100,2},{100,-2}},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                pattern=LinePattern.None,
                lineColor={0,0,0}),
              Rectangle(
                extent={{-2,-2},{2,100}},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                pattern=LinePattern.None,
                lineColor={0,0,0}),
              Text(
                extent={{-152,-104},{148,-144}},
                textString="%name",
                textColor={0,0,255}),
              Rectangle(
                extent={{-76,12},{-20,-12}},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                pattern=LinePattern.None,
                lineColor={0,0,0}),
              Rectangle(
                extent={{-25,8},{25,-8}},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                pattern=LinePattern.None,
                lineColor={0,0,0},
                origin={0,45},
                rotation=90),
              Rectangle(
                extent={{58,6},{62,100}},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                pattern=LinePattern.None,
                lineColor={0,0,0}),
              Rectangle(
                extent={{-100,-58},{100,-62}},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                pattern=LinePattern.None,
                lineColor={0,0,0}),
              Rectangle(
                extent={{-76,-48},{-20,-72}},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                pattern=LinePattern.None,
                lineColor={0,0,0}),
              Rectangle(
                extent={{58,-62},{62,-6}},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                pattern=LinePattern.None,
                lineColor={0,0,0}),
              Rectangle(
                extent={{-25.5,7.5},{25.5,-7.5}},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                pattern=LinePattern.None,
                lineColor={0,0,0},
                origin={59.5,45.5},
                rotation=90)}),
          Diagram(
            coordinateSystem(
              extent={{-100,-120},{100,120}})));
      end PartialConnection2Pipe;

      partial model PartialConnection2Pipe2Medium "Partial model for connecting an 
  agent to a two-pipe distribution network with two medium declarations"
        replaceable package MediumSup =
            Modelica.Media.Interfaces.PartialMedium
          "Medium model for supply fluid";
        replaceable package MediumRet =
            Modelica.Media.Interfaces.PartialMedium
          "Medium model for return fluid";

        replaceable model Model_pipDisSup =
            Buildings.Fluid.Interfaces.PartialTwoPortInterface
            constrainedby Buildings.Fluid.Interfaces.PartialTwoPortInterface(
              redeclare final package Medium = MediumSup,
              final m_flow_nominal=mDis_flow_nominal,
              final allowFlowReversal=allowFlowReversal)
          "Interface for inlet pipe for the distribution supply";
        replaceable model Model_pipDisRet =
            Buildings.Fluid.Interfaces.PartialTwoPortInterface
            constrainedby Buildings.Fluid.Interfaces.PartialTwoPortInterface(
              redeclare final package Medium = MediumRet,
              final m_flow_nominal=mDis_flow_nominal,
              final allowFlowReversal=allowFlowReversal)
          "Interface for outlet pipe for the distribution return";

        parameter Modelica.Units.SI.MassFlowRate mDis_flow_nominal
          "Nominal mass flow rate in the distribution line"
          annotation(Dialog(tab="General", group="Nominal condition"));
        parameter Modelica.Units.SI.MassFlowRate mCon_flow_nominal
          "Nominal mass flow rate in the connection line"
          annotation(Dialog(tab="General", group="Nominal condition"));
        parameter Boolean allowFlowReversal = false
          "= true to allow flow reversal, false restricts to design direction (port_a -> port_b)"
          annotation(Dialog(tab="Assumptions"), Evaluate=true);
        parameter Modelica.Fluid.Types.Dynamics energyDynamics=
          Modelica.Fluid.Types.Dynamics.FixedInitial
          "Type of energy balance: dynamic (3 initialization options) or steady state"
          annotation(Evaluate=true, Dialog(tab = "Dynamics", group="Equations"));
        parameter Modelica.Units.SI.Time tau=10
          "Time constant at nominal flow for dynamic energy and momentum balance"
          annotation (
            Dialog(tab="Dynamics", group="Nominal condition",
            enable=not energyDynamics==Modelica.Fluid.Types.Dynamics.SteadyState));

        // IO CONNECTORS
        Modelica.Fluid.Interfaces.FluidPort_a port_aDisSup(
          redeclare final package Medium = MediumSup,
          m_flow(min=if allowFlowReversal then -Modelica.Constants.inf else 0),
          h_outflow(start=MediumSup.h_default, nominal=MediumSup.h_default))
          "Distribution supply inlet port"
          annotation (Placement(transformation(extent={{-110,-50},{-90,-30}}),
            iconTransformation(extent={{-110,-10}, {-90,10}})));
        Modelica.Fluid.Interfaces.FluidPort_b port_bDisSup(
          redeclare final package Medium = MediumSup,
          m_flow(max=if allowFlowReversal then +Modelica.Constants.inf else 0),
          h_outflow(start=MediumSup.h_default, nominal=MediumSup.h_default))
          "Distribution supply outlet port"
          annotation (Placement(transformation(extent={{90,-50},{110,-30}}),
            iconTransformation(extent={{90,-10},{ 110,10}})));
        Modelica.Fluid.Interfaces.FluidPort_a port_aDisRet(
          redeclare final package Medium = MediumRet,
          m_flow(min=if allowFlowReversal then -Modelica.Constants.inf else 0),
          h_outflow(start=MediumRet.h_default, nominal=MediumRet.h_default))
          "Distribution return inlet port"
          annotation (Placement(transformation(extent={{90,-90},{110,-70}}),
            iconTransformation(extent={{90,-70},{ 110,-50}})));
        Modelica.Fluid.Interfaces.FluidPort_b port_bDisRet(
          redeclare final package Medium = MediumRet,
          m_flow(max=if allowFlowReversal then +Modelica.Constants.inf else 0),
          h_outflow(start=MediumRet.h_default, nominal=MediumRet.h_default))
          "Distribution return outlet port"
          annotation (Placement(transformation(extent={{-110,-90},{-90,-70}}),
            iconTransformation(extent={{-110,-70}, {-90,-50}})));
        Modelica.Fluid.Interfaces.FluidPort_b port_bCon(
          redeclare final package Medium = MediumSup,
          m_flow(max=if allowFlowReversal then +Modelica.Constants.inf else 0),
          h_outflow(start=MediumSup.h_default, nominal=MediumSup.h_default))
          "Connection supply port"
          annotation (Placement(transformation(extent={{-30,110},{-10,130}}),
            iconTransformation(extent={{-10,90},{10,110}})));
        Modelica.Fluid.Interfaces.FluidPort_a port_aCon(
          redeclare final package Medium = MediumRet,
          m_flow(min=if allowFlowReversal then -Modelica.Constants.inf else 0),
          h_outflow(start=MediumRet.h_default, nominal=MediumRet.h_default))
          "Connection return port"
          annotation (Placement(transformation(extent={{10,110},{30,130}}),
            iconTransformation(extent={{50,90},{70,110}})));
        // COMPONENTS
        Model_pipDisSup pipDisSup "Distribution supply pipe"
          annotation (Placement(transformation(extent={{-80,-50},{-60,-30}})));
        Model_pipDisRet pipDisRet "Distribution return pipe"
          annotation (Placement(transformation(extent={{-60,-90},{-80,-70}})));
        Buildings.Fluid.FixedResistances.Junction junConSup(
          redeclare final package Medium = MediumSup,
          final portFlowDirection_1=if allowFlowReversal then
            Modelica.Fluid.Types.PortFlowDirection.Bidirectional
            else Modelica.Fluid.Types.PortFlowDirection.Entering,
          final portFlowDirection_2=if allowFlowReversal then
            Modelica.Fluid.Types.PortFlowDirection.Bidirectional
            else Modelica.Fluid.Types.PortFlowDirection.Leaving,
          final portFlowDirection_3=if allowFlowReversal then
            Modelica.Fluid.Types.PortFlowDirection.Bidirectional
            else Modelica.Fluid.Types.PortFlowDirection.Leaving,
          final dp_nominal = {0, 0, 0},
          final energyDynamics=energyDynamics,
          final tau=tau,
          final m_flow_nominal={mDis_flow_nominal,-mDis_flow_nominal,-mCon_flow_nominal})
          "Junction with connection supply"
          annotation (Placement(transformation(extent={{-30,-30},{-10,-50}})));
        Buildings.Fluid.FixedResistances.Junction junConRet(
          redeclare final package Medium = MediumRet,
          final portFlowDirection_1=if allowFlowReversal then
            Modelica.Fluid.Types.PortFlowDirection.Bidirectional
            else Modelica.Fluid.Types.PortFlowDirection.Entering,
          final portFlowDirection_2=if allowFlowReversal then
            Modelica.Fluid.Types.PortFlowDirection.Bidirectional
            else Modelica.Fluid.Types.PortFlowDirection.Leaving,
          final portFlowDirection_3=if allowFlowReversal then
            Modelica.Fluid.Types.PortFlowDirection.Bidirectional
            else Modelica.Fluid.Types.PortFlowDirection.Entering,
          final dp_nominal = {0, 0, 0},
          final energyDynamics=energyDynamics,
          final tau=tau,
          final m_flow_nominal={mDis_flow_nominal,-mDis_flow_nominal,mCon_flow_nominal})
          "Junction with connection return"
          annotation (Placement(transformation(extent={{30,-70},{10,-90}})));
      protected
        parameter Modelica.Units.SI.SpecificHeatCapacity cp_default=
          MediumRet.specificHeatCapacityCp(MediumRet.setState_pTX(
            p = MediumRet.p_default,
            T = MediumRet.T_default,
            X = MediumRet.X_default))
          "Specific heat capacity of medium at default medium state";
      equation
        connect(pipDisSup.port_b, junConSup.port_1)
          annotation (Line(points={{-60,-40},{-30,-40}}, color={0,127,255}));
        connect(port_aDisSup, pipDisSup.port_a)
          annotation (Line(points={{-100,-40},{-80,-40}}, color={0,127,255}));
        connect(junConRet.port_2, pipDisRet.port_a)
          annotation (Line(points={{10,-80},{-60,-80}}, color={0,127,255}));
        connect(pipDisRet.port_b, port_bDisRet)
          annotation (Line(points={{-80,-80},{-100,-80}}, color={0,127,255}));
        connect(junConSup.port_2, port_bDisSup)
          annotation (Line(points={{-10,-40},{100,-40}}, color={0,127,255}));
        connect(junConRet.port_1, port_aDisRet)
          annotation (Line(points={{30,-80},{100,-80},{100,-80}}, color={0,127,255}));
        annotation (
          defaultComponentName="con",
          Documentation(info="
<html>
<p>
Partial model to be used for connecting an agent (e.g. an energy transfer station)
to a two-pipe distribution network featuring different supply and return fluids
(e.g. steam and liquid water).
</p>
<p>
Six instances of a replaceable partial model are used to represent the pipes:
</p>
<ul>
<li>
Two representing the main distribution supply and return pipes immediately upstream
of the connection.
</li>
<li>
Two representing the main distribution supply and return pipes immediately downstream
of the connection.
</li>
<li>
The other two representing the branch connection supply and return pipes immediately 
upstream and downstream of the connection, respectively.
</li>
</ul>
</html>",
      revisions="<html>
<ul>
<li>
March 28, 2022, by Kathryn Hinkelman:<br/>
Removed <code>massDynamics</code>.<br/>
This is for
<a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1542\">issue 1542</a>.
</li>
<li>
March 2, 2022, by Antoine Gautier and Kathryn Hinkelman:<br/>
First implementation.
</li>
</ul>
</html>"),Icon(graphics={   Rectangle(
                extent={{-100,-100},{100,100}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-100,2},{100,-2}},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                pattern=LinePattern.None,
                lineColor={0,0,0}),
              Rectangle(
                extent={{-2,-2},{2,100}},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                pattern=LinePattern.None,
                lineColor={0,0,0}),
              Text(
                extent={{-152,-104},{148,-144}},
                textString="%name",
                textColor={0,0,255}),
              Rectangle(
                extent={{58,6},{62,100}},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                pattern=LinePattern.None,
                lineColor={0,0,0}),
              Rectangle(
                extent={{-100,-58},{100,-62}},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                pattern=LinePattern.None,
                lineColor={0,0,0}),
              Rectangle(
                extent={{58,-60},{62,-6}},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                pattern=LinePattern.None,
                lineColor={0,0,0})}), Diagram(coordinateSystem(extent={{-100,-120},{100,
                  120}})));
      end PartialConnection2Pipe2Medium;

      partial model PartialDistribution
        "Partial model for distribution network"
        extends estcp.DHC.Networks.BaseClasses.PartialDistribution2Medium(
            redeclare final package MediumSup = Medium, redeclare final package
            MediumRet = Medium);
        replaceable package Medium=Modelica.Media.Interfaces.PartialMedium
          "Medium model"
          annotation (choices(
            choice(redeclare package Medium=Buildings.Media.Water "Water"),
            choice(redeclare package Medium =
                  Buildings.Media.Antifreeze.PropyleneGlycolWater (
              property_T=293.15,X_a=0.40) "Propylene glycol water, 40% mass fraction")));
        annotation (
          defaultComponentName="dis",
          Documentation(
            info="
<html>
<p>
Partial model to be used for modeling various distribution networks e.g. 
one-pipe or two-pipe hydraulic distribution.
</p>
</html>",   revisions="<html>
<ul>
<li>
March 28, 2022, by Kathryn Hinkelman:<br/>
Refactored to extend shared two medium base class.
</li>
<li>
February 21, 2020, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>"),Icon(
            coordinateSystem(
              preserveAspectRatio=false,
              extent={{-200,-100},{200,100}}),
            graphics={
              Text(
                extent={{-149,-104},{151,-144}},
                textColor={0,0,255},
                textString="%name"),
              Rectangle(
                extent={{-200,-100},{200,100}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid)}),
          Diagram(
            coordinateSystem(
              preserveAspectRatio=false,
              extent={{-100,-100},{100,100}})));
      end PartialDistribution;

      partial model PartialDistribution1Pipe
        "Partial model for one-pipe distribution network"
        extends PartialDistribution;
        replaceable model Model_pipDis=
            Buildings.Fluid.Interfaces.PartialTwoPortInterface (redeclare
              final package Medium = Medium, final allowFlowReversal=
                allowFlowReversal)
          "Model for distribution pipe";
        parameter Boolean show_entFlo=false
          "Set to true to output enthalpy flow rate difference at each connection"
          annotation (Evaluate=true);
        parameter Boolean show_TOut=false
          "Set to true to output temperature at connection outlet"
          annotation (Evaluate=true);
        parameter Modelica.Units.SI.MassFlowRate mDis_flow_nominal
          "Nominal mass flow rate in the distribution line"
          annotation (Dialog(tab="General", group="Nominal condition"));
        parameter Modelica.Units.SI.MassFlowRate mCon_flow_nominal[nCon]
          "Nominal mass flow rate in each connection line"
          annotation (Dialog(tab="General", group="Nominal condition"));
        parameter Modelica.Fluid.Types.Dynamics energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial
          "Type of energy balance: dynamic (3 initialization options) or steady state"
          annotation (Evaluate=true,Dialog(tab="Dynamics",group="Conservation equations"));
        parameter Modelica.Units.SI.Time tau=10
          "Time constant at nominal flow for dynamic energy and momentum balance"
          annotation (Dialog(
            tab="Dynamics",
            group="Nominal condition",
            enable=not energyDynamics == Modelica.Fluid.Types.Dynamics.SteadyState));
        // IO CONNECTORS
        Buildings.Controls.OBC.CDL.Interfaces.RealOutput dH_flow[nCon](
          each final unit="W") if show_entFlo
          "Difference in enthalpy flow rate between connection supply and return"
          annotation (Placement(transformation(extent={{100,-60},{140,-20}}),
              iconTransformation(extent={{200,50},{240,90}})));
        Buildings.Controls.OBC.CDL.Interfaces.RealOutput mCon_flow[nCon](
          each final unit="kg/s")
          "Connection supply mass flow rate (measured)"
          annotation (Placement(transformation(extent={{100,60},{140,100}}),
            iconTransformation(extent={{200,30},{240,70}})));
        Buildings.Controls.OBC.CDL.Interfaces.RealOutput mByp_flow[nCon](
          each final unit="kg/s")
          "Bypass mass flow rate"
          annotation (Placement(transformation(extent={{100,20},{140,60}}),
            iconTransformation(extent={{200,10},{240,50}})));
        Buildings.Controls.OBC.CDL.Interfaces.RealOutput TOut[nCon](
          each final unit="K",
          each displayUnit="degC") if show_TOut
          "Temperature in distribution line at each connection outlet"
          annotation (
            Placement(transformation(extent={{100,-100},{140,-60}}),
              iconTransformation(extent={{200,-80},{240,-40}})));
        // COMPONENTS
        replaceable PartialConnection1Pipe con[nCon](
          redeclare each final package Medium=Medium,
          each final show_entFlo=show_entFlo,
          each final show_TOut=show_TOut,
          each final mDis_flow_nominal=mDis_flow_nominal,
          final mCon_flow_nominal=mCon_flow_nominal,
          each final allowFlowReversal=allowFlowReversal,
          each final energyDynamics=energyDynamics,
          each final tau=tau)
          "Connection to agent"
          annotation (Placement(transformation(extent={{-10,-10},{10,10}})));
        Model_pipDis pipEnd(
          final m_flow_nominal=mDis_flow_nominal)
          "Pipe representing the end of the distribution line (after last connection)"
          annotation (Placement(transformation(extent={{40,-10},{60,10}})));
      equation
        // Connecting outlets to inlets for all instances of connection component.
        if nCon >= 2 then
          for i in 2:nCon loop
            connect(con[i-1].port_bDis,con[i].port_aDis);
          end for;
        end if;
        connect(con.port_bCon,ports_bCon)
          annotation (Line(points={{0,10},{0,40},{-80,40},{-80,100}},color={0,127,255}));
        connect(ports_aCon,con.port_aCon)
          annotation (Line(points={{80,100},{80,40},{6,40},{6,10}},color={0,127,255}));
        connect(port_aDisSup,con[1].port_aDis)
          annotation (Line(points={{-100,0},{-10,0}},color={0,127,255}));
        connect(con[nCon].port_bDis,pipEnd.port_a)
          annotation (Line(points={{10,0},{40,0}},color={0,127,255}));
        connect(pipEnd.port_b,port_bDisSup)
          annotation (Line(points={{60,0},{100,0}},color={0,127,255}));
        connect(con.mByp_flow,mByp_flow)
          annotation (Line(points={{12,3},{20,3},{20,20},{92,20},{92,40},{120,40}},color={0,0,127}));
        connect(con.mCon_flow,mCon_flow)
          annotation (Line(points={{12,5},{18,5},{18,22},{90,22},{90,80},{120,80}},color={0,0,127}));
        connect(con.dH_flow, dH_flow) annotation (Line(points={{12,7},{24,7},{24,-40},
                {120,-40}}, color={0,0,127}));
        connect(con.TOut, TOut) annotation (Line(points={{12,9},{22,9},{22,-80},{120,
                -80}}, color={0,0,127}));
        annotation (
          Documentation(
            info="
<html>
<p>
Partial model of a one-pipe distribution network.
</p>
<p>
An array of replaceable partial models is used to represent the
connections along the network, including the pipe segment immediately
upstream of each connection.
</p>
<p>
A replaceable partial model is used to represent the pipe segment of
the return line after the last connection.
</p>
<p>
Optionally the heat flow rate transferred to each connected load can be output.
</p>
</html>",   revisions="<html>
<ul>
<li>
February 21, 2020, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>"),Icon(
            coordinateSystem(
              preserveAspectRatio=false),
            graphics={
              Rectangle(
                extent={{-6,-200},{6,200}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                origin={0,0},
                rotation=90),
              Rectangle(
                extent={{-53,4},{53,-4}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                origin={-120,47},
                rotation=90),
              Rectangle(
                extent={{-53,4},{53,-4}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                origin={120,47},
                rotation=90)}),
          Diagram(
            coordinateSystem(
              preserveAspectRatio=false)));
      end PartialDistribution1Pipe;

      partial model PartialDistribution2Medium
        "Partial model for distribution network with two medium declarations"
        replaceable package MediumSup =
            Modelica.Media.Interfaces.PartialMedium
          "Medium model for supply fluid";
        replaceable package MediumRet =
            Modelica.Media.Interfaces.PartialMedium
          "Medium model for return fluid";
        parameter Integer nCon
          "Number of connections"
          annotation (Dialog(tab="General"),Evaluate=true);
        parameter Boolean allowFlowReversal=false
          "= true to allow flow reversal, false restricts to design direction (port_a -> port_b)"
          annotation (Dialog(tab="Assumptions"),Evaluate=true);
        // IO CONNECTORS
        Modelica.Fluid.Interfaces.FluidPorts_a ports_aCon[nCon](
          redeclare each final package Medium=MediumRet,
          each m_flow(
            min=
              if allowFlowReversal then
                -Modelica.Constants.inf
              else
                0),
          each h_outflow(
            start=MediumRet.h_default,
            nominal=MediumRet.h_default))
          "Connection return ports"
          annotation (Placement(transformation(extent={{-10,-40},{10,40}},rotation=90,origin={80,100}),iconTransformation(extent={{-20,-80},{20,80}},rotation=90,origin={120,100})));
        Modelica.Fluid.Interfaces.FluidPorts_b ports_bCon[nCon](
          redeclare each package Medium=MediumSup,
          each m_flow(
            max=
              if allowFlowReversal then
                +Modelica.Constants.inf
              else
                0),
          each h_outflow(
            start=MediumSup.h_default,
            nominal=MediumSup.h_default))
          "Connection supply ports"
          annotation (Placement(transformation(extent={{-10,-40},{10,40}},rotation=90,origin={-80,100}),iconTransformation(extent={{-20,-80},{20,80}},rotation=90,origin={-120,100})));
        Modelica.Fluid.Interfaces.FluidPort_a port_aDisSup(
          redeclare final package Medium=MediumSup,
          m_flow(
            min=
              if allowFlowReversal then
                -Modelica.Constants.inf
              else
                0),
          h_outflow(
            start=MediumSup.h_default,
            nominal=MediumSup.h_default))
          "Distribution supply inlet port"
          annotation (Placement(transformation(extent={{-110,-10},{-90,10}}),iconTransformation(extent={{-220,-20},{-180,20}})));
        Modelica.Fluid.Interfaces.FluidPort_b port_bDisSup(
          redeclare final package Medium=MediumSup,
          m_flow(
            max=
              if allowFlowReversal then
                +Modelica.Constants.inf
              else
                0),
          h_outflow(
            start=MediumRet.h_default,
            nominal=MediumRet.h_default))
          "Distribution supply outlet port"
          annotation (Placement(transformation(extent={{90,-10},{110,10}}),iconTransformation(extent={{180,-20},{220,20}})));
        annotation (
          defaultComponentName="dis",
          Documentation(
            info="
<html>
<p>
Partial model to be used for modeling various distribution networks e.g. 
one-pipe or two-pipe hydraulic distribution.
</p>
</html>",   revisions="<html>
<ul>
<li>
March 2, 2022, by Antoine Gautier and Kathryn Hinkelman:<br/>
First implementation.
</li>
</ul>
</html>"),Icon(
            coordinateSystem(
              preserveAspectRatio=false,
              extent={{-200,-100},{200,100}}),
            graphics={
              Text(
                extent={{-149,-104},{151,-144}},
                textColor={0,0,255},
                textString="%name"),
              Rectangle(
                extent={{-200,-100},{200,100}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid)}),
          Diagram(
            coordinateSystem(
              preserveAspectRatio=false,
              extent={{-100,-100},{100,100}})));
      end PartialDistribution2Medium;

      partial model PartialDistribution2Pipe
        "Partial model for two-pipe distribution network"
        extends PartialDistribution;
        replaceable model Model_pipDis=
            Buildings.Fluid.Interfaces.PartialTwoPortInterface (redeclare
              final package Medium = Medium, final allowFlowReversal=
                allowFlowReversal)
          "Model for distribution pipe";
        parameter Integer iConDpSen(
          final max=nCon)=nCon
          "Index of the connection where the pressure drop is measured"
          annotation (Dialog(tab="General"),Evaluate=true);
        parameter Boolean show_entFlo=false
          "Set to true to output enthalpy flow rate difference at each connection"
          annotation (Evaluate=true);
        parameter Modelica.Units.SI.MassFlowRate mDis_flow_nominal
          "Nominal mass flow rate in the distribution line before the first connection"
          annotation (Dialog(tab="General", group="Nominal condition"));
        parameter Modelica.Units.SI.MassFlowRate mCon_flow_nominal[nCon]
          "Nominal mass flow rate in each connection line"
          annotation (Dialog(tab="General", group="Nominal condition"));
        parameter Modelica.Units.SI.MassFlowRate mEnd_flow_nominal=mDis_flow_nominal
             - sum(mCon_flow_nominal)
          "Nominal mass flow rate in the end of the distribution line"
          annotation (Dialog(tab="General", group="Nominal condition"));
        parameter Modelica.Units.SI.MassFlowRate mDisCon_flow_nominal[nCon]=cat(
            1,
            {mDis_flow_nominal},
            {mDis_flow_nominal - sum(mCon_flow_nominal[1:i]) for i in 1:(nCon - 1)})
          "Nominal mass flow rate in the distribution line before each connection"
          annotation (Dialog(tab="General", group="Nominal condition"));
        parameter Modelica.Fluid.Types.Dynamics energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial
          "Type of energy balance: dynamic (3 initialization options) or steady state"
          annotation (Evaluate=true,Dialog(tab="Dynamics",group="Conservation equations"));
        parameter Modelica.Units.SI.Time tau=10
          "Time constant at nominal flow for dynamic energy and momentum balance"
          annotation (Dialog(
            tab="Dynamics",
            group="Nominal condition",
            enable=not energyDynamics == Modelica.Fluid.Types.Dynamics.SteadyState));
        // IO CONNECTORS
        Modelica.Fluid.Interfaces.FluidPort_b port_bDisRet(
          redeclare final package Medium=Medium,
          m_flow(
            max=
              if allowFlowReversal then
                +Modelica.Constants.inf
              else
                0),
          h_outflow(
            start=Medium.h_default,
            nominal=Medium.h_default))
          "Distribution return outlet port"
          annotation (Placement(transformation(extent={{-110,-70},{-90,-50}}),
            iconTransformation(extent={{-220,-80},{-180,-40}})));
        Modelica.Fluid.Interfaces.FluidPort_a port_aDisRet(
          redeclare final package Medium=Medium,
          m_flow(
            min=
              if allowFlowReversal then
                -Modelica.Constants.inf
              else
                0),
          h_outflow(
            start=Medium.h_default,
            nominal=Medium.h_default))
          "Distribution return inlet port"
          annotation (Placement(transformation(extent={{90,-70},{110,-50}}),
            iconTransformation(extent={{180,-80},{220,-40}})));
        Buildings.Controls.OBC.CDL.Interfaces.RealOutput dp(
          final unit="Pa",
          displayUnit="Pa") if iConDpSen >= 0
          "Pressure difference at given location (measured)"
          annotation (Placement(transformation(extent={{100,20},{140,60}}),
            iconTransformation(extent={{200,10},{240,50}})));
        Buildings.Controls.OBC.CDL.Interfaces.RealOutput dH_flow[nCon](each final
            unit="W")          if show_entFlo
          "Difference in enthalpy flow rate between connection supply and return"
          annotation (Placement(transformation(extent={{100,60},{140,100}}),
              iconTransformation(extent={{200,50},{240,90}})));
        Buildings.Controls.OBC.CDL.Interfaces.RealOutput mCon_flow[nCon](
          each final unit="kg/s")
          "Connection supply mass flow rate (measured)"
          annotation (Placement(transformation(extent={{100,40},{140,80}}),
            iconTransformation(extent={{200,30},{240,70}})));
        // COMPONENTS
        replaceable estcp.DHC.Networks.BaseClasses.PartialConnection2Pipe con[nCon](
          redeclare each final package Medium = Medium,
          each final show_entFlo=show_entFlo,
          final mDis_flow_nominal=mDisCon_flow_nominal,
          final mCon_flow_nominal=mCon_flow_nominal,
          each final allowFlowReversal=allowFlowReversal,
          each final energyDynamics=energyDynamics,
          each final tau=tau) "Connection to agent"
          annotation (Placement(transformation(extent={{-10,-10},{10,10}})));
        Model_pipDis pipEnd(
          final m_flow_nominal=mEnd_flow_nominal)
          "Pipe representing the end of the distribution line (after last connection)"
          annotation (Placement(transformation(extent={{60,-10},{80,10}})));
        Buildings.Fluid.Sensors.RelativePressure senRelPre(redeclare final
            package Medium = Medium) if iConDpSen == 0
          "Relative pressure sensor" annotation (Placement(transformation(
              extent={{-10,10},{10,-10}},
              rotation=-90,
              origin={-60,-30})));
      initial equation
        assert(
          iConDpSen <= nCon,
          "In "+getInstanceName()+": iConDpSen = "+String(
            iConDpSen)+" whereas it must be lower than "+String(
            nCon)+".");
      equation
        // Connecting outlets to inlets for all instances of connection component.
        if nCon >= 2 then
          for i in 2:nCon loop
            connect(con[i-1].port_bDisSup,con[i].port_aDisSup);
            connect(con[i-1].port_aDisRet,con[i].port_bDisRet);
          end for;
        end if;
        // Connecting dp sensor (needs to be explicit because con[iConDpSen] is
        // undefined if iConDpSen <= 0).
        if iConDpSen > 0 then
          connect(con[iConDpSen].dp,dp)
            annotation (Line(points={{12,5},{20,5},{20,20},{90,20},{90,40},{120,40}},color={0,0,127}));
        end if;
        connect(senRelPre.p_rel,dp)
          annotation (Line(points={{-51,-30},{92,-30},{92,38},{106,38},{106,40},{120,40}},
                                                                        color={0,0,127}));
        connect(con.port_bCon,ports_bCon)
          annotation (Line(points={{0,10},{0,40},{-80,40},{-80,100}},color={0,127,255}));
        connect(ports_aCon,con.port_aCon)
          annotation (Line(points={{80,100},{80,40},{6,40},{6,10}},color={0,127,255}));
        connect(port_aDisSup,con[1].port_aDisSup)
          annotation (Line(points={{-100,0},{-10,0}},color={0,127,255}));
        connect(port_bDisRet,con[1].port_bDisRet)
          annotation (Line(points={{-100,-60},{-40,-60},{-40,-6},{-10,-6}},color={0,127,255}));
        connect(con[nCon].port_aDisRet,port_aDisRet)
          annotation (Line(points={{10,-6},{40,-6},{40,-60},{100,-60}},color={0,127,255}));
        connect(con[nCon].port_bDisSup,pipEnd.port_a)
          annotation (Line(points={{10,0},{60,0}},color={0,127,255}));
        connect(pipEnd.port_b,port_bDisSup)
          annotation (Line(points={{80,0},{100,0}},color={0,127,255}));
        connect(con.mCon_flow,mCon_flow)
          annotation (Line(points={{12,7},{18,7},{18,22},{88,22},{88,60},{120,60}},color={0,0,127}));
        connect(port_aDisSup,senRelPre.port_a)
          annotation (Line(points={{-100,0},{-60,0},{-60,-20}},color={0,127,255}));
        connect(senRelPre.port_b,port_bDisRet)
          annotation (Line(points={{-60,-40},{-60,-60},{-100,-60}},color={0,127,255}));
        connect(con.dH_flow, dH_flow) annotation (Line(points={{12,9},{16,9},{16,80},{
                120,80}}, color={0,0,127}));
        annotation (
          Documentation(
            info="
<html>
<p>
Partial model of a two-pipe distribution network.
</p>
<p>
An array of replaceable partial models is used to represent the
connections along the network, including the pipe segment immediately
upstream each connection.
</p>
<p>
A replaceable partial model is used to represent the pipe segment of
the supply and return line after the last connection.
</p>
<p>
The parameter <code>iConDpSen</code> is provided to specify the index of the
connection where the pressure drop is measured.
Use zero for a sensor connected  to the supply pipe inlet and return pipe outlet.
Use a negative value if no sensor is needed.
</p>
<p>
Optionally the heat flow rate transferred to each connected load can be output.
</p>
</html>",   revisions="<html>
<ul>
<li>
February 21, 2020, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>"),Icon(
            coordinateSystem(
              preserveAspectRatio=false),
            graphics={
              Rectangle(
                extent={{-6,-200},{6,200}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                origin={0,0},
                rotation=90),
              Rectangle(
                extent={{-53,4},{53,-4}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                origin={-120,47},
                rotation=90),
              Rectangle(
                extent={{-44,4},{44,-4}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                origin={120,56},
                rotation=90),
              Rectangle(
                extent={{-6,-200},{6,200}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                origin={0,-60},
                rotation=90),
              Rectangle(
                extent={{-27,4},{27,-4}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                origin={120,-39},
                rotation=90)}),
          Diagram(
            coordinateSystem(
              preserveAspectRatio=false)));
      end PartialDistribution2Pipe;

      partial model PartialDistribution2Pipe2Medium
        "Partial model for a two-pipe distribution network with two medium declarations"
        extends estcp.DHC.Networks.BaseClasses.PartialDistribution2Medium;
        replaceable model Model_pipDis =
            Buildings.Fluid.Interfaces.PartialTwoPortInterface
            constrainedby Buildings.Fluid.Interfaces.PartialTwoPortInterface(
              redeclare final package Medium=MediumSup,
              final allowFlowReversal=allowFlowReversal)
          "Model for distribution pipe";
        parameter Boolean show_heaFlo=false
          "Set to true to output the heat flow rate transferred to each connected load"
          annotation (Evaluate=true);
        parameter Modelica.Units.SI.MassFlowRate mDis_flow_nominal
          "Nominal mass flow rate in the distribution line before the first connection"
          annotation (Dialog(tab="General",group="Nominal condition"));
        parameter Modelica.Units.SI.MassFlowRate mCon_flow_nominal[nCon]
          "Nominal mass flow rate in each connection line"
          annotation (Dialog(tab="General",group="Nominal condition"));
        parameter Modelica.Units.SI.MassFlowRate mEnd_flow_nominal=mDis_flow_nominal-sum(
          mCon_flow_nominal)
          "Nominal mass flow rate in the end of the distribution line"
          annotation (Dialog(tab="General",group="Nominal condition"));
        parameter Modelica.Units.SI.MassFlowRate mDisCon_flow_nominal[nCon]=cat(
          1,
          {mDis_flow_nominal},
          {mDis_flow_nominal-sum(mCon_flow_nominal[1:i]) for i in 1:(nCon-1)})
          "Nominal mass flow rate in the distribution line before each connection"
          annotation (Dialog(tab="General",group="Nominal condition"));
        parameter Modelica.Fluid.Types.Dynamics energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial
          "Type of energy balance: dynamic (3 initialization options) or steady state"
          annotation (Evaluate=true,Dialog(tab="Dynamics",group="Equations"));
        parameter Modelica.Units.SI.Time tau=10
          "Time constant at nominal flow for dynamic energy and momentum balance"
          annotation (Dialog(tab="Dynamics",group="Nominal condition",enable=not energyDynamics == Modelica.Fluid.Types.Dynamics.SteadyState));
        // IO CONNECTORS
        Modelica.Fluid.Interfaces.FluidPort_b port_bDisRet(
          redeclare final package Medium=MediumRet,
          m_flow(
            max=
              if allowFlowReversal then
                +Modelica.Constants.inf
              else
                0),
          h_outflow(
            start=MediumRet.h_default,
            nominal=MediumRet.h_default))
          "Distribution return outlet port"
          annotation (Placement(transformation(extent={{-110,-70},{-90,-50}}),iconTransformation(extent={{-220,-80},{-180,-40}})));
        Modelica.Fluid.Interfaces.FluidPort_a port_aDisRet(
          redeclare final package Medium=MediumRet,
          m_flow(
            min=
              if allowFlowReversal then
                -Modelica.Constants.inf
              else
                0),
          h_outflow(
            start=MediumRet.h_default,
            nominal=MediumRet.h_default))
          "Distribution return inlet port"
          annotation (Placement(transformation(extent={{90,-70},{110,-50}}),iconTransformation(extent={{180,-80},{220,-40}})));
        // COMPONENTS
        replaceable
          estcp.DHC.Networks.BaseClasses.PartialConnection2Pipe2Medium con[nCon]
          constrainedby
          estcp.DHC.Networks.BaseClasses.PartialConnection2Pipe2Medium(
          redeclare each final package MediumSup = MediumSup,
          redeclare each final package MediumRet = MediumRet,
          final mDis_flow_nominal=mDisCon_flow_nominal,
          final mCon_flow_nominal=mCon_flow_nominal,
          each final allowFlowReversal=allowFlowReversal,
          each final energyDynamics=energyDynamics,
          each final tau=tau) "Connection to agent"
          annotation (Placement(transformation(extent={{-10,-10},{10,10}})));
        Model_pipDis pipEnd(
          final m_flow_nominal=mEnd_flow_nominal)
          "Pipe representing the end of the distribution line (after last connection)"
          annotation (Placement(transformation(extent={{60,-10},{80,10}})));
      initial equation
        assert(
          mDis_flow_nominal >= sum(
            mCon_flow_nominal),
          "In "+getInstanceName()+": mDis_flow_nominal = "+String(
            mDis_flow_nominal)+" whereas it must be higher than sum(mCon_flow_nominal) = "+String(
            sum(
              mCon_flow_nominal))+".");
      equation
        // Connecting outlets to inlets for all instances of connection component.
        if nCon >= 2 then
          for i in 2:nCon loop
            connect(con[i-1].port_bDisSup,con[i].port_aDisSup);
            connect(con[i-1].port_aDisRet,con[i].port_bDisRet);
          end for;
        end if;
        connect(con.port_bCon,ports_bCon)
          annotation (Line(points={{0,10},{0,40},{-80,40},{-80,100}},color={0,127,255}));
        connect(ports_aCon,con.port_aCon)
          annotation (Line(points={{80,100},{80,40},{6,40},{6,10}},color={0,127,255}));
        connect(port_aDisSup,con[1].port_aDisSup)
          annotation (Line(points={{-100,0},{-10,0}},color={0,127,255}));
        connect(port_bDisRet,con[1].port_bDisRet)
          annotation (Line(points={{-100,-60},{-40,-60},{-40,-6},{-10,-6}},color={0,127,255}));
        connect(con[nCon].port_aDisRet,port_aDisRet)
          annotation (Line(points={{10,-6},{40,-6},{40,-60},{100,-60}},color={0,127,255}));
        connect(con[nCon].port_bDisSup,pipEnd.port_a)
          annotation (Line(points={{10,0},{60,0}},color={0,127,255}));
        connect(pipEnd.port_b,port_bDisSup)
          annotation (Line(points={{80,0},{100,0}},color={0,127,255}));
        annotation (
          Documentation(
            info="
<html>
<p>
Partial model of a two-pipe distribution network.
</p>
<p>
An array of replaceable partial models is used to represent the
connections along the network, including the pipe segment immediately
upstream each connection.
</p>
<p>
A replaceable partial model is used to represent the pipe segment of
the supply and return line after the last connection.
</p>
<p>
The parameter <code>iConDpSen</code> is provided to specify the index of the
connection where the pressure drop is measured.
Use zero for a sensor connected  to the supply pipe inlet and return pipe outlet.
Use a negative value if no sensor is needed.
</p>
<p>
Optionally the heat flow rate transferred to each connected load can be output.
</p>
</html>",   revisions="<html>
<ul>
<li>
March 2, 2022, by Antoine Gautier and Kathryn Hinkelman:<br/>
First implementation.
</li>
</ul>
</html>"),Icon(
            coordinateSystem(
              preserveAspectRatio=false),
            graphics={
              Rectangle(
                extent={{-6,-200},{6,200}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                origin={0,0},
                rotation=90),
              Rectangle(
                extent={{-53,4},{53,-4}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                origin={-120,47},
                rotation=90),
              Rectangle(
                extent={{-44,4},{44,-4}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                origin={120,56},
                rotation=90),
              Rectangle(
                extent={{-6,-200},{6,200}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                origin={0,-60},
                rotation=90),
              Rectangle(
                extent={{-27,4},{27,-4}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                origin={120,-39},
                rotation=90)}),
          Diagram(
            coordinateSystem(
              preserveAspectRatio=false)));
      end PartialDistribution2Pipe2Medium;
      annotation (
        preferredView="info",
        Documentation(
          info="<html>
<p>
This package contains base classes that are used to construct the classes in
<a href=\"modelica://Buildings.Experimental.DHC.Networks\">
Buildings.Experimental.DHC.Networks</a>.
</p>
</html>"));
    end BaseClasses;
    annotation (
      preferredView="info",
      Documentation(
        info="<html>
<p>
This package contains models for elements that form the district network.
</p>
</html>"));
  end Networks;

  package Plants "Package of models for central plants"
    extends Modelica.Icons.VariantsPackage;

    package Combined "Package of models for central plants that provide heating and cooling"
      extends Modelica.Icons.VariantsPackage;

      model AllElectricCWStorage
        "All-electric CHW and HW plant with CW storage"
        extends BaseClasses.PartialPlant(
          final typ=estcp.DHC.Types.DistrictSystemType.CombinedGeneration2to4,
          final have_weaBus=true,
          final have_fan=true,
          final have_pum=true,
          final have_eleHea=true,
          final have_eleCoo=true);

        replaceable package MediumAir=Buildings.Media.Air
          "Air medium";
        replaceable package MediumConWatCoo=Buildings.Media.Water
          constrainedby Modelica.Media.Interfaces.PartialMedium
          "Medium model for cooling tower circuit"
          annotation (choices(
            choice(redeclare package Medium=Buildings.Media.Water "Water"),
            choice(redeclare package Medium =
                  Buildings.Media.Antifreeze.PropyleneGlycolWater (
              property_T=293.15,X_a=0.40)
              "Propylene glycol water, 40% mass fraction")));

        // CHW loop and cooling-only chillers
        parameter Integer nChi(final min=1, start=1)
          "Number of units operating at design conditions"
          annotation (Dialog(group="CHW loop and cooling-only chillers"),
            Evaluate=true);
        parameter Integer nPumChiWat(final min=1, start=1)=max(nChi, nChiHea)
          "Number of CHW pumps operating at design conditions"
          annotation (Dialog(group="CHW loop and cooling-only chillers"),
            Evaluate=true);
        final parameter Modelica.Units.SI.MassFlowRate mChiWatChi_flow_nominal(
          final min=0)=datChi.mEva_flow_nominal
          "Design chiller CHW mass flow rate (each unit)"
          annotation(Dialog(group="CHW loop and cooling-only chillers"));
        parameter Modelica.Units.SI.MassFlowRate mChiWatChi_flow_min(
          final min=0)=0.6 * mChiWatChi_flow_nominal
          "Chiller CHW minimum mass flow rate (each unit)"
          annotation(Dialog(group="CHW loop and cooling-only chillers"));
        final parameter Modelica.Units.SI.MassFlowRate mConWatChi_flow_nominal(
          final min=0)=datChi.mCon_flow_nominal
          "Design chiller CW mass flow rate (each unit)"
          annotation(Dialog(group="CHW loop and cooling-only chillers"));
        parameter Modelica.Units.SI.PressureDifference dpChiWatSet_max(
          final min=0,
          displayUnit="Pa")
          "Design (maximum) CHW differential pressure setpoint"
          annotation(Dialog(group="CHW loop and cooling-only chillers"));
        parameter Modelica.Units.SI.PressureDifference dpEvaChi_nominal(
          final min=0,
          displayUnit="Pa")=5E4
          "Design evaporator pressure drop (each unit)"
          annotation(Dialog(group="CHW loop and cooling-only chillers"));
        parameter Modelica.Units.SI.PressureDifference dpConChi_nominal(
          final min=0,
          displayUnit="Pa")=5E4
          "Design condenser pressure drop (each unit)"
          annotation(Dialog(group="CHW loop and cooling-only chillers"));
        parameter Modelica.Units.SI.PressureDifference dpPumChiWat_nominal(
          final min=0,
          displayUnit="Pa")=1.1 * (dpChiWatSet_max + max(
            dpEvaChi_nominal + chi.valEva.dpValve_nominal,
            dpEvaChiHea_nominal + max(chiHea.valEva.dpValve_nominal) + sum(chiHea.valEvaSwi.dpValve_nominal)))
          "Design head of CHW pump(each unit)"
          annotation(Dialog(group="CHW loop and cooling-only chillers"));

        replaceable parameter
          Buildings.Fluid.Chillers.Data.ElectricReformulatedEIR.Generic datChi
          constrainedby Buildings.Fluid.Chillers.Data.BaseClasses.Chiller
          "Chiller parameters (each unit)" annotation (Dialog(group=
                "CHW loop and cooling-only chillers"), Placement(transformation(
                extent={{80,340},{100,360}})));

        final parameter Modelica.Units.SI.Temperature TChiWatSup_nominal=
          max(chi.TChiWatSup_nominal, chiHea.TChiWatSup_nominal)
          "Design (minimum) CHW supply temperature"
          annotation(Dialog(group="CHW loop and cooling-only chillers"));
        final parameter Modelica.Units.SI.Temperature TChiWatRet_nominal=
          TChiWatSup_nominal - QChiWat_flow_nominal / mChiWat_flow_nominal / cp_default
          "Design (maximum) CHW return temperature"
          annotation(Dialog(group="CHW loop and cooling-only chillers"));
        // Plant capacity computed with HRCs in direct heat recovery mode, see
        // Buildings.Experimental.DHC.Plants.Combined.Controls.BaseClasses.StagingPlant.
        final parameter Modelica.Units.SI.HeatFlowRate QChiWat_flow_nominal=
          chi.QChiWat_flow_nominal + chiHea.QChiWat_flow_nominal
          "Design plant cooling heat flow rate (all units)";
        final parameter Modelica.Units.SI.MassFlowRate mChiWat_flow_nominal(
          final min=0)=
          nChi * mChiWatChi_flow_nominal + nChiHea * mChiWatChiHea_flow_nominal
          "Design CHW mass flow rate (all units)"
          annotation(Dialog(group="CHW loop and cooling-only chillers"));

        parameter Modelica.Units.SI.TemperatureDifference dTLifChi_min=10
          "Minimum chiller lift at minimum load"
          annotation(Dialog(group="CHW loop and cooling-only chillers"));
        parameter Modelica.Units.SI.TemperatureDifference dTLifChi_nominal=
          TTanSet[1, 2] + 5 - TChiWatSup_nominal
          "Design chiller lift"
          annotation(Dialog(group="CHW loop and cooling-only chillers"));

        // HW loop and heat recovery chillers
        parameter Integer nChiHea(final min=1, start=1)
          "Number of units operating at design conditions"
          annotation (Dialog(group="HW loop and heat recovery chillers"),
            Evaluate=true);
        parameter Integer nPumHeaWat(final min=1, start=1) = nChiHea
          "Number of HW pumps operating at design conditions"
          annotation (Dialog(group="HW loop and heat recovery chillers"),
            Evaluate=true);
        final parameter Modelica.Units.SI.MassFlowRate mChiWatChiHea_flow_nominal=
          datChiHea.mEva_flow_nominal
          "Design HRC CHW mass flow rate (each unit)"
          annotation(Dialog(group="HW loop and heat recovery chillers"));
        parameter Modelica.Units.SI.MassFlowRate mChiWatChiHea_flow_min(
          final min=0)=0.6 * mChiWatChiHea_flow_nominal
          "HRC CHW minimum mass flow rate (each unit)"
          annotation(Dialog(group="HW loop and heat recovery chillers"));
        parameter Modelica.Units.SI.MassFlowRate mHeaWatChiHea_flow_min(
          final min=0)=0.6 * mConWatChiHea_flow_nominal
          "HRC HW minimum mass flow rate (each unit)"
          annotation(Dialog(group="HW loop and heat recovery chillers"));
        final parameter Modelica.Units.SI.MassFlowRate mConWatChiHea_flow_nominal=
          datChiHea.mCon_flow_nominal
          "Design HRC CW mass flow rate (each unit)"
          annotation(Dialog(group="HW loop and heat recovery chillers"));
        parameter Modelica.Units.SI.PressureDifference dpHeaWatSet_max(
          final min=0,
          displayUnit="Pa")
          "Design (maximum) HW differential pressure setpoint"
          annotation(Dialog(group="HW loop and heat recovery chillers"));
        parameter Modelica.Units.SI.PressureDifference dpEvaChiHea_nominal(
          final min=0,
          displayUnit="Pa")=5E4
          "Design evaporator  pressure drop (each unit)"
          annotation(Dialog(group="HW loop and heat recovery chillers"));
        parameter Modelica.Units.SI.PressureDifference dpConChiHea_nominal(
          final min=0,
          displayUnit="Pa")=5E4
          "Design condenser pressure drop (each unit)"
          annotation(Dialog(group="HW loop and heat recovery chillers"));

        parameter Modelica.Units.SI.PressureDifference dpPumHeaWat_nominal(
          final min=0,
          displayUnit="Pa")=1.1 * (dpHeaWatSet_max +
            dpConChiHea_nominal + max(chiHea.valCon.dpValve_nominal) +
            sum(chiHea.valConSwi.dpValve_nominal))
          "Design head of HW pump(each unit)"
          annotation(Dialog(group="HW loop and heat recovery chillers"));

        replaceable parameter
          Buildings.Fluid.Chillers.Data.ElectricReformulatedEIR.Generic datChiHea
          constrainedby Buildings.Fluid.Chillers.Data.BaseClasses.Chiller
          "HRC parameters (each unit)" annotation (Dialog(group=
                "HW loop and heat recovery chillers"), Placement(transformation(
                extent={{120,340},{140,360}})));

        final parameter Modelica.Units.SI.Temperature THeaWatSup_nominal=
          chiHea.THeaWatSup_nominal
          "Design (maximum) HW supply temperature"
          annotation (Dialog(group="HW loop and heat recovery chillers"));
        final parameter Modelica.Units.SI.Temperature THeaWatRet_nominal=
          THeaWatSup_nominal - QHeaWat_flow_nominal / mHeaWat_flow_nominal / cp_default
          "Design (minimum) HW return temperature"
          annotation (Dialog(group="HW loop and heat recovery chillers"));

        // TCasHeaEnt_nominal computed in second cycle of TES tank.
        final parameter Modelica.Units.SI.Temperature TCasHeaEnt_nominal=
          TTanSet[2, 2]
          "Design evaporator entering temperature in cascading heating mode"
          annotation(Evaluate=true);
        // TCasCooEnt_nominal computed in Heat Rejection mode.
        final parameter Modelica.Units.SI.Temperature TCasCooEnt_nominal=
          TConWatCooSup_nominal + dTHexCoo_nominal
          "Design condenser entering temperature in cascading cooling mode"
          annotation(Evaluate=true);
        final parameter Modelica.Units.SI.HeatFlowRate QHeaWat_flow_nominal=
          chiHea.QHeaWat_flow_nominal
          "Design heating heat flow rate (all units)"
          annotation (Dialog(group="HW loop and heat recovery chillers"));
        final parameter Modelica.Units.SI.MassFlowRate mHeaWat_flow_nominal=
          chiHea.mConWat_flow_nominal
          "Design HW mass flow rate (all units)"
          annotation (Dialog(group="HW loop and heat recovery chillers"));

        // CW loop, TES tank and heat pumps
        parameter Integer nHeaPum(final min=1, start=1)
          "Number of heat pumps operating at design conditions"
          annotation (Dialog(group="CW loop, TES tank and heat pumps"),
            Evaluate=true);
        parameter Integer nPumConWatCon(final min=1, start=1)=max(nChi, nChiHea)
          "Number of CW pumps serving condenser barrels at design conditions"
          annotation (Dialog(group="CW loop, TES tank and heat pumps"),
            Evaluate=true);
        parameter Integer nPumConWatEva(final min=1, start=1)=nChiHea
          "Number of CW pumps serving evaporator barrels at design conditions"
          annotation (Dialog(group="CW loop, TES tank and heat pumps"),
            Evaluate=true);
        parameter Modelica.Units.SI.PressureDifference dpConWatConSet_max(
          final min=0,
          displayUnit="Pa")=max(
           dpConChi_nominal + chi.valCon.dpValve_nominal,
           dpConChiHea_nominal + max(chiHea.valCon.dpValve_nominal) + sum(chiHea.valConSwi.dpValve_nominal))
          "Design (maximum) CW condenser loop differential pressure setpoint"
          annotation(Dialog(group="CW loop, TES tank and heat pumps"));
        parameter Modelica.Units.SI.PressureDifference dpConWatEvaSet_max(
          final min=0,
          displayUnit="Pa")=
          dpEvaChiHea_nominal + max(chiHea.valEva.dpValve_nominal) + sum(chiHea.valEvaSwi.dpValve_nominal)
          "Design (maximum) CW evaporator loop differential pressure setpoint"
          annotation(Dialog(group="CW loop, TES tank and heat pumps"));
        parameter Modelica.Units.SI.PressureDifference dpPumConWatCon_nominal(
          final min=0,
          displayUnit="Pa")=1.1 * (dpConWatConSet_max + max(dpHexCoo_nominal, dpTan_nominal))
          "Design head of CW pump serving condenser barrels (each unit)"
          annotation(Dialog(group="CW loop, TES tank and heat pumps"));
        parameter Modelica.Units.SI.PressureDifference dpPumConWatEva_nominal(
          final min=0,
          displayUnit="Pa")=1.1 * (dpConWatEvaSet_max + dpTan_nominal)
          "Design head of CW pump serving evaporator barrels (each unit)"
          annotation(Dialog(group="CW loop, TES tank and heat pumps"));
        final parameter Modelica.Units.SI.MassFlowRate mConWatCon_flow_nominal(
          final min=0)=chi.mConWat_flow_nominal + chiHea.mConWat_flow_nominal
          "Design total CW mass flow rate through condenser barrels (all units)";
        final parameter Modelica.Units.SI.MassFlowRate mConWatEva_flow_nominal(
          final min=0)=chiHea.mChiWat_flow_nominal
          "Design total CW mass flow rate through evaporator barrels (all units)"
          annotation(Dialog(group="CW loop, TES tank and heat pumps"));
        parameter Modelica.Units.SI.Volume VTan=
          -chiHea.QEvaCasHea_flow_nominal * 3 * 3600 / (max(TTanSet) - min(TTanSet)) /
          cp_default / rho_default
          "Tank volume"
          annotation(Dialog(group="CW loop, TES tank and heat pumps"));
        parameter Modelica.Units.SI.Length hTan = (16 * VTan / Modelica.Constants.pi)^(1/3)
          "Height of tank (without insulation)"
          annotation(Dialog(group="CW loop, TES tank and heat pumps"));
        // Default considering 1 m high thermmocline and 1 m high section below and above diffusers.
        // Thermocline only useless during last tank cycle, hence the scale factor.
        parameter Real fraUslTan(final unit="1", final min=0, final max=1, start=0.1) =
          ((max(TTanSet[2]) - min(TTanSet)) / (max(TTanSet) - min(TTanSet)) * 1 + 1) / hTan
          "Useless fraction of TES"
          annotation(Dialog(group="CW loop, TES tank and heat pumps"));
        parameter Modelica.Units.SI.Length dInsTan
          "Thickness of insulation"
          annotation(Dialog(group="CW loop, TES tank and heat pumps"));
        parameter Modelica.Units.SI.ThermalConductivity kInsTan=0.04
          "Specific heat conductivity of insulation"
          annotation(Dialog(group="CW loop, TES tank and heat pumps"));
        parameter Integer nSegTan(min=2) = 10
          "Number of volume segments"
          annotation(Dialog(group="CW loop, TES tank and heat pumps", tab="Advanced"));
        parameter Modelica.Units.SI.Temperature TTanSet[2, 2] = {
          {15 + 273.15, 25 + 273.15},
          {TChiWatSup_nominal, 15 + 273.15}}
          "Tank temperature setpoints: 2 cycles with 2 setpoints"
          annotation(Dialog(group="CW loop, TES tank and heat pumps"));
        // Default TES tank pressure drop without PSV, otherwise ~ 20E3
        parameter Modelica.Units.SI.PressureDifference dpTan_nominal(displayUnit="Pa")=1E3
          "Design pressure drop through TES tank"
          annotation (Dialog(group="CW loop, TES tank and heat pumps"));
        replaceable parameter
          Buildings.Fluid.HeatPumps.Data.EquationFitReversible.Generic datHeaPum
          "Heat pump parameters (each unit)" annotation (Dialog(group=
                "CW loop, TES tank and heat pumps"), Placement(transformation(
                extent={{160,340},{180,360}})));

        // Cooling tower loop
        parameter Integer nCoo(final min=1, start=1)
          "Number of cooling tower cells operating at design conditions"
          annotation (Dialog(group="Cooling tower loop"),
            Evaluate=true);
        parameter Modelica.Units.SI.MassFlowRate mConWatCoo_flow_nominal(
          final min=0)=mConWatCon_flow_nominal
          "Design CT CW mass flow rate (all units)"
          annotation(Dialog(group="Cooling tower loop"));
        parameter Modelica.Units.SI.PressureDifference dpConWatCooFri_nominal(
          displayUnit="Pa",
          start=1E4,
          final min=0)
          "Design CW flow-friction losses through tower and piping only (without elevation head or valve)"
          annotation (Dialog(group="Cooling tower loop"));
        parameter Modelica.Units.SI.MassFlowRate mAirCooUni_flow_nominal(
          final min=0,
          start=mConWatCoo_flow_nominal / nCoo / 1.45)
          "Design CT air mass flow rate (each unit)"
          annotation (Dialog(group="Cooling tower loop"));
        parameter Modelica.Units.SI.Temperature TWetBulCooEnt_nominal(
          final min=273.15)
          "Design CT entering air wetbulb temperature"
          annotation (Dialog(group="Cooling tower loop"));
        parameter Modelica.Units.SI.Temperature TConWatCooRet_nominal(
          final min=273.15)=TConWatCooSup_nominal +
          abs(QHexCoo_flow_nominal) / mConWatCoo_flow_nominal / cpConWatCoo_default
          "Design CT CW return temperature (tower entering)"
          annotation (Dialog(group="Cooling tower loop"));
        parameter Modelica.Units.SI.Temperature TConWatCooSup_nominal(
          final min=273.15)=TWetBulCooEnt_nominal + 3
          "Design CT CW supply temperature (tower leaving)"
          annotation (Dialog(group="Cooling tower loop"));
        parameter Modelica.Units.SI.Power PFanCoo_nominal(
          final min=0,
          start=340 * mConWatCoo_flow_nominal / nCoo)
          "CT fan power (each unit)"
          annotation (Dialog(group="Cooling tower loop"));

        parameter Integer nPumConWatCoo(final min=1, start=1)=nCoo
          "Number of CW pumps serving cooling towers at design conditions"
          annotation (Dialog(group="Cooling tower loop"),
            Evaluate=true);
        parameter Modelica.Units.SI.PressureDifference dpPumConWatCoo_nominal=
          1.1 * (dpHexCoo_nominal + dpConWatCooFri_nominal)
          "Design head of CW pump serving cooling towers (each unit)"
          annotation (Dialog(group="Cooling tower loop"));

        parameter Modelica.Units.SI.TemperatureDifference dTHexCoo_nominal=2
          "Design heat exchanger approach"
          annotation (Dialog(group="Cooling tower loop"));
        parameter Modelica.Units.SI.PressureDifference dpHexCoo_nominal=3E4
          "Design pressure drop through heat exchanger (same on both sides)"
          annotation (Dialog(group="Cooling tower loop"));

        // HX sized with all HRCs in cascading cooling mode.
        parameter Modelica.Units.SI.HeatFlowRate QHexCoo_flow_nominal=
          -(chi.QConWat_flow_nominal + chiHea.QConCasCoo_flow_nominal)
          "Design cooling heat flow rate of heat exchanger (<0)"
          annotation (Dialog(group="Cooling tower loop"));

        // Assumptions
        parameter Modelica.Fluid.Types.Dynamics energyDynamics=
          Modelica.Fluid.Types.Dynamics.DynamicFreeInitial
          "Type of energy balance: dynamic (3 initialization options) or steady state"
          annotation(Evaluate=true, Dialog(tab = "Dynamics", group="Conservation equations"));
        parameter Boolean use_inputFilter=energyDynamics<>Modelica.Fluid.Types.Dynamics.SteadyState
          "= true, if control signal is filtered with a 2nd order CriticalDamping filter"
          annotation(Dialog(tab="Dynamics", group="Filtered signal for actuators and movers"));

        // Outside connectors
        Buildings.Controls.OBC.CDL.Interfaces.BooleanInput u1Coo
          "Cooling enable signal"
          annotation (Placement(transformation(extent={{-420,260},{-380,300}}),
              iconTransformation(extent={{-380,240},{-300,320}})));
        Buildings.Controls.OBC.CDL.Interfaces.BooleanInput u1Hea
          "Heating enable signal"
          annotation (Placement(transformation(extent={{-420,240},{-380,280}}),
              iconTransformation(extent={{-380,200},{-300,280}})));
        Buildings.Controls.OBC.CDL.Interfaces.RealInput TChiWatSupSet(
          final unit="K",
          displayUnit="degC")
          "CHW supply temperature setpoint"
          annotation (Placement(transformation(extent={{-420,200},{-380,240}}),
              iconTransformation(extent={{-380,160},{-300,240}})));
        Buildings.Controls.OBC.CDL.Interfaces.RealInput dpChiWatSet(
          final unit="Pa",
          final min=0)
          "CHW differential pressure setpoint (for local dp sensor)"
          annotation (Placement(transformation(extent={{-420,140},{-380,180}}),
              iconTransformation(extent={{-380,80},{-300,160}})));
        Buildings.Controls.OBC.CDL.Interfaces.RealInput THeaWatSupSet(
          final unit="K",
          displayUnit="degC")
          "HW supply temperature setpoint"
          annotation (Placement(transformation(extent={{-420,180},{-380,220}}),
              iconTransformation(extent={{-380,120},{-300,200}})));
        Buildings.Controls.OBC.CDL.Interfaces.RealInput dpHeaWatSet(
          final unit="Pa",
          final min=0)
          "HW differential pressure setpoint (for local dp sensor)"
          annotation (Placement(transformation(extent={{-420,120},{-380,160}}),
              iconTransformation(extent={{-380,40},{-300,120}})));

        // Components - CHW loop and cooling-only chillers
        Subsystems.ChillerGroup chi(
          redeclare final package Medium1=Medium,
          redeclare final package Medium2=Medium,
          final dat=datChi,
          final nUni=nChi,
          final dpEva_nominal=dpEvaChi_nominal,
          final dpCon_nominal=dpConChi_nominal,
          final energyDynamics=energyDynamics,
          final use_inputFilter=use_inputFilter,
          final allowFlowReversal1=allowFlowReversal,
          final allowFlowReversal2=allowFlowReversal)
          "Cooling-only chillers"
          annotation (Placement(transformation(extent={{50,76},{70,96}})));
        Subsystems.MultiplePumpsSpeed pumChiWat(
          redeclare final package Medium=Medium,
          final nPum=nPumChiWat,
          final have_var=true,
          final have_valve=true,
          final mPum_flow_nominal=mChiWat_flow_nominal / nPumChiWat,
          final dpPum_nominal=dpPumChiWat_nominal,
          final energyDynamics=energyDynamics,
          final use_inputFilter=use_inputFilter,
          final allowFlowReversal=allowFlowReversal)
          "Primary CHW pumps"
          annotation (Placement(transformation(extent={{170,190},{190,210}})));
        Buildings.Fluid.FixedResistances.Junction junChiWatSup(
          redeclare final package Medium = Medium,
          final m_flow_nominal=mChiWat_flow_nominal*{1,-1,-1},
          final dp_nominal=fill(0, 3),
          final energyDynamics=energyDynamics,
          final portFlowDirection_1=if allowFlowReversal then Modelica.Fluid.Types.PortFlowDirection.Bidirectional
               else Modelica.Fluid.Types.PortFlowDirection.Entering,
          final portFlowDirection_2=if allowFlowReversal then Modelica.Fluid.Types.PortFlowDirection.Bidirectional
               else Modelica.Fluid.Types.PortFlowDirection.Leaving,
          final portFlowDirection_3=if allowFlowReversal then Modelica.Fluid.Types.PortFlowDirection.Bidirectional
               else Modelica.Fluid.Types.PortFlowDirection.Leaving)
          "Fluid junction" annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={240,200})));
        Buildings.Fluid.FixedResistances.Junction junChiWatRet(
          redeclare final package Medium = Medium,
          final m_flow_nominal=mChiWat_flow_nominal*{1,-1,1},
          final dp_nominal=fill(0, 3),
          final energyDynamics=energyDynamics,
          final portFlowDirection_1=if allowFlowReversal then Modelica.Fluid.Types.PortFlowDirection.Bidirectional
               else Modelica.Fluid.Types.PortFlowDirection.Entering,
          final portFlowDirection_2=if allowFlowReversal then Modelica.Fluid.Types.PortFlowDirection.Bidirectional
               else Modelica.Fluid.Types.PortFlowDirection.Leaving,
          final portFlowDirection_3=if allowFlowReversal then Modelica.Fluid.Types.PortFlowDirection.Bidirectional
               else Modelica.Fluid.Types.PortFlowDirection.Entering)
          "Fluid junction" annotation (Placement(transformation(
              extent={{10,10},{-10,-10}},
              rotation=0,
              origin={240,80})));
        Buildings.Fluid.FixedResistances.Junction junChiWatChiHeaRet(
          redeclare final package Medium = Medium,
          final m_flow_nominal=mChiWat_flow_nominal*{1,-1,-1},
          final dp_nominal=fill(0, 3),
          final energyDynamics=energyDynamics,
          final portFlowDirection_1=if allowFlowReversal then Modelica.Fluid.Types.PortFlowDirection.Bidirectional
               else Modelica.Fluid.Types.PortFlowDirection.Entering,
          final portFlowDirection_2=if allowFlowReversal then Modelica.Fluid.Types.PortFlowDirection.Bidirectional
               else Modelica.Fluid.Types.PortFlowDirection.Leaving,
          final portFlowDirection_3=if allowFlowReversal then Modelica.Fluid.Types.PortFlowDirection.Bidirectional
               else Modelica.Fluid.Types.PortFlowDirection.Leaving)
          "Fluid junction" annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=0,
              origin={120,80})));
        Buildings.Fluid.FixedResistances.Junction junChiWatChiHeaSup(
          redeclare final package Medium = Medium,
          final m_flow_nominal=mChiWat_flow_nominal*{1,-1,1},
          final dp_nominal=fill(0, 3),
          final energyDynamics=energyDynamics,
          final portFlowDirection_1=if allowFlowReversal then Modelica.Fluid.Types.PortFlowDirection.Bidirectional
               else Modelica.Fluid.Types.PortFlowDirection.Entering,
          final portFlowDirection_2=if allowFlowReversal then Modelica.Fluid.Types.PortFlowDirection.Bidirectional
               else Modelica.Fluid.Types.PortFlowDirection.Leaving,
          final portFlowDirection_3=if allowFlowReversal then Modelica.Fluid.Types.PortFlowDirection.Bidirectional
               else Modelica.Fluid.Types.PortFlowDirection.Entering)
          "Fluid junction" annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={140,200})));
        // PICV model sized at design flow (instead of minimum flow) for convenience.
        Buildings.Fluid.Actuators.Valves.TwoWayLinear valChiWatMinByp(
          redeclare final package Medium = Medium,
          final m_flow_nominal=max(mChiWatChi_flow_min, mChiWatChiHea_flow_min),

          from_dp=true,
          linearized=true,
          dpValve_nominal=1E3,
          final use_inputFilter=use_inputFilter,
          final allowFlowReversal=allowFlowReversal)
          "CHW minimum flow bypass valve" annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=-90,
              origin={240,140})));
        Buildings.Fluid.Sensors.RelativePressure dpChiWat(redeclare final
            package Medium = Medium)
          "CHW differential pressure (local sensor hardwired to plant controller)"
          annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=-90,
              origin={300,140})));
        Buildings.Fluid.Sensors.TemperatureTwoPort TChiWatPriRet(
          redeclare final package Medium = Medium,
          final m_flow_nominal=mChiWat_flow_nominal,
          final allowFlowReversal=allowFlowReversal)
          "Primary CHW return temperature" annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=0,
              origin={220,80})));
        Buildings.Fluid.Sensors.MassFlowRate mChiWatPri_flow(redeclare final
            package Medium = Medium, final allowFlowReversal=allowFlowReversal)
          "Primary CHW mass flow rate" annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=0,
              origin={180,80})));
        Buildings.Fluid.Sensors.TemperatureTwoPort TChiWatSup(
          redeclare final package Medium = Medium,
          final m_flow_nominal=mChiWat_flow_nominal,
          final allowFlowReversal=allowFlowReversal) "CHW supply temperature"
          annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={210,200})));

        // Components - HW loop and heat recovery chillers
        Subsystems.ChillerHeatRecoveryGroup chiHea(
          redeclare final package Medium = Medium,
          final dat=datChiHea,
          final nUni=nChiHea,
          final TCasCooEnt_nominal=TCasCooEnt_nominal,
          final TCasHeaEnt_nominal=TCasHeaEnt_nominal,
          final dpEva_nominal=dpEvaChiHea_nominal,
          final dpCon_nominal=dpConChiHea_nominal,
          final allowFlowReversal=allowFlowReversal,
          final use_inputFilter=use_inputFilter,
          final energyDynamics=energyDynamics)
          "Heat recovery chillers"
          annotation (Placement(transformation(extent={{50,-158},{70,-138}})));

        Subsystems.MultiplePumpsSpeed pumHeaWat(
          redeclare final package Medium=Medium,
          final nPum=nPumHeaWat,
          final have_var=true,
          final have_valve=true,
          final mPum_flow_nominal=mHeaWat_flow_nominal/nPumHeaWat,
          final dpPum_nominal=dpPumHeaWat_nominal,
          final energyDynamics=energyDynamics,
          final use_inputFilter=use_inputFilter,
          final allowFlowReversal=allowFlowReversal)
          "Primary HW pumps"
          annotation (Placement(transformation(extent={{170,-150},{190,-130}})));
        Buildings.Fluid.FixedResistances.Junction junHeaWatSup(
          redeclare final package Medium = Medium,
          final m_flow_nominal=mHeaWat_flow_nominal*{1,-1,-1},
          final dp_nominal=fill(0, 3),
          final energyDynamics=energyDynamics,
          final portFlowDirection_1=if allowFlowReversal then Modelica.Fluid.Types.PortFlowDirection.Bidirectional
               else Modelica.Fluid.Types.PortFlowDirection.Entering,
          final portFlowDirection_2=if allowFlowReversal then Modelica.Fluid.Types.PortFlowDirection.Bidirectional
               else Modelica.Fluid.Types.PortFlowDirection.Leaving,
          final portFlowDirection_3=if allowFlowReversal then Modelica.Fluid.Types.PortFlowDirection.Bidirectional
               else Modelica.Fluid.Types.PortFlowDirection.Leaving)
          "Fluid junction" annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={240,-140})));
        Buildings.Fluid.FixedResistances.Junction junHeaWatRet(
          redeclare final package Medium = Medium,
          final m_flow_nominal=mHeaWat_flow_nominal*{1,-1,1},
          final dp_nominal=fill(0, 3),
          final energyDynamics=energyDynamics,
          final portFlowDirection_1=if allowFlowReversal then Modelica.Fluid.Types.PortFlowDirection.Bidirectional
               else Modelica.Fluid.Types.PortFlowDirection.Entering,
          final portFlowDirection_2=if allowFlowReversal then Modelica.Fluid.Types.PortFlowDirection.Bidirectional
               else Modelica.Fluid.Types.PortFlowDirection.Leaving,
          final portFlowDirection_3=if allowFlowReversal then Modelica.Fluid.Types.PortFlowDirection.Bidirectional
               else Modelica.Fluid.Types.PortFlowDirection.Entering)
          "Fluid junction" annotation (Placement(transformation(
              extent={{10,10},{-10,-10}},
              rotation=0,
              origin={240,-260})));
        // PICV model sized at design flow (instead of minimum flow) for convenience.
        Buildings.Fluid.Actuators.Valves.TwoWayLinear valHeaWatMinByp(
          redeclare final package Medium = Medium,
          final m_flow_nominal=mHeaWatChiHea_flow_min,
          from_dp=true,
          linearized=true,
          dpValve_nominal=1E3,
          final use_inputFilter=use_inputFilter,
          final allowFlowReversal=allowFlowReversal)
          "HW minimum flow bypass valve" annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=-90,
              origin={240,-200})));
        Buildings.Fluid.Sensors.RelativePressure dpHeaWat(redeclare final
            package Medium = Medium)
          "HW differential pressure (local sensor hardwired to plant controller)"
          annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=-90,
              origin={300,-200})));
        Buildings.Fluid.Sensors.TemperatureTwoPort THeaWatPriRet(
          redeclare final package Medium = Medium,
          final m_flow_nominal=mHeaWat_flow_nominal,
          final allowFlowReversal=allowFlowReversal)
          "Primary HW return temperature" annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=0,
              origin={200,-260})));
        Buildings.Fluid.Sensors.TemperatureTwoPort THeaWatSup(
          redeclare final package Medium = Medium,
          final m_flow_nominal=mHeaWat_flow_nominal,
          final allowFlowReversal=allowFlowReversal) "HW supply temperature"
          annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={210,-140})));
        Buildings.Fluid.Sensors.MassFlowRate mHeaWatPri_flow(redeclare final
            package Medium = Medium, final allowFlowReversal=allowFlowReversal)
          "Primary HW mass flow rate" annotation (Placement(transformation(
              extent={{10,10},{-10,-10}},
              rotation=0,
              origin={180,-260})));

        // Components - CW loop and heat pumps
        Subsystems.MultiplePumpsSpeed pumConWatCon(
          redeclare final package Medium = Medium,
          final nPum=nPumConWatCon,
          final have_var=true,
          final have_valve=true,
          final mPum_flow_nominal=mConWatCon_flow_nominal / nPumConWatCon,
          final dpPum_nominal=dpPumConWatCon_nominal,
          final energyDynamics=energyDynamics,
          final use_inputFilter=use_inputFilter,
          final allowFlowReversal=allowFlowReversal)
          "CW pumps serving condenser barrels"
          annotation (Placement(transformation(extent={{-90,-350},{-70,-330}})));
        Subsystems.MultiplePumpsSpeed pumConWatEva(
          redeclare final package Medium = Medium,
          final nPum=nPumConWatEva,
          final have_var=true,
          final have_valve=true,
          final mPum_flow_nominal=mConWatEva_flow_nominal / nPumConWatEva,
          final dpPum_nominal=dpPumConWatEva_nominal,
          final energyDynamics=energyDynamics,
          final use_inputFilter=use_inputFilter,
          final allowFlowReversal=allowFlowReversal)
          "CW pumps serving evaporator barrels"
          annotation (Placement(transformation(extent={{-80,-50},{-60,-30}})));
        Buildings.Fluid.FixedResistances.Junction junConWatEnt(
          redeclare final package Medium = Medium,
          final m_flow_nominal=mConWatCon_flow_nominal*{1,-1,-1},
          final dp_nominal=fill(0, 3),
          final energyDynamics=energyDynamics,
          final portFlowDirection_1=if allowFlowReversal then Modelica.Fluid.Types.PortFlowDirection.Bidirectional
               else Modelica.Fluid.Types.PortFlowDirection.Entering,
          final portFlowDirection_2=if allowFlowReversal then Modelica.Fluid.Types.PortFlowDirection.Bidirectional
               else Modelica.Fluid.Types.PortFlowDirection.Leaving,
          final portFlowDirection_3=if allowFlowReversal then Modelica.Fluid.Types.PortFlowDirection.Bidirectional
               else Modelica.Fluid.Types.PortFlowDirection.Leaving)
          "Fluid junction" annotation (Placement(transformation(
              extent={{-10,10},{10,-10}},
              rotation=0,
              origin={20,-340})));
        Buildings.Fluid.Storage.Stratified tan(
          redeclare final package Medium = Medium,
          final m_flow_nominal=mConWatCon_flow_nominal,
          final VTan=VTan,
          final hTan=hTan,
          final dIns=dInsTan,
          final kIns=kInsTan,
          final nSeg=nSegTan) "TES tank" annotation (Placement(transformation(
                extent={{-130,-190},{-110,-170}})));
        Buildings.Fluid.Sources.Boundary_pT bouConWat(
          redeclare final package Medium = Medium,
          final p=hTan*rho_default*Modelica.Constants.g_n,
          final nPorts=1)
          "CW pressure boundary condition prescribed by tank operating level"
          annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=-90,
              origin={-110,-210})));
        Buildings.Fluid.FixedResistances.Junction junConWatTanEnt(
          redeclare final package Medium = Medium,
          final m_flow_nominal=mConWatCon_flow_nominal*{1,-1,-1},
          final dp_nominal=fill(0, 3),
          final energyDynamics=energyDynamics,
          final portFlowDirection_1=if allowFlowReversal then Modelica.Fluid.Types.PortFlowDirection.Bidirectional
               else Modelica.Fluid.Types.PortFlowDirection.Entering,
          final portFlowDirection_2=if allowFlowReversal then Modelica.Fluid.Types.PortFlowDirection.Bidirectional
               else Modelica.Fluid.Types.PortFlowDirection.Leaving,
          final portFlowDirection_3=Modelica.Fluid.Types.PortFlowDirection.Bidirectional)
          "Fluid junction" annotation (Placement(transformation(
              extent={{-10,10},{10,-10}},
              rotation=-90,
              origin={-160,-40})));
        Buildings.Fluid.FixedResistances.Junction junConWatLvg(
          redeclare final package Medium = Medium,
          final m_flow_nominal=mConWatCon_flow_nominal*{1,-1,1},
          final dp_nominal=fill(0, 3),
          final energyDynamics=energyDynamics,
          final portFlowDirection_1=if allowFlowReversal then Modelica.Fluid.Types.PortFlowDirection.Bidirectional
               else Modelica.Fluid.Types.PortFlowDirection.Entering,
          final portFlowDirection_2=if allowFlowReversal then Modelica.Fluid.Types.PortFlowDirection.Bidirectional
               else Modelica.Fluid.Types.PortFlowDirection.Leaving,
          final portFlowDirection_3=if allowFlowReversal then Modelica.Fluid.Types.PortFlowDirection.Bidirectional
               else Modelica.Fluid.Types.PortFlowDirection.Entering)
          "Fluid junction" annotation (Placement(transformation(
              extent={{10,10},{-10,-10}},
              rotation=0,
              origin={80,40})));
        Modelica.Thermal.HeatTransfer.Sensors.TemperatureSensor TTan[nSegTan](
          T(each displayUnit="degC"))
          "TES tank temperature sensor gateway"
          annotation (Placement(transformation(
              extent={{-10,10},{10,-10}},
              rotation=90,
              origin={-120,-140})));
        Buildings.HeatTransfer.Sources.PrescribedTemperature out
          "Outdoor temperature" annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=-90,
              origin={-100,-140})));
        Buildings.Fluid.FixedResistances.Junction junConWatHeaPumEnt(
          redeclare final package Medium = Medium,
          final m_flow_nominal=mConWatCon_flow_nominal*{1,-1,-1},
          final dp_nominal=fill(0, 3),
          final energyDynamics=energyDynamics,
          final portFlowDirection_1=if allowFlowReversal then Modelica.Fluid.Types.PortFlowDirection.Bidirectional
               else Modelica.Fluid.Types.PortFlowDirection.Entering,
          final portFlowDirection_2=if allowFlowReversal then Modelica.Fluid.Types.PortFlowDirection.Bidirectional
               else Modelica.Fluid.Types.PortFlowDirection.Leaving,
          final portFlowDirection_3=if allowFlowReversal then Modelica.Fluid.Types.PortFlowDirection.Bidirectional
               else Modelica.Fluid.Types.PortFlowDirection.Leaving)
          "Fluid junction" annotation (Placement(transformation(
              extent={{10,10},{-10,-10}},
              rotation=0,
              origin={-80,40})));
        Buildings.Fluid.FixedResistances.Junction junConWatHeaPumLvg(
          redeclare final package Medium = Medium,
          final m_flow_nominal=mConWatCon_flow_nominal*{1,-1,1},
          final dp_nominal=fill(0, 3),
          final energyDynamics=energyDynamics,
          final portFlowDirection_1=if allowFlowReversal then Modelica.Fluid.Types.PortFlowDirection.Bidirectional
               else Modelica.Fluid.Types.PortFlowDirection.Entering,
          final portFlowDirection_2=if allowFlowReversal then Modelica.Fluid.Types.PortFlowDirection.Bidirectional
               else Modelica.Fluid.Types.PortFlowDirection.Leaving,
          final portFlowDirection_3=if allowFlowReversal then Modelica.Fluid.Types.PortFlowDirection.Bidirectional
               else Modelica.Fluid.Types.PortFlowDirection.Entering)
          "Fluid junction" annotation (Placement(transformation(
              extent={{10,10},{-10,-10}},
              rotation=0,
              origin={-120,40})));
        Subsystems.HeatPumpGroup heaPum(
          redeclare final package Medium = Medium,
          redeclare final package MediumAir = MediumAir,
          final nUni=nHeaPum,
          final dat=datHeaPum,
          final energyDynamics=energyDynamics,
          final use_inputFilter=use_inputFilter,
          final allowFlowReversal=allowFlowReversal)
          "Heat pumps"
          annotation (Placement(transformation(extent={{-90,150},{-110,170}})));
        Buildings.Fluid.FixedResistances.Junction junConWatTanLvg(
          redeclare final package Medium = Medium,
          final m_flow_nominal=mConWatCon_flow_nominal*{1,-1,1},
          final dp_nominal=fill(0, 3),
          final energyDynamics=energyDynamics,
          final portFlowDirection_1=if allowFlowReversal then Modelica.Fluid.Types.PortFlowDirection.Bidirectional
               else Modelica.Fluid.Types.PortFlowDirection.Entering,
          final portFlowDirection_2=if allowFlowReversal then Modelica.Fluid.Types.PortFlowDirection.Bidirectional
               else Modelica.Fluid.Types.PortFlowDirection.Leaving,
          final portFlowDirection_3=if allowFlowReversal then Modelica.Fluid.Types.PortFlowDirection.Bidirectional
               else Modelica.Fluid.Types.PortFlowDirection.Entering)
          "Fluid junction" annotation (Placement(transformation(
              extent={{-10,10},{10,-10}},
              rotation=-90,
              origin={-120,-280})));
        Buildings.Fluid.HeatExchangers.PlateHeatExchangerEffectivenessNTU hexCoo(
          redeclare final package Medium1 = MediumConWatCoo,
          redeclare final package Medium2 = Medium,
          final m1_flow_nominal=mConWatCoo_flow_nominal,
          final m2_flow_nominal=mConWatCon_flow_nominal,
          final dp1_nominal=0,
          final dp2_nominal=0,
          final Q_flow_nominal=QHexCoo_flow_nominal,
          final T_a1_nominal=TConWatCooSup_nominal,
          final T_a2_nominal=TConWatCooRet_nominal + dTHexCoo_nominal,
          final allowFlowReversal1=allowFlowReversal,
          final allowFlowReversal2=allowFlowReversal,
          final configuration=Buildings.Fluid.Types.HeatExchangerConfiguration.CounterFlow)
          "Heat exchanger with cooling tower circuit" annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={-206,-170})));
        Subsystems.CoolingTowerGroup coo(
          redeclare final package Medium=Medium,
          final nUni=nCoo,
          final mConWatUni_flow_nominal=mConWatCoo_flow_nominal / nCoo,
          final dpConWatFriUni_nominal=dpConWatCooFri_nominal + dpHexCoo_nominal,
          final mAirUni_flow_nominal=mAirCooUni_flow_nominal,
          final TWetBulEnt_nominal=TWetBulCooEnt_nominal,
          final TConWatRet_nominal=TConWatCooRet_nominal,
          final TConWatSup_nominal=TConWatCooSup_nominal,
          final PFanUni_nominal=PFanCoo_nominal,
          final energyDynamics=energyDynamics,
          final allowFlowReversal=allowFlowReversal)
          "Cooling towers"
          annotation (Placement(transformation(extent={{-250,-90},{-270,-70}})));
        Buildings.Fluid.Actuators.Valves.ThreeWayLinear valBypTan(
          redeclare final package Medium = Medium,
          final m_flow_nominal=mConWatCon_flow_nominal,
          final energyDynamics=energyDynamics,
          dpValve_nominal=1E3,
          dpFixed_nominal={dpTan_nominal,dpHexCoo_nominal})
          "TES tank bypass valve" annotation (Placement(transformation(
              extent={{-10,10},{10,-10}},
              rotation=90,
              origin={-160,-100})));
        Buildings.Fluid.Sources.Boundary_pT bouConWatCoo(
          redeclare final package Medium = Medium,
          final p=130000,
          nPorts=1)
          "CW pressure boundary condition prescribed by CT elevation head"
          annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=-90,
              origin={-300,-250})));
        Subsystems.MultiplePumpsSpeed pumConWatCoo(
          redeclare final package Medium = Medium,
          final nPum=nPumConWatCoo,
          final have_var=true,
          have_valve=false,
          final mPum_flow_nominal=mConWatCoo_flow_nominal / nPumConWatCoo,
          final dpPum_nominal=dpPumConWatCoo_nominal,
          final energyDynamics=energyDynamics,
          final allowFlowReversal=allowFlowReversal) "Cooling tower pumps"
          annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={-250,-220})));
        Buildings.Fluid.Sensors.TemperatureTwoPort TConWatEvaEnt(
          redeclare final package Medium = Medium,
          final m_flow_nominal=mConWatEva_flow_nominal,
          final allowFlowReversal=allowFlowReversal)
          "HRC evaporator entering CW temperature" annotation (Placement(
              transformation(
              extent={{-10,10},{10,-10}},
              rotation=-90,
              origin={80,-60})));

        // Controls
        estcp.DHC.Plants.Combined.Controls.Controller ctl(
          final nChi=nChi,
          final nPumChiWat=nPumChiWat,
          final QHeaPum_flow_nominal=datHeaPum.hea.Q_flow*nHeaPum,
          final dTLifChi_min=dTLifChi_min,
          final dTLifChi_nominal=dTLifChi_nominal,
          final nChiHea=nChiHea,
          final nPumHeaWat=nPumHeaWat,
          final nHeaPum=nHeaPum,
          final nPumConWatCon=nPumConWatCon,
          final nPumConWatEva=nPumConWatEva,
          final TTanSet=TTanSet,
          final nCoo=nCoo,
          final nPumConWatCoo=nPumConWatCoo,
          final THeaWatSup_nominal=THeaWatSup_nominal,
          final TChiWatSup_nominal=TChiWatSup_nominal,
          final mChiWat_flow_nominal=mChiWat_flow_nominal,
          final mHeaWat_flow_nominal=mHeaWat_flow_nominal,
          final mConWatCon_flow_nominal=mConWatCon_flow_nominal,
          final mConWatEva_flow_nominal=mConWatEva_flow_nominal,
          final mChiWatChi_flow_nominal=mChiWatChi_flow_nominal,
          final mChiWatChi_flow_min=mChiWatChi_flow_min,
          final mConWatChi_flow_nominal=mConWatChi_flow_nominal,
          final mChiWatChiHea_flow_nominal=mChiWatChiHea_flow_nominal,
          final mChiWatChiHea_flow_min=mChiWatChiHea_flow_min,
          final mConWatChiHea_flow_nominal=mConWatChiHea_flow_nominal,
          final mHeaWatChiHea_flow_min=mHeaWatChiHea_flow_min,
          final dpChiWatSet_max=dpChiWatSet_max,
          final dpHeaWatSet_max=dpHeaWatSet_max,
          final dpConWatConSet_max=dpConWatConSet_max,
          final dpConWatEvaSet_max=dpConWatEvaSet_max,
          final dpEvaChi_nominal=dpEvaChi_nominal,
          final dpValEvaChi_nominal=chi.valEva.dpValve_nominal,
          final dpEvaChiHea_nominal=dpEvaChiHea_nominal,
          final dpValEvaChiHea_nominal=max(chiHea.valEva.dpValve_nominal),
          final QChiWatChi_flow_nominal=chi.QChiWat_flow_nominal,
          final QChiWatCasCoo_flow_nominal=chiHea.QChiWatCasCoo_flow_nominal,
          final QChiWatCasCoo_flow_nominal_approx=chiHea.QChiWat_flow_nominal,
          final QHeaWat_flow_nominal=QHeaWat_flow_nominal,
          final cp_default=cp_default,
          final fraUslTan=fraUslTan,
          final dTHexCoo_nominal=dTHexCoo_nominal,
          final nTTan=nSegTan) "Controller" annotation (Placement(
              transformation(extent={{-342,246},{-298,322}})));

        // Miscellaneous
        Modelica.Blocks.Sources.RealExpression sumPHea(
          final y=heaPum.P + sum({
            if ctl.y1CooChiHea[i] or ctl.y1HeaCooChiHea[i] then 0 else chiHea.chi[i].P
            for i in 1:nChiHea}))
          "Sum up power drawn from all subsystems"
          annotation (Placement(transformation(extent={{340,270},{360,290}})));
        Modelica.Blocks.Sources.RealExpression sumPCoo(
          final y=chi.P + sum({
            if ctl.y1CooChiHea[i] or ctl.y1HeaCooChiHea[i] then chiHea.chi[i].P else 0
            for i in 1:nChiHea}))
          "Sum up power drawn from all subsystems"
          annotation (Placement(transformation(extent={{340,230},{360,250}})));
        Modelica.Blocks.Sources.RealExpression sumPFan(y=coo.P)
          "Sum up power drawn from all subsystems"
          annotation (Placement(transformation(extent={{340,190},{360,210}})));
        Modelica.Blocks.Sources.RealExpression sumPPum(
          final y=pumChiWat.P + pumHeaWat.P + pumConWatCon.P + pumConWatEva.P + pumConWatCoo.P + heaPum.PPum)
          "Sum up power drawn from all subsystems"
          annotation (Placement(transformation(extent={{340,150},{360,170}})));

        Buildings.Fluid.Sensors.RelativePressure dpConWatEva(redeclare final
            package Medium = Medium)
          "CW evaporator loop differential pressure " annotation (Placement(
              transformation(
              extent={{-10,10},{10,-10}},
              rotation=-90,
              origin={0,-70})));
        Buildings.Fluid.Sensors.RelativePressure dpConWatCon(redeclare final
            package Medium = Medium) "CW condenser loop differential pressure "
          annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=-90,
              origin={-20,-310})));
        Buildings.Fluid.Sensors.MassFlowRate mConWatEva_flow(redeclare final
            package Medium = Medium, final allowFlowReversal=allowFlowReversal)
          "CW evaporator loop mass flow rate" annotation (Placement(
              transformation(extent={{40,-50},{60,-30}}, rotation=0)));
        Buildings.Fluid.Sensors.MassFlowRate mConWatCon_flow(redeclare final
            package Medium = Medium, final allowFlowReversal=allowFlowReversal)
          "CW condenser loop mass flow rate" annotation (Placement(
              transformation(
              extent={{-10,10},{10,-10}},
              rotation=-90,
              origin={-120,-320})));
        Buildings.Fluid.Sensors.MassFlowRate mConWatOutTan_flow(redeclare
            final package Medium = Medium, final allowFlowReversal=
              allowFlowReversal)
          "Mass flow rate out of lower port of TES tank (>0 when charging)"
          annotation (Placement(transformation(
              extent={{-10,10},{10,-10}},
              rotation=-90,
              origin={-80,-240})));
        Buildings.Fluid.Sensors.TemperatureTwoPort TConWatConChiLvg(
          redeclare final package Medium = Medium,
          final m_flow_nominal=mConWatCon_flow_nominal,
          final allowFlowReversal=allowFlowReversal)
          "Chiller and HRC leaving CW temperature" annotation (Placement(
              transformation(
              extent={{10,-10},{-10,10}},
              rotation=0,
              origin={-50,40})));
        Buildings.Fluid.Sensors.TemperatureTwoPort TConWatConChiEnt(
          redeclare final package Medium = Medium,
          final m_flow_nominal=mConWatCon_flow_nominal,
          final allowFlowReversal=allowFlowReversal)
          "Chiller and HRC entering CW temperature" annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={0,-340})));
        Buildings.Fluid.Sensors.TemperatureTwoPort TConWatCooSup(
          redeclare final package Medium = MediumConWatCoo,
          final m_flow_nominal=mConWatCoo_flow_nominal,
          final allowFlowReversal=allowFlowReversal)
          "Cooling tower loop CW supply temperature" annotation (Placement(
              transformation(
              extent={{10,10},{-10,-10}},
              rotation=-90,
              origin={-212,-204})));
        Buildings.Fluid.Sensors.TemperatureTwoPort TConWatCooRet(
          redeclare final package Medium = MediumConWatCoo,
          final m_flow_nominal=mConWatCoo_flow_nominal,
          final allowFlowReversal=allowFlowReversal)
          "Cooling tower loop CW return temperature" annotation (Placement(
              transformation(
              extent={{10,10},{-10,-10}},
              rotation=-90,
              origin={-212,-136})));
        Buildings.Fluid.Sensors.TemperatureTwoPort TConWatHexCooEnt(
          redeclare final package Medium = Medium,
          final m_flow_nominal=mConWatCon_flow_nominal,
          final allowFlowReversal=allowFlowReversal)
          "HX entering CW temperature" annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=90,
              origin={-200,-140})));
        Buildings.Fluid.Sensors.TemperatureTwoPort TConWatHexCooLvg(
          redeclare final package Medium = Medium,
          final m_flow_nominal=mConWatCon_flow_nominal,
          final allowFlowReversal=allowFlowReversal)
          "HX leaving CW temperature" annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=90,
              origin={-200,-200})));
        Buildings.Fluid.Actuators.Valves.ThreeWayLinear valConWatEvaMix(
          redeclare final package Medium = Medium,
          final m_flow_nominal=mConWatEva_flow_nominal,
          final energyDynamics=energyDynamics,
          dpValve_nominal=1E3,
          final dpFixed_nominal=fill(0, 2)) "HRC evaporator CW mixing valve"
          annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={-120,-40})));
        Buildings.Fluid.FixedResistances.Junction junConWatEvaLvg(
          redeclare final package Medium = Medium,
          final m_flow_nominal=mConWatEva_flow_nominal*{1,-1,-1},
          final dp_nominal=fill(0, 3),
          final energyDynamics=energyDynamics,
          final portFlowDirection_1=if allowFlowReversal then Modelica.Fluid.Types.PortFlowDirection.Bidirectional
               else Modelica.Fluid.Types.PortFlowDirection.Entering,
          final portFlowDirection_2=if allowFlowReversal then Modelica.Fluid.Types.PortFlowDirection.Bidirectional
               else Modelica.Fluid.Types.PortFlowDirection.Leaving,
          final portFlowDirection_3=if allowFlowReversal then Modelica.Fluid.Types.PortFlowDirection.Bidirectional
               else Modelica.Fluid.Types.PortFlowDirection.Leaving)
          "Fluid junction" annotation (Placement(transformation(
              extent={{10,10},{-10,-10}},
              rotation=0,
              origin={0,-146})));
        Buildings.Fluid.Sensors.TemperatureTwoPort TConWatConRet(
          redeclare final package Medium = Medium,
          final m_flow_nominal=mConWatCon_flow_nominal,
          final allowFlowReversal=allowFlowReversal)
          "Condenser loop CW return temperature" annotation (Placement(
              transformation(
              extent={{10,-10},{-10,10}},
              rotation=90,
              origin={-160,20})));
        Buildings.Fluid.Sensors.TemperatureTwoPort TConWatHeaPumEnt(
          redeclare final package Medium = Medium,
          final m_flow_nominal=mConWatCon_flow_nominal,
          final allowFlowReversal=allowFlowReversal)
          "HP entering CW temperature" annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=-90,
              origin={-80,90})));
        Buildings.Fluid.Sensors.TemperatureTwoPort TConWatHeaPumLvg(
          redeclare final package Medium = Medium,
          final m_flow_nominal=mConWatCon_flow_nominal,
          final allowFlowReversal=allowFlowReversal)
          "HP leaving CW temperature" annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=-90,
              origin={-120,90})));
      protected
        final parameter Medium.ThermodynamicState sta_default=Medium.setState_pTX(
          T=Medium.T_default,
          p=Medium.p_default,
          X=Medium.X_default)
          "Medium state at default properties";
        final parameter Modelica.Units.SI.SpecificHeatCapacity cp_default=
          Medium.specificHeatCapacityCp(sta_default)
          "Specific heat capacity of the fluid";
        final parameter Modelica.Units.SI.Density rho_default=
          Medium.density(sta_default)
          "Density of the fluid";
        final parameter MediumConWatCoo.ThermodynamicState staConWatCoo_default=
          MediumConWatCoo.setState_pTX(
          T=MediumConWatCoo.T_default,
          p=MediumConWatCoo.p_default,
          X=MediumConWatCoo.X_default)
          "Medium state at default properties";
        final parameter Modelica.Units.SI.SpecificHeatCapacity cpConWatCoo_default=
          MediumConWatCoo.specificHeatCapacityCp(staConWatCoo_default)
          "Specific heat capacity of the fluid";
      public
        Buildings.Fluid.Sensors.MassFlowRate mConWatHexCoo_flow(redeclare
            final package Medium = Medium, final allowFlowReversal=
              allowFlowReversal)
          "CW mass flow rate through secondary (plant) side of HX" annotation (
            Placement(transformation(
              extent={{-10,10},{10,-10}},
              rotation=-90,
              origin={-200,-240})));
        Buildings.Fluid.Actuators.Valves.TwoWayLinear valConWatByp(
          redeclare final package Medium = Medium,
          final m_flow_nominal=mConWatCon_flow_nominal,
          from_dp=true,
          linearized=true,
          dpValve_nominal=1E3,
          final use_inputFilter=use_inputFilter,
          final allowFlowReversal=allowFlowReversal) "CW chiller bypass valve"
          annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=-90,
              origin={-40,-120})));
      equation
        connect(junChiWatSup.port_2, port_bSerCoo)
          annotation (Line(points={{250,200},{320,200},{320,-40},{380,-40}},
                                                         color={0,127,255}));
        connect(junChiWatSup.port_3, valChiWatMinByp.port_a)
          annotation (Line(points={{240,190},{240,150}}, color={0,127,255}));
        connect(valChiWatMinByp.port_b, junChiWatRet.port_3)
          annotation (Line(points={{240,130},{240,90}}, color={0,127,255}));
        connect(junChiWatSup.port_2, dpChiWat.port_a) annotation (Line(points={{250,200},
                {300,200},{300,150}}, color={0,127,255}));
        connect(TChiWatPriRet.port_a, junChiWatRet.port_2)
          annotation (Line(points={{230,80},{230,80}}, color={0,127,255}));
        connect(port_aSerCoo, junChiWatRet.port_1) annotation (Line(points={{-380,-40},
                {-340,-40},{-340,8},{300,8},{300,80},{250,80}},
                                              color={0,127,255}));
        connect(dpChiWat.port_b, junChiWatRet.port_1)
          annotation (Line(points={{300,130},{300,80},{250,80}}, color={0,127,255}));
        connect(junHeaWatSup.port_3, valHeaWatMinByp.port_a)
          annotation (Line(points={{240,-150},{240,-190}},color={0,127,255}));
        connect(valHeaWatMinByp.port_b, junHeaWatRet.port_3)
          annotation (Line(points={{240,-210},{240,-250}}, color={0,127,255}));
        connect(THeaWatPriRet.port_a, junHeaWatRet.port_2)
          annotation (Line(points={{210,-260},{230,-260}}, color={0,127,255}));
        connect(dpHeaWat.port_b, junHeaWatRet.port_1) annotation (Line(points={{300,
                -210},{300,-260},{250,-260}},
                                        color={0,127,255}));
        connect(junHeaWatSup.port_2, port_bSerHea) annotation (Line(points={{250,-140},
                {340,-140},{340,0},{380,0}},color={0,127,255}));
        connect(ctl.y1Chi, chi.y1) annotation (Line(points={{-296,313},{28,313},{28,
                95},{48,95}},        color={255,0,255}));
        connect(ctl.yValConChi, chi.yValCon) annotation (Line(points={{-296,309},{30,
                309},{30,100},{54,100},{54,98}},           color={0,0,127}));
        connect(TChiWatSupSet, chi.TSet) annotation (Line(points={{-400,220},{40,220},
                {40,77},{48,77}},     color={0,0,127}));
        connect(ctl.y1PumChiWat, pumChiWat.y1) annotation (Line(points={{-296,307},{
                166,307},{166,208},{168,208}},
                                          color={255,0,255}));
        connect(ctl.y1PumHeaWat, pumHeaWat.y1) annotation (Line(points={{-296,282},{
                160,282},{160,-132},{168,-132}},
                                          color={255,0,255}));
        connect(ctl.yValChiWatMinByp, valChiWatMinByp.y) annotation (Line(points={{-296,
                303},{40,303},{40,180},{260,180},{260,140},{252,140}},
                                                       color={0,0,127}));
        connect(ctl.yValHeaWatMinByp, valHeaWatMinByp.y) annotation (Line(points={{-296,
                278},{264,278},{264,-200},{252,-200}},   color={0,0,127}));
        connect(THeaWatPriRet.port_b, mHeaWatPri_flow.port_a)
          annotation (Line(points={{190,-260},{190,-260}}, color={0,127,255}));
        connect(TChiWatPriRet.port_b, mChiWatPri_flow.port_a)
          annotation (Line(points={{210,80},{190,80}}, color={0,127,255}));
        connect(ctl.y1PumConWatEva, pumConWatEva.y1) annotation (Line(points={{-296,
                271},{38,271},{38,-26},{-82,-26},{-82,-32}},
                                                     color={255,0,255}));
        connect(ctl.yPumConWatEva, pumConWatEva.y) annotation (Line(points={{-296,269},
                {34,269},{34,-24},{-84,-24},{-84,-36},{-82,-36}},
                                                     color={0,0,127}));
        connect(sumPHea.y, PHea)
          annotation (Line(points={{361,280},{400,280}}, color={0,0,127}));
        connect(sumPCoo.y, PCoo) annotation (Line(points={{361,240},{400,240}},
                                       color={0,0,127}));
        connect(sumPFan.y, PFan)
          annotation (Line(points={{361,200},{400,200}}, color={0,0,127}));
        connect(sumPPum.y, PPum) annotation (Line(points={{361,160},{400,160}},
                                 color={0,0,127}));
        connect(junHeaWatSup.port_2, dpHeaWat.port_a) annotation (Line(points={{250,
                -140},{300,-140},{300,-190}},
                                       color={0,127,255}));
        connect(pumChiWat.port_b, TChiWatSup.port_a)
          annotation (Line(points={{190,200},{200,200}}, color={0,127,255}));
        connect(TChiWatSup.port_b, junChiWatSup.port_1)
          annotation (Line(points={{220,200},{230,200}}, color={0,127,255}));
        connect(tan.heaPorVol, TTan.port)
          annotation (Line(points={{-120,-180},{-120,-150}},color={191,0,0}));
        connect(out.port, tan.heaPorTop) annotation (Line(points={{-100,-150},{-100,
                -160},{-118,-160},{-118,-172.6}},
                               color={191,0,0}));
        connect(out.port, tan.heaPorSid) annotation (Line(points={{-100,-150},{-100,
                -160},{-114.4,-160},{-114.4,-180}},
                                color={191,0,0}));
        connect(out.port, tan.heaPorBot) annotation (Line(points={{-100,-150},{-100,
                -187.4},{-118,-187.4}},       color={191,0,0}));
        connect(pumHeaWat.port_b, THeaWatSup.port_a)
          annotation (Line(points={{190,-140},{200,-140}},
                                                         color={0,127,255}));
        connect(THeaWatSup.port_b, junHeaWatSup.port_1)
          annotation (Line(points={{220,-140},{230,-140}},
                                                         color={0,127,255}));
        connect(junConWatHeaPumEnt.port_2, junConWatHeaPumLvg.port_1)
          annotation (Line(points={{-90,40},{-110,40}},  color={0,127,255}));
        connect(weaBus.TDryBul, out.T) annotation (Line(
            points={{0,380},{0,120},{-100,120},{-100,-128}},
            color={255,204,51},
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));
        connect(weaBus, heaPum.weaBus) annotation (Line(
            points={{0,380},{0,180},{-100,180},{-100,170}},
            color={255,204,51},
            thickness=0.5));
        connect(ctl.y1HeaPum, heaPum.y1) annotation (Line(points={{-296,266},{-42,266},
                {-42,166},{-88,166}},        color={255,0,255}));
        connect(ctl.THeaPumSet, heaPum.TSet) annotation (Line(points={{-296,264},{-44,
                264},{-44,154},{-88,154}},        color={0,0,127}));
        connect(bouConWat.ports[1], tan.port_b)
          annotation (Line(points={{-110,-200},{-110,-180}}, color={0,127,255}));
        connect(ctl.yPumChiWat, pumChiWat.y) annotation (Line(points={{-296,305},{162,
                305},{162,204},{168,204}},   color={0,0,127}));
        connect(ctl.yPumHeaWat, pumHeaWat.y) annotation (Line(points={{-296,280},{158,
                280},{158,-136},{168,-136}}, color={0,0,127}));
        connect(mChiWatPri_flow.port_b,junChiWatChiHeaRet. port_1)
          annotation (Line(points={{170,80},{130,80}},         color={0,127,255}));
        connect(junChiWatChiHeaRet.port_2, chi.port_a2)
          annotation (Line(points={{110,80},{70,80}},           color={0,127,255}));
        connect(port_aSerHea, junHeaWatRet.port_1) annotation (Line(points={{-380,0},
                {310,0},{310,-260},{250,-260}},                        color={0,127,255}));
        connect(junConWatTanEnt.port_2, valBypTan.port_2)
          annotation (Line(points={{-160,-50},{-160,-90}}, color={0,127,255}));
        connect(valBypTan.port_1, tan.port_a) annotation (Line(points={{-160,-110},{
                -160,-180},{-130,-180}},
                                    color={0,127,255}));
        connect(ctl.yValBypTan, valBypTan.y) annotation (Line(points={{-296,252},{
                -180,252},{-180,-86},{-146,-86},{-146,-100},{-148,-100}},
                                                  color={0,0,127}));
        connect(bouConWatCoo.ports[1], pumConWatCoo.port_a)
          annotation (Line(points={{-300,-240},{-300,-220},{-260,-220}},
                                                             color={0,127,255}));
        connect(coo.port_b, pumConWatCoo.port_a) annotation (Line(points={{-270,-80},
                {-300,-80},{-300,-220},{-260,-220}},
                                                  color={0,127,255}));
        connect(weaBus, coo.weaBus) annotation (Line(
            points={{0,380},{0,120},{-260,120},{-260,-70}},
            color={255,204,51},
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));
        connect(ctl.yCoo, coo.y) annotation (Line(points={{-296,255},{-222,255},{-222,
                -86},{-248,-86}},                     color={0,0,127}));
        connect(ctl.y1PumConWatCoo, pumConWatCoo.y1) annotation (Line(points={{-296,
                261},{-278,261},{-278,-212},{-262,-212}},
              color={255,0,255}));
        connect(chi.port_b1, junConWatLvg.port_3)
          annotation (Line(points={{70,92},{80,92},{80,50}},   color={0,127,255}));
        connect(chiHea.port_b1, pumHeaWat.port_a)
          annotation (Line(points={{70,-140},{170,-140}},
                                                        color={0,127,255}));
        connect(mHeaWatPri_flow.port_b, chiHea.port_a1) annotation (Line(points={{170,
                -260},{44,-260},{44,-140},{50,-140}},color={0,127,255}));
        connect(junChiWatChiHeaRet.port_3, chiHea.port_a4) annotation (Line(points={{120,70},
                {120,-156},{70,-156}},            color={0,127,255}));
        connect(junConWatEnt.port_2, chiHea.port_a3) annotation (Line(points={{30,-340},
                {40,-340},{40,-151.2},{50,-151.2}},color={0,127,255}));
        connect(chiHea.port_b3, junConWatLvg.port_1) annotation (Line(points={{70,
                -151.1},{100,-151.1},{100,40},{90,40}},
                                             color={0,127,255}));
        connect(ctl.yValEvaChiHea, chiHea.yValEva) annotation (Line(points={{-296,292},
                {32,292},{32,-162},{52,-162},{52,-160}},          color={0,0,127}));
        connect(ctl.y1CooChiHea, chiHea.y1Coo) annotation (Line(points={{-296,298},{
                36,298},{36,-146},{48,-146},{48,-148}}, color={255,0,255}));
        connect(ctl.y1ChiHea, chiHea.y1) annotation (Line(points={{-296,300},{38,300},
                {38,-142},{48,-142}},       color={255,0,255}));
        connect(ctl.yValConChiHea, chiHea.yValCon) annotation (Line(points={{-296,290},
                {32,290},{32,-122},{52,-122},{52,-136}},     color={0,0,127}));
        connect(ctl.TChiHeaSet, chiHea.TSet) annotation (Line(points={{-296,294},{30,
                294},{30,-154},{48,-154}},                          color={0,0,127}));
        connect(ctl.yValEvaChi, chi.yValEva) annotation (Line(points={{-296,311},{32,
                311},{32,72},{54.2,72},{54.2,74}},          color={0,0,127}));
        connect(junChiWatChiHeaSup.port_2, pumChiWat.port_a)
          annotation (Line(points={{150,200},{170,200}},color={0,127,255}));
        connect(chi.port_b2, junChiWatChiHeaSup.port_1) annotation (Line(points={{50,80},
                {44,80},{44,200},{130,200}},      color={0,127,255}));
        connect(chiHea.port_b4, junChiWatChiHeaSup.port_3) annotation (Line(points={{50,
                -156.5},{50,-156},{48,-156},{48,-170},{140,-170},{140,190}},
                                                                   color={0,127,255}));
        connect(TConWatEvaEnt.port_b, chiHea.port_a2) annotation (Line(points={{80,-70},
                {80,-145},{70,-145}},      color={0,127,255}));
        connect(TChiWatSupSet, ctl.TChiWatSupSet) annotation (Line(points={{-400,220},
                {-356,220},{-356,316},{-344,316}},     color={0,0,127}));
        connect(dpChiWatSet, ctl.dpChiWatSet) annotation (Line(points={{-400,160},{
                -360,160},{-360,312},{-344,312}},     color={0,0,127}));
        connect(THeaWatSupSet, ctl.THeaWatSupSet) annotation (Line(points={{-400,200},
                {-360,200},{-360,314},{-344,314}},     color={0,0,127}));
        connect(dpHeaWatSet, ctl.dpHeaWatSet) annotation (Line(points={{-400,140},{
                -356,140},{-356,310},{-344,310}},     color={0,0,127}));
        connect(u1Coo, ctl.u1Coo) annotation (Line(points={{-400,280},{-372,280},{
                -372,320},{-344,320}},     color={255,0,255}));
        connect(u1Hea, ctl.u1Hea) annotation (Line(points={{-400,260},{-362,260},{
                -362,318},{-344,318}},     color={255,0,255}));
        connect(mChiWatPri_flow.m_flow, ctl.mChiWatPri_flow) annotation (Line(points={{180,91},
                {180,132},{-354,132},{-354,266},{-344,266}},              color={0,0,127}));
        connect(dpChiWat.p_rel, ctl.dpChiWat) annotation (Line(points={{291,140},{280,
                140},{280,124},{-372,124},{-372,254},{-344,254}},     color={0,0,127}));
        connect(mHeaWatPri_flow.m_flow, ctl.mHeaWatPri_flow) annotation (Line(points={{180,
                -271},{180,-294},{-366,-294},{-366,264},{-344,264}},          color={0,
                0,127}));
        connect(dpHeaWat.p_rel, ctl.dpHeaWat) annotation (Line(points={{291,-200},{
                280,-200},{280,62},{-366,62},{-366,252},{-344,252}},     color={0,0,127}));
        connect(pumConWatEva.port_b, dpConWatEva.port_a) annotation (Line(points={{-60,-40},
                {1.77636e-15,-40},{1.77636e-15,-60}},
                                           color={0,127,255}));
        connect(pumConWatEva.port_b, mConWatEva_flow.port_a)
          annotation (Line(points={{-60,-40},{40,-40}},   color={0,127,255}));
        connect(mConWatEva_flow.port_b, TConWatEvaEnt.port_a)
          annotation (Line(points={{60,-40},{80,-40},{80,-50}}, color={0,127,255}));
        connect(junConWatTanLvg.port_2, mConWatCon_flow.port_a)
          annotation (Line(points={{-120,-290},{-120,-310}}, color={0,127,255}));
        connect(mConWatCon_flow.port_b, pumConWatCon.port_a) annotation (Line(points={{-120,
                -330},{-120,-340},{-90,-340}},         color={0,127,255}));
        connect(mConWatCon_flow.m_flow, ctl.mConWatCon_flow) annotation (Line(points={{-131,
                -320},{-360,-320},{-360,262},{-344,262}},            color={0,0,127}));
        connect(mConWatEva_flow.m_flow, ctl.mConWatEva_flow) annotation (Line(points={{50,-29},
                {50,66},{-364,66},{-364,260},{-344,260}},            color={0,0,127}));
        connect(dpConWatEva.p_rel, ctl.dpConWatEva) annotation (Line(points={{9,-70},
                {22,-70},{22,64},{-352,64},{-352,248},{-344,248}},           color={0,
                0,127}));
        connect(dpConWatCon.p_rel, ctl.dpConWatCon) annotation (Line(points={{-29,
                -310},{-368,-310},{-368,250},{-344,250}},
                                                       color={0,0,127}));
        connect(TChiWatPriRet.T, ctl.TChiWatPriRet) annotation (Line(points={{220,91},
                {220,130},{-348,130},{-348,306},{-344,306}},     color={0,0,127}));
        connect(THeaWatPriRet.T, ctl.THeaWatPriRet) annotation (Line(points={{200,
                -249},{200,64},{-368,64},{-368,290},{-344,290}},
              color={0,0,127}));
        connect(TTan.T, ctl.TTan) annotation (Line(points={{-120,-129},{-120,-120},{
                -374,-120},{-374,288},{-344,288}},              color={0,0,127}));
        connect(tan.port_b, mConWatOutTan_flow.port_a) annotation (Line(points={{-110,
                -180},{-80,-180},{-80,-230}},   color={0,127,255}));
        connect(mConWatHexCoo_flow.m_flow, ctl.mConWatHexCoo_flow) annotation (Line(
              points={{-211,-240},{-230,-240},{-230,-202},{-358,-202},{-358,258},{
                -344,258}},
              color={0,0,127}));
        connect(mConWatOutTan_flow.m_flow, ctl.mConWatOutTan_flow) annotation (Line(
              points={{-91,-240},{-100,-240},{-100,-298},{-362,-298},{-362,-74},{
                -349.818,-74},{-349.818,256},{-344,256}},          color={0,0,127}));
        connect(junConWatEnt.port_3, chi.port_a1) annotation (Line(points={{20,-330},
                {20,92},{50,92}},   color={0,127,255}));
        connect(chi.mCon_flow, ctl.mConChi_flow) annotation (Line(points={{68,98},{68,
                124},{-344,124},{-344,272}},                color={0,0,127}));
        connect(chi.mEva_flow, ctl.mEvaChi_flow) annotation (Line(points={{68,74},{68,
                68},{-346,68},{-346,274},{-344,274}},     color={0,0,127}));
        connect(chiHea.mCon_flow, ctl.mConChiHea_flow) annotation (Line(points={{69,-136},
                {69,54},{-366,54},{-366,268},{-344,268}},                   color={0,
                0,127}));
        connect(chiHea.mEva_flow, ctl.mEvaChiHea_flow) annotation (Line(points={{68,-160},
                {68,-168},{24,-168},{24,52},{-352,52},{-352,270},{-344,270}},
                       color={0,0,127}));
        connect(ctl.yValConSwiChiHea, chiHea.yValConSwi) annotation (Line(points={{-296,
                286},{28,286},{28,-120},{54,-120},{54,-136}},         color={0,0,127}));
        connect(ctl.yValEvaSwiHea, chiHea.yValEvaSwi) annotation (Line(points={{-296,
                288},{30,288},{30,-164},{54,-164},{54,-160}},
              color={0,0,127}));
        connect(TChiWatSup.T, ctl.TChiWatSup) annotation (Line(points={{210,211},{210,
                218},{-346,218},{-346,308},{-344,308}},     color={0,0,127}));
        connect(chiHea.TEvaLvg, ctl.TEvaLvgChiHea) annotation (Line(points={{66,-160},
                {66,-166},{26,-166},{26,52},{-372,52},{-372,296},{-344,296}},
              color={0,0,127}));
        connect(junConWatLvg.port_2, TConWatConChiLvg.port_a)
          annotation (Line(points={{70,40},{-40,40}}, color={0,127,255}));
        connect(TConWatConChiLvg.port_b, junConWatHeaPumEnt.port_1)
          annotation (Line(points={{-60,40},{-70,40}}, color={0,127,255}));
        connect(THeaWatSup.T, ctl.THeaWatSup) annotation (Line(points={{210,-129},{
                210,128},{-346,128},{-346,292},{-344,292}},         color={0,0,127}));
        connect(TConWatConChiEnt.port_b, junConWatEnt.port_1)
          annotation (Line(points={{10,-340},{10,-340}},   color={0,127,255}));
        connect(pumConWatCoo.port_b, TConWatCooSup.port_a) annotation (Line(points={{-240,
                -220},{-212,-220},{-212,-214}},      color={0,127,255}));
        connect(TConWatCooSup.port_b, hexCoo.port_a1)
          annotation (Line(points={{-212,-194},{-212,-180}}, color={0,127,255}));
        connect(hexCoo.port_b1, TConWatCooRet.port_a)
          annotation (Line(points={{-212,-160},{-212,-146}},color={0,127,255}));
        connect(TConWatCooRet.port_b, coo.port_a) annotation (Line(points={{-212,-126},
                {-212,-80},{-250,-80}},
                                    color={0,127,255}));
        connect(valBypTan.port_3, TConWatHexCooEnt.port_a) annotation (Line(points={{-170,
                -100},{-200,-100},{-200,-130}},   color={0,127,255}));
        connect(TConWatHexCooEnt.port_b, hexCoo.port_a2)
          annotation (Line(points={{-200,-150},{-200,-160}}, color={0,127,255}));
        connect(hexCoo.port_b2, TConWatHexCooLvg.port_a)
          annotation (Line(points={{-200,-180},{-200,-190}}, color={0,127,255}));
        connect(TConWatHexCooLvg.port_b, mConWatHexCoo_flow.port_a) annotation (Line(
              points={{-200,-210},{-200,-230}},             color={0,127,255}));
        connect(TConWatConChiLvg.T, ctl.TConWatConChiLvg) annotation (Line(points={{-50,51},
                {-50,62},{-352,62},{-352,284},{-344,284}},                 color={0,0,
                127}));
        connect(TConWatConChiEnt.T, ctl.TConWatConChiEnt) annotation (Line(points={{0,-329},
                {0,-292},{-364,-292},{-364,286},{-344,286}},
              color={0,0,127}));
        connect(TConWatCooSup.T, ctl.TConWatCooSup) annotation (Line(points={{-223,
                -204},{-356,-204},{-356,282},{-344,282}},       color={0,0,127}));
        connect(TConWatCooRet.T, ctl.TConWatCooRet) annotation (Line(points={{-223,
                -136},{-350,-136},{-350,280},{-344,280}},
                                                       color={0,0,127}));
        connect(TConWatHexCooEnt.T, ctl.TConWatHexCooEnt) annotation (Line(points={{-211,
                -140},{-350,-140},{-350,278},{-344,278}},           color={0,0,127}));
        connect(TConWatHexCooLvg.T, ctl.TConWatHexCooLvg) annotation (Line(points={{-211,
                -200},{-354,-200},{-354,276},{-344,276}},             color={0,0,127}));
        connect(ctl.yPumConWatCoo, pumConWatCoo.y) annotation (Line(points={{-296,259},
                {-280,259},{-280,-216},{-262,-216}},
              color={0,0,127}));
        connect(chiHea.TConLvg, ctl.TConLvgChiHea) annotation (Line(points={{67,-136},
                {67,58},{-370,58},{-370,298},{-344,298}},
              color={0,0,127}));
        connect(chiHea.TConEnt, ctl.TConEntChiHea) annotation (Line(points={{65,-136},
                {65,56},{-362,56},{-362,300},{-344,300}},                     color={
                0,0,127}));
        connect(junConWatTanEnt.port_3, valConWatEvaMix.port_1)
          annotation (Line(points={{-150,-40},{-130,-40}},
                                                       color={0,127,255}));
        connect(valConWatEvaMix.port_2, pumConWatEva.port_a)
          annotation (Line(points={{-110,-40},{-80,-40}},
                                                       color={0,127,255}));
        connect(junConWatEvaLvg.port_3, valConWatEvaMix.port_3) annotation (Line(
              points={{0,-136},{0,-100},{-120,-100},{-120,-50}},  color={0,127,255}));
        connect(junConWatEvaLvg.port_3, dpConWatEva.port_b)
          annotation (Line(points={{0,-136},{0,-80},{-1.77636e-15,-80}},
                                                         color={0,127,255}));
        connect(chiHea.port_b2, junConWatEvaLvg.port_1) annotation (Line(points={{50,-145},
                {50,-146},{10,-146}},      color={0,127,255}));
        connect(junConWatEvaLvg.port_2, junConWatTanLvg.port_3) annotation (Line(
              points={{-10,-146},{-30,-146},{-30,-280},{-110,-280}},
                                                         color={0,127,255}));
        connect(TConWatEvaEnt.T, ctl.TConWatEvaEnt) annotation (Line(points={{69,-60},
                {64,-60},{64,60},{-358,60},{-358,302},{-344,302}},           color={0,
                0,127}));
        connect(ctl.yValConWatEvaMix, valConWatEvaMix.y) annotation (Line(points={{-296,
                284},{26,284},{26,-20},{-120,-20},{-120,-28}},           color={0,0,
                127}));
        connect(junConWatHeaPumLvg.port_2, TConWatConRet.port_a)
          annotation (Line(points={{-130,40},{-160,40},{-160,30}},
                                                         color={0,127,255}));
        connect(TConWatConRet.port_b, junConWatTanEnt.port_1)
          annotation (Line(points={{-160,10},{-160,-30}},color={0,127,255}));
        connect(TConWatConRet.T, ctl.TConWatConRet) annotation (Line(points={{-171,20},
                {-178,20},{-178,54},{-362,54},{-362,194},{-354,194},{-354,304},{-344,
                304}},
              color={0,0,127}));
        connect(chi.TConLvg, ctl.TConLvgChi) annotation (Line(points={{66,98},{66,134},
                {-348,134},{-348,294},{-344,294}},            color={0,0,127}));
        connect(junConWatHeaPumEnt.port_3, TConWatHeaPumEnt.port_a)
          annotation (Line(points={{-80,50},{-80,80}},   color={0,127,255}));
        connect(TConWatHeaPumEnt.port_b, heaPum.port_a) annotation (Line(points={{-80,100},
                {-80,160},{-90,160}},       color={0,127,255}));
        connect(heaPum.port_b, TConWatHeaPumLvg.port_a) annotation (Line(points={{-110,
                160},{-120,160},{-120,100}},color={0,127,255}));
        connect(TConWatHeaPumLvg.port_b, junConWatHeaPumLvg.port_3)
          annotation (Line(points={{-120,80},{-120,50}}, color={0,127,255}));
        connect(ctl.y1Coo, coo.y1) annotation (Line(points={{-296,257},{-220,257},{
                -220,-74},{-248,-74}},
                                   color={255,0,255}));
        connect(mConWatHexCoo_flow.port_b, junConWatTanLvg.port_1) annotation (Line(
              points={{-200,-250},{-200,-260},{-120,-260},{-120,-270}},
                                                                      color={0,127,
                255}));
        connect(mConWatOutTan_flow.port_b, junConWatTanLvg.port_1)
          annotation (Line(points={{-80,-250},{-80,-260},{-120,-260},{-120,-270}},
                                                           color={0,127,255}));
        connect(ctl.yPumConWatCon, pumConWatCon.y) annotation (Line(points={{-296,273},
                {-276,273},{-276,-336},{-92,-336}}, color={0,0,127}));
        connect(ctl.y1PumConWatCon, pumConWatCon.y1) annotation (Line(points={{-296,
                275},{-284,275},{-284,254},{-274,254},{-274,-332},{-92,-332}}, color=
                {255,0,255}));
        connect(pumConWatCon.port_b, valConWatByp.port_b) annotation (Line(points={{
                -70,-340},{-40,-340},{-40,-130}}, color={0,127,255}));
        connect(ctl.yValConWatByp, valConWatByp.y) annotation (Line(points={{-296,248},
                {28,248},{28,-120},{-28,-120}}, color={0,0,127}));
        connect(pumConWatCon.port_b, TConWatConChiEnt.port_a)
          annotation (Line(points={{-70,-340},{-10,-340}}, color={0,127,255}));
        connect(pumConWatCon.port_b, dpConWatCon.port_a) annotation (Line(points={{
                -70,-340},{-20,-340},{-20,-320}}, color={0,127,255}));
        connect(valConWatByp.port_a, TConWatConChiLvg.port_a)
          annotation (Line(points={{-40,-110},{-40,40}}, color={0,127,255}));
        connect(dpConWatCon.port_b, TConWatConChiLvg.port_a) annotation (Line(points=
                {{-20,-300},{-20,40},{-40,40}}, color={0,127,255}));
      annotation (
        defaultComponentName="pla", Documentation(info="<html>
<p>
This model represents a combined heating and cooling plant where chilled
water is produced by cooling-only chillers and heat recovery chillers,
hot water is produced by heat recovery chillers, and a thermal energy storage
tank is integrated in the condenser water circuit to maximize heat recovery
(\"Tank Charge/Discharge\" operating mode).
Cooling towers allow rejecting excess heat from the condenser loop
(\"Heat Rejection\" operating mode).
Air-source heat pumps allow injecting heat into the condenser loop
(\"Charge Assist\" operating mode).
</p>
<p>
This model has been developed based on the publication by <a href=\"#Gill2021\">B. Gill (2021)</a>
and further discussions with Taylor Engineers.
</p>
<h4>Abbreviations and naming conventions</h4>
<p>
The following abbreviations are used in the documentation of this
model and of its components.<br/>
</p>
<table summary=\"log levels\" border=\"1\" cellspacing=\"0\" cellpadding=\"2\" style=\"border-collapse:collapse;\">
<tr><th>Abbreviation</th><th>Description</th></tr>
<tr><td>AI</td><td>Analog input (integer or real)</td></tr>
<tr><td>AO</td><td>Analog output (integer or real)</td></tr>
<tr><td>CHW</td><td>Chilled water</td></tr>
<tr><td>CT</td><td>Cooling tower</td></tr>
<tr><td>CW</td><td>Condenser water</td></tr>
<tr><td>CWC</td><td>Condenser water circuit serving chiller and HRC condenser barrel</td></tr>
<tr><td>CWE</td><td>Condenser water circuit serving HRC evaporator barrel</td></tr>
<tr><td>DI</td><td>Digital input (Boolean)</td></tr>
<tr><td>DO</td><td>Digital output (Boolean)</td></tr>
<tr><td>HP</td><td>Heat pump</td></tr>
<tr><td>HR</td><td>Heat recovery</td></tr>
<tr><td>HRC</td><td>Heat recovery chiller</td></tr>
<tr><td>HW</td><td>Hot water</td></tr>
<tr><td>VFD</td><td>Variable frequency drive</td></tr>
</table>
<p>
To clearly distinguish cooling-only chillers from heat recovery chillers,
the term \"chiller\" is used systematically to refer to cooling-only chillers
whereas the abbreviation \"HRC\" is used systematically to refer to heat recovery chillers.
</p>
<p>
Each HRC can operate under the following modes.
In <b>cascading heating</b> mode, the condenser barrel is connected to the
HW loop and the evaporator barrel is connected to the CW loop (CWE circuit).
The onboard controller controls the HRC to track a HW
supply temperature setpoint at condenser outlet.
In <b>cascading cooling</b> mode, the condenser barrel is connected to the CW
loop (CWC circuit) and the evaporator barrel is connected to the CHW
loop. The onboard controller controls the HRC to track a CHW
supply temperature setpoint at evaporator outlet.
In <b>direct heat recovery</b> mode, the condenser barrel is connected to the HW
loop and the evaporator barrel is connected to the CHW
loop. The onboard controller controls the HRC to track a HW
supply temperature setpoint at condenser outlet while the plant supervisory
controller maintains the CHW supply temperature at setpoint by
modulating the evaporator flow rate or the condenser entering temperature.
</p>
<h4>System schematic</h4>
<p>
The schematic below represents a configuration of the system with two chillers
and three HRCs.
The equipment tags correspond to the component names in the plant model.
The control points used by each control function are represented at the intersection
of the gray area that describes the function and the four bus lines corresponding
to the different control point categories (AI, DI, AO, DO).
For the sake of clarity, control logic that is duplicated between multiple
units (for instance the chiller isolation valve control) is only illustrated for
one unit.
The detailed description of each control function is available in the documentation
of
<a href=\"modelica://Buildings.Experimental.DHC.Plants.Combined.Controls.Controller\">
Buildings.Experimental.DHC.Plants.Combined.Controls.Controller</a>.
For an overview of the different operating modes and the design principles of such
a system, the user may refer to the article by <a href=\"#Gill2021\">B. Gill (2021)</a>.
</p>
<p align=\"left\">
<img alt=\"System schematic\"
src=\"modelica://Buildings/Resources/Images/Experimental/DHC/Plants/Combined/AllElectricCWStorage.png\"/>
</p>
<h4>Control points</h4>
<h5>Cooling and heating Enable signals</h5>
<p>
The cooling and heating Enable signals <code>u1Coo</code> and <code>u1Hea</code>
shall be computed outside of the plant model, for instance based on a time schedule.
</p>
<h5>CHW and HW supply temperature and differential pressure setpoint</h5>
<p>
Those setpoints are provided as control inputs.
Ideally, a reset logic based on consumer valve requests should be implemented to adapt
those setpoints to the demand.
</p>
<h4>Details</h4>
<h5>Sizing considerations</h5>
<p>
Sizing the TES tank and the heat pumps is a joint optimization problem
under the constraint that on a design heating day, heating loads can be
met using both the recovered heat and the heat added to the tank by
the heat pumps.
As stated by <a href=\"#Gill2021\">B. Gill (2021)</a>, increasing the tank
capacity generally improves plant efficiency by providing more opportunity
for heat recovery. Tank capacity should therefore be maximized under the limit
corresponding to the amount of heat that can be recovered over the day.
</p>
<p>
The model is configured by default with a tank that is sized to store
the heat needed to operate the HRCs during <i>3&nbsp;</i>h at peak heating
load with a <i>&Delta;T</i> covering the two temperature cycles specified
with the parameter <code>TTanSet</code> (heels and thermocline neglected).
This default can be overwritten.
</p>
<h5>TES tank</h5>
<p>
The tank is assumed to be integrated without pressure separation, i.e.,
the operating level of the tank sets the system pressure and no pressure
sustaining valve or discharge pump is included.
The operating level is approximated as equal to the tank height.
A default height to diameter ratio of <i>2</i> is also taken into
account
(designers tend to favor a height to diameter ratio above <i>1.5</i>
in order to minimize the volume of the thermocline which is
considered useless).
No high limit is considered for the tank mass flow rate.
</p>
<h5>CHW and HW minimum flow bypass valve</h5>
<p>
As per standard practice, the bypass valve is sized for the highest
chiller minimum flow.
The bypass valve model is configured with
a pressure drop varying linearly with the flow rate, as opposed
to a quadratic dependency usually considered for a turbulent flow
regime.
This is because the whole plant model contains large nonlinear systems
of equations, and this configuration limits the risk of solver failure
while reducing the time to solution.
This has no significant impact on the operating point of the circulation pumps
due to the control loop that modulates the valve opening to generate
enough pressure differential at the chiller boundaries to allow for
minimum flow circulation.
So whatever the modeling assumptions for the bypass valve, the
control loop ensures that the valve creates the adequate pressure drop
and bypass flow, which will simply be reached at a different valve opening
with the above simplification.
</p>
<h5>Cooling tower circuit</h5>
<p>
The design heat flow rate used to size the cooling towers and the intermediary
heat exchanger corresponds to the heat flow rate rejected by all HRCs operating in
cascading cooling mode and all chillers operating at design conditions.
The cooling towers are sized with a default approach of <i>3&nbsp;</i>K to the
design wetbulb temperature.
The intermediary heat exchanger is sized with a default approach of <i>2&nbsp;</i>K.
</p>
<h5>Chiller and HRC performance data</h5>
<p>
The chiller performance data should cover the CW temperature levels
reached when the plant is operating in Heat Rejection mode.
The parameter <code>TCasConEnt_nominal</code> (set with a final assignment)
provides the maximum CW supply (condenser entering) temperature in this
operating mode.
The HRC performance data should cover the HRC lift envelope,
that is when the HRC is operating in direct heat recovery mode,
producing CHW and HW at their setpoint value at full load.
</p>
<h4>References</h4>
<p>
<a name=\"Gill2021\"/>
Brandon Gill, P.E., Taylor Engineers, Alameda, CA, USA.<br/>
<a href=\"https://tayloreng.egnyte.com/dl/hHl2ZkZRDC/ASHRAE_Journal_-_Solving_the_Large_Building_All-Electric_Heating_Problem.pdf_\">
Solving the large building all-electric heating problem</a>.<br/>
ASHRAE Journal, October 2021.
</p>

</html>",       revisions="<html>
<ul>
<li>
February 24, 2023, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>"));
      end AllElectricCWStorage;

      package Controls "Package of control blocks for combined plants"
        extends Modelica.Icons.VariantsPackage;

        block Controller "Plant controller"
          extends BaseClasses.PartialController;

          Buildings.Controls.OBC.CDL.Routing.BooleanScalarReplicator repHeaPum(
            final nout=nHeaPum) "Replicate signal"
            annotation (Placement(transformation(extent={{220,-230},{240,-210}})));
          Buildings.Controls.OBC.CDL.Conversions.BooleanToReal cvtValBypTan
            "Convert DO to AO"
            annotation (Placement(transformation(extent={{-40,-290},{-20,-270}})));
          Buildings.Controls.OBC.CDL.Reals.Switch TChiHeaSupSet[nChiHea]
            "Switch supply temperature setpoint"
            annotation (Placement(transformation(extent={{-100,90},{-80,110}})));
          BaseClasses.StagingPump staPumChiWat(
            final nPum=nPumChiWat,
            final m_flow_nominal=mChiWat_flow_nominal)
            "CHW pump staging"
            annotation (Placement(transformation(extent={{120,230},{140,250}})));
          EnergyTransferStations.Combined.Controls.PIDWithEnable pumChiWat(
            k=0.1,
            Ti=60,
            r=dpChiWatSet_max,
            y_reset=1,
            y_neutral=0)
            "Pump speed controller"
            annotation (Placement(transformation(extent={{190,230},{210,250}})));
          EnergyTransferStations.Combined.Controls.PIDWithEnable pumHeaWat(
            k=0.1,
            Ti=60,
            r=dpHeaWatSet_max,
            y_reset=1,
            y_neutral=0)
            "Pump speed controller"
            annotation (Placement(transformation(extent={{190,-50},{210,-30}})));
          BaseClasses.StagingPump staPumHeaWat(
            final nPum=nPumHeaWat,
            final m_flow_nominal=mHeaWat_flow_nominal)
            "HW pump staging"
            annotation (Placement(transformation(extent={{120,-50},{140,-30}})));
          BaseClasses.StagingPump staPumConWatCon(
            final nPum=nPumConWatCon,
            final m_flow_nominal=mConWatCon_flow_nominal)
            "CW pump staging"
            annotation (Placement(transformation(extent={{120,-130},{140,-110}})));
          EnergyTransferStations.Combined.Controls.PIDWithEnable pumConWatCon(
            k=0.1,
            Ti=60,
            final r=dpConWatConSet_max,
            y_reset=1,
            y_neutral=0)
            "Pump speed controller"
            annotation (Placement(transformation(extent={{190,-130},{210,-110}})));
          EnergyTransferStations.Combined.Controls.PIDWithEnable pumConWatEva(
            k=0.1,
            Ti=60,
            final r=dpConWatEvaSet_max,
            y_reset=1,
            y_neutral=0)
            "Pump speed controller"
            annotation (Placement(transformation(extent={{190,-190},{210,-170}})));
          BaseClasses.StagingPump staPumConWatEva(
            final nPum=nPumConWatEva,
            final m_flow_nominal=mConWatEva_flow_nominal)
            "CW pump staging"
            annotation (Placement(transformation(extent={{120,-190},{140,-170}})));
          Buildings.Controls.OBC.CDL.Reals.Sources.Constant dpConNom(final k=
                dpConWatConSet_max) "Constant"
            annotation (Placement(transformation(extent={{160,-130},{180,-110}})));
          Buildings.Controls.OBC.CDL.Reals.Sources.Constant dpEvaNom(final k=
                dpConWatEvaSet_max) "Constant"
            annotation (Placement(transformation(extent={{160,-190},{180,-170}})));
          BaseClasses.StagingPlant staPla(
            final nChi=nChi,
            final QChiWatChi_flow_nominal=QChiWatChi_flow_nominal,
            final nChiHea=nChiHea,
            final QChiWatCasCoo_flow_nominal=QChiWatCasCoo_flow_nominal,
            final QChiWatCasCoo_flow_nominal_approx=QChiWatCasCoo_flow_nominal_approx,
            final QHeaWat_flow_nominal=QHeaWat_flow_nominal,
            final cp_default=cp_default) "Plant staging"
            annotation (Placement(transformation(extent={{-210,140},{-190,172}})));
          Buildings.Controls.OBC.CDL.Routing.RealScalarReplicator repTSet(nout=nChiHea)
            "Replicate signal"
            annotation (Placement(transformation(extent={{-140,110},{-120,130}})));
          Buildings.Controls.OBC.CDL.Routing.RealScalarReplicator repTSet1(nout=nChiHea)
            "Replicate signal"
            annotation (Placement(transformation(extent={{-140,70},{-120,90}})));
          BaseClasses.ModeCondenserLoop modConLoo(
            final mConWatHexCoo_flow_nominal=mConWatCon_flow_nominal,
            final QHeaPum_flow_nominal=QHeaPum_flow_nominal,
            final TTanSet=TTanSet,
            final fraUslTan=fraUslTan,
            final ratFraChaTanLim=ratFraChaTanLim,
            final cp_default=cp_default,
            nTTan=nTTan) "Condenser loop operating mode"
            annotation (Placement(transformation(extent={{-170,-170},{-150,-150}})));
          BaseClasses.TankCycle cycTan(
            mConWatHexCoo_flow_nominal=mConWatCon_flow_nominal,
                                       final TTanSet=TTanSet, nTTan=nTTan)
            "Determine tank cycle"
            annotation (Placement(transformation(extent={{-170,-110},{-150,-90}})));
          Buildings.Controls.OBC.CDL.Integers.Equal isModChaAss
            "Return true if charge assist mode is active"
            annotation (Placement(transformation(extent={{-120,-190},{-100,-170}})));
          Buildings.Controls.OBC.CDL.Integers.Sources.Constant chaAss(
            final k=estcp.DHC.Plants.Combined.Controls.ModeCondenserLoop.chargeAssist)
            "Charge assist mode index"
            annotation (Placement(transformation(extent={{-170,-198},{-150,-178}})));
          Buildings.Controls.OBC.CDL.Logical.And assAndPum
            "Charge assist mode and any CW pump On"
            annotation (Placement(transformation(extent={{186,-210},{206,-230}})));
          Buildings.Controls.OBC.CDL.Reals.Sources.Constant THeaPumSetVal[2](
            final k={max(TTanSet[i]) + 3 for i in 1:2})
            "HP supply temperature setpoint for each tank cycle"
            annotation (Placement(transformation(extent={{-170,-230},{-150,-210}})));
          Buildings.Controls.OBC.CDL.Routing.RealExtractor extIndRea(final nin=2)
            "Extract active setpoint"
            annotation (Placement(transformation(extent={{-120,-230},{-100,-210}})));
          Buildings.Controls.OBC.CDL.Integers.Sources.Constant heaRej(
            final k=estcp.DHC.Plants.Combined.Controls.ModeCondenserLoop.heatRejection)
            "Heat rejection mode index"
            annotation (Placement(transformation(extent={{-170,-290},{-150,-270}})));
          Buildings.Controls.OBC.CDL.Integers.Equal isModHeaRej
            "Return true if heat rejection mode is active"
            annotation (Placement(transformation(extent={{-120,-290},{-100,-270}})));
          Buildings.Controls.OBC.CDL.Logical.Not isModNotHeaRej
            "Return true if heat rejection mode is NOT active"
            annotation (Placement(transformation(extent={{-80,-290},{-60,-270}})));
          BaseClasses.ValveCondenserEvaporator valConEva(
            final nChi=nChi,
            final nChiHea=nChiHea,
            final mChiWatChi_flow_nominal=mChiWatChi_flow_nominal,
            final mChiWatChi_flow_min=mChiWatChi_flow_min,
            final mConWatChi_flow_nominal=mConWatChi_flow_nominal,
            final dpEvaChi_nominal=dpEvaChi_nominal,
            final dpValEvaChi_nominal=dpValEvaChi_nominal,
            final mChiWatChiHea_flow_nominal=mChiWatChiHea_flow_nominal,
            final mChiWatChiHea_flow_min=mChiWatChiHea_flow_min,
            final mConWatChiHea_flow_nominal=mConWatChiHea_flow_nominal,
            final mHeaWatChiHea_flow_min=mHeaWatChiHea_flow_min,
            final dpEvaChiHea_nominal=dpEvaChiHea_nominal,
            final dpValEvaChiHea_nominal=dpValEvaChiHea_nominal,
            final TTanSet=TTanSet)
            "Controller for chiller and HRC condenser and evaporator valves"
            annotation (Placement(transformation(extent={{-60,20},{-40,60}})));
          estcp.DHC.Plants.Combined.Controls.BaseClasses.DirectHeatRecovery dirHeaCoo(
            final nChi=nChi,
            final nChiHea=nChiHea,
            final mChiWatChi_flow_nominal=mChiWatChi_flow_nominal,
            final mChiWatChi_flow_min=mChiWatChi_flow_min,
            final mChiWatChiHea_flow_nominal=mChiWatChiHea_flow_nominal,
            final mChiWatChiHea_flow_min=mChiWatChiHea_flow_min)
            "Control logic for HRC in direct HR mode" annotation (Placement(
                transformation(extent={{-120,-10},{-100,10}})));
          BaseClasses.CoolingTowerLoop coo(
            final mConWatHexCoo_flow_nominal=mConWatCon_flow_nominal,
            final nCoo=nCoo,
            final nPumConWatCoo=nPumConWatCoo,
            final QChiWat_flow_nominal=QChiWat_flow_nominal,
            final dTLifChi_min=dTLifChi_min,
            final dTLifChi_nominal=dTLifChi_nominal,
            final TTanSet=TTanSet,
            final dTHexCoo_nominal=dTHexCoo_nominal) "Cooling tower loop"
            annotation (Placement(transformation(extent={{40,-364},{60,-328}})));
          Buildings.Controls.OBC.CDL.Logical.Or u1CooOrHea
            "Plant Enable signal: either cooling or heating is enabled"
            annotation (Placement(transformation(extent={{-160,430},{-140,450}})));
        equation
          connect(repHeaPum.y, y1HeaPum)
            annotation (Line(points={{242,-220},{280,-220}},color={255,0,255}));
          connect(cvtValBypTan.y, yValBypTan) annotation (Line(points={{-18,-280},{280,-280}},
                                                color={0,0,127}));
          connect(staPumChiWat.y1, y1PumChiWat) annotation (Line(points={{142,246},{180,
                  246},{180,260},{280,260}},
                                        color={255,0,255}));
          connect(pumChiWat.y, yPumChiWat)
            annotation (Line(points={{212,240},{280,240}}, color={0,0,127}));
          connect(dpChiWatSet, pumChiWat.u_s) annotation (Line(points={{-280,320},{-10,
                  320},{-10,260},{176,260},{176,240},{188,240}},
                                             color={0,0,127}));
          connect(staPumHeaWat.y1, y1PumHeaWat)
            annotation (Line(points={{142,-34},{180,-34},{180,-20},{280,-20}},
                                                        color={255,0,255}));
          connect(pumHeaWat.y, yPumHeaWat)
            annotation (Line(points={{212,-40},{280,-40}}, color={0,0,127}));
          connect(dpHeaWatSet, pumHeaWat.u_s) annotation (Line(points={{-280,300},{4,
                  300},{4,-20},{160,-20},{160,-40},{188,-40}},
                                              color={0,0,127}));
          connect(pumConWatEva.y, yPumConWatEva)
            annotation (Line(points={{212,-180},{280,-180}}, color={0,0,127}));
          connect(pumConWatCon.y, yPumConWatCon) annotation (Line(points={{212,-120},{220,
                  -120},{220,-140},{280,-140}},     color={0,0,127}));
          connect(staPumConWatCon.y1, y1PumConWatCon) annotation (Line(points={{142,-114},
                  {150,-114},{150,-100},{240,-100},{240,-120},{280,-120}},
                                                  color={255,0,255}));
          connect(staPumConWatEva.y1, y1PumConWatEva)
            annotation (Line(points={{142,-174},{150,-174},{150,-160},{280,-160}},
                                                            color={255,0,255}));
          connect(dpHeaWat, pumHeaWat.u_m) annotation (Line(points={{-280,-360},{-234,-360},
                  {-234,-64},{200,-64},{200,-52}}, color={0,0,127}));
          connect(mHeaWatPri_flow, staPumHeaWat.m_flow) annotation (Line(points={{-280,
                  -200},{-242,-200},{-242,-40},{118,-40}},
                                                color={0,0,127}));
          connect(dpChiWat, pumChiWat.u_m) annotation (Line(points={{-280,-340},{-226,
                  -340},{-226,208},{200,208},{200,228}},
                                                   color={0,0,127}));
          connect(mConWatEva_flow, staPumConWatEva.m_flow) annotation (Line(points={{-280,
                  -260},{-252,-260},{-252,-140},{60,-140},{60,-180},{118,-180}},
                                                          color={0,0,127}));
          connect(mConWatCon_flow, staPumConWatCon.m_flow) annotation (Line(points={{-280,
                  -240},{-244,-240},{-244,-120},{118,-120}},
                                                       color={0,0,127}));
          connect(mChiWatPri_flow, staPumChiWat.m_flow) annotation (Line(points={{-280,-180},
                  {-238,-180},{-238,240},{118,240}},    color={0,0,127}));
          connect(dpConNom.y, pumConWatCon.u_s) annotation (Line(points={{182,-120},{188,
                  -120}},                      color={0,0,127}));
          connect(dpEvaNom.y, pumConWatEva.u_s)
            annotation (Line(points={{182,-180},{188,-180}}, color={0,0,127}));
          connect(mHeaWatPri_flow, staPla.mHeaWatPri_flow) annotation (Line(points={{-280,
                  -200},{-236,-200},{-236,152},{-212,152}},    color={0,0,127}));
          connect(THeaWatSupSet, staPla.THeaWatSupSet) annotation (Line(points={{-280,
                  340},{-250,340},{-250,150},{-212,150}}, color={0,0,127}));
          connect(mChiWatPri_flow, staPla.mChiWatPri_flow) annotation (Line(points={{-280,
                  -180},{-238,-180},{-238,166},{-212,166}},color={0,0,127}));
          connect(u1Coo, staPla.u1Coo) annotation (Line(points={{-280,440},{-236,440},{
                  -236,170.2},{-212,170.2}},                   color={255,0,255}));
          connect(u1Hea, staPla.u1Hea) annotation (Line(points={{-280,400},{-240,400},{
                  -240,168.2},{-212,168.2}},                   color={255,0,255}));
          connect(TChiWatSupSet, staPla.TChiWatSupSet) annotation (Line(points={{-280,
                  360},{-242,360},{-242,164},{-212,164}}, color={0,0,127}));
          connect(TChiWatPriRet, staPla.TChiWatPriRet) annotation (Line(points={{-280,
                  240},{-242,240},{-242,160},{-212,160}},
                                                        color={0,0,127}));
          connect(THeaWatPriRet, staPla.THeaWatPriRet) annotation (Line(points={{-280,80},
                  {-242,80},{-242,146},{-212,146}},     color={0,0,127}));
          connect(repTSet1.y, TChiHeaSupSet.u3) annotation (Line(points={{-118,80},{
                  -106,80},{-106,92},{-102,92}}, color={0,0,127}));
          connect(repTSet.y, TChiHeaSupSet.u1) annotation (Line(points={{-118,120},{
                  -106,120},{-106,108},{-102,108}}, color={0,0,127}));
          connect(staPla.y1CooChiHea, TChiHeaSupSet.u2) annotation (Line(points={{-188,148},
                  {-110,148},{-110,100},{-102,100}},      color={255,0,255}));
          connect(TChiHeaSupSet.y, TChiHeaSet)
            annotation (Line(points={{-78,100},{280,100}}, color={0,0,127}));
          connect(TChiWatSupSet, repTSet.u) annotation (Line(points={{-280,360},{-254,
                  360},{-254,120},{-142,120}}, color={0,0,127}));
          connect(THeaWatSupSet, repTSet1.u) annotation (Line(points={{-280,340},{-250,
                  340},{-250,80},{-142,80}}, color={0,0,127}));
          connect(mConWatHexCoo_flow, modConLoo.mConWatHexCoo_flow) annotation (Line(
                points={{-280,-280},{-248,-280},{-248,-152},{-172,-152}},
                                                                        color={0,0,127}));
          connect(mConWatOutTan_flow, modConLoo.mConWatOutTan_flow) annotation (Line(
                points={{-280,-300},{-234,-300},{-234,-156},{-172,-156}},
                                                                        color={0,0,127}));
          connect(TTan, modConLoo.TTan) annotation (Line(points={{-280,60},{-180,60},{
                  -180,-160},{-172,-160}},
                                         color={0,0,127}));
          connect(TTan, cycTan.TTan) annotation (Line(points={{-280,60},{-180,60},{-180,
                  -106},{-172,-106}},
                                  color={0,0,127}));
          connect(mConWatOutTan_flow, cycTan.mConWatOutTan_flow) annotation (Line(
                points={{-280,-300},{-226,-300},{-226,-94},{-172,-94}},
                                                                    color={0,0,127}));
          connect(chaAss.y, isModChaAss.u2) annotation (Line(points={{-148,-188},{-122,
                  -188}},                         color={255,127,0}));
          connect(modConLoo.mode, isModChaAss.u1) annotation (Line(points={{-148,-160},
                  {-144,-160},{-144,-180},{-122,-180}},
                                                      color={255,127,0}));
          connect(assAndPum.y, repHeaPum.u)
            annotation (Line(points={{208,-220},{218,-220}}, color={255,0,255}));
          connect(isModChaAss.y, assAndPum.u1)
            annotation (Line(points={{-98,-180},{-80,-180},{-80,-220},{184,-220}},
                                                             color={255,0,255}));
          connect(THeaPumSetVal.y, extIndRea.u)
            annotation (Line(points={{-148,-220},{-122,-220}}, color={0,0,127}));
          connect(extIndRea.y, THeaPumSet) annotation (Line(points={{-98,-220},{-80,
                  -220},{-80,-240},{280,-240}},            color={0,0,127}));
          connect(cycTan.idxCycTan, extIndRea.index) annotation (Line(points={{-148,
                  -100},{-140,-100},{-140,-240},{-110,-240},{-110,-232}},
                                                                 color={255,127,0}));
          connect(heaRej.y, isModHeaRej.u1)
            annotation (Line(points={{-148,-280},{-122,-280}}, color={255,127,0}));
          connect(modConLoo.mode, isModHeaRej.u2) annotation (Line(points={{-148,-160},{
                  -144,-160},{-144,-288},{-122,-288}},color={255,127,0}));
          connect(isModNotHeaRej.y, cvtValBypTan.u)
            annotation (Line(points={{-58,-280},{-42,-280}}, color={255,0,255}));
          connect(isModHeaRej.y, isModNotHeaRej.u)
            annotation (Line(points={{-98,-280},{-82,-280}}, color={255,0,255}));
          connect(mEvaChi_flow,valConEva. mEvaChi_flow) annotation (Line(points={{-280,
                  -100},{-212,-100},{-212,42},{-62,42}}, color={0,0,127}));
          connect(mConChi_flow,valConEva. mConChi_flow) annotation (Line(points={{-280,
                  -120},{-256,-120},{-256,40},{-62,40}},     color={0,0,127}));
          connect(mEvaChiHea_flow,valConEva. mEvaChiHea_flow) annotation (Line(points={{-280,
                  -140},{-254,-140},{-254,38},{-62,38}},           color={0,0,127}));
          connect(mConChiHea_flow,valConEva. mConChiHea_flow) annotation (Line(points={{-280,
                  -160},{-252,-160},{-252,36},{-62,36}},           color={0,0,127}));
          connect(staPla.y1Chi,valConEva. u1Chi) annotation (Line(points={{-188,164},{
                  -164,164},{-164,58},{-62,58}},
                                            color={255,0,255}));
          connect(staPla.y1ChiHea,valConEva. u1ChiHea) annotation (Line(points={{-188,
                  154},{-166,154},{-166,56},{-62,56}}, color={255,0,255}));
          connect(staPla.y1CooChiHea,valConEva. u1CooChiHea) annotation (Line(points={{-188,
                  148},{-168,148},{-168,54},{-62,54}},      color={255,0,255}));
          connect(staPla.y1HeaCooChiHea,valConEva. u1HeaCooChiHea) annotation (Line(
                points={{-188,142},{-170,142},{-170,52},{-62,52}}, color={255,0,255}));
          connect(valConEva.yValEvaChi, yValEvaChi) annotation (Line(points={{-38,42},{
                  0,42},{0,320},{280,320}}, color={0,0,127}));
          connect(valConEva.yValConChi, yValConChi) annotation (Line(points={{-38,40},{
                  2,40},{2,300},{280,300}}, color={0,0,127}));
          connect(valConEva.yValConSwiChiHea, yValConSwiChiHea)
            annotation (Line(points={{-38,32},{260,32},{260,20},{280,20}},
                                                         color={0,0,127}));
          connect(valConEva.yValEvaSwiChiHea, yValEvaSwiHea) annotation (Line(points={{-38,34},
                  {240,34},{240,40},{280,40}},         color={0,0,127}));
          connect(valConEva.yValConChiHea, yValConChiHea) annotation (Line(points={{-38,36},
                  {238,36},{238,60},{280,60}},     color={0,0,127}));
          connect(valConEva.yValEvaChiHea, yValEvaChiHea) annotation (Line(points={{-38,38},
                  {236,38},{236,80},{280,80}},     color={0,0,127}));
          connect(dpConWatEva, pumConWatEva.u_m) annotation (Line(points={{-280,-400},{-240,
                  -400},{-240,-204},{200,-204},{200,-192}},      color={0,0,127}));
          connect(dpConWatCon, pumConWatCon.u_m) annotation (Line(points={{-280,-380},{-242,
                  -380},{-242,-144},{200,-144},{200,-132}},      color={0,0,127}));
          connect(cycTan.idxCycTan,valConEva. idxCycTan) annotation (Line(points={{-148,
                  -100},{-140,-100},{-140,48},{-62,48}},     color={255,127,0}));
          connect(modConLoo.mode,valConEva. mode) annotation (Line(points={{-148,-160},
                  {-144,-160},{-144,50},{-62,50}},     color={255,127,0}));
          connect(TChiWatSup, staPla.TChiWatSup) annotation (Line(points={{-280,260},{
                  -246,260},{-246,162},{-212,162}},         color={0,0,127}));
          connect(dpChiWatSet, staPla.dpChiWatSet) annotation (Line(points={{-280,320},
                  {-246,320},{-246,158},{-212,158}},         color={0,0,127}));
          connect(dpChiWat, staPla.dpChiWat) annotation (Line(points={{-280,-340},{-238,
                  -340},{-238,156},{-212,156}},         color={0,0,127}));
          connect(valConEva.y1PumChiWat, staPumChiWat.y1Ena) annotation (Line(points={{-38,58},
                  {-4,58},{-4,246},{118,246}},        color={255,0,255}));
          connect(pumChiWat.y, staPumChiWat.y) annotation (Line(points={{212,240},{220,240},
                  {220,220},{110,220},{110,234},{118,234}},   color={0,0,127}));
          connect(pumHeaWat.y, staPumHeaWat.y) annotation (Line(points={{212,-40},{220,
                  -40},{220,-60},{110,-60},{110,-46},{118,-46}},
                                                          color={0,0,127}));
          connect(valConEva.y1PumHeaWat, staPumHeaWat.y1Ena) annotation (Line(points={{-38,56},
                  {74,56},{74,-34},{118,-34}},    color={255,0,255}));
          connect(pumConWatCon.y, staPumConWatCon.y) annotation (Line(points={{212,-120},
                  {220,-120},{220,-140},{114,-140},{114,-126},{118,-126}},
                                                                    color={0,0,127}));
          connect(pumConWatEva.y, staPumConWatEva.y) annotation (Line(points={{212,-180},
                  {220,-180},{220,-200},{114,-200},{114,-186},{118,-186}},
                                                                        color={0,0,127}));
          connect(valConEva.y1PumConWatEva, staPumConWatEva.y1Ena) annotation (Line(
                points={{-38,52},{-4,52},{-4,-174},{118,-174}},color={255,0,255}));
          connect(valConEva.y1PumConWatCon, staPumConWatCon.y1Ena) annotation (Line(
                points={{-38,54},{-2,54},{-2,-114},{118,-114}},
                                                             color={255,0,255}));
          connect(staPla.y1Chi, y1Chi) annotation (Line(points={{-188,164},{-6,164},{-6,
                  340},{280,340}}, color={255,0,255}));
          connect(staPla.y1ChiHea, y1ChiHea) annotation (Line(points={{-188,154},{6,154},
                  {6,160},{280,160}}, color={255,0,255}));
          connect(staPla.y1CooChiHea, y1CooChiHea) annotation (Line(points={{-188,148},{
                  6,148},{6,140},{280,140}},   color={255,0,255}));
          connect(staPla.y1HeaCooChiHea, y1HeaCooChiHea) annotation (Line(points={{-188,
                  142},{4,142},{4,120},{280,120}},   color={255,0,255}));
          connect(staPla.y1ChiHea, dirHeaCoo.y1) annotation (Line(points={{-188,154},{
                  -166,154},{-166,8},{-122,8}},         color={255,0,255}));
          connect(staPla.y1HeaCooChiHea, dirHeaCoo.y1HeaCoo) annotation (Line(points={{-188,
                  142},{-170,142},{-170,4},{-126,4},{-126,4},{-122,4}},     color={255,
                  0,255}));
          connect(TChiWatSupSet, dirHeaCoo.TChiWatSupSet) annotation (Line(points={{-280,
                  360},{-254,360},{-254,0},{-122,0}},          color={0,0,127}));
          connect(TEvaLvgChiHea, dirHeaCoo.TEvaLvg) annotation (Line(points={{-280,140},
                  {-232,140},{-232,-4},{-122,-4}},      color={0,0,127}));
          connect(THeaWatPriRet, dirHeaCoo.THeaWatPriRet) annotation (Line(points={{-280,80},
                  {-242,80},{-242,-8},{-122,-8}},                color={0,0,127}));
          connect(dirHeaCoo.mEvaChiSet_flow,valConEva. mEvaChiSet_flow) annotation (
              Line(points={{-98,6},{-92,6},{-92,46},{-62,46}},         color={0,0,127}));
          connect(dirHeaCoo.mEvaChiHeaSet_flow,valConEva. mEvaChiHeaSet_flow)
            annotation (Line(points={{-98,0},{-88,0},{-88,44},{-62,44}},     color={0,0,
                  127}));
          connect(dpHeaWatSet, staPla.dpHeaWatSet) annotation (Line(points={{-280,300},
                  {-240,300},{-240,144},{-212,144}},color={0,0,127}));
          connect(dpHeaWat, staPla.dpHeaWat) annotation (Line(points={{-280,-360},{-234,
                  -360},{-234,142},{-212,142}}, color={0,0,127}));
          connect(THeaWatSup, staPla.THeaWatSup) annotation (Line(points={{-280,100},{-230,
                  100},{-230,148},{-212,148}},color={0,0,127}));
          connect(coo.y1PumConWatCoo, y1PumConWatCoo) annotation (Line(points={{62,-334},
                  {240,-334},{240,-320},{280,-320}}, color={255,0,255}));
          connect(coo.yPumConWatCoo, yPumConWatCoo) annotation (Line(points={{62,-340},
                  {280,-340}},                      color={0,0,127}));
          connect(coo.y1Coo, y1Coo) annotation (Line(points={{62,-352},{240,-352},{240,
                  -360},{280,-360}},
                               color={255,0,255}));
          connect(coo.yCoo, yCoo) annotation (Line(points={{62,-358},{236,-358},{236,
                  -380},{280,-380}},
                               color={0,0,127}));
          connect(cycTan.idxCycTan, coo.idxCycTan) annotation (Line(points={{-148,-100},
                  {0,-100},{0,-332},{38,-332}}, color={255,127,0}));
          connect(modConLoo.mode, coo.mode) annotation (Line(points={{-148,-160},{2,
                  -160},{2,-330},{38,-330}},
                                       color={255,127,0}));
          connect(TChiWatSupSet, coo.TChiWatSupSet) annotation (Line(points={{-280,360},
                  {-2,360},{-2,-336},{38,-336}}, color={0,0,127}));
          connect(TConWatConChiEnt, coo.TConWatConChiEnt) annotation (Line(points={{-280,40},
                  {-252,40},{-252,-338},{38,-338}},     color={0,0,127}));
          connect(TConWatConChiLvg, coo.TConWatConChiLvg) annotation (Line(points={{-280,20},
                  {-248,20},{-248,-340},{38,-340}},     color={0,0,127}));
          connect(TConWatCooSup, coo.TConWatCooSup) annotation (Line(points={{-280,0},{
                  -250,0},{-250,-343.8},{38,-343.8}},
                                                 color={0,0,127}));
          connect(TConWatCooRet, coo.TConWatCooRet) annotation (Line(points={{-280,-20},
                  {-244,-20},{-244,-345.8},{38,-345.8}},                       color={0,
                  0,127}));
          connect(TConWatHexCooEnt, coo.TConWatHexCooEnt) annotation (Line(points={{-280,
                  -40},{-248,-40},{-248,-347.8},{38,-347.8}}, color={0,0,127}));
          connect(TConWatHexCooLvg, coo.TConWatHexCooLvg) annotation (Line(points={{-280,
                  -60},{-236,-60},{-236,-349.8},{38,-349.8}}, color={0,0,127}));
          connect(staPla.QCooReq_flow, coo.QCooReq_flow) annotation (Line(points={{-188,
                  170},{-8,170},{-8,-354},{38,-354}}, color={0,0,127}));
          connect(mConWatHexCoo_flow, coo.mConWatHexCoo_flow) annotation (Line(points={{-280,
                  -280},{-232,-280},{-232,-358},{38,-358}},      color={0,0,127}));
          connect(cvtValBypTan.y, coo.yValBypTan) annotation (Line(points={{-18,-280},{
                  -6,-280},{-6,-362},{38,-362}},
                                              color={0,0,127}));
          connect(dirHeaCoo.TConEntChiHeaSet,valConEva. TConEntChiHeaSet) annotation (
              Line(points={{-98,-6},{-84,-6},{-84,34},{-62,34}},             color={0,0,
                  127}));
          connect(TConEntChiHea,valConEva. TConEntChiHea) annotation (Line(points={{-280,
                  180},{-220,180},{-220,32},{-62,32}},              color={0,0,127}));
          connect(staPumConWatCon.y1Any, pumConWatCon.uEna) annotation (Line(points={{142,
                  -120},{154,-120},{154,-136},{196,-136},{196,-132}}, color={255,0,255}));
          connect(staPumConWatEva.y1Any, pumConWatEva.uEna) annotation (Line(points={{142,
                  -180},{150,-180},{150,-198},{196,-198},{196,-192}}, color={255,0,255}));
          connect(staPumConWatCon.y1Any, assAndPum.u2) annotation (Line(points={{142,-120},
                  {154,-120},{154,-212},{184,-212}}, color={255,0,255}));
          connect(staPumHeaWat.y1Any, pumHeaWat.uEna) annotation (Line(points={{142,-40},
                  {152,-40},{152,-56},{196,-56},{196,-52}}, color={255,0,255}));
          connect(staPumChiWat.y1Any, pumChiWat.uEna) annotation (Line(points={{142,240},
                  {170,240},{170,224},{196,224},{196,228}}, color={255,0,255}));
          connect(valConEva.yValConWatEvaMix, yValConWatEvaMix) annotation (Line(points={{-38,30},
                  {240,30},{240,0},{280,0}},                  color={0,0,127}));
          connect(TEvaLvgChiHea, valConEva.TEvaLvgChiHea) annotation (Line(points={{-280,
                  140},{-244,140},{-244,26},{-62,26}},              color={0,0,127}));
          connect(TConWatEvaEnt, valConEva.TConWatEvaEnt) annotation (Line(points={{-280,
                  200},{-256,200},{-256,22},{-62,22}},      color={0,0,127}));
          connect(TConLvgChiHea, valConEva.TConLvgChiHea) annotation (Line(points={{-280,
                  160},{-250,160},{-250,30},{-62,30}},      color={0,0,127}));
          connect(TConLvgChi, valConEva.TConLvgChi) annotation (Line(points={{-280,120},
                  {-258,120},{-258,28},{-62,28}}, color={0,0,127}));
          connect(TConWatConRet, valConEva.TConWatConRet) annotation (Line(points={{-280,
                  220},{-242,220},{-242,24},{-62,24}},      color={0,0,127}));
          connect(valConEva.yValChiWatMinByp, yValChiWatMinByp) annotation (Line(points={{-38,48},
                  {6,48},{6,200},{280,200}},          color={0,0,127}));
          connect(valConEva.yValHeaWatMinByp, yValHeaWatMinByp) annotation (Line(points={{-38,46},
                  {6,46},{6,-80},{280,-80}},          color={0,0,127}));
          connect(valConEva.yValConWatByp, yValConWatByp) annotation (Line(points={{-38,26},
                  {4,26},{4,-420},{280,-420}},     color={0,0,127}));
          connect(mConWatCon_flow, modConLoo.mConWatCon_flow) annotation (Line(points={
                  {-280,-240},{-232,-240},{-232,-164},{-172,-164}}, color={0,0,127}));
          connect(TConWatConChiLvg, modConLoo.TConWatConChiLvg) annotation (Line(points
                ={{-280,20},{-246,20},{-246,-166},{-172,-166}}, color={0,0,127}));
          connect(TConWatConRet, modConLoo.TConWatConRet) annotation (Line(points={{
                  -280,220},{-232,220},{-232,-168},{-172,-168}}, color={0,0,127}));
          connect(u1Coo, u1CooOrHea.u1)
            annotation (Line(points={{-280,440},{-162,440}}, color={255,0,255}));
          connect(u1Hea, u1CooOrHea.u2) annotation (Line(points={{-280,400},{-180,400},
                  {-180,432},{-162,432}}, color={255,0,255}));
          connect(u1CooOrHea.y, valConEva.u1CooOrHea) annotation (Line(points={{-138,
                  440},{-57.8,440},{-57.8,62}}, color={255,0,255}));
        annotation (
          defaultComponentName="ctl", Documentation(info="<html>
<p>
This block implements the following control functions.
</p>
<ul>
<li>
Plant heating and cooling staging and HRC operating mode selection,
see description in
<a href=\"modelica://Buildings.Experimental.DHC.Plants.Combined.Controls.BaseClasses.StagingPlant\">
Buildings.Experimental.DHC.Plants.Combined.Controls.BaseClasses.StagingPlant</a>.
</li>
<li>
CW loop operating mode selection, see description in
<a href=\"modelica://Buildings.Experimental.DHC.Plants.Combined.Controls.BaseClasses.ModeCondenserLoop\">
Buildings.Experimental.DHC.Plants.Combined.Controls.BaseClasses.ModeCondenserLoop</a>.
</li>
<li>
TES tank cycle flag selection, see description in
<a href=\"modelica://Buildings.Experimental.DHC.Plants.Combined.Controls.BaseClasses.TankCycle\">
Buildings.Experimental.DHC.Plants.Combined.Controls.BaseClasses.TankCycle</a>.
</li>
<li>
Load balancing, temperature and flow setpoint tracking for chillers and HRCs
depending on active operating modes, see description in
<a href=\"modelica://Buildings.Experimental.DHC.Plants.Combined.Controls.BaseClasses.ValveCondenserEvaporator\">
Buildings.Experimental.DHC.Plants.Combined.Controls.BaseClasses.ValveCondenserEvaporator</a>.
</li>
<li>
Cooling tower pumps and cooling tower fans control, see description in
<a href=\"modelica://Buildings.Experimental.DHC.Plants.Combined.Controls.BaseClasses.CoolingTowerLoop\">
Buildings.Experimental.DHC.Plants.Combined.Controls.BaseClasses.CoolingTowerLoop</a>.
</li>
<li>
Air-to-water heat pump control, see below.
</li>
<li>
CHW, HW, CWE and CWC pumps, see below.
</li>
</ul>
<h4>Heat pumps</h4>
<p>
Heat pumps are enabled whenever Charge Assist mode is active and any
CWC pump is enabled. Heat pumps are disabled otherwise.
</p>
<p>
The supply temperature setpoint is <i>3&nbsp;</i>K plus the highest
setpoint of the active tank cycle.
Note that no limitation of the setpoint value per HP manufacturer specification
is taken into account.
</p>
<h4>CHW, HW, CWE and CWC pumps</h4>
<p>
The lead pump is enabled based on the logic described in
<a href=\"modelica://Buildings.Experimental.DHC.Plants.Combined.Controls.BaseClasses.ValveCondenserEvaporator\">
Buildings.Experimental.DHC.Plants.Combined.Controls.BaseClasses.ValveCondenserEvaporator</a>.
</p>
<p>
Pumps are staged based on the logic described in
<a href=\"modelica://Buildings.Experimental.DHC.Plants.Combined.Controls.BaseClasses.StagingPump\">
Buildings.Experimental.DHC.Plants.Combined.Controls.BaseClasses.StagingPump</a>.
</p>
<p>
When any pump is enabled, the pump speed is modulated by a PI controller tracking
a differential pressure setpoint at the boundaries of the circuit served by the pump.
The control loop is biased to launch from <i>100&nbsp;%</i> (maximum speed).
All pumps within the same group receive the same speed command signal.
</p>
<p>
The differential pressure setpoint for the CHW and HW loops is provided as a control input.
Ideally, a reset logic based on consumer valve requests should be implemented to adapt
those setpoints to the demand.
For the sake of simplicity, the differential pressure setpoint for the CWC and CWE loops
is a fixed parameter (design pressure drop).
</p>
</html>",         revisions="<html>
<ul>
<li>
February 24, 2023, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>"));
        end Controller;

        package ModeCondenserLoop "Condenser loop operating modes"

          constant Integer tankCharge = 1 "Tank Charge/Discharge";
          constant Integer chargeAssist = 2  "Charge Assist";
          constant Integer heatRejection = 3 "Heat Rejection";

          annotation (Documentation(info="<html>
<p>
This package contains constant definitions representing
the operating modes of the condenser water loop.
</p>
</html>"));
        end ModeCondenserLoop;

        package BaseClasses "Package with base classes"
          extends Modelica.Icons.BasesPackage;
          block CoolingTowerLoop "Cooling tower loop control"

            parameter Modelica.Units.SI.MassFlowRate mConWatHexCoo_flow_nominal
              "Design total CW mass flow rate through condenser barrels (all units)";
            parameter Integer nCoo(final min=1, start=1)
              "Number of cooling tower cells operating at design conditions"
              annotation (Evaluate=true);
            parameter Integer nPumConWatCoo(final min=1, start=1)
              "Number of CW pumps serving cooling towers at design conditions"
              annotation (Evaluate=true);
            parameter Modelica.Units.SI.HeatFlowRate QChiWat_flow_nominal
              "Design plant cooling heat flow rate (all units)";
            parameter Modelica.Units.SI.TemperatureDifference dTLifChi_min
              "Minimum chiller lift at minimum load";
            parameter Modelica.Units.SI.TemperatureDifference dTLifChi_nominal
              "Design chiller lift";
            parameter Modelica.Units.SI.Temperature TTanSet[2, 2]
              "Tank temperature setpoints: 2 cycles with 2 setpoints";
            parameter Modelica.Units.SI.TemperatureDifference dTHexCoo_nominal
              "Design heat exchanger approach";
            parameter Real yPumConWatCoo_min[nPumConWatCoo](each final unit="1")=
              {0.2/i for i in 1:nPumConWatCoo}
              "Tower pump speed needed to maintain minimum tower flow (each pump stage)";

            Buildings.Controls.OBC.CDL.Interfaces.IntegerInput mode(
              final min=estcp.DHC.Plants.Combined.Controls.ModeCondenserLoop.tankCharge,
              final max=estcp.DHC.Plants.Combined.Controls.ModeCondenserLoop.heatRejection)
              "Condenser loop operating mode"
              annotation (Placement(transformation(extent={{-220,240},{-180,280}}),
                  iconTransformation(extent={{-140,140},{-100,180}})));
            Buildings.Controls.OBC.CDL.Interfaces.IntegerInput idxCycTan(
              final min=1,
              final max=2)
              "Index of active tank cycle"
              annotation (Placement(transformation(extent={{-220,200},{-180,240}}),
              iconTransformation(extent={{-140,120},{-100,160}})));
            Buildings.Controls.OBC.CDL.Interfaces.RealInput TConWatCooSup(final unit="K",
                displayUnit="degC") "Cooling tower loop CW supply temperature"
              annotation (Placement(transformation(extent={{-220,-200},{-180,-160}}),
                  iconTransformation(extent={{-140,2},{-100,42}})));
            Buildings.Controls.OBC.CDL.Interfaces.RealInput mConWatHexCoo_flow(
              final unit="kg/s")
              "CW mass flow rate through secondary side of HX"
                annotation (
                Placement(transformation(extent={{-220,-20},{-180,20}}),
                  iconTransformation(extent={{-140,-140},{-100,-100}})));
            Buildings.Controls.OBC.CDL.Interfaces.RealInput  QCooReq_flow(
              final unit="W")
              "Plant required cooling capacity (>0)" annotation (
                Placement(transformation(extent={{-220,140},{-180,180}}),
                  iconTransformation(extent={{-140,-100},{-100,-60}})));
            Buildings.Controls.OBC.CDL.Interfaces.RealInput TConWatConChiEnt(final unit=
                  "K", displayUnit="degC") "Chiller and HRC entering CW temperature"
              annotation (Placement(transformation(extent={{-220,40},{-180,80}}),
                  iconTransformation(extent={{-140,60},{-100,100}})));
            Buildings.Controls.OBC.CDL.Interfaces.RealInput TConWatConChiLvg(final unit=
                  "K", displayUnit="degC") "Chiller and HRC leaving CW temperature"
              annotation (Placement(transformation(extent={{-220,20},{-180,60}}),
                  iconTransformation(extent={{-140,40},{-100,80}})));
            Buildings.Controls.OBC.CDL.Interfaces.RealInput TChiWatSupSet(final unit="K",
                displayUnit="degC") "CHW supply temperature setpoint" annotation (
                Placement(transformation(extent={{-220,80},{-180,120}}),
                  iconTransformation(extent={{-140,80},{-100,120}})));
            Buildings.Controls.OBC.CDL.Interfaces.RealInput TConWatCooRet(final unit="K",
                displayUnit="degC") "Cooling tower loop CW return temperature"
              annotation (Placement(transformation(extent={{-220,-220},{-180,-180}}),
                  iconTransformation(extent={{-140,-18},{-100,22}})));
            Buildings.Controls.OBC.CDL.Interfaces.RealInput yValBypTan(final unit="1")
              "TES tank bypass valve commanded position" annotation (Placement(
                  transformation(extent={{-220,-100},{-180,-60}}),  iconTransformation(
                    extent={{-140,-180},{-100,-140}})));
            Buildings.Controls.OBC.CDL.Interfaces.RealInput TConWatHexCooEnt(final unit=
                  "K", displayUnit="degC") "HX entering CW temperature" annotation (
                Placement(transformation(extent={{-220,-260},{-180,-220}}),
                  iconTransformation(extent={{-140,-38},{-100,2}})));
            Buildings.Controls.OBC.CDL.Interfaces.RealInput TConWatHexCooLvg(final unit=
                  "K", displayUnit="degC") "HX leaving CW temperature" annotation (
                Placement(transformation(extent={{-220,-280},{-180,-240}}),
                  iconTransformation(extent={{-140,-58},{-100,-18}})));
            Buildings.Controls.OBC.CDL.Interfaces.BooleanOutput y1PumConWatCoo[
              nPumConWatCoo] "Cooling tower pump Start command" annotation (Placement(
                  transformation(extent={{180,40},{220,80}}),   iconTransformation(extent
                    ={{100,100},{140,140}})));
            Buildings.Controls.OBC.CDL.Interfaces.RealOutput yCoo
              "Cooling tower fan speed command" annotation (Placement(transformation(
                    extent={{180,-80},{220,-40}}),  iconTransformation(extent={{100,-140},
                      {140,-100}})));
            Buildings.Controls.OBC.CDL.Interfaces.RealOutput yPumConWatCoo
              "Cooling tower pump speed command" annotation (Placement(transformation(
                    extent={{180,-240},{220,-200}}), iconTransformation(extent={{100,40},{
                      140,80}})));
            Buildings.Controls.OBC.CDL.Interfaces.BooleanOutput y1Coo[nCoo]
              "Cooling tower Start command" annotation (Placement(transformation(extent={{180,
                      -140},{220,-100}}),    iconTransformation(extent={{100,-80},{140,
                      -40}})));
            Buildings.Controls.OBC.CDL.Reals.Subtract delTemCon "Compute CW deltaT"
              annotation (Placement(transformation(extent={{-160,30},{-140,50}})));
            Buildings.Controls.OBC.CDL.Reals.MovingAverage mea(delta=5*60)
              "Moving mean"
              annotation (Placement(transformation(extent={{-130,30},{-110,50}})));
            Buildings.Controls.OBC.CDL.Reals.Subtract delTem1 "Compute deltaT"
              annotation (Placement(transformation(extent={{-100,60},{-80,80}})));
            Buildings.Controls.OBC.CDL.Reals.Add lifPlu "Add target lift"
              annotation (Placement(transformation(extent={{-130,90},{-110,110}})));
            Buildings.Controls.OBC.CDL.Reals.AddParameter subApp(final p=-
                  dTHexCoo_nominal) "Substract HX approach"
              annotation (Placement(transformation(extent={{-70,60},{-50,80}})));
            Buildings.Controls.OBC.CDL.Reals.Switch TSupSetUnb(y(unit="K",
                  displayUnit="degC"))
              "Compute tower supply temperature setpoint, unbounded" annotation (
                Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={-20,260})));
            Buildings.Controls.OBC.CDL.Integers.Sources.Constant modRej(
              final k=estcp.DHC.Plants.Combined.Controls.ModeCondenserLoop.heatRejection)
              "Heat rejection mode index"
              annotation (Placement(transformation(extent={{-150,230},{-130,250}})));
            Buildings.Controls.OBC.CDL.Integers.Equal isModRej "Heat rejection mode"
              annotation (Placement(transformation(extent={{-110,250},{-90,270}})));
            Buildings.Controls.OBC.CDL.Reals.Sources.Constant setOth[2](final k=
                  TTanSet[:, 1] .- dTHexCoo_nominal)
              "Target setpoint in any mode other than heat rejection"
              annotation (Placement(transformation(extent={{-110,190},{-90,210}})));
            Buildings.Controls.OBC.CDL.Routing.RealExtractor extSet(final nin=2)
              "Extract setpoint value based on current mode"
              annotation (Placement(transformation(extent={{-70,230},{-50,250}})));
            Buildings.Controls.OBC.CDL.Reals.MultiplyByParameter ratDes(final k=abs(1
                  /QChiWat_flow_nominal)) "Ratio to design capacity"
              annotation (Placement(transformation(extent={{-160,150},{-140,170}})));
            Buildings.Controls.OBC.CDL.Reals.Line lif "Compute target chiller lift"
              annotation (Placement(transformation(extent={{-110,130},{-90,150}})));
            Buildings.Controls.OBC.CDL.Reals.Sources.Constant xLif[2](k={0.1,1})
              "x-value for lift reset"
              annotation (Placement(transformation(extent={{-160,180},{-140,200}})));
            Buildings.Controls.OBC.CDL.Reals.Sources.Constant yLif[2](final k={
                  dTLifChi_min,dTLifChi_nominal}) "y-value for lift reset"
              annotation (Placement(transformation(extent={{-160,120},{-140,140}})));
            StagingPump staPum(
              nPum=nPumConWatCoo,
              have_flowCriterion=false,
              yDow=0.4,
              yUp=0.8)
              "Stage pumps"
              annotation (Placement(transformation(extent={{100,50},{120,70}})));
            Buildings.Controls.OBC.CDL.Reals.GreaterThreshold cmpFlo(t=0.025*
                  mConWatHexCoo_flow_nominal, h=0.025*mConWatHexCoo_flow_nominal/2)
              "Flow criterion to enable lead pump"
              annotation (Placement(transformation(extent={{-160,-10},{-140,10}})));
            Buildings.Controls.OBC.CDL.Logical.Timer timFlo(t=60)
              "Timer for flow exceeding triggering limit"
              annotation (Placement(transformation(extent={{-130,-10},{-110,10}})));
            Buildings.Controls.OBC.CDL.Logical.Timer timFlo1(t=5*60)
              "Timer for flow exceeding triggering limit"
              annotation (Placement(transformation(extent={{-130,-50},{-110,-30}})));
            Buildings.Controls.OBC.CDL.Reals.LessThreshold cmpOpe(t=0.99, h=0.005)
              "Valve opening criterion to enable lead pump"
              annotation (Placement(transformation(extent={{-160,-90},{-140,-70}})));
            Buildings.Controls.OBC.CDL.Logical.Timer timOpe(t=60)
              "Timer for valve opening exceeding triggering limit"
              annotation (Placement(transformation(extent={{-130,-90},{-110,-70}})));
            Buildings.Controls.OBC.CDL.Logical.Timer timOpe1(t=60)
              "Timer for valve opening exceeding triggering limit"
              annotation (Placement(transformation(extent={{-130,-130},{-110,-110}})));
            Buildings.Controls.OBC.CDL.Logical.Not not1
              "Valve opening criterion to disable lead pump"
              annotation (Placement(transformation(extent={{-160,-130},{-140,-110}})));
            Buildings.Controls.OBC.CDL.Logical.Or dis "Disable condition"
              annotation (Placement(transformation(extent={{-90,-80},{-70,-60}})));
            Buildings.Controls.OBC.CDL.Logical.And ena "Enable condition"
              annotation (Placement(transformation(extent={{-90,-10},{-70,10}})));
            Buildings.Controls.OBC.CDL.Logical.Latch enaLea "Enable lead pump"
              annotation (Placement(transformation(extent={{-30,-50},{-10,-30}})));
            Buildings.Controls.OBC.CDL.Reals.Subtract delTem2 "Compute deltaT"
              annotation (Placement(transformation(extent={{-160,-250},{-140,-230}})));
            Buildings.Controls.OBC.CDL.Reals.Subtract delTem3 "Compute deltaT"
              annotation (Placement(transformation(extent={{-160,-210},{-140,-190}})));
            Buildings.Controls.OBC.CDL.Reals.AddParameter addOff(final p=-1)
              "Add offset"
              annotation (Placement(transformation(extent={{-130,-250},{-110,-230}})));
            Buildings.Controls.OBC.CDL.Reals.AddParameter addApp(final p=
                  dTHexCoo_nominal) "Add HX approach"
              annotation (Placement(transformation(extent={{-40,-210},{-20,-190}})));
            EnergyTransferStations.Combined.Controls.PIDWithEnable ctlPum1(
              k=0.01,
              Ti=60,
              final reverseActing=false) "Pump control loop #1"
              annotation (Placement(transformation(extent={{-10,-210},{10,-190}})));
            EnergyTransferStations.Combined.Controls.PIDWithEnable ctlPum2(
              k=0.01,
              Ti=60,
              final reverseActing=false)
                                        "Pump control loop #1"
              annotation (Placement(transformation(extent={{-10,-250},{10,-230}})));
            Buildings.Controls.OBC.CDL.Reals.Min minCtlPum "Minimum loop output"
              annotation (Placement(transformation(extent={{30,-230},{50,-210}})));
            Buildings.Controls.OBC.CDL.Reals.Line pum "Pump speed command"
              annotation (Placement(transformation(extent={{120,-230},{140,-210}})));
            Buildings.Controls.OBC.CDL.Reals.Sources.Constant xPum[2](k={0,1})
              "x-value for pump speed reset"
              annotation (Placement(transformation(extent={{90,-210},{110,-190}})));
            Buildings.Controls.OBC.CDL.Reals.Sources.Constant one(final k=1)
              "Constant"
              annotation (Placement(transformation(extent={{90,-260},{110,-240}})));
            Buildings.Controls.OBC.CDL.Reals.Sources.Constant yPumMin[nPumConWatCoo](
               final k=yPumConWatCoo_min) "Minimum pump speed"
              annotation (Placement(transformation(extent={{30,-260},{50,-240}})));
            Buildings.Controls.OBC.CDL.Routing.RealExtractor extYPumMin(final nin=
                  nPumConWatCoo)
              "Extract minimum pump speed value based on current pump stage"
              annotation (Placement(transformation(extent={{60,-260},{80,-240}})));
            Modelica.Blocks.Sources.IntegerExpression nPumBou(y=max(1, staPum.nPumEna))
              "Number of pumps commanded on, bounded by 1"
              annotation (Placement(transformation(extent={{30,-284},{50,-264}})));
            Buildings.Controls.OBC.CDL.Reals.Line fanMax "Compute maximum fan speed"
              annotation (Placement(transformation(extent={{70,150},{90,170}})));
            Buildings.Controls.OBC.CDL.Reals.Sources.Constant xFan[2](k={0,0.5})
              "x-value for maximum fan speed reset"
              annotation (Placement(transformation(extent={{30,180},{50,200}})));
            Buildings.Controls.OBC.CDL.Reals.Sources.Constant yFan[2](final k={0.7,1.0})
              "y-value for maximum fan speed reset"
              annotation (Placement(transformation(extent={{30,120},{50,140}})));
            EnergyTransferStations.Combined.Controls.PIDWithEnable ctlFan(
              k=0.05,
              Ti=60,
              final reverseActing=false) "Fan control loop"
              annotation (Placement(transformation(extent={{80,-70},{100,-50}})));
            Buildings.Controls.OBC.CDL.Logical.Pre pre1
              "Left limit of signal to avoid direct feedback"
              annotation (Placement(transformation(extent={{-10,-10},{10,10}},
                  rotation=-90,
                  origin={-60,-150})));
            Buildings.Controls.OBC.CDL.Reals.Sources.Constant setMax(k=25 + 273.15)
              "Maximum setpoint"
              annotation (Placement(transformation(extent={{-70,190},{-50,210}})));
            Buildings.Controls.OBC.CDL.Reals.Min TSupSet(
              y(unit="K", displayUnit="degC"))
              "Compute tower supply temperature setpoint"
              annotation (Placement(transformation(extent={{-30,190},{-10,210}})));
            Buildings.Controls.OBC.CDL.Reals.Line fan "Compute fan speed"
              annotation (Placement(transformation(extent={{150,-70},{170,-50}})));
            Buildings.Controls.OBC.CDL.Reals.Sources.Constant xFan1    [2](k={0,1})
              "x-value for fan speed reset"
              annotation (Placement(transformation(extent={{110,-50},{130,-30}})));
            Buildings.Controls.OBC.CDL.Reals.Sources.Constant yFan1(final k=0)
              "y-value for fan speed reset"
              annotation (Placement(transformation(extent={{110,-90},{130,-70}})));
            Buildings.Controls.OBC.CDL.Logical.Not not2
              "Flow criterion to disable lead pump"
              annotation (Placement(transformation(extent={{-160,-50},{-140,-30}})));
            Buildings.Controls.OBC.CDL.Routing.BooleanScalarReplicator rep(final nout=
                  nCoo) "Replicate"
              annotation (Placement(transformation(extent={{110,-130},{130,-110}})));
            Buildings.Controls.OBC.CDL.Logical.Not notDis "Not disabled"
              annotation (Placement(transformation(extent={{-90,-40},{-70,-20}})));
            Buildings.Controls.OBC.CDL.Logical.And enaAndNotDis
              "Reset enable condition when disable is true to trigger latch block when (enable, disable) becomes (true, false) again"
              annotation (Placement(transformation(extent={{-60,-10},{-40,10}})));
          equation
            connect(QCooReq_flow, ratDes.u)
              annotation (Line(points={{-200,160},{-162,160}},
                                                             color={0,0,127}));
            connect(ratDes.y, lif.u)
              annotation (Line(points={{-138,160},{-126,160},{-126,140},{-112,140}},
                                                           color={0,0,127}));
            connect(xLif[1].y, lif.x1) annotation (Line(points={{-138,190},{-120,190},{
                    -120,148},{-112,148}},
                               color={0,0,127}));
            connect(xLif[2].y, lif.x2) annotation (Line(points={{-138,190},{-120,190},{
                    -120,136},{-112,136}},
                               color={0,0,127}));
            connect(yLif[1].y, lif.f1) annotation (Line(points={{-138,130},{-116,130},{
                    -116,144},{-112,144}},
                               color={0,0,127}));
            connect(yLif[2].y, lif.f2) annotation (Line(points={{-138,130},{-116,130},{
                    -116,132},{-112,132}},
                               color={0,0,127}));
            connect(TConWatConChiLvg, delTemCon.u1) annotation (Line(points={{-200,40},{-170,
                    40},{-170,46},{-162,46}}, color={0,0,127}));
            connect(TConWatConChiEnt, delTemCon.u2) annotation (Line(points={{-200,60},{-174,
                    60},{-174,34},{-162,34}}, color={0,0,127}));
            connect(delTemCon.y, mea.u)
              annotation (Line(points={{-138,40},{-132,40}}, color={0,0,127}));
            connect(lif.y, lifPlu.u1) annotation (Line(points={{-88,140},{-80,140},{-80,
                    116},{-140,116},{-140,106},{-132,106}},
                                                    color={0,0,127}));
            connect(TChiWatSupSet, lifPlu.u2) annotation (Line(points={{-200,100},{-140,
                    100},{-140,94},{-132,94}},
                                          color={0,0,127}));
            connect(lifPlu.y, delTem1.u1) annotation (Line(points={{-108,100},{-104,100},
                    {-104,76},{-102,76}},
                                     color={0,0,127}));
            connect(mea.y, delTem1.u2) annotation (Line(points={{-108,40},{-104,40},{-104,
                    64},{-102,64}},  color={0,0,127}));
            connect(delTem1.y,subApp. u)
              annotation (Line(points={{-78,70},{-72,70}},  color={0,0,127}));
            connect(mode, isModRej.u1)
              annotation (Line(points={{-200,260},{-112,260}}, color={255,127,0}));
            connect(modRej.y, isModRej.u2) annotation (Line(points={{-128,240},{-120,240},
                    {-120,252},{-112,252}}, color={255,127,0}));
            connect(isModRej.y, TSupSetUnb.u2)
              annotation (Line(points={{-88,260},{-32,260}}, color={255,0,255}));
            connect(subApp.y, TSupSetUnb.u1) annotation (Line(points={{-48,70},{-40,70},{-40,
                    268},{-32,268}}, color={0,0,127}));
            connect(setOth.y,extSet. u) annotation (Line(points={{-88,200},{-80,200},{-80,
                    240},{-72,240}}, color={0,0,127}));
            connect(extSet.y, TSupSetUnb.u3) annotation (Line(points={{-48,240},{-36,240},
                    {-36,252},{-32,252}}, color={0,0,127}));
            connect(mConWatHexCoo_flow, cmpFlo.u) annotation (Line(points={{-200,0},{-162,
                    0}},                              color={0,0,127}));
            connect(cmpFlo.y, timFlo.u)
              annotation (Line(points={{-138,0},{-132,0}},     color={255,0,255}));
            connect(yValBypTan, cmpOpe.u)
              annotation (Line(points={{-200,-80},{-162,-80}},   color={0,0,127}));
            connect(not1.y, timOpe1.u)
              annotation (Line(points={{-138,-120},{-132,-120}}, color={255,0,255}));
            connect(cmpOpe.y, timOpe.u)
              annotation (Line(points={{-138,-80},{-132,-80}},   color={255,0,255}));
            connect(cmpOpe.y, not1.u) annotation (Line(points={{-138,-80},{-134,-80},{-134,
                    -100},{-170,-100},{-170,-120},{-162,-120}},      color={255,0,255}));
            connect(timFlo.passed, ena.u1) annotation (Line(points={{-108,-8},{-104,-8},{
                    -104,0},{-92,0}},      color={255,0,255}));
            connect(timOpe.passed, ena.u2) annotation (Line(points={{-108,-88},{-100,-88},
                    {-100,-8},{-92,-8}},         color={255,0,255}));
            connect(timFlo1.passed, dis.u1) annotation (Line(points={{-108,-48},{-104,-48},
                    {-104,-70},{-92,-70}},  color={255,0,255}));
            connect(timOpe1.passed, dis.u2) annotation (Line(points={{-108,-128},{-96,
                    -128},{-96,-78},{-92,-78}},   color={255,0,255}));
            connect(dis.y,enaLea. clr) annotation (Line(points={{-68,-70},{-40,-70},{-40,
                    -46},{-32,-46}},     color={255,0,255}));
            connect(enaLea.y, staPum.y1Ena) annotation (Line(points={{-8,-40},{20,-40},{
                    20,66},{98,66}},      color={255,0,255}));
            connect(TConWatCooRet, delTem3.u1) annotation (Line(points={{-200,-200},{-166,
                    -200},{-166,-194},{-162,-194}},                         color={0,0,127}));
            connect(TConWatCooSup, delTem3.u2) annotation (Line(points={{-200,-180},{-170,
                    -180},{-170,-206},{-162,-206}}, color={0,0,127}));
            connect(TConWatHexCooEnt, delTem2.u1) annotation (Line(points={{-200,-240},{
                    -166,-240},{-166,-234},{-162,-234}},
                                                    color={0,0,127}));
            connect(delTem2.y, addOff.u)
              annotation (Line(points={{-138,-240},{-132,-240}}, color={0,0,127}));
            connect(addApp.y, ctlPum1.u_s)
              annotation (Line(points={{-18,-200},{-12,-200}}, color={0,0,127}));
            connect(delTem3.y, ctlPum2.u_m) annotation (Line(points={{-138,-200},{-90,
                    -200},{-90,-260},{0,-260},{0,-252}},
                                                   color={0,0,127}));
            connect(addOff.y, ctlPum2.u_s)
              annotation (Line(points={{-108,-240},{-12,-240}}, color={0,0,127}));
            connect(ctlPum1.y, minCtlPum.u1) annotation (Line(points={{12,-200},{20,-200},
                    {20,-214},{28,-214}}, color={0,0,127}));
            connect(ctlPum2.y, minCtlPum.u2) annotation (Line(points={{12,-240},{20,-240},
                    {20,-226},{28,-226}}, color={0,0,127}));
            connect(xPum[1].y, pum.x1) annotation (Line(points={{112,-200},{114,-200},{114,
                    -212},{118,-212}},
                                color={0,0,127}));
            connect(xPum[2].y, pum.x2) annotation (Line(points={{112,-200},{114,-200},{114,
                    -224},{118,-224}},
                                color={0,0,127}));
            connect(pum.y, yPumConWatCoo) annotation (Line(points={{142,-220},{200,-220}},
                                       color={0,0,127}));
            connect(one.y, pum.f2) annotation (Line(points={{112,-250},{114,-250},{114,-228},
                    {118,-228}},color={0,0,127}));
            connect(minCtlPum.y, pum.u)
              annotation (Line(points={{52,-220},{118,-220}},color={0,0,127}));
            connect(idxCycTan,extSet. index) annotation (Line(points={{-200,220},{-60,220},
                    {-60,228}}, color={255,127,0}));
            connect(yPumMin.y, extYPumMin.u)
              annotation (Line(points={{52,-250},{58,-250}}, color={0,0,127}));
            connect(nPumBou.y, extYPumMin.index) annotation (Line(points={{51,-274},{70,-274},
                    {70,-262}}, color={255,127,0}));
            connect(extYPumMin.y, pum.f1) annotation (Line(points={{82,-250},{84,-250},{84,
                    -216},{118,-216}},color={0,0,127}));
            connect(xFan[1].y, fanMax.x1) annotation (Line(points={{52,190},{60,190},{60,168},
                    {68,168}}, color={0,0,127}));
            connect(xFan[2].y, fanMax.x2) annotation (Line(points={{52,190},{60,190},{60,156},
                    {68,156}}, color={0,0,127}));
            connect(yFan[1].y, fanMax.f1) annotation (Line(points={{52,130},{64,130},{64,164},
                    {68,164}}, color={0,0,127}));
            connect(yFan[2].y, fanMax.f2) annotation (Line(points={{52,130},{64,130},{64,152},
                    {68,152}}, color={0,0,127}));
            connect(ratDes.y, fanMax.u)
              annotation (Line(points={{-138,160},{68,160}}, color={0,0,127}));
            connect(enaLea.y, pre1.u) annotation (Line(points={{-8,-40},{20,-40},{20,-80},
                    {-60,-80},{-60,-138}}, color={255,0,255}));
            connect(TConWatCooSup, ctlFan.u_m) annotation (Line(points={{-200,-180},{90,-180},
                    {90,-72}},  color={0,0,127}));
            connect(pum.y, staPum.y) annotation (Line(points={{142,-220},{176,-220},{176,40},
                    {94,40},{94,54},{98,54}},     color={0,0,127}));
            connect(pre1.y, ctlPum1.uEna) annotation (Line(points={{-60,-162},{-60,-216},
                    {-4,-216},{-4,-212}},color={255,0,255}));
            connect(pre1.y, ctlPum2.uEna) annotation (Line(points={{-60,-162},{-60,-256},
                    {-4,-256},{-4,-252}},color={255,0,255}));
            connect(staPum.y1, y1PumConWatCoo)
              annotation (Line(points={{122,66},{170,66},{170,60},{200,60}},
                                                         color={255,0,255}));
            connect(setMax.y, TSupSet.u2) annotation (Line(points={{-48,200},{-44,200},{-44,
                    194},{-32,194}}, color={0,0,127}));
            connect(TSupSetUnb.y, TSupSet.u1) annotation (Line(points={{-8,260},{0,260},{0,
                    220},{-34,220},{-34,206},{-32,206}}, color={0,0,127}));
            connect(TSupSet.y, ctlFan.u_s) annotation (Line(points={{-8,200},{0,200},{0,-60},
                    {78,-60}}, color={0,0,127}));
            connect(TSupSet.y, addApp.u) annotation (Line(points={{-8,200},{0,200},{0,
                    -100},{-80,-100},{-80,-200},{-42,-200}},             color={0,0,127}));
            connect(TConWatHexCooLvg, delTem2.u2) annotation (Line(points={{-200,-260},{
                    -170,-260},{-170,-246},{-162,-246}}, color={0,0,127}));
            connect(TConWatHexCooLvg, ctlPum1.u_m) annotation (Line(points={{-200,-260},{
                    -170,-260},{-170,-220},{0,-220},{0,-212}}, color={0,0,127}));
            connect(xFan1[1].y, fan.x1) annotation (Line(points={{132,-40},{144,-40},{144,
                    -52},{148,-52}},   color={0,0,127}));
            connect(xFan1[2].y, fan.x2) annotation (Line(points={{132,-40},{144,-40},{144,
                    -64},{148,-64}},   color={0,0,127}));
            connect(yFan1.y, fan.f1) annotation (Line(points={{132,-80},{146,-80},{146,-56},
                    {148,-56}}, color={0,0,127}));
            connect(ctlFan.y, fan.u)
              annotation (Line(points={{102,-60},{148,-60}}, color={0,0,127}));
            connect(fan.y, yCoo)
              annotation (Line(points={{172,-60},{200,-60}}, color={0,0,127}));
            connect(fanMax.y, fan.f2) annotation (Line(points={{92,160},{140,160},{140,-68},
                    {148,-68}}, color={0,0,127}));
            connect(enaLea.y, ctlFan.uEna) annotation (Line(points={{-8,-40},{20,-40},{20,
                    -80},{86,-80},{86,-72}},                     color={255,0,255}));
            connect(cmpFlo.y, not2.u) annotation (Line(points={{-138,0},{-134,0},{-134,
                    -20},{-166,-20},{-166,-40},{-162,-40}}, color={255,0,255}));
            connect(not2.y, timFlo1.u)
              annotation (Line(points={{-138,-40},{-132,-40}}, color={255,0,255}));
            connect(rep.y, y1Coo)
              annotation (Line(points={{132,-120},{200,-120}}, color={255,0,255}));
            connect(enaLea.y, rep.u) annotation (Line(points={{-8,-40},{20,-40},{20,-120},
                    {108,-120}},       color={255,0,255}));
            connect(ena.y, enaAndNotDis.u1)
              annotation (Line(points={{-68,0},{-62,0}}, color={255,0,255}));
            connect(notDis.y, enaAndNotDis.u2) annotation (Line(points={{-68,-30},{-66,
                    -30},{-66,-8},{-62,-8}}, color={255,0,255}));
            connect(enaAndNotDis.y, enaLea.u) annotation (Line(points={{-38,0},{-36,0},{
                    -36,-40},{-32,-40}}, color={255,0,255}));
            connect(dis.y, notDis.u) annotation (Line(points={{-68,-70},{-64,-70},{-64,
                    -48},{-96,-48},{-96,-30},{-92,-30}}, color={255,0,255}));
            annotation (Icon(coordinateSystem(extent={{-100,-180},{100,180}}),
                             graphics={
                  Rectangle(
                    extent={{-100,-180},{100,180}},
                    lineColor={0,0,127},
                    fillColor={255,255,255},
                    fillPattern=FillPattern.Solid),
                  Text(
                    textColor={0,0,255},
                    extent={{-150,190},{150,230}},
                    textString="%name")}), Diagram(coordinateSystem(extent={{-180,-280},{
                      180,280}})),
              Documentation(info="<html>
<p>
This block implements the control logic for the CT pumps and
CT fans.
</p>
<h4>CT supply temperature setpoint</h4>
<p>
When Heat Rejection mode is enabled, the setpoint is equal to
<i>min(25&nbsp;°C, TChiWatSupSet + dTLif - dTConWat - dTHexCoo_nominal)</i>, where
<i>TChiWatSupSet</i> is the CHW supply temperature setpoint,
<i>dTLif</i> is the target chiller lift (see below),
<i>dTConWat</i> is the chiller condenser Delta-T averaged over
a <i>5</i>-minute moving window, and
<i>dTHexCoo_nominal</i> is the design heat exchanger approach.
The target chiller lift is reset from the minimum chiller lift
to the design chiller lift when the plant required cooling capacity
varies from  <i>10&nbsp;%</i> to <i>100&nbsp;%</i> of the design value.
</p>
<p>
In any other mode the setpoint is equal to the minimum setpoint value
of the active tank cycle minus the design heat exchanger approach.
</p>
<h4>CT pumps</h4>
<p>
The lead pump is enabled whenever the TES tank bypass valve commanded
position is lower than <i>1</i> for <i>1&nbsp;</i>min and the
CW mass flow rate through the secondary side of the cooling heat exchanger
is higher than <i>2.5&nbsp;%</i> of design condition for <i>1&nbsp;</i>min.
The lead pump is disabled whenever the TES tank bypass valve commanded
position is equal to <i>1</i> for <i>1&nbsp;</i>min or the
CW mass flow rate through the secondary side of the cooling heat exchanger
is lower than <i>2.5&nbsp;%</i> of design condition for <i>5&nbsp;</i>min.
</p>
<p>
The lag pump is enabled whenever the pump speed command (common to all pumps)
is higher than <i>80&nbsp;%</i> for <i>5&nbsp;</i>min.
The lag pump is disabled whenever the pump speed command
is lower than <i>80&nbsp;%</i> for <i>5&nbsp;</i>min or the lead pump
is disabled.
</p>
<p>
The pump speed command is the lower of that output by two loops, each loop
being enabled whenever any pump is proven on.
The first loop maintains the heat exchanger leaving CW
temperature on plant side at setpoint.
The setpoint is equal to the CT supply temperature setpoint plus
the design HX approach.
The second loop maintains the Delta-T across the primary side (CT loop)
of the HX at a setpoint equal to the Delta-T across the secondary
side (plant side) of the HX minus <i>1&nbsp;</i>K.
(This loop keeps the primary and secondary HX flow rates close to each other
and prevents pump speed runaway when target CT supply temperature setpoint
cannot be met.)
The output of each loop is mapped to the minimum pump speed at <i>80&nbsp;%</i>
to <i>100&nbsp;%</i> at <i>100&nbsp;%</i>.
The minimum pump speed is provided as a parameter for each pump stage since
different speeds are required for each stage to maintain minimum tower flow.
</p>
<h4>CT fans</h4>
<p>
When any of the CT pumps is commanded On, a control loop maintains the
tower water supply temperature at setpoint by resetting the tower fan speed
from <i>0&nbsp;%</i> to a maximum value varying between <i>70&nbsp;%</i>
and <i>100&nbsp;%</i> when the plant required cooling capacity
varies from  <i>0&nbsp;%</i> to <i>50&nbsp;%</i> of the design value.
Otherwise, the loop is disabled and its output set to <i>0&nbsp;%</i>.
</p>
<p>
Note that the fan cycling On and Off is implicitly modeled
in the cooling tower component which uses a low limit of the control signal
to switch to a free convection regime at zero fan power.
</p>
</html>",           revisions="<html>
<ul>
<li>
February 24, 2023, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>"));
          end CoolingTowerLoop;

          block DirectHeatRecovery
            "Block controlling HRC in direct heat recovery mode"

            parameter Integer nChi(final min=1, start=1)
              "Number of units operating at design conditions"
              annotation (Dialog(group="CHW loop and cooling-only chillers"),
                Evaluate=true);
            parameter Integer nChiHea(final min=1, start=1)
              "Number of units operating at design conditions"
              annotation (Dialog(group="HW loop and heat recovery chillers"),
                Evaluate=true);
            parameter Modelica.Units.SI.MassFlowRate mChiWatChi_flow_nominal
              "Chiller CHW design mass flow rate (value will be used for each unit)"
              annotation(Dialog(group="CHW loop and cooling-only chillers"));
            parameter Modelica.Units.SI.MassFlowRate mChiWatChi_flow_min
              "Chiller CHW minimum mass flow rate (value will be used for each unit)"
              annotation(Dialog(group="CHW loop and cooling-only chillers"));
            parameter Modelica.Units.SI.MassFlowRate mChiWatChiHea_flow_nominal
              "HRC CHW design mass flow rate (value will be used for each unit)"
              annotation(Dialog(group="HW loop and heat recovery chillers"));
            parameter Modelica.Units.SI.MassFlowRate mChiWatChiHea_flow_min
              "HRC CHW minimum mass flow rate (value will be used for each unit)"
              annotation(Dialog(group="HW loop and heat recovery chillers"));

            parameter Real k(min=0)=0.01
              "Gain of controller"
              annotation (Dialog(group="Control parameters"));
            parameter Modelica.Units.SI.Time Ti=60
              "Time constant of integrator block"
              annotation (Dialog(group="Control parameters"));
            parameter Real y_reset=0.5
              "Value to which the controller output is reset if the boolean trigger has a rising edge"
              annotation (Dialog(group="Control parameters"));
            parameter Real y_neutral=0.5
              "Value to which the controller output is reset when the controller is disabled"
              annotation (Dialog(group="Control parameters"));

            Buildings.Controls.OBC.CDL.Interfaces.RealInput TChiWatSupSet(final unit="K",
                displayUnit="degC") "CHW supply temperature setpoint"
              annotation (Placement(transformation(
                    extent={{-180,-20},{-140,20}}), iconTransformation(extent={{-140,-20},
                      {-100,20}})));
            Buildings.Controls.OBC.CDL.Interfaces.RealInput TEvaLvg[nChiHea](each final unit="K",
              each  displayUnit="degC") "Evaporator barrel leaving temperature (each HRC)"
              annotation (Placement(transformation(extent={{-180,-60},{-140,-20}}),
                  iconTransformation(extent={{-140,-60},{-100,-20}})));
            Buildings.Controls.OBC.CDL.Interfaces.BooleanInput y1HeaCoo[nChiHea]
              "Direct HR command" annotation (Placement(transformation(extent={{-180,20},{
                      -140,60}}), iconTransformation(extent={{-140,20},{-100,60}})));
            Buildings.Controls.OBC.CDL.Interfaces.BooleanInput y1[nChiHea]
              "On/Off command" annotation (Placement(transformation(extent={{-180,60},{-140,
                      100}}), iconTransformation(extent={{-140,60},{-100,100}})));
            Buildings.Controls.OBC.CDL.Interfaces.RealOutput mEvaChiSet_flow(
              final unit="kg/s") "Chiller evaporator flow setpoint"
              annotation (Placement(transformation(
                    extent={{140,60},{180,100}}),   iconTransformation(extent={{100,40},{140,
                      80}})));
            Buildings.Controls.OBC.CDL.Interfaces.RealOutput TConEntChiHeaSet(
              final unit="K", displayUnit="degC")
              "HRC condenser entering temperature setpoint" annotation (Placement(
                  transformation(extent={{140,-100},{180,-60}}), iconTransformation(
                    extent={{100,-80},{140,-40}})));
            Buildings.Controls.OBC.CDL.Interfaces.RealInput THeaWatPriRet(final unit="K",
                displayUnit="degC") "Primary HW return temperature" annotation (Placement(
                  transformation(extent={{-180,-100},{-140,-60}}), iconTransformation(
                    extent={{-140,-100},{-100,-60}})));

            Buildings.Controls.OBC.CDL.Logical.And heaCooAndOn[nChiHea]
              "Return true if direct HR AND On" annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={-110,60})));
            Buildings.Controls.OBC.CDL.Routing.RealScalarReplicator rep(
              final nout=nChiHea) "Replicate"
              annotation (Placement(transformation(extent={{-120,-10},{-100,10}})));
            EnergyTransferStations.Combined.Controls.PIDWithEnable ctl[nChiHea](
              each final k=k,
              each final Ti=Ti,
              each final reverseActing=false,
              each final y_reset=y_reset,
              each final y_neutral=y_neutral)
              "CHW supply temperature control"
              annotation (Placement(transformation(extent={{-70,-10},{-50,10}})));
            Buildings.Controls.OBC.CDL.Reals.Line chiFloRes[nChiHea]
              "Chiller evaporator flow reset"
              annotation (Placement(transformation(extent={{40,70},{60,90}})));
            Buildings.Controls.OBC.CDL.Reals.MultiMin min(nin=nChiHea)
              "Minimum evaporator flow setpoint"
              annotation (Placement(transformation(extent={{90,70},{110,90}})));
            Buildings.Controls.OBC.CDL.Reals.Sources.Constant xFlo[nChiHea,2](
              final k=fill({0,0.33}, nChiHea))
              "x-value for flow reset"
              annotation (Placement(transformation(extent={{0,90},{20,110}})));
            Buildings.Controls.OBC.CDL.Reals.Sources.Constant yFlo[nChiHea,2](
              final k=fill(1.2 .* {mChiWatChi_flow_min,mChiWatChi_flow_nominal}, nChiHea))
              "y-value for flow reset"
              annotation (Placement(transformation(extent={{0,50},{20,70}})));
            Buildings.Controls.OBC.CDL.Reals.Line chiHeaFloRes[nChiHea]
              "HRC evaporator flow reset"
              annotation (Placement(transformation(extent={{40,-10},{60,10}})));
            Buildings.Controls.OBC.CDL.Reals.MultiMin min1(nin=nChiHea)
              "Minimum evaporator flow setpoint"
              annotation (Placement(transformation(extent={{90,-10},{110,10}})));
            Buildings.Controls.OBC.CDL.Reals.Sources.Constant xFlo1    [nChiHea, 2](final k=
                  fill({0.33,0.67}, nChiHea))
              "x-value for flow reset"
              annotation (Placement(transformation(extent={{0,10},{20,30}})));
            Buildings.Controls.OBC.CDL.Reals.Sources.Constant yFlo1    [nChiHea, 2](final k=
                  fill(1.2 .* {mChiWatChiHea_flow_nominal,mChiWatChiHea_flow_min}, nChiHea))
              "y-value for flow reset"
              annotation (Placement(transformation(extent={{0,-30},{20,-10}})));
            Buildings.Controls.OBC.CDL.Interfaces.RealOutput mEvaChiHeaSet_flow(final
                unit="kg/s") "HRC evaporator flow setpoint" annotation (Placement(
                  transformation(extent={{140,-20},{180,20}}), iconTransformation(extent={{100,-20},
                      {140,20}})));
            Buildings.Controls.OBC.CDL.Reals.Line chiHeaConTemRes[nChiHea]
              "HRC condenser entering temperature reset"
              annotation (Placement(transformation(extent={{40,-90},{60,-70}})));
            Buildings.Controls.OBC.CDL.Reals.Sources.Constant xFlo2    [nChiHea, 2](final k=
                  fill({0.67,1.0}, nChiHea))
              "x-value for flow reset"
              annotation (Placement(transformation(extent={{0,-70},{20,-50}})));

            Buildings.Controls.OBC.CDL.Reals.AddParameter addOff(final p=0.5)
              "Add offset"
              annotation (Placement(transformation(extent={{-90,-90},{-70,-70}})));
            Buildings.Controls.OBC.CDL.Reals.AddParameter addOff1(final p=-15)
              "Add offset"
              annotation (Placement(transformation(extent={{-90,-130},{-70,-110}})));
            Buildings.Controls.OBC.CDL.Routing.RealScalarReplicator rep1(final nout=
                  nChiHea) "Replicate"
              annotation (Placement(transformation(extent={{-60,-90},{-40,-70}})));
            Buildings.Controls.OBC.CDL.Routing.RealScalarReplicator rep2(final nout=
                  nChiHea) "Replicate"
              annotation (Placement(transformation(extent={{-60,-130},{-40,-110}})));
            Buildings.Controls.OBC.CDL.Routing.RealExtractor extIndRea(final nin=nChiHea)
              "Keep reset value from HRC in direct HR with higher index"
              annotation (Placement(transformation(extent={{90,-90},{110,-70}})));
            Modelica.Blocks.Sources.IntegerExpression idxHig(final y=max({if heaCooAndOn[
                  i].y then i else 1 for i in 1:nChiHea}))
              "Highest index of HRC in direct HR (defaulted to 1 if all false)"
              annotation (Placement(transformation(extent={{60,-130},{80,-110}})));
            Buildings.Controls.OBC.CDL.Reals.MovingAverage mea(delta=5*60)
              "Moving average"
              annotation (Placement(transformation(extent={{-130,-90},{-110,-70}})));
          equation
            connect(TChiWatSupSet, rep.u) annotation (Line(points={{-160,0},{-122,0}},
                                           color={0,0,127}));
            connect(y1, heaCooAndOn.u1) annotation (Line(points={{-160,80},{-130,80},{
                    -130,60},{-122,60}},
                                    color={255,0,255}));
            connect(y1HeaCoo, heaCooAndOn.u2) annotation (Line(points={{-160,40},{-130,40},
                    {-130,52},{-122,52}}, color={255,0,255}));
            connect(rep.y, ctl.u_s)
              annotation (Line(points={{-98,0},{-72,0}},     color={0,0,127}));
            connect(TEvaLvg, ctl.u_m) annotation (Line(points={{-160,-40},{-60,-40},{-60,-12}},
                  color={0,0,127}));
            connect(heaCooAndOn.y, ctl.uEna) annotation (Line(points={{-98,60},{-80,60},{
                    -80,-20},{-64,-20},{-64,-12}},
                                               color={255,0,255}));
            connect(chiFloRes.y, min.u)
              annotation (Line(points={{62,80},{88,80}}, color={0,0,127}));
            connect(yFlo[:, 2].y, chiFloRes.f2) annotation (Line(points={{22,60},{34,60},{
                    34,72},{38,72}},
                                  color={0,0,127}));
            connect(yFlo[:, 1].y, chiFloRes.f1) annotation (Line(points={{22,60},{34,60},{
                    34,84},{38,84}},
                                  color={0,0,127}));
            connect(ctl.y, chiFloRes.u) annotation (Line(points={{-48,0},{-20,0},{-20,80},
                    {38,80}},     color={0,0,127}));
            connect(xFlo[:, 1].y, chiFloRes.x1) annotation (Line(points={{22,100},{32,100},
                    {32,88},{38,88}}, color={0,0,127}));
            connect(xFlo[:, 2].y, chiFloRes.x2) annotation (Line(points={{22,100},{32,100},
                    {32,76},{38,76}}, color={0,0,127}));
            connect(min.y, mEvaChiSet_flow) annotation (Line(points={{112,80},{160,80}},
                                   color={0,0,127}));
            connect(chiHeaFloRes.y, min1.u)
              annotation (Line(points={{62,0},{88,0}}, color={0,0,127}));
            connect(yFlo1[:, 2].y, chiHeaFloRes.f2) annotation (Line(points={{22,-20},{34,
                    -20},{34,-8},{38,-8}},
                                      color={0,0,127}));
            connect(yFlo1[:, 1].y, chiHeaFloRes.f1) annotation (Line(points={{22,-20},{34,
                    -20},{34,4},{38,4}},
                                    color={0,0,127}));
            connect(ctl.y, chiHeaFloRes.u)
              annotation (Line(points={{-48,0},{38,0}}, color={0,0,127}));
            connect(xFlo1[:, 1].y, chiHeaFloRes.x1)
              annotation (Line(points={{22,20},{32,20},{32,8},{38,8}},color={0,0,127}));
            connect(xFlo1[:, 2].y, chiHeaFloRes.x2) annotation (Line(points={{22,20},{32,20},
                    {32,-4},{38,-4}}, color={0,0,127}));
            connect(min1.y, mEvaChiHeaSet_flow) annotation (Line(points={{112,0},{160,0}},
                                 color={0,0,127}));
            connect(ctl.y, chiHeaConTemRes.u) annotation (Line(points={{-48,0},{-20,0},{-20,
                    -80},{38,-80}}, color={0,0,127}));
            connect(xFlo2[:, 1].y, chiHeaConTemRes.x1) annotation (Line(points={{22,-60},{
                    32,-60},{32,-72},{38,-72}},
                                             color={0,0,127}));
            connect(xFlo2[:, 2].y, chiHeaConTemRes.x2) annotation (Line(points={{22,-60},{
                    32,-60},{32,-84},{38,-84}},
                                             color={0,0,127}));
            connect(addOff.y, rep1.u)
              annotation (Line(points={{-68,-80},{-62,-80}}, color={0,0,127}));
            connect(addOff1.y, rep2.u)
              annotation (Line(points={{-68,-120},{-62,-120}}, color={0,0,127}));
            connect(rep2.y, chiHeaConTemRes.f2) annotation (Line(points={{-38,-120},{0,
                    -120},{0,-88},{38,-88}},
                                       color={0,0,127}));
            connect(rep1.y, chiHeaConTemRes.f1) annotation (Line(points={{-38,-80},{-30,
                    -80},{-30,-76},{38,-76}},
                                         color={0,0,127}));
            connect(extIndRea.y, TConEntChiHeaSet)
              annotation (Line(points={{112,-80},{160,-80}}, color={0,0,127}));
            connect(chiHeaConTemRes.y, extIndRea.u)
              annotation (Line(points={{62,-80},{88,-80}}, color={0,0,127}));
            connect(idxHig.y, extIndRea.index) annotation (Line(points={{81,-120},{100,-120},
                    {100,-92}}, color={255,127,0}));
            connect(addOff.u, mea.y)
              annotation (Line(points={{-92,-80},{-108,-80}}, color={0,0,127}));
            connect(THeaWatPriRet, mea.u) annotation (Line(points={{-160,-80},{-144,-80},{
                    -144,-80},{-132,-80}}, color={0,0,127}));
            connect(mea.y, addOff1.u) annotation (Line(points={{-108,-80},{-100,-80},{
                    -100,-120},{-92,-120}},
                                       color={0,0,127}));
            annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                  Rectangle(
                    extent={{-100,-100},{100,100}},
                    lineColor={0,0,127},
                    fillColor={255,255,255},
                    fillPattern=FillPattern.Solid),
                  Text(
                    textColor={0,0,255},
                    extent={{-150,110},{150,150}},
                    textString="%name")}),                                 Diagram(
                  coordinateSystem(preserveAspectRatio=false, extent={{-140,-140},{140,140}})),
              Documentation(info="<html>
<p>
In direct heat recovery mode, the HRC is internally controlled in heating mode
and tracks a HW supply temperature setpoint.
The CHW supply temperature setpoint is maintained by means of supervisory controls
that act on the evaporator flow rate and condenser entering water temperature as
described below.
</p>
<p>
A direct acting control loop runs for each HRC operating in direct heat recovery
mode.
Each loop is enabled with a bias of <i>50&nbsp;%</i> whenever the HRC
is commanded On and in direct heat recovery mode.
The loop is disabled with output set to <i>50&nbsp;%</i> otherwise.
The loop output is mapped as follows.
From <i>0&nbsp;%</i> to <i>33&nbsp;%</i> the evaporator flow setpoint of
cooling-only chillers is reset from <i>1.2</i> times its minimum value
to <i>1.2</i> times its design value.
From <i>33&nbsp;%</i> to <i>67&nbsp;%</i> the evaporator flow setpoint of
the HRC is reset from <i>1.2</i> times its minimum value
to <i>1.2</i> times its design value.
From <i>67&nbsp;%</i> to <i>100&nbsp;%</i> the HRC condenser entering
temperature setpoint is reset from <i>THeaWatRet + 0.5&nbsp;</i>°C
to <i>THeaWatRet - 15&nbsp;</i>°C.
</p>
</html>",           revisions="<html>
<ul>
<li>
February 24, 2023, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>"));
          end DirectHeatRecovery;

          block IntegerArrayHold
            "Block that holds the value of an integer array for a given time"
            parameter Integer nin=0
              "Array dimension"
              annotation (Dialog(connectorSizing=true),HideResult=true);
            final parameter Integer nout=nin
              "Output array dimension";
            parameter Real holdDuration(
              final quantity="Time",
              final unit="s")=1
              "Hold duration";

           Buildings.Controls.OBC.CDL.Interfaces.IntegerInput u[nin]
              "Connector of Real input signal"
              annotation (Placement(transformation(extent={{-140,-20},{-100,20}}),
                  iconTransformation(extent={{-140,-20},{-100,20}})));
            Buildings.Controls.OBC.CDL.Interfaces.IntegerOutput y[nout]
              "Connector of Integer output signal"
              annotation (Placement(transformation(extent={{100,-20},{140,20}}),
                  iconTransformation(extent={{100,-20},{140,20}})));
          protected
            Real time_change;
          initial algorithm
            y := u;
            time_change := time;
          algorithm
            when Modelica.Math.BooleanVectors.anyTrue({
              u[i] <> pre(y[i]) for i in 1:nin}) and time - time_change > holdDuration then
              y := u;
              time_change := time;
            end when;

            annotation (
            defaultComponentName="hol",
            Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                  Rectangle(
                    extent={{-100,-100},{100,100}},
                    lineColor={0,0,127},
                    fillColor={255,255,255},
                    fillPattern=FillPattern.Solid),
                  Text(
                    textColor={0,0,255},
                    extent={{-150,110},{150,150}},
                    textString="%name")}), Diagram(coordinateSystem(preserveAspectRatio=false)),
              Documentation(info="<html>
<p>
This blocks updates the value of the output array to 
match the value of the input array only if the time
since the last update exceeds <code>holdDuration</code>.
Otherwise, the value of the output array is kept equal
to its value at the time of the last update.
At initial time, the value of the output array is set 
to the value of the input array, and this is considered
as the first update time.
</p>
</html>",           revisions="<html>
<ul>
<li>
February 24, 2023, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>"));
          end IntegerArrayHold;

          block ModeCondenserLoop
            "Block that determines the condenser loop mode"

            parameter Modelica.Units.SI.MassFlowRate mConWatHexCoo_flow_nominal
              "Design total CW mass flow rate through condenser barrels (all units)";
            parameter Modelica.Units.SI.HeatFlowRate QHeaPum_flow_nominal
              "Design heat flow from heat pumps (all units)";
            parameter Modelica.Units.SI.Temperature TTanSet[2, 2]
              "Tank temperature setpoints: 2 cycles with 2 setpoints"
              annotation(Dialog(group="CW loop, TES tank and heat pumps"));
            parameter Real fraUslTan(unit="1")
              "Useless fraction of TES"
              annotation(Dialog(group="CW loop, TES tank and heat pumps"));
            parameter Integer nTTan=2
              "Number of tank temperature points"
              annotation (Dialog(connectorSizing=true),HideResult=true);
            parameter Real ratFraChaTanLim[5](each final unit="1/h")=
              {-0.3, -0.2, -0.15, -0.10, -0.08}
              "Rate of change of tank charge fraction (over 10, 30, 120, 240, and 360') that triggers Charge Assist (<0)";
            parameter Modelica.Units.SI.SpecificHeatCapacity cp_default=
              Buildings.Utilities.Psychrometrics.Constants.cpWatLiq
              "Specific heat capacity of the fluid";

            Buildings.Controls.OBC.CDL.Interfaces.RealInput mConWatOutTan_flow(
              final unit="kg/s")
              "Mass flow rate out of lower port of TES tank (>0 when charging)"
              annotation (Placement(transformation(extent={{-240,40},{-200,80}}),
                  iconTransformation(extent={{-140,20},{-100,60}})));
            Buildings.Controls.OBC.CDL.Interfaces.RealInput TTan[nTTan](
              each final unit="K",
              each displayUnit="degC")
              "TES tank temperature"
              annotation (Placement(
                  transformation(extent={{-240,0},{-200,40}}),      iconTransformation(
                    extent={{-140,-20},{-100,20}})));
            Buildings.Controls.OBC.CDL.Interfaces.IntegerOutput mode(
              final min=estcp.DHC.Plants.Combined.Controls.ModeCondenserLoop.tankCharge,
              final max=estcp.DHC.Plants.Combined.Controls.ModeCondenserLoop.heatRejection)
              "Condenser loop operating mode"
              annotation (Placement(transformation(extent={{200,-20},{240,20}}),
                  iconTransformation(extent={{100,-20},{140,20}})));

            Real fraChaTanIns(final unit="1")=
              (sum(TTan .- min(TTanSet)) / (max(TTanSet) - min(TTanSet)) / nTTan - fraUslTan) /
              (1 - fraUslTan)
              "Tank charge fraction (instantaneous value)";
            Real ratFraChaTan[5](each final unit="1/h")=
              {(fraChaTan.y - delay(fraChaTan.y, x)) / x * 3600  for x in
              {10, 30, 120, 240, 360} .* 60}
              "Rate of change of tank charge fraction (over 10, 30, 120, 240, and 360')";
            Real nHouToWarUp(final unit="h") = noEvent(
              if mod(time, 24 * 3600) > 4 * 3600
                then 4 + 24 - mod(time, 24 * 3600) / 3600
              else 4 - mod(time, 24 * 3600) / 3600)
              "Number of hours between next warmup period (set at 4 AM by default)";

            Modelica.Blocks.Sources.RealExpression ratFraChaTanVal[5](final y=ratFraChaTan)
              "Rate of change of tank charge fraction"
              annotation (Placement(transformation(extent={{-150,-50},{-130,-30}})));
            Buildings.Controls.OBC.CDL.Reals.LessThreshold lesThr[5](
              final t=ratFraChaTanLim, each h=1E-4)
              "Compare rate of change to threshold"
              annotation (Placement(transformation(extent={{-100,-50},{-80,-30}})));
            Buildings.Controls.OBC.CDL.Logical.Timer tim[5](each t=5*60)
              "Condition is true for given time"
              annotation (Placement(transformation(extent={{-40,-50},{-20,-30}})));
            Buildings.Controls.OBC.CDL.Logical.MultiOr anyEnaTru(nin=6)
              "Any of the enable conditions is true"
              annotation (Placement(transformation(extent={{10,-98},{30,-78}})));
            Modelica.Blocks.Sources.RealExpression varCriWarUp(y=1 - fraChaTan.y)
              "Compute variable used to evaluate warmup criterion"
              annotation (Placement(transformation(extent={{-150,-90},{-130,-70}})));
            Buildings.Controls.OBC.CDL.Reals.Greater criWarUp(h=1e-3)
              "Enable criterion based on time to warmup"
              annotation (Placement(transformation(extent={{-100,-90},{-80,-70}})));
            Buildings.Controls.OBC.CDL.Logical.And criWarUpAndChaLow
              "Both enable criteria met"
              annotation (Placement(transformation(extent={{-70,-90},{-50,-70}})));
            Buildings.Controls.OBC.CDL.Reals.LessThreshold criChaLow(t=0.97, h=1e-3)
              "Low charge fraction criterion"
              annotation (Placement(transformation(extent={{-100,-130},{-80,-110}})));
            Buildings.Controls.OBC.CDL.Logical.Not enaFal[6]
              "True if enabling condition is false"
              annotation (Placement(transformation(extent={{-40,-10},{-20,10}})));
            Buildings.Controls.OBC.CDL.Logical.MultiAnd noEnaTruAndRatCon(nin=7)
              "None of the enable conditions is true AND HR rate condition true"
              annotation (Placement(transformation(extent={{10,-10},{30,10}})));
            Buildings.Controls.OBC.CDL.Logical.Timer tim2(t=15*60)
              "None of the enabling conditions is true for given time"
              annotation (Placement(transformation(extent={{40,-10},{60,10}})));
            Buildings.Controls.OBC.CDL.Reals.GreaterThreshold criFlo(t=1E-3*
                  mConWatHexCoo_flow_nominal, h=1E-3*mConWatHexCoo_flow_nominal/2)
              "Disable criterion based on flow rate"
              annotation (Placement(transformation(extent={{-100,50},{-80,70}})));
            Buildings.Controls.OBC.CDL.Reals.GreaterThreshold criTem(t=max(TTanSet)
                   - 2, h=1e-3)
              "Disable criterion based on temperature"
                     annotation (Placement(transformation(extent={{-100,20},{-80,40}})));
            Buildings.Controls.OBC.CDL.Logical.And criFloAndTem
              "Flow criterion and temperature criterion both true"
              annotation (Placement(transformation(extent={{-30,30},{-10,50}})));
            Buildings.Controls.OBC.CDL.Logical.Timer timCriFlo(t=5*60)
              "Criterion true for given time"
              annotation (Placement(transformation(extent={{-70,50},{-50,70}})));
            Buildings.Controls.OBC.CDL.Logical.Or disCha
              "Any of the disabling conditions is true"
              annotation (Placement(transformation(extent={{40,-40},{60,-20}})));
            Buildings.Controls.OBC.CDL.Logical.Latch enaCha "Enable charge assist mode"
              annotation (Placement(transformation(extent={{70,-70},{90,-50}})));
            Buildings.Controls.OBC.CDL.Logical.Timer timNotCha(t=5*60)
              annotation (Placement(transformation(extent={{10,150},{30,170}})));
            Buildings.Controls.OBC.CDL.Logical.Timer timCriTem(t=5*60)
              "Criterion true for given time"
              annotation (Placement(transformation(extent={{-70,20},{-50,40}})));
            Buildings.Controls.OBC.CDL.Logical.Not criFraChaHig
              "High charge fraction criterion"
              annotation (Placement(transformation(extent={{-70,-130},{-50,-110}})));
            Buildings.Controls.OBC.CDL.Logical.And allEnaTru "All enable criteria true"
              annotation (Placement(transformation(extent={{50,170},{70,190}})));
            Buildings.Controls.OBC.CDL.Logical.And criTemOrCriChaHigAndTimCriFlo
              "Temperature or high charge fraction criterion true and given time criterion true"
              annotation (Placement(transformation(extent={{50,130},{70,150}})));
            Buildings.Controls.OBC.CDL.Logical.Timer timCriFraChaHig(t=5*60)
              annotation (Placement(transformation(extent={{-40,-130},{-20,-110}})));
            Buildings.Controls.OBC.CDL.Logical.Or criTemOrCriChaHig
              "Temperature criterion or high charge fraction criterion true"
              annotation (Placement(transformation(extent={{10,110},{30,130}})));
            Buildings.Controls.OBC.CDL.Interfaces.RealInput mConWatHexCoo_flow(final unit="kg/s")
            "CW mass flow rate through secondary (plant) side of HX"
              annotation (Placement(transformation(extent={{-240,100},{-200,140}}),
                  iconTransformation(extent={{-140,60},{-100,100}})));
            Buildings.Controls.OBC.CDL.Reals.LessThreshold criFlo1(t=-1E-3*
                  mConWatHexCoo_flow_nominal, h=1E-3*mConWatHexCoo_flow_nominal/2)
              annotation (Placement(transformation(extent={{-100,110},{-80,130}})));
            Buildings.Controls.OBC.CDL.Logical.Timer timCriFlo1(t=60)
              "Criterion true for given time"
              annotation (Placement(transformation(extent={{-70,110},{-50,130}})));
            Buildings.Controls.OBC.CDL.Logical.Latch enaRej "Enable heat rejection mode"
              annotation (Placement(transformation(extent={{80,90},{100,110}})));
            Buildings.Controls.OBC.CDL.Integers.Sources.Constant modTan(
              final k=estcp.DHC.Plants.Combined.Controls.ModeCondenserLoop.tankCharge)
              "Tank Charge/Discharge mode"
              annotation (Placement(transformation(extent={{110,50},{130,70}})));
            Buildings.Controls.OBC.CDL.Integers.Sources.Constant modRej(
              final k=estcp.DHC.Plants.Combined.Controls.ModeCondenserLoop.heatRejection)
              "Heat rejection mode"
              annotation (Placement(transformation(extent={{108,130},{128,150}})));
            Buildings.Controls.OBC.CDL.Integers.Sources.Constant modCha(
              final k=estcp.DHC.Plants.Combined.Controls.ModeCondenserLoop.chargeAssist)
              "Charge assist mode"
              annotation (Placement(transformation(extent={{110,-50},{130,-30}})));
            Buildings.Controls.OBC.CDL.Integers.Switch intSwi
              annotation (Placement(transformation(extent={{170,-10},{190,10}})));
            Buildings.Controls.OBC.CDL.Integers.Switch intSwi1
              annotation (Placement(transformation(extent={{110,90},{130,110}})));
            Modelica.Blocks.Sources.RealExpression varCriWarUp1(
              final y=0.08*abs(nHouToWarUp - 2))
              "Compute variable used to evaluate warmup criterion"
              annotation (Placement(transformation(extent={{-180,-98},{-160,-78}})));
            Buildings.Controls.OBC.CDL.Logical.Not isChaDis "Charge assist mode disabled"
              annotation (Placement(transformation(extent={{-20,150},{0,170}})));
            Buildings.Controls.OBC.CDL.Logical.And enaAndNotDis
              "Reset enable condition when disable is true to trigger latch block when (enable, disable) becomes (true, false) again"
              annotation (Placement(transformation(extent={{40,-90},{60,-70}})));
            Buildings.Controls.OBC.CDL.Logical.Not notDis "Not disabled"
              annotation (Placement(transformation(extent={{10,-70},{30,-50}})));
            Buildings.Controls.OBC.CDL.Logical.And enaAndNotDis1
              "Reset enable condition when disable is true to trigger latch block when (enable, disable) becomes (true, false) again"
              annotation (Placement(transformation(extent={{50,100},{70,120}})));
            Buildings.Controls.OBC.CDL.Logical.Not notDis1 "Not disabled"
              annotation (Placement(transformation(extent={{10,84},{30,104}})));
            Buildings.Controls.OBC.CDL.Reals.MovingAverage fraChaTan(delta=5*60)
              "Moving mean of tank charge fraction used for control logic"
              annotation (Placement(transformation(extent={{-150,-130},{-130,-110}})));
            Modelica.Blocks.Sources.RealExpression fraChaTanVal(y=fraChaTanIns)
              "Instantaneous tank charge fraction"
              annotation (Placement(transformation(extent={{-180,-130},{-160,-110}})));
            Buildings.Controls.OBC.CDL.Logical.Timer tim1(t=5*60)
              "Condition is true for given time"
              annotation (Placement(transformation(extent={{-40,-90},{-20,-70}})));
            Buildings.Controls.OBC.CDL.Interfaces.RealInput mConWatCon_flow(final unit="kg/s")
                          "CW condenser loop mass flow rate" annotation (Placement(
                  transformation(extent={{-240,-180},{-200,-140}}),
                                                               iconTransformation(extent={{-140,
                      -60},{-100,-20}})));
            Buildings.Controls.OBC.CDL.Interfaces.RealInput TConWatConChiLvg(final unit="K",
                displayUnit="degC")        "Chiller and HRC leaving CW temperature"
              annotation (Placement(transformation(extent={{-240,-200},{-200,-160}}),
                  iconTransformation(extent={{-140,-80},{-100,-40}})));
            Buildings.Controls.OBC.CDL.Interfaces.RealInput TConWatConRet(final unit="K",
                displayUnit="degC")       "CWC return temperature"
              annotation (Placement(transformation(extent={{-240,-220},{-200,-180}}),
                  iconTransformation(extent={{-140,-100},{-100,-60}})));
            Buildings.Controls.OBC.CDL.Reals.Subtract delTem "Compute Delta-T"
              annotation (Placement(transformation(extent={{-170,-200},{-150,-180}})));
            Buildings.Controls.OBC.CDL.Reals.Multiply floOutHeaPum
              "Compute HP heat flow rate output "
              annotation (Placement(transformation(extent={{-130,-190},{-110,-170}})));
            Buildings.Controls.OBC.CDL.Reals.MultiplyByParameter floCap(final k=
                  cp_default)
              "Compute capacity flow rate"
              annotation (Placement(transformation(extent={{-188,-170},{-168,-150}})));
            Buildings.Controls.OBC.CDL.Reals.Subtract delTem1 "Compute Delta-T"
              annotation (Placement(transformation(extent={{-180,-10},{-160,10}})));
            Buildings.Controls.OBC.CDL.Reals.MultiplyByParameter floCap1(final k=
                  cp_default)
              "Compute capacity flow rate"
              annotation (Placement(transformation(extent={{-180,30},{-160,50}})));
            Buildings.Controls.OBC.CDL.Reals.Multiply floChaTan
              "Compute tank charge rate"
              annotation (Placement(transformation(extent={{-150,-10},{-130,10}})));
            Buildings.Controls.OBC.CDL.Reals.Subtract ratHeaRec
              "Compute heat recovery rate"
              annotation (Placement(transformation(extent={{-90,-190},{-70,-170}})));
            Buildings.Controls.OBC.CDL.Reals.GreaterThreshold criRatHeaRec(final t=
                  1E-4*(mConWatHexCoo_flow_nominal*(TTanSet[1, 2] - TTanSet[1, 1])*4184
                   - QHeaPum_flow_nominal), final h=1E-4*(mConWatHexCoo_flow_nominal*(
                  TTanSet[1, 2] - TTanSet[1, 1])*4184 - QHeaPum_flow_nominal)/2)
                       "Disable criterion based on heat recovery rate"
              annotation (Placement(transformation(extent={{-60,-190},{-40,-170}})));
          equation
            connect(ratFraChaTanVal.y, lesThr.u)
              annotation (Line(points={{-129,-40},{-102,-40}},
                                                           color={0,0,127}));
            connect(criWarUp.y, criWarUpAndChaLow.u1)
              annotation (Line(points={{-78,-80},{-72,-80}}, color={255,0,255}));
            connect(criChaLow.y, criWarUpAndChaLow.u2) annotation (Line(points={{-78,-120},
                    {-74,-120},{-74,-88},{-72,-88}}, color={255,0,255}));
            connect(noEnaTruAndRatCon.y, tim2.u)
              annotation (Line(points={{32,0},{38,0}}, color={255,0,255}));
            connect(disCha.y, enaCha.clr) annotation (Line(points={{62,-30},{64,-30},{64,-44},
                    {60,-44},{60,-66},{68,-66}},      color={255,0,255}));
            connect(criTem.y, timCriTem.u)
              annotation (Line(points={{-78,30},{-72,30}},   color={255,0,255}));
            connect(criFlo.y, timCriFlo.u)
              annotation (Line(points={{-78,60},{-72,60}},   color={255,0,255}));
            connect(timCriFlo.passed, criFloAndTem.u1) annotation (Line(points={{-48,52},{
                    -40,52},{-40,40},{-32,40}}, color={255,0,255}));
            connect(timCriTem.passed, criFloAndTem.u2) annotation (Line(points={{-48,22},
                    {-36,22},{-36,32},{-32,32}},color={255,0,255}));
            connect(criChaLow.y, criFraChaHig.u)
              annotation (Line(points={{-78,-120},{-72,-120}}, color={255,0,255}));
            connect(criFloAndTem.y, disCha.u1) annotation (Line(points={{-8,40},{4,40},{4,
                    -30},{38,-30}},      color={255,0,255}));
            connect(timNotCha.passed, allEnaTru.u1) annotation (Line(points={{32,152},{40,
                    152},{40,180},{48,180}}, color={255,0,255}));
            connect(criFraChaHig.y, timCriFraChaHig.u)
              annotation (Line(points={{-48,-120},{-42,-120}}, color={255,0,255}));
            connect(timCriTem.passed, criTemOrCriChaHig.u1) annotation (Line(points={{-48,22},
                    {-36,22},{-36,120},{8,120}},       color={255,0,255}));
            connect(timCriFraChaHig.passed, criTemOrCriChaHig.u2) annotation (Line(points={{-18,
                    -128},{0,-128},{0,112},{8,112}},            color={255,0,255}));
            connect(criFlo1.y, timCriFlo1.u)
              annotation (Line(points={{-78,120},{-72,120}},   color={255,0,255}));
            connect(timCriFlo1.passed,enaRej. clr) annotation (Line(points={{-48,112},{-44,
                    112},{-44,80},{76,80},{76,94},{78,94}},     color={255,0,255}));
            connect(enaRej.y, intSwi1.u2) annotation (Line(points={{102,100},{108,100}},
                               color={255,0,255}));
            connect(modRej.y, intSwi1.u1) annotation (Line(points={{130,140},{140,140},{140,
                    120},{104,120},{104,108},{108,108}},
                                                      color={255,127,0}));
            connect(modTan.y, intSwi1.u3) annotation (Line(points={{132,60},{140,60},{140,
                    80},{104,80},{104,92},{108,92}},
                                                  color={255,127,0}));
            connect(intSwi.y, mode)
              annotation (Line(points={{192,0},{220,0}}, color={255,127,0}));
            connect(enaCha.y, intSwi.u2) annotation (Line(points={{92,-60},{100,-60},{100,
                    0},{168,0}},
                              color={255,0,255}));
            connect(modCha.y, intSwi.u1) annotation (Line(points={{132,-40},{140,-40},{140,
                    8},{168,8}}, color={255,127,0}));
            connect(intSwi1.y, intSwi.u3) annotation (Line(points={{132,100},{144,100},{144,
                    -8},{168,-8}}, color={255,127,0}));
            connect(varCriWarUp1.y, criWarUp.u2) annotation (Line(points={{-159,-88},{-102,
                    -88}},                        color={0,0,127}));
            connect(varCriWarUp.y, criWarUp.u1)
              annotation (Line(points={{-129,-80},{-102,-80}}, color={0,0,127}));
            connect(TTan[nTTan], criTem.u) annotation (Line(points={{-220,20},{-120,20},{
                    -120,30},{-102,30}},
                                    color={0,0,127}));
            connect(isChaDis.y, timNotCha.u)
              annotation (Line(points={{2,160},{8,160}},     color={255,0,255}));
            connect(enaCha.y, isChaDis.u) annotation (Line(points={{92,-60},{100,-60},{100,
                    60},{-32,60},{-32,160},{-22,160}}, color={255,0,255}));
            connect(mConWatHexCoo_flow, criFlo1.u)
              annotation (Line(points={{-220,120},{-102,120}}, color={0,0,127}));
            connect(mConWatOutTan_flow, criFlo.u)
              annotation (Line(points={{-220,60},{-102,60}}, color={0,0,127}));
            connect(disCha.y, notDis.u) annotation (Line(points={{62,-30},{64,-30},{64,-44},
                    {4,-44},{4,-60},{8,-60}},            color={255,0,255}));
            connect(notDis.y, enaAndNotDis.u1) annotation (Line(points={{32,-60},{36,-60},
                    {36,-80},{38,-80}}, color={255,0,255}));
            connect(enaAndNotDis.y, enaCha.u) annotation (Line(points={{62,-80},{64,-80},{
                    64,-60},{68,-60}}, color={255,0,255}));
            connect(enaAndNotDis1.y, enaRej.u) annotation (Line(points={{72,110},{76,110},
                    {76,100},{78,100}}, color={255,0,255}));
            connect(allEnaTru.y, enaAndNotDis1.u1) annotation (Line(points={{72,180},{80,180},
                    {80,126},{40,126},{40,110},{48,110}}, color={255,0,255}));
            connect(notDis1.y, enaAndNotDis1.u2) annotation (Line(points={{32,94},{44,94},
                    {44,102},{48,102}}, color={255,0,255}));
            connect(timCriFlo1.passed, notDis1.u) annotation (Line(points={{-48,112},{-44,
                    112},{-44,94},{8,94}},   color={255,0,255}));
            connect(fraChaTanVal.y, fraChaTan.u)
              annotation (Line(points={{-159,-120},{-152,-120}}, color={0,0,127}));
            connect(fraChaTan.y, criChaLow.u) annotation (Line(points={{-128,-120},{-102,-120}},
                                                                     color={0,0,127}));
            connect(lesThr.y, tim.u)
              annotation (Line(points={{-78,-40},{-42,-40}}, color={255,0,255}));
            connect(criWarUpAndChaLow.y, tim1.u)
              annotation (Line(points={{-48,-80},{-42,-80}}, color={255,0,255}));
            connect(enaAndNotDis.u2, anyEnaTru.y)
              annotation (Line(points={{38,-88},{32,-88}}, color={255,0,255}));
            connect(tim.passed, anyEnaTru.u[1:5]) annotation (Line(points={{-18,-48},{-6,-48},
                    {-6,-86.25},{8,-86.25}},
                                          color={255,0,255}));
            connect(tim1.passed, anyEnaTru.u[6])
              annotation (Line(points={{-18,-88},{8,-88},{8,-85.0833}},
                                                             color={255,0,255}));
            connect(lesThr.y, enaFal[1:5].u) annotation (Line(points={{-78,-40},{-60,-40},
                    {-60,0},{-42,0}}, color={255,0,255}));
            connect(criWarUpAndChaLow.y, enaFal[6].u) annotation (Line(points={{-48,-80},{
                    -46,-80},{-46,0},{-42,0}}, color={255,0,255}));
            connect(enaFal.y, noEnaTruAndRatCon.u[1:6])
              annotation (Line(points={{-18,0},{8,0},{8,2}},
                                                       color={255,0,255}));
            connect(TConWatConRet, delTem.u1) annotation (Line(points={{-220,-200},{-180,-200},
                    {-180,-184},{-172,-184}}, color={0,0,127}));
            connect(TConWatConChiLvg, delTem.u2) annotation (Line(points={{-220,-180},{-190,
                    -180},{-190,-196},{-172,-196}}, color={0,0,127}));
            connect(mConWatCon_flow, floCap.u)
              annotation (Line(points={{-220,-160},{-190,-160}}, color={0,0,127}));
            connect(floCap.y, floOutHeaPum.u1) annotation (Line(points={{-166,-160},{-140,
                    -160},{-140,-174},{-132,-174}}, color={0,0,127}));
            connect(delTem.y, floOutHeaPum.u2) annotation (Line(points={{-148,-190},{-140,
                    -190},{-140,-186},{-132,-186}}, color={0,0,127}));
            connect(mConWatOutTan_flow, floCap1.u) annotation (Line(points={{-220,60},{-194,
                    60},{-194,40},{-182,40}}, color={0,0,127}));
            connect(floCap1.y,floChaTan. u1) annotation (Line(points={{-158,40},{-156,40},
                    {-156,6},{-152,6}}, color={0,0,127}));
            connect(delTem1.y,floChaTan. u2) annotation (Line(points={{-158,0},{-154,0},{-154,
                    -6},{-152,-6}}, color={0,0,127}));
            connect(TTan[1], delTem1.u1) annotation (Line(points={{-220,15},{-220,16},{-218,
                    16},{-218,20},{-188,20},{-188,6},{-182,6}}, color={0,0,127}));
            connect(TTan[nTTan], delTem1.u2) annotation (Line(points={{-220,20},{-208,20},
                    {-208,20},{-192,20},{-192,-6},{-182,-6}},
                                                        color={0,0,127}));
            connect(floOutHeaPum.y, ratHeaRec.u2) annotation (Line(points={{-108,-180},{-100,
                    -180},{-100,-186},{-92,-186}}, color={0,0,127}));
            connect(floChaTan.y, ratHeaRec.u1) annotation (Line(points={{-128,0},{-120,0},
                    {-120,-160},{-100,-160},{-100,-174},{-92,-174}}, color={0,0,127}));
            connect(criRatHeaRec.y, noEnaTruAndRatCon.u[7]) annotation (Line(points={{-38,
                    -180},{-12,-180},{-12,3},{8,3}}, color={255,0,255}));
            connect(tim2.passed, disCha.u2) annotation (Line(points={{62,-8},{64,-8},{64,-14},
                    {34,-14},{34,-38},{38,-38}}, color={255,0,255}));
            connect(ratHeaRec.y, criRatHeaRec.u)
              annotation (Line(points={{-68,-180},{-62,-180}}, color={0,0,127}));
            connect(criTemOrCriChaHig.y, criTemOrCriChaHigAndTimCriFlo.u2) annotation (
                Line(points={{32,120},{36,120},{36,132},{48,132}}, color={255,0,255}));
            connect(timCriFlo.passed, criTemOrCriChaHigAndTimCriFlo.u1) annotation (Line(
                  points={{-48,52},{-40,52},{-40,140},{48,140}}, color={255,0,255}));
            connect(criTemOrCriChaHigAndTimCriFlo.y, allEnaTru.u2) annotation (Line(
                  points={{72,140},{76,140},{76,164},{46,164},{46,172},{48,172}}, color={255,
                    0,255}));
            annotation (
            defaultComponentName="modConLoo",
            Icon(graphics={
                  Rectangle(
                    extent={{-100,-100},{100,100}},
                    lineColor={0,0,127},
                    fillColor={255,255,255},
                    fillPattern=FillPattern.Solid),
                  Text(
                    textColor={0,0,255},
                    extent={{-150,110},{150,150}},
                    textString="%name")}), Diagram(coordinateSystem(extent={{-200,-220},{200,
                      220}})),
              Documentation(info="<html>
<h4>Tank charge fraction and rate of change</h4>
<p>
The tank charge fraction <i>fraChaTan</i> (-) is computed as the
5-minute moving average of the following expression:
<i>(&sum;<sub>i</sub> (TTan<sub>i</sub> - min(TTanSet)) /
(max(TTanSet) - min(TTanSet)) / nTTan - fraUslTan) /
(1 - fraUslTan)</i>, where
<i>TTan<sub>i</sub></i> is the measurement from the <i>i</i>-th temperature sensor
along the vertical axis of the tank,
<i>TTanSet</i> are the tank temperature setpoints (two values for each
tank cycle),
<i>nTTan</i> is the number of temperature sensors along the vertical axis of the tank,
<i>fraUslTan</i> is the useless fraction of the tank which is computed as follows:
<i>fraUslTan = ((max(TTanSet[2]) - min(TTanSet)) / (max(TTanSet) - min(TTanSet)) * hThe + hHee) / hTan</i>,
where <i>hThe</i> is the height of the thermocline (<i>1&nbsp;</i>m by default)
which is considered useless only during the second tank cycle,
<i>hHee</i> is the upper and lower heel heights above and below the diffusers
(<i>1&nbsp;</i>m by default), <i>hTan</i> is the tank height (used as an
approximation for the normal operating level of the tank at minimum
temperature).
</p>
<p>
The rate of change of the tank charge fraction <i>ratFraChaTan</i> (h-1) is computed
over several time periods (<i>10</i>, <i>30</i>, <i>120</i>, <i>240</i>
and <i>360&nbsp;</i>min) as:
<i>ratFraChaTan(&Delta;t) = (fraChaTan(t) - fraChaTan(t - &Delta;t)) / &Delta;t * 3600</i>,
where <i>&Delta;t</i> is the time period in seconds.
</p>
<h4>Operating modes</h4>
<p>
Three operating modes are defined within
<a href=\"modelica://Buildings.Experimental.DHC.Plants.Combined.Controls.ModeCondenserLoop\">
Buildings.Experimental.DHC.Plants.Combined.Controls.ModeCondenserLoop</a>.
</p>
<h5>Charge Assist</h5>
<p>
The mode is enabled whenever any of the following conditions
is true for <i>5&nbsp;</i>min.
Any of the rates of change exceeds the values specified with the parameter
<code>ratFraChaTanLim</code>.
The tank charge fraction is lower than <i>97&nbsp;%</i> and
<i>1 - fraChaTan > 0.08 * abs(nHouToWarUp - 2)</i>, where
<i>fraChaTan</i> is the tank charge fraction and
<i>nHouToWarUp</i> is the number
of hours between the present time and the start time of morning warmup (<i>4 AM</i> by default).
The 2-hour offset forces Charge Assist mode two hours before morning warmup
if the tank is not fully charged.
</p>
<p>
The mode is disabled whenever none of the Enable conditions is true for
<i>15&nbsp;</i>min,
or the flow rate out of the lower port of the tank is positive for <i>5&nbsp;</i>min
and the temperature at the bottom of the tank is higher than the maximum tank
temperature setpoint minus <i>2&nbsp;</i>K for <i>5&nbsp;</i>min.
</p>
<h5>Heat Rejection</h5>
<p>
The mode is enabled whenever all of the following conditions are true.
The Charge Assist mode is disabled for <i>5&nbsp;</i>min.
The flow rate out of the lower port of the tank is positive for <i>5&nbsp;</i>min.
The tank charge fraction is higher than <i>97&nbsp;%</i> for <i>5&nbsp;</i>min
or the temperature at the bottom of the tank is higher than the maximum tank
temperature setpoint minus <i>2&nbsp;</i>K for <i>5&nbsp;</i>min.
</p>
<p>
The mode is disabled whenever there is reverse flow through the cooling
heat exchanger for <i>1&nbsp;</i>min.
</p>
<h5>Tank Charge/Discharge</h5>
<p>
The mode is enabled whenever neither Charge Assist nor Heat Rejection mode is enabled.
</p>
</html>",           revisions="<html>
<ul>
<li>
August 29, 2023, by Hongxiang Fu:<br/>
Because of the removal of <code>Logical.And3</code> based on ASHRAE 231P,
replaced it with a stack of two <code>Logical.And</code> blocks.
This is for
<a href=\"https://github.com/lbl-srg/modelica-buildings/issues/2465\">#2465</a>.
</li>
<li>
February 24, 2023, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>"));
          end ModeCondenserLoop;

          block ModeHeatRecoveryChiller
            "Block that computes the cascading cooling and direct HR switchover signals"

            parameter Integer nChiHea
              "Number of HRC"
              annotation(Evaluate=true);

            Buildings.Controls.OBC.CDL.Interfaces.IntegerInput nCasCoo
              "Number of units required to be operating in cascading cooling mode"
              annotation (Placement(transformation(extent={{-140,40},{-100,80}}),
                  iconTransformation(extent={{-140,40},{-100,80}})));
            Buildings.Controls.OBC.CDL.Interfaces.IntegerInput nHeaCoo
              "Number of HRC required to be operating in direct HR mode"
              annotation (
                Placement(transformation(extent={{-140,-80},{-100,-40}}),
                  iconTransformation(extent={{-140,-80},{-100,-40}})));
            Buildings.Controls.OBC.CDL.Interfaces.BooleanOutput y1Coo[nChiHea]
              "Command signal for cascading cooling mode"
              annotation (Placement(transformation(extent={{100,40},{140,80}}),
                  iconTransformation(extent={{100,40},{140,80}})));
            Buildings.Controls.OBC.CDL.Interfaces.BooleanOutput y1HeaCoo[nChiHea]
              "Command signal for direct HR mode"
              annotation (Placement(transformation(extent={{100,-80},{140,-40}}),
                  iconTransformation(extent={{100,-80},{140,-40}})));
          protected
            Integer lasTruIdx;
            Integer counter;
          algorithm
            y1Coo := fill(false, nChiHea);
            y1HeaCoo := fill(false, nChiHea);
            lasTruIdx := 0;
            counter := 1;
            for i in 1:nChiHea loop
              if counter > nHeaCoo then
                break;
              end if;
              if i > nCasCoo then
                y1HeaCoo[nChiHea - i + 1] := true;
                counter := counter + 1;
              end if;
            end for;
            for i in 1:nChiHea loop
              if y1HeaCoo[i] then
                lasTruIdx := i;
              end if;
            end for;
            counter := 1;
            for i in 1:nChiHea loop
              if counter > nCasCoo then
                break;
              end if;
              y1Coo[nChiHea - i + 1] := true;
              counter := counter + 1;
            end for;

            annotation (
            defaultComponentName="idxHeaCoo",
            Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                  Rectangle(
                    extent={{-100,-100},{100,100}},
                    lineColor={0,0,127},
                    fillColor={255,255,255},
                    fillPattern=FillPattern.Solid),
                  Text(
                    textColor={0,0,255},
                    extent={{-150,110},{150,150}},
                    textString="%name")}), Diagram(coordinateSystem(preserveAspectRatio=false)),
              Documentation(info="<html>
<p>
This block computes the command signals to the HRCs to initiate
the switchover into either cascading cooling mode (with the evaporator
indexed to the CHW loop and the condenser indexed to the CW loop)
or direct heat recovery mode (with the evaporator
indexed to the CHW loop and the condenser indexed to the HW loop).
Switching a HRC to cascading cooling mode is done starting from the unit nearest
to the CW interconnection, that is the unit with the highest index.
Switching a HRC to direct heat recovery mode is done starting from the unit nearest
to the CW interconnection and that is not operating in cascading cooling,
that is the unit with the highest index below the lowest index of HRCs operating
in cascading cooling mode.
</p>
</html>",           revisions="<html>
<ul>
<li>
February 24, 2023, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>"));
          end ModeHeatRecoveryChiller;

          block PartialController "Interface class for plant controller"

            parameter Integer nChi(final min=1, start=1)
              "Number of units operating at design conditions"
              annotation (Dialog(group="CHW loop and cooling-only chillers"),
                Evaluate=true);
            parameter Integer nPumChiWat(final min=1, start=1)
              "Number of CHW pumps operating at design conditions"
              annotation (Dialog(group="CHW loop and cooling-only chillers"),
                Evaluate=true);
            parameter Modelica.Units.SI.Temperature TChiWatSup_nominal
              "Design (minimum) CHW supply temperature"
              annotation(Dialog(group="CHW loop and cooling-only chillers"));

            parameter Integer nChiHea(final min=1, start=1)
              "Number of units operating at design conditions"
              annotation (Dialog(group="HW loop and heat recovery chillers"),
                Evaluate=true);
            parameter Integer nPumHeaWat(final min=1, start=1)
              "Number of HW pumps operating at design conditions"
              annotation (Dialog(group="HW loop and heat recovery chillers"),
                Evaluate=true);
            parameter Modelica.Units.SI.Temperature THeaWatSup_nominal
              "Design (maximum) HW supply temperature"
              annotation (Dialog(group="HW loop and heat recovery chillers"));

            parameter Integer nHeaPum(final min=1, start=1)
              "Number of heat pumps operating at design conditions"
              annotation (Dialog(group="CW loop, TES tank and heat pumps"),
                Evaluate=true);
            parameter Integer nPumConWatCon(final min=1, start=1)
              "Number of CW pumps serving condenser barrels at design conditions"
              annotation (Dialog(group="CW loop, TES tank and heat pumps"),
                Evaluate=true);
            parameter Integer nPumConWatEva(final min=1, start=1)
              "Number of CW pumps serving evaporator barrels at design conditions"
              annotation (Dialog(group="CW loop, TES tank and heat pumps"),
                Evaluate=true);

            parameter Integer nCoo(final min=1, start=1)
              "Number of cooling tower cells operating at design conditions"
              annotation (Dialog(group="Cooling tower loop"),
                Evaluate=true);
            parameter Integer nPumConWatCoo(final min=1, start=1)
              "Number of CW pumps serving cooling towers at design conditions"
              annotation (Dialog(group="Cooling tower loop"),
                Evaluate=true);

            parameter Modelica.Units.SI.HeatFlowRate QChiWatChi_flow_nominal
              "Cooling design heat flow rate of cooling-only chillers (all units)"
              annotation (Dialog(group="CHW loop and cooling-only chillers"));
            parameter Modelica.Units.SI.HeatFlowRate QHeaPum_flow_nominal
              "Heating design heat flow rate of heat pumps (all units)"
              annotation (Dialog(group="CW loop, TES tank and heat pumps"));
            parameter Real PLRStaTra(final unit="1", final min=0, final max=1) = 0.85
              "Part load ratio triggering stage transition";
            parameter Modelica.Units.SI.HeatFlowRate QChiWatCasCoo_flow_nominal
              "Cooling design heat flow rate of HRC in cascading cooling mode (all units)"
              annotation (Dialog(group="HW loop and heat recovery chillers"));
            parameter Modelica.Units.SI.HeatFlowRate QChiWatCasCoo_flow_nominal_approx
              "Cooling design heat flow rate of HRC in cascading cooling mode (all units), approximate for scaling"
              annotation (Dialog(group="HW loop and heat recovery chillers"));
            final parameter Modelica.Units.SI.HeatFlowRate QChiWat_flow_nominal=
              QChiWatChi_flow_nominal+QChiWatCasCoo_flow_nominal
              "Plant cooling design heat flow rate (all units)";
            parameter Modelica.Units.SI.HeatFlowRate QHeaWat_flow_nominal
              "Heating design heat flow rate (all units)"
              annotation (Dialog(group="HW loop and heat recovery chillers"));
            parameter Modelica.Units.SI.SpecificHeatCapacity cp_default=
              Buildings.Utilities.Psychrometrics.Constants.cpWatLiq
              "Specific heat capacity of the fluid";

            parameter Modelica.Units.SI.MassFlowRate mChiWat_flow_nominal(
              final min=0)
              "CHW design mass flow rate (all units)"
              annotation(Dialog(group="CHW loop and cooling-only chillers"));
            parameter Modelica.Units.SI.PressureDifference dpChiWatSet_max(
              final min=0,
              displayUnit="Pa")
              "Design (maximum) CHW differential pressure setpoint"
              annotation(Dialog(group="CHW loop and cooling-only chillers"));
            parameter Modelica.Units.SI.MassFlowRate mHeaWat_flow_nominal
              "HW design mass flow rate (all units)"
              annotation (Dialog(group="HW loop and heat recovery chillers"));
            parameter Modelica.Units.SI.PressureDifference dpHeaWatSet_max(
              final min=0,
              displayUnit="Pa")
              "Design (maximum) HW differential pressure setpoint"
              annotation(Dialog(group="HW loop and heat recovery chillers"));
            parameter Modelica.Units.SI.MassFlowRate mConWatCon_flow_nominal(
              final min=0)
              "Design total CW mass flow rate through condenser barrels (all units)"
              annotation(Dialog(group="CW loop, TES tank and heat pumps"));
            parameter Modelica.Units.SI.MassFlowRate mConWatEva_flow_nominal(
              final min=0)
              "Design total CW mass flow rate through evaporator barrels (all units)"
              annotation(Dialog(group="CW loop, TES tank and heat pumps"));

            parameter Modelica.Units.SI.MassFlowRate mChiWatChi_flow_nominal
              "Chiller CHW design mass flow rate (each unit)"
              annotation(Dialog(group="CHW loop and cooling-only chillers"));
            parameter Modelica.Units.SI.MassFlowRate mChiWatChi_flow_min
              "Chiller CHW minimum mass flow rate (each unit)"
              annotation(Dialog(group="CHW loop and cooling-only chillers"));
            parameter Modelica.Units.SI.MassFlowRate mConWatChi_flow_nominal
              "Chiller CW design mass flow rate (each unit)"
              annotation(Dialog(group="CHW loop and cooling-only chillers"));
            parameter Modelica.Units.SI.MassFlowRate mChiWatChiHea_flow_nominal
              "HRC CHW design mass flow rate (each unit)"
              annotation(Dialog(group="HW loop and heat recovery chillers"));
            parameter Modelica.Units.SI.MassFlowRate mChiWatChiHea_flow_min
              "HRC CHW minimum mass flow rate (each unit)"
              annotation(Dialog(group="HW loop and heat recovery chillers"));
            parameter Modelica.Units.SI.MassFlowRate mConWatChiHea_flow_nominal
              "HRC CW design mass flow rate (each unit)"
              annotation(Dialog(group="HW loop and heat recovery chillers"));
            parameter Modelica.Units.SI.MassFlowRate mHeaWatChiHea_flow_min
              "Chiller HW minimum mass flow rate (each unit)"
              annotation(Dialog(group="HW loop and heat recovery chillers"));

            parameter Modelica.Units.SI.PressureDifference dpEvaChi_nominal(
              final min=0,
              displayUnit="Pa")
              "Chiller evaporator design pressure drop (each unit)"
              annotation(Dialog(group="CHW loop and cooling-only chillers"));
            parameter Modelica.Units.SI.PressureDifference dpValEvaChi_nominal(
              final min=0,
              displayUnit="Pa")
              "Chiller evaporator isolation valve design pressure drop (each unit)"
              annotation(Dialog(group="CHW loop and cooling-only chillers"));
            parameter Modelica.Units.SI.PressureDifference dpEvaChiHea_nominal(
              final min=0,
              displayUnit="Pa")
              "Design chiller evaporator  pressure drop (each unit)"
              annotation(Dialog(group="HW loop and heat recovery chillers"));
            parameter Modelica.Units.SI.PressureDifference dpValEvaChiHea_nominal(
              final min=0,
              displayUnit="Pa")
              "HRC evaporator isolation valve design pressure drop (each unit)"
              annotation(Dialog(group="HW loop and heat recovery chillers"));

            parameter Modelica.Units.SI.PressureDifference dpConWatConSet_max(
              final min=0,
              displayUnit="Pa")
              "Design (maximum) CW condenser loop differential pressure setpoint"
              annotation(Dialog(group="CW loop, TES tank and heat pumps"));
            parameter Modelica.Units.SI.PressureDifference dpConWatEvaSet_max(
              final min=0,
              displayUnit="Pa")
              "Design (maximum) CW evaporator loop differential pressure setpoint"
              annotation(Dialog(group="CW loop, TES tank and heat pumps"));

            parameter Modelica.Units.SI.Temperature TTanSet[2, 2]
              "Tank temperature setpoints: 2 cycles with 2 setpoints"
              annotation(Dialog(group="CW loop, TES tank and heat pumps"));
            parameter Real fraUslTan(final unit="1", final min=0, final max=1)
              "Useless fraction of TES"
              annotation(Dialog(group="CW loop, TES tank and heat pumps"));
            parameter Integer nTTan(final min=0)=0
              "Number of tank temperature points"
              annotation (Dialog(group="CW loop, TES tank and heat pumps", connectorSizing=true),HideResult=true);
            parameter Real ratFraChaTanLim[5](each final unit="1/h")=
              {-0.3, -0.2, -0.15, -0.10, -0.08}
              "Rate of change of tank charge fraction (over 10, 30, 120, 240, and 360') that triggers Charge Assist (<0)"
              annotation(Dialog(group="CW loop, TES tank and heat pumps"));

            parameter Modelica.Units.SI.TemperatureDifference dTLifChi_min
              "Minimum chiller lift at minimum load"
              annotation(Dialog(group="CHW loop and cooling-only chillers"));
            parameter Modelica.Units.SI.TemperatureDifference dTLifChi_nominal
              "Design chiller lift"
              annotation(Dialog(group="CHW loop and cooling-only chillers"));

            parameter Modelica.Units.SI.TemperatureDifference dTHexCoo_nominal
              "Design heat exchanger approach"
              annotation (Dialog(group="Cooling tower loop"));

            parameter Modelica.Units.SI.Time riseTimePum=30
              "Pump rise time of the filter (time to reach 99.6 % of the speed)"
              annotation (
                Dialog(
                tab="Dynamics",
                group="Filtered speed"));
            parameter Modelica.Units.SI.Time riseTimeVal=120
              "Pump rise time of the filter (time to reach 99.6 % of the opening)"
              annotation (
                Dialog(
                tab="Dynamics",
                group="Filtered opening"));

            Buildings.Controls.OBC.CDL.Interfaces.BooleanInput u1Coo
              "Cooling enable signal"
              annotation (Placement(transformation(extent={{-300,420},{-260,460}}),
                  iconTransformation(extent={{-260,340},{-220,380}})));
            Buildings.Controls.OBC.CDL.Interfaces.BooleanInput u1Hea
              "Heating enable signal"
              annotation (Placement(transformation(extent={{-300,380},{-260,420}}),
                  iconTransformation(extent={{-260,320},{-220,360}})));
            Buildings.Controls.OBC.CDL.Interfaces.RealInput TChiWatSupSet(final unit="K",
                displayUnit="degC") "CHW supply temperature setpoint"
              annotation (Placement(transformation(extent={{-300,340},{-260,380}}),
                  iconTransformation(extent={{-260,300},{-220,340}})));
            Buildings.Controls.OBC.CDL.Interfaces.RealInput THeaWatSupSet(final unit="K",
                displayUnit="degC")
              "HW supply temperature setpoint"
              annotation (Placement(transformation(extent={{-300,320},{-260,360}}),
                  iconTransformation(extent={{-260,280},{-220,320}})));

            Buildings.Controls.OBC.CDL.Interfaces.RealOutput yValEvaChi[nChi]
              "Cooling-only chiller evaporator isolation valve commanded position"
              annotation (Placement(
                  transformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={280,320}),iconTransformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={240,270})));
            Buildings.Controls.OBC.CDL.Interfaces.RealOutput yValConChi[nChi](
              each final unit="1")
              "Cooling-only chiller condenser isolation valve commanded position"
              annotation (
                Placement(transformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={280,300}),iconTransformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={240,250})));
            Buildings.Controls.OBC.CDL.Interfaces.BooleanOutput y1Chi[nChi]
              "Cooling-only chiller On/Off command"
              annotation (Placement(transformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={280,340}), iconTransformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={240,290})));

            Buildings.Controls.OBC.CDL.Interfaces.BooleanOutput y1PumChiWat[nPumChiWat]
              "CHW pump Start command"
              annotation (Placement(transformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={280,260}), iconTransformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={240,230})));
            Buildings.Controls.OBC.CDL.Interfaces.RealOutput yPumChiWat(
              final unit="1")
              "CHW pump speed signal"
              annotation (Placement(
                  transformation(extent={{260,220},{300,260}}, rotation=0),
                  iconTransformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={240,210})));

            Buildings.Controls.OBC.CDL.Interfaces.RealOutput yValEvaChiHea[nChiHea](
              each final unit="1") "HRC evaporator isolation valve commanded position"
              annotation (Placement(
                  transformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={280,80}), iconTransformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={240,80})));
            Buildings.Controls.OBC.CDL.Interfaces.BooleanOutput y1ChiHea[nChiHea]
              "HRC On/Off command"
              annotation (Placement(transformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={280,160}), iconTransformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={240,160})));
            Buildings.Controls.OBC.CDL.Interfaces.BooleanOutput y1CooChiHea[nChiHea]
              "HRC cooling mode switchover command: true for cooling, false for heating"
              annotation (Placement(transformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={280,140}), iconTransformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={240,140})));
            Buildings.Controls.OBC.CDL.Interfaces.RealOutput yValConChiHea[nChiHea](
              each final unit="1") "HRC condenser isolation valve commanded position"
              annotation (
                Placement(transformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={280,60}), iconTransformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={240,60})));

            Buildings.Controls.OBC.CDL.Interfaces.BooleanOutput y1PumHeaWat[nPumHeaWat]
              "HW pump Start command"
              annotation (Placement(transformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={280,-20}), iconTransformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={240,-20})));
            Buildings.Controls.OBC.CDL.Interfaces.RealOutput yPumHeaWat(
              final unit="1")
              "HW pump speed signal"
              annotation (Placement(
                  transformation(extent={{260,-60},{300,-20}}, rotation=0),
                  iconTransformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={240,-40})));

            Buildings.Controls.OBC.CDL.Interfaces.RealOutput yValChiWatMinByp(
              final unit="1")
              "CHW minimum flow bypass valve control signal"
              annotation (Placement(
                  transformation(extent={{260,180},{300,220}}, rotation=0),
                  iconTransformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={240,190})));
            Buildings.Controls.OBC.CDL.Interfaces.RealOutput yValHeaWatMinByp(
              final unit="1") "HW minimum flow bypass valve control signal"
              annotation (Placement(
                  transformation(extent={{260,-100},{300,-60}}, rotation=0),
                  iconTransformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={240,-60})));

            Buildings.Controls.OBC.CDL.Interfaces.BooleanOutput y1PumConWatCon[nPumConWatCon]
              "CW pump serving condenser barrels Start command"
              annotation (Placement(transformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={280,-120}),iconTransformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={240,-90})));
            Buildings.Controls.OBC.CDL.Interfaces.RealOutput yPumConWatCon(
              final unit="1")
              "CW pump serving condenser barrels Speed command"
              annotation (Placement(
                  transformation(extent={{260,-160},{300,-120}},rotation=0),
                  iconTransformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={240,-110})));
            Buildings.Controls.OBC.CDL.Interfaces.BooleanOutput y1PumConWatEva[nPumConWatEva]
              "CW pump serving evaporator barrels Start command"
              annotation (Placement(transformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={280,-160}), iconTransformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={240,-130})));
            Buildings.Controls.OBC.CDL.Interfaces.RealOutput yPumConWatEva(
              final unit="1")
              "CW pump serving evaporator barrels Speed command"
              annotation (Placement(
                  transformation(extent={{260,-200},{300,-160}}, rotation=0),
                  iconTransformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={240,-150})));
            Buildings.Controls.OBC.CDL.Interfaces.BooleanOutput y1HeaPum[nHeaPum]
              "Heat pump On/Off command"
              annotation (Placement(transformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={280,-220}), iconTransformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={240,-180})));
            Buildings.Controls.OBC.CDL.Interfaces.RealOutput THeaPumSet(
              final unit="K", displayUnit="degC") "Heat pump supply temperature setpoint"
              annotation (Placement(
                  transformation(extent={{260,-260},{300,-220}}, rotation=0),
                  iconTransformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={240,-200})));

            Buildings.Controls.OBC.CDL.Interfaces.RealOutput yValBypTan(
              final unit="1") "TES tank bypass valve commanded position"
              annotation (Placement(
                  transformation(extent={{260,-300},{300,-260}}, rotation=0),
                  iconTransformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={240,-320})));

            Buildings.Controls.OBC.CDL.Interfaces.BooleanOutput y1Coo[nCoo]
              "Cooling tower Start command"
              annotation (Placement(transformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={280,-360}), iconTransformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={240,-270})));
            Buildings.Controls.OBC.CDL.Interfaces.RealOutput yCoo(
              final unit="1") "Cooling tower fan speed command"
                                                annotation (Placement(transformation(
                    extent={{260,-400},{300,-360}}, rotation=0), iconTransformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={240,-290})));
            Buildings.Controls.OBC.CDL.Interfaces.BooleanOutput y1PumConWatCoo[
              nPumConWatCoo] "Cooling tower pump Start command"
              annotation (Placement(
                  transformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={280,-320}), iconTransformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={240,-230})));
            Buildings.Controls.OBC.CDL.Interfaces.RealOutput TChiHeaSet[nChiHea](
              each final unit="K", each displayUnit="degC")
              "HRC supply temperature setpoint"
              annotation (Placement(transformation(extent={{260,80},{300,120}}, rotation=0),
                  iconTransformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={240,100})));
            Buildings.Controls.OBC.CDL.Interfaces.BooleanOutput y1HeaCooChiHea[nChiHea]
              "HRC direct heat recovery switchover command: true for direct HR, false for cascading"
              annotation (Placement(transformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={280,120}), iconTransformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={240,120})));
            Buildings.Controls.OBC.CDL.Interfaces.RealInput dpChiWatSet(final unit="Pa",
                final min=0) "CHW differential pressure setpoint (for local dp sensor)"
              annotation (Placement(transformation(extent={{-300,300},{-260,340}}),
                  iconTransformation(extent={{-260,260},{-220,300}})));
            Buildings.Controls.OBC.CDL.Interfaces.RealInput dpHeaWatSet(final unit="Pa",
                final min=0)
              "HW differential pressure setpoint (for local dp sensor)"
              annotation (Placement(transformation(extent={{-300,280},{-260,320}}),
                  iconTransformation(extent={{-260,240},{-220,280}})));
            Buildings.Controls.OBC.CDL.Interfaces.RealInput dpChiWat(final unit="Pa")
              "CHW differential pressure (from local dp sensor)"
              annotation (Placement(transformation(extent={{-300,-360},{-260,-320}}),
                  iconTransformation(extent={{-260,-320},{-220,-280}})));
            Buildings.Controls.OBC.CDL.Interfaces.RealInput dpHeaWat(final unit="Pa")
              "HW differential pressure (from local dp sensor)"
              annotation (Placement(transformation(extent={{-300,-380},{-260,-340}}),
                  iconTransformation(extent={{-260,-340},{-220,-300}})));
            Buildings.Controls.OBC.CDL.Interfaces.RealInput mChiWatPri_flow(final unit=
                  "kg/s") "Primary CHW mass flow rate"
              annotation (Placement(
                  transformation(extent={{-300,-200},{-260,-160}}),
                                                                 iconTransformation(
                    extent={{-260,-200},{-220,-160}})));
            Buildings.Controls.OBC.CDL.Interfaces.RealInput mHeaWatPri_flow(final unit=
                  "kg/s") "Primary HW mass flow rate" annotation (Placement(
                  transformation(extent={{-300,-220},{-260,-180}}),
                                                                iconTransformation(extent={{-260,
                      -220},{-220,-180}})));
            Buildings.Controls.OBC.CDL.Interfaces.RealInput dpConWatCon(final unit="Pa")
              "CW condenser loop differential pressure" annotation (Placement(
                  transformation(extent={{-300,-400},{-260,-360}}), iconTransformation(
                    extent={{-260,-360},{-220,-320}})));
            Buildings.Controls.OBC.CDL.Interfaces.RealInput dpConWatEva(final unit="Pa")
              "CW evaporator loop differential pressure" annotation (Placement(
                  transformation(extent={{-300,-420},{-260,-380}}), iconTransformation(
                    extent={{-260,-380},{-220,-340}})));
            Buildings.Controls.OBC.CDL.Interfaces.RealInput mConWatCon_flow(final unit=
                  "kg/s") "CW condenser loop mass flow rate" annotation (Placement(
                  transformation(extent={{-300,-260},{-260,-220}}),
                                                               iconTransformation(extent={{-260,
                      -240},{-220,-200}})));
            Buildings.Controls.OBC.CDL.Interfaces.RealInput mConWatEva_flow(final unit=
                  "kg/s") "CW evaporator loop mass flow rate" annotation (Placement(
                  transformation(extent={{-300,-280},{-260,-240}}),
                                                                iconTransformation(extent={{-260,
                      -260},{-220,-220}})));
            Buildings.Controls.OBC.CDL.Interfaces.RealInput TChiWatSup(final unit="K",
                displayUnit="degC") "CHW supply temperature " annotation (
                Placement(transformation(extent={{-300,240},{-260,280}}),
                  iconTransformation(extent={{-260,220},{-220,260}})));
            Buildings.Controls.OBC.CDL.Interfaces.RealInput TChiWatPriRet(final unit="K",
                displayUnit="degC") "Primary CHW return temperature " annotation (
                Placement(transformation(extent={{-300,220},{-260,260}}),
                  iconTransformation(extent={{-260,200},{-220,240}})));
            Buildings.Controls.OBC.CDL.Interfaces.RealInput THeaWatPriRet(final unit="K",
                displayUnit="degC") "Primary HW return temperature " annotation (
                Placement(transformation(extent={{-300,60},{-260,100}}),
                  iconTransformation(extent={{-260,40},{-220,80}})));
            Buildings.Controls.OBC.CDL.Interfaces.RealInput TTan[nTTan](
              each final unit="K",
              each  displayUnit="degC")
              "TES tank temperature" annotation (Placement(
                  transformation(extent={{-300,40},{-260,80}}),     iconTransformation(
                    extent={{-260,20},{-220,60}})));
            Buildings.Controls.OBC.CDL.Interfaces.RealInput mConWatHexCoo_flow(final unit
                ="kg/s") "CW mass flow rate through secondary (plant) side of HX"
              annotation (Placement(transformation(extent={{-300,-300},{-260,-260}}),
                  iconTransformation(extent={{-260,-280},{-220,-240}})));
            Buildings.Controls.OBC.CDL.Interfaces.RealInput mConWatOutTan_flow(final unit
                ="kg/s")
              "Mass flow rate out of lower port of TES tank (>0 when charging)"
              annotation (Placement(transformation(extent={{-300,-320},{-260,-280}}),
                  iconTransformation(extent={{-260,-300},{-220,-260}})));
            Buildings.Controls.OBC.CDL.Interfaces.RealInput mEvaChi_flow[nChi](
              each final unit="kg/s")
              "Chiller evaporator barrel mass flow rate" annotation (Placement(
                  transformation(extent={{-300,-120},{-260,-80}}),
                                                                 iconTransformation(
                    extent={{-260,-120},{-220,-80}})));
            Buildings.Controls.OBC.CDL.Interfaces.RealInput mConChi_flow[nChi](
              each final unit="kg/s")
              "Chiller condenser barrel mass flow rate" annotation (Placement(
                  transformation(extent={{-300,-140},{-260,-100}}),
                                                                iconTransformation(extent={{-260,
                      -140},{-220,-100}})));
            Buildings.Controls.OBC.CDL.Interfaces.RealInput mEvaChiHea_flow[nChiHea](
              each final unit="kg/s")
              "HRC evaporator barrel mass flow rate" annotation (
                Placement(transformation(extent={{-300,-160},{-260,-120}}),
                  iconTransformation(extent={{-260,-160},{-220,-120}})));
            Buildings.Controls.OBC.CDL.Interfaces.RealInput mConChiHea_flow[nChiHea](
              each final unit="kg/s")
              "HRC condenser barrel mass flow rate" annotation (
                Placement(transformation(extent={{-300,-180},{-260,-140}}),
                  iconTransformation(extent={{-260,-180},{-220,-140}})));
            Buildings.Controls.OBC.CDL.Interfaces.RealOutput yValEvaSwiHea[nChiHea](
              each final unit="1")
              "HRC evaporator switchover valve commanded position"
              annotation (Placement(transformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={280,40}), iconTransformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={240,40})));
            Buildings.Controls.OBC.CDL.Interfaces.RealOutput yValConSwiChiHea[nChiHea](
              each final unit="1")
              "HRC condenser switchover valve commanded position"
              annotation (Placement(transformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={280,20}), iconTransformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={240,20})));
            Buildings.Controls.OBC.CDL.Interfaces.RealInput TEvaLvgChiHea[nChiHea](
              each final unit="K", each displayUnit="degC")
              "HRC evaporator barrel leaving temperature"
              annotation (Placement(transformation(extent={{-300,120},{-260,160}}),
                  iconTransformation(extent={{-260,100},{-220,140}})));
            Buildings.Controls.OBC.CDL.Interfaces.RealInput THeaWatSup(
              final unit="K",
              displayUnit="degC") "HW supply temperature " annotation (Placement(
                  transformation(extent={{-300,80},{-260,120}}),iconTransformation(extent={{-260,60},
                      {-220,100}})));
            Buildings.Controls.OBC.CDL.Interfaces.RealOutput yPumConWatCoo
              "Cooling tower pump speed command" annotation (Placement(transformation(
                    extent={{260,-360},{300,-320}}), iconTransformation(extent={{220,-270},
                      {260,-230}})));
            Buildings.Controls.OBC.CDL.Interfaces.RealInput TConWatConChiEnt(final unit=
                  "K", displayUnit="degC") "Chiller and HRC entering CW temperature"
              annotation (Placement(transformation(extent={{-300,20},{-260,60}}),
                  iconTransformation(extent={{-260,0},{-220,40}})));
            Buildings.Controls.OBC.CDL.Interfaces.RealInput TConWatConChiLvg(final unit=
                  "K", displayUnit="degC") "Chiller and HRC leaving CW temperature"
              annotation (Placement(transformation(extent={{-300,0},{-260,40}}),
                  iconTransformation(extent={{-260,-20},{-220,20}})));
            Buildings.Controls.OBC.CDL.Interfaces.RealInput TConWatCooSup(final unit="K",
                displayUnit="degC") "Cooling tower loop CW supply temperature"
              annotation (Placement(transformation(extent={{-300,-20},{-260,20}}),
                  iconTransformation(extent={{-260,-40},{-220,0}})));
            Buildings.Controls.OBC.CDL.Interfaces.RealInput TConWatCooRet(final unit="K",
                displayUnit="degC") "Cooling tower loop CW return temperature"
              annotation (Placement(transformation(extent={{-300,-40},{-260,0}}),
                  iconTransformation(extent={{-260,-60},{-220,-20}})));
            Buildings.Controls.OBC.CDL.Interfaces.RealInput TConWatHexCooEnt(final unit="K",
                displayUnit="degC")        "HX entering CW temperature" annotation (
                Placement(transformation(extent={{-300,-60},{-260,-20}}),
                  iconTransformation(extent={{-260,-80},{-220,-40}})));
            Buildings.Controls.OBC.CDL.Interfaces.RealInput TConWatHexCooLvg(final unit="K",
                displayUnit="degC")        "HX leaving CW temperature" annotation (
                Placement(transformation(extent={{-300,-80},{-260,-40}}),
                  iconTransformation(extent={{-260,-100},{-220,-60}})));
            Buildings.Controls.OBC.CDL.Interfaces.RealInput TConEntChiHea[nChiHea](each final
                      unit="K", each displayUnit="degC")
              "HRC condenser barrel entering temperature" annotation (Placement(
                  transformation(extent={{-300,160},{-260,200}}), iconTransformation(
                    extent={{-260,140},{-220,180}})));
            Buildings.Controls.OBC.CDL.Interfaces.RealInput TConLvgChiHea[nChiHea](each final
                      unit="K", each displayUnit="degC")
              "HRC condenser barrel leaving temperature" annotation (Placement(
                  transformation(extent={{-300,140},{-260,180}}), iconTransformation(
                    extent={{-260,120},{-220,160}})));
            Buildings.Controls.OBC.CDL.Interfaces.RealInput TConWatEvaEnt(final unit="K",
                displayUnit="degC") "HRC evaporator entering CW temperature " annotation (
               Placement(transformation(extent={{-300,180},{-260,220}}),
                  iconTransformation(extent={{-260,160},{-220,200}})));
            Buildings.Controls.OBC.CDL.Interfaces.RealOutput yValConWatEvaMix
              "HRC evaporator CW mixing valve commanded position" annotation (Placement(
                  transformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={280,0}), iconTransformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={240,0})));
            Buildings.Controls.OBC.CDL.Interfaces.RealInput TConWatConRet(final unit
                ="K", displayUnit="degC") "Condenser loop CW return temperature"
              annotation (Placement(transformation(extent={{-300,200},{-260,240}}),
                  iconTransformation(extent={{-260,180},{-220,220}})));
            Buildings.Controls.OBC.CDL.Interfaces.RealInput TConLvgChi[nChi](each final
                unit="K", each displayUnit="degC")
              "Chiller condenser barrel leaving temperature" annotation (Placement(
                  transformation(extent={{-300,100},{-260,140}}), iconTransformation(
                    extent={{-260,80},{-220,120}})));
            Buildings.Controls.OBC.CDL.Interfaces.RealOutput yValConWatByp(final unit="1")
              "CW chiller bypass valve control signal" annotation (Placement(
                  transformation(extent={{260,-440},{300,-400}}, rotation=0),
                  iconTransformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={240,-360})));
            annotation (Diagram(coordinateSystem(extent={{-260,-460},{260,460}})), Icon(
                  coordinateSystem(extent={{-220,-380},{220,380}}),
                  graphics={                      Text(
                  extent={{-150,430},{150,390}},
                  textString="%name",
                  textColor={0,0,255}),
                  Rectangle(
                    extent={{-220,-380},{220,380}},
                    lineColor={0,0,127},
                    fillColor={255,255,255},
                    fillPattern=FillPattern.Solid)}),
              Documentation(info="<html>
<p>
This block serves as an interface class for the plant controller.
</p>
</html>",           revisions="<html>
<ul>
<li>
February 24, 2023, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>"));
          end PartialController;

          block StageIndex
            "Block that computes the stage index out of staging signals"

            parameter Integer nSta(start=1)
              "Number of stages"
              annotation(Evaluate=true);
            parameter Modelica.Units.SI.Time tSta=0
              "Minimum runtime of each stage"
              annotation(Evaluate=true);

            Buildings.Controls.OBC.CDL.Interfaces.BooleanInput u1
              "Enable signal"
              annotation (Placement(
                  transformation(extent={{-220,40},{-180,80}}),iconTransformation(extent={{-140,40},
                      {-100,80}})));
            Buildings.Controls.OBC.CDL.Interfaces.BooleanInput u1Up
              "Staging up signal"
              annotation (Placement(
                  transformation(extent={{-220,-100},{-180,-60}}),iconTransformation(extent={{-140,
                      -20},{-100,20}})));
            Buildings.Controls.OBC.CDL.Interfaces.BooleanInput u1Dow
              "Staging down signal"
              annotation (Placement(
                  transformation(extent={{-220,-140},{-180,-100}}),
                  iconTransformation(extent={{-140,
                      -78},{-100,-38}})));
            Buildings.Controls.OBC.CDL.Interfaces.IntegerOutput idxSta
              "Stage index"
              annotation (Placement(transformation(extent={{180,-20},{220,20}}),
                  iconTransformation(extent={{100,-20},{140,20}})));
            Buildings.Controls.OBC.CDL.Interfaces.IntegerOutput preIdxSta
              "Left limit (in discrete-time) of stage index"
              annotation (Placement(
                  transformation(extent={{180,-60},{220,-20}}), iconTransformation(extent={{100,-80},
                      {140,-40}})));

            Modelica.StateGraph.InitialStepWithSignal sta0(
              final nOut=1,
              final nIn=nSta+1)
              "Stage 0: no unit"
              annotation (Placement(transformation(extent={{-120,30},{-100,50}})));
            Modelica.StateGraph.StepWithSignal sta[nSta](
              each final nIn=2, each final nOut=3)
              "Stage i"
              annotation (Placement(transformation(extent={{-10,30},{10,50}})));
            Modelica.StateGraph.TransitionWithSignal enaLea(
              final enableTimer=false) "Transition enabling lead unit"
              annotation (Placement(transformation(extent={{-42,30},{-22,50}})));
            inner Modelica.StateGraph.StateGraphRoot stateGraphRoot "State graph root"
              annotation (Placement(transformation(extent={{-10,128},{10,148}})));
            Modelica.StateGraph.TransitionWithSignal enaLag[nSta](
              each final enableTimer=false)
              "Transition enabling lag unit"
              annotation (Placement(transformation(extent={{90,30},{110,50}})));
            Buildings.Controls.OBC.CDL.Logical.Timer tim[nSta](each final t=tSta)
              "Timer for minimum runtime"
              annotation (Placement(transformation(extent={{10,-50},{30,-30}})));
            Buildings.Controls.OBC.CDL.Logical.Timer tim0(final t=tSta)
              "Timer for minimum runtime"
              annotation (Placement(transformation(extent={{-100,0},{-80,20}})));
            Buildings.Controls.OBC.CDL.Logical.And and2 "Timer for minimum runtime"
              annotation (Placement(transformation(extent={{-60,0},{-40,20}})));
            Buildings.Controls.OBC.CDL.Logical.And andUp[nSta]
              "Runtime criterion met AND staging up order"
              annotation (Placement(transformation(extent={{50,-90},{70,-70}})));
            Buildings.Controls.OBC.CDL.Routing.BooleanScalarReplicator rep(
              final nout=nSta)
              "Replicate"
              annotation (Placement(transformation(extent={{-60,-90},{-40,-70}})));
            Buildings.Controls.OBC.CDL.Logical.And andDow[nSta]
              "Runtime criterion met AND staging down order"
              annotation (Placement(transformation(extent={{50,-130},{70,-110}})));
            Buildings.Controls.OBC.CDL.Routing.BooleanScalarReplicator rep1(
              final nout=nSta) "Replicate"
              annotation (Placement(transformation(extent={{-60,-130},{-40,-110}})));
            Modelica.StateGraph.TransitionWithSignal disLag[nSta](
              each final enableTimer=false)
              "Transition disabling lag unit"
              annotation (Placement(transformation(extent={{110,10},{130,30}})));
            Modelica.StateGraph.TransitionWithSignal disAll[nSta](
              each final enableTimer=false)
              "Transition disabling all units"
              annotation (Placement(transformation(extent={{70,50},{90,70}})));
            Buildings.Controls.OBC.CDL.Logical.And andNotEna[nSta]
              "Runtime criterion met AND enable signal false"
              annotation (Placement(transformation(extent={{50,-50},{70,-30}})));
            Buildings.Controls.OBC.CDL.Routing.BooleanScalarReplicator rep2(
              final nout=nSta)
              "Replicate"
              annotation (Placement(transformation(extent={{-60,-50},{-40,-30}})));
            Buildings.Controls.OBC.CDL.Logical.Not not1 "True if enable signal false"
              annotation (Placement(transformation(extent={{-100,-50},{-80,-30}})));
            Modelica.Blocks.Sources.IntegerExpression calIdxSta(final y=
                  Modelica.Math.BooleanVectors.firstTrueIndex(sta.active))
              "Compute stage index"
              annotation (Placement(transformation(extent={{140,-10},{160,10}})));
            Buildings.Controls.OBC.CDL.Logical.Edge edg
              "Transition to stage 1 at enable time"
              annotation (Placement(transformation(extent={{-130,70},{-110,90}})));
            Buildings.Controls.OBC.CDL.Logical.Or or2
              "Transition to stage 1 at enable time or staging up order"
              annotation (Placement(transformation(extent={{-100,70},{-80,90}})));
            Modelica.Blocks.Sources.IntegerExpression calPre(final y=pre(idxSta))
              "Compute left limit of stage index"
              annotation (Placement(transformation(extent={{140,-50},{160,-30}})));

            Buildings.Controls.OBC.CDL.Logical.And upAndEna "Stage up only if enabled"
              annotation (Placement(transformation(extent={{-160,-90},{-140,-70}})));
            Buildings.Controls.OBC.CDL.Logical.And dowOrDis "Stage down if disabled"
              annotation (Placement(transformation(extent={{-160,-130},{-140,-110}})));
          initial equation
            preIdxSta=0;
          equation
            for i in 1:(nSta - 1) loop
            connect(enaLag[i].outPort, sta[i+1].inPort[1]) annotation (Line(points={{101.5,
                      40},{110,40},{110,80},{-20,80},{-20,39.75},{-11,39.75}},
                                                                         color={0,0,0}));
            connect(disLag[i+1].outPort, sta[i].inPort[2]) annotation (Line(points={{121.5,
                      20},{130,20},{130,80},{-20,80},{-20,40.25},{-11,40.25}}, color={0,0,0}));
            end for;
            connect(enaLag[nSta].outPort, sta[nSta].inPort[2])
              annotation (Line(points={{101.5,40},{110,40},{110,80},{-20,80},{-20,40.25},{
                    -11,40.25}},                                       color={0,0,0}));
            connect(disAll.outPort, sta0.inPort[1:nSta])
              annotation (Line(points={{81.5,60},{90,60},{90,100},{-140,100},{-140,40},{
                    -121,40}},                                color={0,0,0}));
            connect(sta0.outPort[1], enaLea.inPort)
              annotation (Line(points={{-99.5,40},{-36,40}}, color={0,0,0}));
            connect(enaLea.outPort, sta[1].inPort[1])
              annotation (Line(points={{-30.5,40},{-24,40},{-24,39.75},{-11,39.75}},color={0,0,0}));

            connect(disLag[1].outPort, sta0.inPort[nSta+1]) annotation (Line(points={{121.5,
                    20},{130,20},{130,100},{-140,100},{-140,40},{-121,40}},
                                                                      color={0,0,0}));
            connect(sta.outPort[1], disAll.inPort) annotation (Line(points={{10.5,39.8333},
                    {20,39.8333},{20,60},{76,60}},
                                      color={0,0,0}));
            connect(sta.outPort[2], enaLag.inPort) annotation (Line(points={{10.5,40},{96,
                    40}},                         color={0,0,0}));
            connect(sta.outPort[3], disLag.inPort) annotation (Line(points={{10.5,40.1667},
                    {20,40.1667},{20,20},{116,20}},
                                                  color={0,0,0}));

            connect(sta.active, tim.u)
              annotation (Line(points={{0,29},{0,-40},{8,-40}}, color={255,0,255}));
            connect(sta0.active, tim0.u) annotation (Line(points={{-110,29},{-110,10},{
                    -102,10}},
                          color={255,0,255}));
            connect(tim0.passed, and2.u2)
              annotation (Line(points={{-78,2},{-62,2}}, color={255,0,255}));
            connect(and2.y, enaLea.condition)
              annotation (Line(points={{-38,10},{-32,10},{-32,28}}, color={255,0,255}));
            connect(rep.y, andUp.u2) annotation (Line(points={{-38,-80},{34,-80},{34,-88},
                    {48,-88}}, color={255,0,255}));
            connect(andUp.y, enaLag.condition)
              annotation (Line(points={{72,-80},{100,-80},{100,28}}, color={255,0,255}));
            connect(tim.passed, andDow.u1) annotation (Line(points={{32,-48},{40,-48},{40,
                    -120},{48,-120}}, color={255,0,255}));
            connect(rep1.y, andDow.u2) annotation (Line(points={{-38,-120},{36,-120},{36,-128},
                    {48,-128}}, color={255,0,255}));
            connect(tim.passed, andUp.u1) annotation (Line(points={{32,-48},{40,-48},{40,-80},
                    {48,-80}}, color={255,0,255}));
            connect(andDow.y, disLag.condition) annotation (Line(points={{72,-120},{120,-120},
                    {120,8}}, color={255,0,255}));
            connect(u1, not1.u) annotation (Line(points={{-200,60},{-170,60},{-170,-40},{
                    -102,-40}},
                           color={255,0,255}));
            connect(not1.y, rep2.u)
              annotation (Line(points={{-78,-40},{-62,-40}}, color={255,0,255}));
            connect(rep2.y, andNotEna.u1) annotation (Line(points={{-38,-40},{-20,-40},{-20,
                    -20},{40,-20},{40,-40},{48,-40}}, color={255,0,255}));
            connect(tim.passed, andNotEna.u2)
              annotation (Line(points={{32,-48},{48,-48}}, color={255,0,255}));
            connect(andNotEna.y, disAll.condition)
              annotation (Line(points={{72,-40},{80,-40},{80,48}}, color={255,0,255}));

            connect(calIdxSta.y, idxSta)
              annotation (Line(points={{161,0},{200,0}},color={255,127,0}));
            connect(u1, edg.u) annotation (Line(points={{-200,60},{-170,60},{-170,80},{
                    -132,80}},
                          color={255,0,255}));
            connect(edg.y, or2.u1)
              annotation (Line(points={{-108,80},{-102,80}},
                                                           color={255,0,255}));
            connect(or2.y, and2.u1) annotation (Line(points={{-78,80},{-70,80},{-70,10},{
                    -62,10}},               color={255,0,255}));
            connect(calPre.y, preIdxSta)
              annotation (Line(points={{161,-40},{200,-40}}, color={255,127,0}));
            connect(u1, upAndEna.u2) annotation (Line(points={{-200,60},{-170,60},{-170,
                    -88},{-162,-88}}, color={255,0,255}));
            connect(u1Up, upAndEna.u1)
              annotation (Line(points={{-200,-80},{-162,-80}}, color={255,0,255}));
            connect(upAndEna.y, rep.u)
              annotation (Line(points={{-138,-80},{-62,-80}}, color={255,0,255}));
            connect(dowOrDis.y, rep1.u)
              annotation (Line(points={{-138,-120},{-62,-120}}, color={255,0,255}));
            connect(u1Dow, dowOrDis.u1)
              annotation (Line(points={{-200,-120},{-162,-120}}, color={255,0,255}));
            connect(u1, dowOrDis.u2) annotation (Line(points={{-200,60},{-170,60},{-170,
                    -128},{-162,-128}}, color={255,0,255}));
            connect(upAndEna.y, or2.u2) annotation (Line(points={{-138,-80},{-130,-80},{
                    -130,60},{-106,60},{-106,72},{-102,72}},
                                                          color={255,0,255}));
            annotation (
            defaultComponentName="sta",
            Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                  Rectangle(
                    extent={{-100,-100},{100,100}},
                    lineColor={0,0,127},
                    fillColor={255,255,255},
                    fillPattern=FillPattern.Solid),
                  Text(
                    textColor={0,0,255},
                    extent={{-150,110},{150,150}},
                    textString="%name")}), Diagram(coordinateSystem(preserveAspectRatio=false,
                    extent={{-180,-180},{180,180}})),
              Documentation(info="<html>
<p>
This block is used to compute the stage index of the plant or 
of multiple lead/lag units such as pump groups.
</p>
<p>
At initial time, stage <code>#0</code> is active.
The transition to stage <code>#1</code> is triggered when stage <code>#0</code> has been active
for the minimum runtime and when either the Enable signal <code>u1</code> 
has a rising edge or when the stage up signal <code>u1Up</code> is <code>true</code>.
</p>
<p>
From stage <code>#i</code>, the transition to stage <code>#i+1</code> (resp. <code>i-1</code>) is triggered 
when stage <code>#i</code> has been active for the minimum runtime and when the 
stage up signal <code>u1Up</code> (resp. stage down signal <code>u1Dow</code>)
is <code>true</code>.
From stage <code>#i</code>, the transition to stage <code>#0</code> is triggered 
when stage <code>#i</code> has been active for the minimum runtime and the Enable signal 
<code>u1</code> is <code>false</code>.
</p>
</html>",           revisions="<html>
<ul>
<li>
February 24, 2023, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>"));
          end StageIndex;

          block StagingPlant
            "Block that computes plant stage and command signals for chillers and HRC"

            parameter Integer nChi(final min=1, start=1)
              "Number of units operating at design conditions"
              annotation (Dialog(group="CHW loop and cooling-only chillers"),
                Evaluate=true);
            parameter Modelica.Units.SI.HeatFlowRate QChiWatChi_flow_nominal
              "Cooling design heat flow rate of cooling-only chillers (all units)"
              annotation (Dialog(group="CHW loop and cooling-only chillers"));
            parameter Integer nChiHea(final min=1, start=1)
              "Number of units operating at design conditions"
              annotation (Dialog(group="HW loop and heat recovery chillers"),
                Evaluate=true);
            parameter Real PLRStaTra(unit="1")=0.85
              "Part load ratio triggering stage transition";
            parameter Modelica.Units.SI.HeatFlowRate QChiWatCasCoo_flow_nominal
              "Cooling design heat flow rate of HRC in cascading cooling mode (all units)"
              annotation (Dialog(group="HW loop and heat recovery chillers"));
            parameter Modelica.Units.SI.HeatFlowRate QChiWatCasCoo_flow_nominal_approx
              "Cooling design heat flow rate of HRC in cascading cooling mode (all units), approximate for scaling"
              annotation (Dialog(group="HW loop and heat recovery chillers"));
            parameter Modelica.Units.SI.HeatFlowRate QHeaWat_flow_nominal
              "Heating design heat flow rate (all units)"
              annotation (Dialog(group="HW loop and heat recovery chillers"));
            parameter Modelica.Units.SI.SpecificHeatCapacity cp_default=
              Buildings.Utilities.Psychrometrics.Constants.cpWatLiq
              "Specific heat capacity of the fluid";

            Buildings.Controls.OBC.CDL.Interfaces.RealInput mChiWatPri_flow(
              final unit="kg/s")
              "Primary CHW mass flow rate"
              annotation (Placement(transformation(extent={{-280,80},{-240,120}}),
                iconTransformation(extent={{-140,80},{-100,120}})));
            Buildings.Controls.OBC.CDL.Interfaces.RealInput TChiWatSupSet(
              final unit="K", displayUnit="degC") "CHW supply temperature setpoint"
              annotation (Placement(transformation(
                    extent={{-280,60},{-240,100}}), iconTransformation(extent={{-140,60},
                      {-100,100}})));
            Buildings.Controls.OBC.CDL.Interfaces.RealInput TChiWatPriRet(final unit="K",
                displayUnit="degC") "Primary CHW return temperature" annotation (
                Placement(transformation(extent={{-280,20},{-240,60}}),
                  iconTransformation(extent={{-140,20},{-100,60}})));
            Buildings.Controls.OBC.CDL.Interfaces.RealInput mHeaWatPri_flow(final unit="kg/s")
              "Primary HW mass flow rate" annotation (Placement(transformation(extent={{-280,
                      -100},{-240,-60}}),iconTransformation(extent={{-140,-60},{-100,-20}})));
            Buildings.Controls.OBC.CDL.Interfaces.RealInput THeaWatSupSet(
              final unit="K", displayUnit="degC")
              "HW supply temperature setpoint" annotation (Placement(transformation(
                    extent={{-280,-140},{-240,-100}}),
                                                  iconTransformation(extent={{-140,-80},{
                      -100,-40}})));
            Buildings.Controls.OBC.CDL.Interfaces.RealInput THeaWatPriRet(final unit="K",
                displayUnit="degC") "Primary HW return temperature" annotation (Placement(
                  transformation(extent={{-280,-180},{-240,-140}}), iconTransformation(
                    extent={{-140,-120},{-100,-80}})));
            Buildings.Controls.OBC.CDL.Interfaces.RealInput TChiWatSup(final unit="K",
                displayUnit="degC") "CHW supply temperature" annotation (Placement(
                  transformation(extent={{-280,180},{-240,220}}), iconTransformation(
                    extent={{-140,40},{-100,80}})));
            Buildings.Controls.OBC.CDL.Interfaces.RealInput dpChiWat(final unit="Pa")
              "CHW loop differential pressure"
                                             annotation (
                Placement(transformation(extent={{-280,240},{-240,280}}),
                  iconTransformation(extent={{-140,-20},{-100,20}})));
            Buildings.Controls.OBC.CDL.Interfaces.RealInput dpChiWatSet(final unit="Pa")
              "CHW loop differential pressure setpoint"
                                                      annotation (
               Placement(transformation(extent={{-280,260},{-240,300}}),
                  iconTransformation(extent={{-140,0},{-100,40}})));
            Buildings.Controls.OBC.CDL.Interfaces.RealInput THeaWatSup(final unit="K",
                displayUnit="degC") "HW supply temperature" annotation (Placement(
                  transformation(extent={{-280,-240},{-240,-200}}), iconTransformation(
                    extent={{-140,-100},{-100,-60}})));
            Buildings.Controls.OBC.CDL.Interfaces.RealInput dpHeaWat(final unit="Pa")
              "HW loop differential pressure" annotation (Placement(transformation(extent
                    ={{-280,-300},{-240,-260}}), iconTransformation(extent={{-140,-160},{
                      -100,-120}})));
            Buildings.Controls.OBC.CDL.Interfaces.RealInput dpHeaWatSet(final unit="Pa")
              "HW loop differential pressure setpoint" annotation (Placement(
                  transformation(extent={{-280,-280},{-240,-240}}), iconTransformation(
                    extent={{-140,-140},{-100,-100}})));
            Buildings.Controls.OBC.CDL.Interfaces.RealOutput QCooReq_flow(final unit="W")
              "Plant required cooling capacity (>0)" annotation (
                Placement(transformation(extent={{240,160},{280,200}}),
                  iconTransformation(extent={{100,120},{140,160}})));
            Buildings.Controls.OBC.CDL.Interfaces.BooleanInput u1Coo
              "Cooling enable signal"
              annotation (Placement(transformation(extent={{-280,140},{-240,180}}),
                  iconTransformation(extent={{-140,122},{-100,162}})));
            Buildings.Controls.OBC.CDL.Interfaces.BooleanInput u1Hea
              "Heating enable signal"
              annotation (Placement(transformation(extent={{-280,120},{-240,160}}),
                  iconTransformation(extent={{-140,102},{-100,142}})));
            Buildings.Controls.OBC.CDL.Interfaces.BooleanOutput y1Chi[nChi]
              "Chiller On/Off command"
              annotation (Placement(transformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={260,120}), iconTransformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={120,80})));
            Buildings.Controls.OBC.CDL.Interfaces.BooleanOutput y1CooChiHea[nChiHea]
              "HRC cooling mode switchover command: true for cooling, false for heating"
              annotation (Placement(transformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={260,40}),  iconTransformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={120,-80})));
            Buildings.Controls.OBC.CDL.Interfaces.BooleanOutput y1ChiHea[nChiHea]
              "HRC On/Off command" annotation (Placement(transformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={260,-100}),iconTransformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={120,-20})));
            Buildings.Controls.OBC.CDL.Interfaces.BooleanOutput y1HeaCooChiHea[nChiHea]
              "HRC cooling mode switchover command: true for cooling, false for heating"
              annotation (Placement(transformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={260,-40}), iconTransformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={120,-140})));

            Buildings.Controls.OBC.CDL.Reals.MovingAverage movAve(delta=300)
              "Moving average"
              annotation (Placement(transformation(extent={{-150,110},{-130,130}})));
            Buildings.Controls.OBC.CDL.Reals.Multiply loaChiWat
              "Compute total chiller load (>0)"
              annotation (Placement(transformation(extent={{-180,110},{-160,130}})));
            Buildings.Controls.OBC.CDL.Reals.Subtract dTChiWatPos
              "Compute deltaT (>0)"
              annotation (Placement(transformation(extent={{-210,70},{-190,90}})));
            Buildings.Controls.OBC.CDL.Reals.Multiply loaHeaWat
              "Compute total chiller load"
              annotation (Placement(transformation(extent={{-180,-130},{-160,-110}})));
            Buildings.Controls.OBC.CDL.Reals.Subtract dTHeaWat "Compute deltaT"
              annotation (Placement(transformation(extent={{-220,-150},{-200,-130}})));
            Buildings.Controls.OBC.CDL.Routing.IntegerScalarReplicator rep(final nout=
                  nChi) "Replicate"
              annotation (Placement(transformation(extent={{180,110},{200,130}})));
            Buildings.Controls.OBC.CDL.Integers.GreaterEqualThreshold cmdChi[nChi](final
                t={i for i in 1:nChi})
              "Compute chiller On/Off command from number of units to be commanded On"
              annotation (Placement(transformation(extent={{210,110},{230,130}})));
            Buildings.Controls.OBC.CDL.Reals.MultiplyByParameter timCp(final k=
                  cp_default) "Scale"
              annotation (Placement(transformation(extent={{-210,130},{-190,150}})));
            Buildings.Controls.OBC.CDL.Reals.MultiplyByParameter timCp1(final k=
                  cp_default) "Scale"
              annotation (Placement(transformation(extent={{-220,-90},{-200,-70}})));
            Buildings.Controls.OBC.CDL.Reals.MovingAverage movAve1(delta=300)
              "Moving average"
              annotation (Placement(transformation(extent={{-150,-130},{-130,-110}})));
            Buildings.Controls.OBC.CDL.Routing.IntegerScalarReplicator rep5(final nout=
                  nChiHea)
              "Replicate"
              annotation (Placement(transformation(extent={{180,-110},{200,-90}})));
            Buildings.Controls.OBC.CDL.Integers.GreaterEqualThreshold cmdChiHea[nChiHea](
                final t={i for i in 1:nChiHea})
              "Compute chiller On/Off command from number of units to be commanded On"
              annotation (Placement(transformation(extent={{210,-110},{230,-90}})));
            Buildings.Controls.OBC.CDL.Integers.Subtract numChiHeaCoo
              "Number of HRC required in direct HR mode" annotation (Placement(
                  transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={10,-20})));
            Buildings.Controls.OBC.CDL.Integers.Sources.Constant numChiHea(final k=
                  nChiHea) "Number of HRC"
              annotation (Placement(transformation(extent={{-80,-50},{-60,-30}})));

            Buildings.Controls.OBC.CDL.Integers.Add nChiHeaAndCooUnb
              "Number of HRC required to meet heating and cooling load - Unbounded"
              annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={-70,0})));
            Buildings.Controls.OBC.CDL.Integers.Subtract numChiCasCoo
              "Number of HRC required in cascading cooling"
              annotation (Placement(transformation(extent={{40,10},{60,30}})));
            ModeHeatRecoveryChiller modHeaCoo(final nChiHea=nChiHea)
              "Compute the cascading cooling and direct HR switchover signals"
              annotation (Placement(transformation(extent={{180,-10},{200,10}})));

            Buildings.Controls.OBC.CDL.Integers.Min nChiHeaHeaAndCoo
              "Number of HRC required to meet heating and cooling load - Bounded by number of HRC"
              annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={-30,-40})));

            Buildings.Controls.OBC.CDL.Reals.Subtract errTChiWatSup
              "Compute tracking error"
              annotation (Placement(transformation(extent={{-200,200},{-180,220}})));
            Buildings.Controls.OBC.CDL.Reals.Subtract errDpChiWat
              "Compute tracking error"
              annotation (Placement(transformation(extent={{-200,250},{-180,270}})));
            Buildings.Controls.OBC.CDL.Reals.LessThreshold cmpErrLim(t=-1, h=1E-4)
              "Check tracking error limit"
              annotation (Placement(transformation(extent={{-170,200},{-150,220}})));
            Buildings.Controls.OBC.CDL.Reals.GreaterThreshold cmpErrLim1(t=1.5E4, h=1E-1)
              "Check tracking error limit"
              annotation (Placement(transformation(extent={{-170,250},{-150,270}})));
            Buildings.Controls.OBC.CDL.Logical.Timer timErrExcLim(t=15*60)
              "Timer for error exceeding error limit"
              annotation (Placement(transformation(extent={{-110,200},{-90,220}})));
            Buildings.Controls.OBC.CDL.Logical.Timer timErrExcLim1(t=15*60)
              "Timer for error exceeding error limit"
              annotation (Placement(transformation(extent={{-110,250},{-90,270}})));
            Buildings.Controls.OBC.CDL.Logical.Or or2 "Failsafe condition to stage up"
              annotation (Placement(transformation(extent={{-70,220},{-50,240}})));
            Buildings.Controls.OBC.CDL.Logical.And and2
              "Apply failsafe condition only in stage >= 1"
              annotation (Placement(transformation(extent={{-140,250},{-120,270}})));
            Buildings.Controls.OBC.CDL.Logical.And and3
              "Apply failsafe condition only in stage >= 1"
              annotation (Placement(transformation(extent={{-140,200},{-120,220}})));
            StageIndex staCoo(final nSta=nChi + nChiHea, tSta=15*60)
              "Compute cooling stage"
              annotation (Placement(transformation(extent={{50,144},{70,164}})));
            Modelica.Blocks.Sources.RealExpression capCoo(final y=abs(PLRStaTra*(min(nChi,
                  staCoo.preIdxSta)/nChi*QChiWatChi_flow_nominal + max(0, staCoo.preIdxSta
                   - nChi)/nChiHea*QChiWatCasCoo_flow_nominal)))
              "Total capacity at current stage (>0) times stage-up PLR limit "
              annotation (Placement(transformation(extent={{-120,90},{-100,110}})));
            Buildings.Controls.OBC.CDL.Reals.Greater cmpOPLRLimUp(h=-1E-4*(
                  QChiWatChi_flow_nominal + QChiWatCasCoo_flow_nominal_approx)/2)
              "Check OPLR limit"
              annotation (Placement(transformation(extent={{-80,110},{-60,130}})));
            Buildings.Controls.OBC.CDL.Logical.Timer timOPLRExcLim(t=15*60)
              "Timer for OPLR exceeding limit"
              annotation (Placement(transformation(extent={{-40,110},{-20,130}})));
            Buildings.Controls.OBC.CDL.Logical.Or or1
              "Failsafe condition or efficiency condition to stage up"
              annotation (Placement(transformation(extent={{0,130},{20,150}})));
            Buildings.Controls.OBC.CDL.Integers.Min numOpeChi
              "Number of operating chillers"
              annotation (Placement(transformation(extent={{90,110},{110,130}})));
            Buildings.Controls.OBC.CDL.Integers.Sources.Constant numChi(final k=nChi)
              "Number of chillers"
              annotation (Placement(transformation(extent={{50,90},{70,110}})));
            Buildings.Controls.OBC.CDL.Integers.Subtract numOpeCooChiHea
              "Number of HRC required for cooling"
              annotation (Placement(transformation(extent={{-120,10},{-100,30}})));
            Modelica.Blocks.Sources.RealExpression capHea(final y=PLRStaTra*staHea.preIdxSta
                  /nChiHea*QHeaWat_flow_nominal)
              "Total capacity at current stage times stage-up PLR limit "
              annotation (Placement(transformation(extent={{-120,-150},{-100,-130}})));
            Buildings.Controls.OBC.CDL.Reals.Greater cmpOPLRLimUp1(h=1E-1)
              "Check OPLR limit"
              annotation (Placement(transformation(extent={{-80,-130},{-60,-110}})));
            Buildings.Controls.OBC.CDL.Logical.Timer timOPLRExcLim1(t=15*60)
              "Timer for OPLR exceeding limit"
              annotation (Placement(transformation(extent={{-50,-130},{-30,-110}})));
            StageIndex staHea(final nSta=nChiHea, tSta=15*60) "Compute heating stage"
              annotation (Placement(transformation(extent={{50,-130},{70,-110}})));
            Modelica.Blocks.Sources.RealExpression capHeaLow(final y=PLRStaTra*max(0,
                  staHea.preIdxSta - 1)/nChiHea*QHeaWat_flow_nominal)
              "Total capacity at next lower stage times stage-down PLR limit "
              annotation (Placement(transformation(extent={{-120,-178},{-100,-158}})));
            Buildings.Controls.OBC.CDL.Reals.Less cmpOPLRLimDow(h=1E-1)
            "Check OPLR limit"
              annotation (Placement(transformation(extent={{-80,-170},{-60,-150}})));
            Buildings.Controls.OBC.CDL.Logical.Timer timOPLRExcLim2(t=15*60)
              "Timer for OPLR exceeding limit"
              annotation (Placement(transformation(extent={{-50,-170},{-30,-150}})));
            Modelica.Blocks.Sources.RealExpression capCooLow(final y=abs(PLRStaTra*(min(
                  nChi, max(0, staCoo.preIdxSta - 1))/nChi*QChiWatChi_flow_nominal + max(
                  0, staCoo.preIdxSta - 1 - nChi)/nChiHea*QChiWatCasCoo_flow_nominal)))
              "Total capacity at next lower stage (>0) times stage-down PLR limit "
              annotation (Placement(transformation(extent={{-120,62},{-100,82}})));
            Buildings.Controls.OBC.CDL.Reals.Less cmpOPLRLimDow1(h=-1E-4*(
                  QChiWatChi_flow_nominal + QChiWatCasCoo_flow_nominal_approx)/2)
              "Check OPLR limit"
              annotation (Placement(transformation(extent={{-80,70},{-60,90}})));
            Buildings.Controls.OBC.CDL.Logical.Timer timOPLRExcLim3(t=15*60)
              "Timer for OPLR exceeding limit"
              annotation (Placement(transformation(extent={{-40,70},{-20,90}})));
            Buildings.Controls.OBC.CDL.Logical.Not notFail
              "Failsafe conditions are not true"
              annotation (Placement(transformation(extent={{-40,190},{-20,210}})));
            Buildings.Controls.OBC.CDL.Logical.And dowAndNotFail
              "No stage up failsafe condition and efficiency condition to stage down"
              annotation (Placement(transformation(extent={{0,90},{20,110}})));
            Buildings.Controls.OBC.CDL.Reals.Subtract errTChiWatSup1
              "Compute tracking error"
              annotation (Placement(transformation(extent={{-200,-230},{-180,-210}})));
            Buildings.Controls.OBC.CDL.Reals.Subtract errDpHeaWat
              "Compute tracking error"
              annotation (Placement(transformation(extent={{-200,-290},{-180,-270}})));
            Buildings.Controls.OBC.CDL.Reals.GreaterThreshold   cmpErrLim2(t=+1, h=1E-4)
              "Check tracking error limit"
              annotation (Placement(transformation(extent={{-170,-230},{-150,-210}})));
            Buildings.Controls.OBC.CDL.Reals.GreaterThreshold cmpErrLim3(t=1.5E4, h=1E-1)
              "Check tracking error limit"
              annotation (Placement(transformation(extent={{-170,-290},{-150,-270}})));
            Buildings.Controls.OBC.CDL.Logical.Timer timErrExcLim2(t=15*60)
              "Timer for error exceeding error limit"
              annotation (Placement(transformation(extent={{-110,-230},{-90,-210}})));
            Buildings.Controls.OBC.CDL.Logical.Timer timErrExcLim3(t=15*60)
              "Timer for error exceeding error limit"
              annotation (Placement(transformation(extent={{-110,-290},{-90,-270}})));
            Buildings.Controls.OBC.CDL.Logical.Or or3 "Failsafe condition to stage up"
              annotation (Placement(transformation(extent={{-70,-270},{-50,-250}})));
            Buildings.Controls.OBC.CDL.Logical.And and1
              "Apply failsafe condition only in stage >= 1"
              annotation (Placement(transformation(extent={{-140,-290},{-120,-270}})));
            Buildings.Controls.OBC.CDL.Logical.And and4
              "Apply failsafe condition only in stage >= 1"
              annotation (Placement(transformation(extent={{-140,-230},{-120,-210}})));
            Buildings.Controls.OBC.CDL.Logical.Not notFail1
              "Failsafe conditions are not true"
              annotation (Placement(transformation(extent={{-30,-230},{-10,-210}})));

            Buildings.Controls.OBC.CDL.Logical.Or or4
              "Failsafe condition or efficiency condition to stage up"
              annotation (Placement(transformation(extent={{10,-130},{30,-110}})));
            Buildings.Controls.OBC.CDL.Logical.And dowAndNotFail1
              "No stage up failsafe condition and efficiency condition to stage down"
              annotation (Placement(transformation(extent={{10,-170},{30,-150}})));
            IntegerArrayHold hol(holdDuration=15*60, nin=4)
              "Minimum plant stage runtime (needed because cooling and heating stage runtimes are handled separately)"
              annotation (Placement(transformation(extent={{130,-10},{150,10}})));

          equation
            connect(dTChiWatPos.y, loaChiWat.u2) annotation (Line(points={{-188,80},{-186,
                    80},{-186,114},{-182,114}},
                                              color={0,0,127}));
            connect(dTHeaWat.y, loaHeaWat.u2) annotation (Line(points={{-198,-140},{-186,
                    -140},{-186,-126},{-182,-126}},
                                            color={0,0,127}));
            connect(THeaWatSupSet, dTHeaWat.u1) annotation (Line(points={{-260,-120},{
                    -230,-120},{-230,-134},{-222,-134}},    color={0,0,127}));
            connect(THeaWatPriRet, dTHeaWat.u2) annotation (Line(points={{-260,-160},{
                    -226,-160},{-226,-146},{-222,-146}},
                                                    color={0,0,127}));
            connect(rep.y, cmdChi.u)
              annotation (Line(points={{202,120},{208,120}},
                                                           color={255,127,0}));
            connect(mChiWatPri_flow, timCp.u)
              annotation (Line(points={{-260,100},{-220,100},{-220,140},{-212,140}},
                                                               color={0,0,127}));
            connect(timCp.y, loaChiWat.u1) annotation (Line(points={{-188,140},{-186,140},
                    {-186,126},{-182,126}}, color={0,0,127}));
            connect(mHeaWatPri_flow, timCp1.u)
              annotation (Line(points={{-260,-80},{-222,-80}}, color={0,0,127}));
            connect(timCp1.y, loaHeaWat.u1) annotation (Line(points={{-198,-80},{-186,-80},
                    {-186,-114},{-182,-114}},
                                            color={0,0,127}));
            connect(loaChiWat.y, movAve.u)
              annotation (Line(points={{-158,120},{-152,120}}, color={0,0,127}));
            connect(loaHeaWat.y, movAve1.u)
              annotation (Line(points={{-158,-120},{-152,-120}},
                                                               color={0,0,127}));
            connect(rep5.y, cmdChiHea.u)
              annotation (Line(points={{202,-100},{208,-100}},
                                                           color={255,127,0}));
            connect(cmdChiHea.y, y1ChiHea)
              annotation (Line(points={{232,-100},{260,-100}}, color={255,0,255}));
            connect(modHeaCoo.y1HeaCoo, y1HeaCooChiHea) annotation (Line(points={{202,-6},
                    {220,-6},{220,-40},{260,-40}},  color={255,0,255}));
            connect(numChiHea.y, nChiHeaHeaAndCoo.u2)
              annotation (Line(points={{-58,-40},{-50,-40},{-50,-46},{-42,-46}},
                                                           color={255,127,0}));
            connect(nChiHeaAndCooUnb.y, nChiHeaHeaAndCoo.u1) annotation (Line(points={{-58,0},
                    {-50,0},{-50,-34},{-42,-34}},     color={255,127,0}));
            connect(nChiHeaAndCooUnb.y, numChiHeaCoo.u1)
              annotation (Line(points={{-58,0},{-20,0},{-20,-14},{-2,-14}},
                                                           color={255,127,0}));
            connect(nChiHeaHeaAndCoo.y, numChiHeaCoo.u2) annotation (Line(points={{-18,-40},
                    {-10,-40},{-10,-26},{-2,-26}},
                                                 color={255,127,0}));
            connect(modHeaCoo.y1Coo, y1CooChiHea) annotation (Line(points={{202,6},{220,6},
                    {220,40},{260,40}},      color={255,0,255}));
            connect(numChiHeaCoo.y, numChiCasCoo.u2) annotation (Line(points={{22,-20},{
                    30,-20},{30,14},{38,14}},            color={255,127,0}));
            connect(TChiWatSupSet, errTChiWatSup.u1) annotation (Line(points={{-260,80},{
                    -230,80},{-230,180},{-204,180},{-204,216},{-202,216}},
                                                                    color={0,0,127}));
            connect(dpChiWatSet, errDpChiWat.u1) annotation (Line(points={{-260,280},{
                    -206,280},{-206,266},{-202,266}},
                                                 color={0,0,127}));
            connect(errTChiWatSup.y, cmpErrLim.u)
              annotation (Line(points={{-178,210},{-172,210}}, color={0,0,127}));
            connect(errDpChiWat.y, cmpErrLim1.u)
              annotation (Line(points={{-178,260},{-172,260}}, color={0,0,127}));
            connect(timErrExcLim1.passed, or2.u1) annotation (Line(points={{-88,252},{-80,
                    252},{-80,230},{-72,230}},   color={255,0,255}));
            connect(timErrExcLim.passed, or2.u2) annotation (Line(points={{-88,202},{-80,
                    202},{-80,222},{-72,222}},   color={255,0,255}));
            connect(cmpErrLim1.y, and2.u1)
              annotation (Line(points={{-148,260},{-142,260}}, color={255,0,255}));
            connect(and2.y, timErrExcLim1.u)
              annotation (Line(points={{-118,260},{-112,260}}, color={255,0,255}));
            connect(cmpErrLim.y, and3.u1) annotation (Line(points={{-148,210},{-142,210}},
                                            color={255,0,255}));
            connect(and3.y, timErrExcLim.u)
              annotation (Line(points={{-118,210},{-112,210}}, color={255,0,255}));
            connect(u1Coo, and3.u2) annotation (Line(points={{-260,160},{-146,160},{-146,
                    202},{-142,202}}, color={255,0,255}));
            connect(u1Coo, and2.u2) annotation (Line(points={{-260,160},{-146,160},{-146,
                    252},{-142,252}}, color={255,0,255}));
            connect(cmdChi.y, y1Chi)
              annotation (Line(points={{232,120},{260,120}},
                                                           color={255,0,255}));
            connect(u1Coo, staCoo.u1)
              annotation (Line(points={{-260,160},{48,160}},  color={255,0,255}));
            connect(cmpOPLRLimUp.y, timOPLRExcLim.u)
              annotation (Line(points={{-58,120},{-42,120}},
                                                           color={255,0,255}));
            connect(or2.y, or1.u1) annotation (Line(points={{-48,230},{-6,230},{-6,140},{
                    -2,140}},  color={255,0,255}));
            connect(or1.y, staCoo.u1Up) annotation (Line(points={{22,140},{24,140},{24,
                    154},{48,154}}, color={255,0,255}));
            connect(timOPLRExcLim.passed, or1.u2) annotation (Line(points={{-18,112},{-14,
                    112},{-14,132},{-2,132}},
                                           color={255,0,255}));
            connect(numChi.y, numOpeChi.u2) annotation (Line(points={{72,100},{84,100},{
                    84,114},{88,114}},
                                  color={255,127,0}));
            connect(staCoo.idxSta, numOpeChi.u1) annotation (Line(points={{72,154},{80,
                    154},{80,126},{88,126}},
                                           color={255,127,0}));
            connect(staCoo.idxSta, numOpeCooChiHea.u1) annotation (Line(points={{72,154},
                    {80,154},{80,60},{-132,60},{-132,26},{-122,26}},   color={255,127,0}));
            connect(numOpeChi.y, numOpeCooChiHea.u2) annotation (Line(points={{112,120},{
                    120,120},{120,54},{-126,54},{-126,14},{-122,14}},  color={255,127,0}));
            connect(numOpeCooChiHea.y, nChiHeaAndCooUnb.u1) annotation (Line(points={{-98,20},
                    {-90,20},{-90,6},{-82,6}},           color={255,127,0}));
            connect(cmpOPLRLimUp1.y, timOPLRExcLim1.u)
              annotation (Line(points={{-58,-120},{-52,-120}}, color={255,0,255}));
            connect(u1Hea, staHea.u1) annotation (Line(points={{-260,140},{-234,140},{
                    -234,-100},{40,-100},{40,-114},{48,-114}},   color={255,0,255}));
            connect(cmpOPLRLimDow.y, timOPLRExcLim2.u)
              annotation (Line(points={{-58,-160},{-52,-160}}, color={255,0,255}));
            connect(cmpOPLRLimDow1.y, timOPLRExcLim3.u)
              annotation (Line(points={{-58,80},{-42,80}}, color={255,0,255}));
            connect(or2.y, notFail.u) annotation (Line(points={{-48,230},{-46,230},{-46,
                    200},{-42,200}}, color={255,0,255}));
            connect(dowAndNotFail.y, staCoo.u1Dow) annotation (Line(points={{22,100},{26,
                    100},{26,148.2},{48,148.2}},color={255,0,255}));
            connect(timOPLRExcLim3.passed, dowAndNotFail.u2) annotation (Line(points={{-18,72},
                    {-10,72},{-10,92},{-2,92}},         color={255,0,255}));
            connect(notFail.y, dowAndNotFail.u1) annotation (Line(points={{-18,200},{-10,
                    200},{-10,100},{-2,100}},
                                            color={255,0,255}));
            connect(staHea.idxSta, nChiHeaAndCooUnb.u2) annotation (Line(points={{72,-120},
                    {80,-120},{80,-80},{-100,-80},{-100,-6},{-82,-6}},   color={255,127,0}));
            connect(numOpeCooChiHea.y, numChiCasCoo.u1) annotation (Line(points={{-98,20},
                    {30,20},{30,26},{38,26}},    color={255,127,0}));
            connect(movAve.y, cmpOPLRLimUp.u1)
              annotation (Line(points={{-128,120},{-82,120}},
                                                            color={0,0,127}));
            connect(capCoo.y, cmpOPLRLimUp.u2) annotation (Line(points={{-99,100},{-94,
                    100},{-94,112},{-82,112}},
                                        color={0,0,127}));
            connect(movAve.y, cmpOPLRLimDow1.u1) annotation (Line(points={{-128,120},{-90,
                    120},{-90,80},{-82,80}},color={0,0,127}));
            connect(capCooLow.y, cmpOPLRLimDow1.u2)
              annotation (Line(points={{-99,72},{-82,72}}, color={0,0,127}));
            connect(capHea.y, cmpOPLRLimUp1.u2) annotation (Line(points={{-99,-140},{-94,
                    -140},{-94,-128},{-82,-128}}, color={0,0,127}));
            connect(movAve1.y, cmpOPLRLimUp1.u1)
              annotation (Line(points={{-128,-120},{-82,-120}}, color={0,0,127}));
            connect(capHeaLow.y, cmpOPLRLimDow.u2) annotation (Line(points={{-99,-168},{
                    -82,-168}},                       color={0,0,127}));
            connect(movAve1.y, cmpOPLRLimDow.u1) annotation (Line(points={{-128,-120},{
                    -90,-120},{-90,-160},{-82,-160}}, color={0,0,127}));
            connect(TChiWatSupSet, dTChiWatPos.u2) annotation (Line(points={{-260,80},{
                    -230,80},{-230,74},{-212,74}}, color={0,0,127}));
            connect(TChiWatPriRet, dTChiWatPos.u1) annotation (Line(points={{-260,40},{
                    -220,40},{-220,86},{-212,86}},color={0,0,127}));
            connect(dpHeaWatSet, errDpHeaWat.u1) annotation (Line(points={{-260,-260},{
                    -206,-260},{-206,-274},{-202,-274}}, color={0,0,127}));
            connect(errTChiWatSup1.y, cmpErrLim2.u)
              annotation (Line(points={{-178,-220},{-172,-220}}, color={0,0,127}));
            connect(errDpHeaWat.y, cmpErrLim3.u)
              annotation (Line(points={{-178,-280},{-172,-280}}, color={0,0,127}));
            connect(cmpErrLim3.y,and1. u1)
              annotation (Line(points={{-148,-280},{-142,-280}},
                                                               color={255,0,255}));
            connect(and1.y,timErrExcLim3. u)
              annotation (Line(points={{-118,-280},{-112,-280}},
                                                               color={255,0,255}));
            connect(cmpErrLim2.y, and4.u1)
              annotation (Line(points={{-148,-220},{-142,-220}}, color={255,0,255}));
            connect(and4.y, timErrExcLim2.u)
              annotation (Line(points={{-118,-220},{-112,-220}}, color={255,0,255}));
            connect(or3.y, notFail1.u) annotation (Line(points={{-48,-260},{-40,-260},{
                    -40,-220},{-32,-220}}, color={255,0,255}));
            connect(THeaWatSupSet, errTChiWatSup1.u1) annotation (Line(points={{-260,-120},
                    {-230,-120},{-230,-200},{-206,-200},{-206,-214},{-202,-214}}, color={
                    0,0,127}));
            connect(timErrExcLim2.passed, or3.u1) annotation (Line(points={{-88,-228},{
                    -80,-228},{-80,-260},{-72,-260}}, color={255,0,255}));
            connect(timErrExcLim3.passed, or3.u2) annotation (Line(points={{-88,-288},{
                    -80,-288},{-80,-268},{-72,-268}}, color={255,0,255}));
            connect(u1Hea, and4.u2) annotation (Line(points={{-260,140},{-234,140},{-234,
                    -240},{-144,-240},{-144,-228},{-142,-228}}, color={255,0,255}));
            connect(u1Hea, and1.u2) annotation (Line(points={{-260,140},{-234,140},{-234,
                    -240},{-144,-240},{-144,-288},{-142,-288}}, color={255,0,255}));
            connect(timOPLRExcLim1.passed, or4.u1) annotation (Line(points={{-28,-128},{
                    -20,-128},{-20,-120},{8,-120}}, color={255,0,255}));
            connect(or3.y, or4.u2) annotation (Line(points={{-48,-260},{0,-260},{0,-128},
                    {8,-128}}, color={255,0,255}));
            connect(timOPLRExcLim2.passed, dowAndNotFail1.u1) annotation (Line(points={{
                    -28,-168},{-20,-168},{-20,-160},{8,-160}}, color={255,0,255}));
            connect(notFail1.y, dowAndNotFail1.u2) annotation (Line(points={{-8,-220},{4,
                    -220},{4,-168},{8,-168}}, color={255,0,255}));
            connect(dowAndNotFail1.y, staHea.u1Dow) annotation (Line(points={{32,-160},{
                    40,-160},{40,-125.8},{48,-125.8}}, color={255,0,255}));
            connect(or4.y, staHea.u1Up)
              annotation (Line(points={{32,-120},{48,-120}}, color={255,0,255}));
            connect(numOpeChi.y, hol.u[1]) annotation (Line(points={{112,120},{120,120},{
                    120,-0.75},{128,-0.75}}, color={255,127,0}));
            connect(numChiCasCoo.y, hol.u[2]) annotation (Line(points={{62,20},{116,20},{
                    116,-0.25},{128,-0.25}}, color={255,127,0}));
            connect(numChiHeaCoo.y, hol.u[3]) annotation (Line(points={{22,-20},{116,-20},
                    {116,0.25},{128,0.25}},
                                       color={255,127,0}));
            connect(nChiHeaHeaAndCoo.y, hol.u[4]) annotation (Line(points={{-18,-40},{120,
                    -40},{120,-2},{128,-2},{128,0.75}},
                                                 color={255,127,0}));
            connect(hol.y[1], rep.u) annotation (Line(points={{152,0},{160,0},{160,120},{
                    178,120}}, color={255,127,0}));
            connect(hol.y[2], modHeaCoo.nCasCoo) annotation (Line(points={{152,0},{160,0},
                    {160,6},{178,6}},   color={255,127,0}));
            connect(hol.y[3], modHeaCoo.nHeaCoo) annotation (Line(points={{152,0},{160,0},
                    {160,-6},{178,-6}},
                                      color={255,127,0}));
            connect(hol.y[4], rep5.u) annotation (Line(points={{152,0},{160,0},{160,-100},
                    {178,-100}},color={255,127,0}));
            connect(movAve.y, QCooReq_flow) annotation (Line(points={{-128,120},{-100,120},
                    {-100,180},{260,180}}, color={0,0,127}));
            connect(dpChiWat, errDpChiWat.u2) annotation (Line(points={{-260,260},{-220,
                    260},{-220,254},{-202,254}}, color={0,0,127}));
            connect(TChiWatSup, errTChiWatSup.u2) annotation (Line(points={{-260,200},{
                    -220,200},{-220,204},{-202,204}}, color={0,0,127}));
            connect(THeaWatSup, errTChiWatSup1.u2) annotation (Line(points={{-260,-220},{
                    -220,-220},{-220,-226},{-202,-226}}, color={0,0,127}));
            connect(dpHeaWat, errDpHeaWat.u2) annotation (Line(points={{-260,-280},{-220,
                    -280},{-220,-286},{-202,-286}}, color={0,0,127}));
            annotation (
            defaultComponentName="staPla",
            Documentation(info="<html>
<p>
This block implements the staging logic for the chillers and HRCs.
The units are staged in part based on an efficiency condition
using the operative part load ratio.
The units are also staged based on failsafe conditions using the CHW and HW
supply temperature and differential pressure.
</p>
<p>
For the sake of simplicity, equipment rotation (i.e. the possibility at a given
stage that either one unit or another unit can be operating) is not taken into account.
</p>
<h4>Plant stages</h4>
<p>
At cooling (resp. heating) stage <code>#i</code>, a number <code>i</code>
of units are operating in cooling (resp. heating) mode.
The cooling (resp. heating) stage <code>#0</code> (no unit operating in
that given mode) is active whenever the plant is disabled based on the cooling
and heating Enable condition (see below) or when the plant is enabled
and has been staged down due to the efficiency or failsafe conditions.
The plant stage is given by the couple (cooling stage, heating stage).
The minimum runtime of each plant stage is set to <i>15&nbsp;</i>min.
</p>
<h5>Direct heat recovery mode</h5>
<p>
All HRCs are allowed to operate in direct heat recovery mode, that is when
their condenser is indexed to the HW loop and their evaporator is indexed to the
CHW loop.
Switching a HRC to operate in direct heat recovery mode is done on
a load requirement basis. This means that HRCs are first switched over
to cascading heating or cascading cooling mode. Only when all HRCs are operating
and when a new stage up event is initiated, an additional HRC is then switched
to operate in direct heat recovery mode.
As described in
<a href=\"modelica://Buildings.Experimental.DHC.Plants.Combined.Controls.BaseClasses.ModeHeatRecoveryChiller\">
Buildings.Experimental.DHC.Plants.Combined.Controls.BaseClasses.ModeHeatRecoveryChiller</a>
the HRC with the highest index that is not operating operating in cascading
cooling mode is the next to be switched into direct heat recovery mode.
</p>
<p>
For example, considering a plant with two chillers and three HRCs, the table below shows
the plant stages derived from this logic.
In this table, the chiller with index <code>#i</code> is denoted <code>CHI#i</code>,
the HRC with index <code>#i</code> is denoted <code>HRC#i</code>,
the units enumerated before (resp. after) the semicolon sign (<code>:</code>) operate
in cooling (resp. heating) mode, the units marked with a star (<code>*</code>) operate
in direct heat recovery mode.
</p>
<table border=\"1\" summary=\"Explanation of the enumeration\">
<tr><th>Heating stage &darr; Cooling stage &rarr;</th>
<td>0</td>
<td>1</td>
<td>2</td>
<td>3</td>
<td>4</td>
<td>5</td>
</tr>
<tr><td>0</td>
<td>N/A:<br/>N/A</td>
<td>CHI1:<br/>N/A</td>
<td>CHI1 &amp; CHI2:<br/>N/A</td>
<td>CHI1 &amp; CHI2 &amp; HRC3:<br/>N/A</td>
<td>CHI1 &amp; CHI2 &amp; HRC3 &amp; HRC2:<br/>N/A</td>
<td>CHI1 &amp; CHI2 &amp; HRC3 &amp; HRC2 &amp; HRC1:<br/>N/A</td>
</tr>
<tr><td>1</td>
<td>N/A:<br/>HRC1</td>
<td>CHI1:<br/>HRC1</td>
<td>CHI1 &amp; CHI2:<br/>HRC1</td>
<td>CHI1 &amp; CHI2 &amp; HRC3:<br/>HRC1</td>
<td>CHI1 &amp; CHI2 &amp; HRC3 &amp; HRC2:<br/>HRC1</td>
<td>CHI1 &amp; CHI2 &amp; HRC3 &amp; HRC2:<br/>HRC1*</td>
</tr>
<tr><td>2</td>
<td>N/A:<br/>HRC1 &amp; HRC2</td>
<td>CHI1:<br/>HRC1 &amp; HRC2</td>
<td>CHI1 &amp; CHI2:<br/>HRC1 &amp; HRC2</td>
<td>CHI1 &amp; CHI2 &amp; HRC3:<br/>HRC1 &amp; HRC2</td>
<td>CHI1 &amp; CHI2 &amp; HRC3:<br/>HRC1 &amp; HRC2*</td>
<td>CHI1 &amp; CHI2 &amp; HRC3:<br/>HRC1* &amp; HRC2*</td>
</tr>
<tr><td>3</td>
<td>N/A:<br/>HRC1 &amp; HRC2 &amp; HRC3</td>
<td>CHI1:<br/>HRC1 &amp; HRC2 &amp; HRC3</td>
<td>CHI1 &amp; CHI2:<br/>HRC1 &amp; HRC2 &amp; HRC3</td>
<td>CHI1 &amp; CHI2:<br/>HRC1 &amp; HRC2 &amp; HRC3*</td>
<td>CHI1 &amp; CHI2:<br/>HRC1 &amp; HRC2* &amp; HRC3*</td>
<td>CHI1 &amp; CHI2:<br/>HRC1* &amp; HRC2* &amp; HRC3*</td>
</tr>
</table>
<h4>Cooling and heating Enable condition</h4>
<p>
The cooling and heating Enable signals <code>u1Coo</code> and <code>u1Hea</code>
shall be computed outside of the plant model,
at least based on a time schedule and ideally in conjunction
with a signal representative of the demand such as the requests yielded by
the consumer control valves.
Based on those signals, the cooling (resp. heating) stage <code>#1</code> is
activated whenever the cooling (resp. heating) Enable signal switches
to <code>true</code> and when cooling (resp. heating) has been disabled
for at least <i>15&nbsp;</i>min.
</p>
<h4>Operative part load ratio</h4>
<p>
The efficiency condition is based on the operative part load ratio
which is computed as the ratio of the required capacity
relative to design capacity of a given stage, which is the sum of the design capacity
of each unit active in a given stage.
The required capacity is calculated based on the primary mass flow rate and the
temperature difference between supply and primary return, and averaged over a
<i>5</i>-minute moving window.
<h4>Cooling and heating staging</h4>
<p>
A stage up event is initiated if any of the following conditions is true.
</p>
<ul>
<li>
Efficiency condition: the operative part load ratio of the current stage
exceeds the value of the parameter <i>PLRStaTra</i> for <i>15&nbsp;</i>min.
</li>
<li>
Failsafe conditions: the CHW (resp. HW) supply temperature is <i>1&nbsp;</i>K
higher (resp. lower) than setpoint for <i>15</i>&nbsp;min, or
the CHW (resp. HW) differential pressure is <i>1.5E4&nbsp;</i>Pa lower than
setpoint for <i>15&nbsp;</i>min.
</li>
</ul>
<p>
A stage down event is initiated if both of the following conditions are true.
</p>
<ul>
<li>
Efficiency condition: the operative part load ratio of the next lower stage
falls below the value of the parameter <i>PLRStaTra</i> for <i>15&nbsp;</i>min.
</li>
<li>
Failsafe conditions: the failsafe stage up conditions are not true.
</li>
</ul>
</html>",           revisions="<html>
<ul>
<li>
February 24, 2023, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>"),    Diagram(coordinateSystem(extent={{-240,-320},{240,320}})),
              Icon(coordinateSystem(extent={{-100,-160},{100,160}}), graphics={
                  Text(
                    textColor={0,0,255},
                    extent={{-150,170},{150,210}},
                    textString="%name"),
                  Rectangle(
                    extent={{-100,-160},{100,160}},
                    lineColor={0,0,127},
                    fillColor={255,255,255},
                    fillPattern=FillPattern.Solid)}));
          end StagingPlant;

          block StagingPump "Pump staging"

            parameter Boolean have_flowCriterion=true
              "Set to true for flow criterion in conjunction with speed criterion"
              annotation(Evaluate=true);
            parameter Integer nPum(
              final min=1,
              start=1)
              "Number of pumps"
              annotation(Evaluate=true);
            parameter Modelica.Units.SI.MassFlowRate m_flow_nominal=1
              "Loop design mass flow rate (all pumps)"
              annotation(Dialog(group="Nominal condition", enable=have_flowCriterion));
            parameter Real yDow=0.30
              "Low speed limit for staging down";
            parameter Real yUp=0.99
              "High speed limit for staging up";

            Buildings.Controls.OBC.CDL.Interfaces.BooleanInput y1Ena
              "Lead pump Enable signal (e.g. based on isolation valve opening command)"
              annotation (Placement(transformation(extent={{-240,140},{-200,180}}),
                  iconTransformation(extent={{-140,40},{-100,80}})));
            Buildings.Controls.OBC.CDL.Interfaces.RealInput m_flow(final unit="kg/s")
              if have_flowCriterion
              "Mass flow rate as measured by the loop flow meter"
              annotation (Placement(
                  transformation(extent={{-240,60},{-200,100}}),iconTransformation(extent={{-140,
                      -20},{-100,20}})));
            Buildings.Controls.OBC.CDL.Interfaces.RealInput y(final unit="1")
              "Commanded speed"
              annotation (Placement(transformation(extent={{-240,-20},{-200,20}}),
                iconTransformation(extent={{-140,-80},{-100,-40}})));
            Buildings.Controls.OBC.CDL.Interfaces.BooleanOutput y1[nPum]
              "Start signal (VFD Run or motor starter contact)"
              annotation (Placement(
                  transformation(extent={{200,-20},{240,20}}), iconTransformation(extent={{100,40},
                      {140,80}})));

            Buildings.Controls.OBC.CDL.Reals.GreaterThreshold cmp(final t=yUp, h=1e-3)
              "Compare"
              annotation (Placement(transformation(extent={{-100,-10},{-80,10}})));
            Buildings.Controls.OBC.CDL.Logical.Timer timSpe(t=5*60)
              "True delay"
              annotation (Placement(transformation(extent={{-70,-10},{-50,10}})));
            Buildings.Controls.OBC.CDL.Reals.MultiplyByParameter ratFlo(
              final k=1/m_flow_nominal) if have_flowCriterion
              "Ratio of current flow rate to design value"
              annotation (Placement(transformation(extent={{-148,70},{-128,90}})));
            Buildings.Controls.OBC.CDL.Reals.Greater cmp2(h=1e-3)
              if have_flowCriterion
              "Compare"
              annotation (Placement(transformation(extent={{-100,90},{-80,110}})));
            Buildings.Controls.OBC.CDL.Reals.AddParameter addOff(p=-0.03)
              if have_flowCriterion
              "Add offset"
              annotation (Placement(transformation(extent={{-80,130},{-100,150}})));
            Buildings.Controls.OBC.CDL.Logical.Timer timFlo(t=10*60)
              if have_flowCriterion
              "Check if true for a given time"
              annotation (Placement(transformation(extent={{-72,90},{-52,110}})));
            Buildings.Controls.OBC.CDL.Logical.Or up
              "Check if flow or speed criterion passed for staging up"
              annotation (Placement(transformation(extent={{-30,-10},{-10,10}})));
            Buildings.Controls.OBC.CDL.Reals.Less cmp3(h=1e-3)
              if have_flowCriterion
              "Compare"
              annotation (Placement(transformation(extent={{-100,50},{-80,70}})));
            Buildings.Controls.OBC.CDL.Logical.Timer timFlo1(t=10*60)
              if have_flowCriterion
              "Check if true for a given time"
              annotation (Placement(transformation(extent={{-72,50},{-52,70}})));
            Buildings.Controls.OBC.CDL.Reals.LessThreshold  cmp4(final t=yDow, h=1e-3)
              "Compare"
              annotation (Placement(transformation(extent={{-100,-50},{-80,-30}})));
            Buildings.Controls.OBC.CDL.Logical.Timer timSpe1(t=5*60) "True delay"
              annotation (Placement(transformation(extent={{-70,-50},{-50,-30}})));
            Buildings.Controls.OBC.CDL.Logical.Or  dow
              "Check if flow or speed criterion passed for staging down"
              annotation (Placement(transformation(extent={{-30,-50},{-10,-30}})));
            Buildings.Controls.OBC.CDL.Reals.MultiplyByParameter ratOpeDsg(
              final k=1/nPum)
              "Ratio of number of operating pumps to number of operating pumps at design conditions"
              annotation (Placement(transformation(extent={{-40,130},{-60,150}})));
            Buildings.Controls.OBC.CDL.Integers.GreaterEqualThreshold cvtBoo[nPum](
              final t={i for i in 1:nPum})
              "Compute pump Start command from number of pumps to be commanded On"
              annotation (Placement(transformation(extent={{160,-10},{180,10}})));
            Buildings.Controls.OBC.CDL.Routing.IntegerScalarReplicator rep(
              final nout=nPum) "Replicate"
              annotation (Placement(transformation(extent={{120,-10},{140,10}})));
            StageIndex staLag(final nSta=max(1, nPum - 1), tSta=30)
              if nPum>1
              "Stage lag pumps (minimum runtime allowing for pump start time)"
              annotation (Placement(transformation(extent={{30,-10},{50,10}})));
            Buildings.Controls.OBC.CDL.Conversions.IntegerToReal cvtInt "Convert"
              annotation (Placement(transformation(extent={{50,130},{30,150}})));
            Buildings.Controls.OBC.CDL.Reals.AddParameter addOffLowSta(
              final p=-1/nPum) if have_flowCriterion
              "Add offset for lower stage"
              annotation (Placement(transformation(extent={{-150,30},{-130,50}})));
            Buildings.Controls.OBC.CDL.Conversions.BooleanToInteger leaEna
              "Return 1 if lead pump enabled"
              annotation (Placement(transformation(extent={{30,30},{50,50}})));
            Buildings.Controls.OBC.CDL.Integers.Add num "Number of pumps enabled"
              annotation (Placement(transformation(extent={{80,-10},{100,10}})));
            Buildings.Controls.OBC.CDL.Integers.Add numPre "Number of pumps enabled"
              annotation (Placement(transformation(extent={{80,50},{100,70}})));
            Buildings.Controls.OBC.CDL.Integers.Sources.Constant zer(final k=0)
              if nPum==1
              "Constant"
              annotation (Placement(transformation(extent={{30,-50},{50,-30}})));
            Buildings.Controls.OBC.CDL.Logical.Sources.Constant fal(final k=false)
              if not have_flowCriterion
              "Constant"
              annotation (Placement(transformation(extent={{-70,-90},{-50,-70}})));
            Buildings.Controls.OBC.CDL.Interfaces.IntegerOutput nPumEna
              "Number of pumps that are enabled" annotation (Placement(transformation(
                    extent={{200,-80},{240,-40}}), iconTransformation(extent={{100,-80},{
                      140,-40}})));
            Buildings.Controls.OBC.CDL.Interfaces.BooleanOutput y1Any
              "Return true if any pump enabled (left limit to avoid direct feedback)"
              annotation (Placement(transformation(extent={{200,-140},{240,-100}}),
                  iconTransformation(extent={{100,-20},{140,20}})));
            Buildings.Controls.OBC.CDL.Integers.GreaterEqualThreshold anyEna(final t=1)
              "Return true if any pump is enabled"
              annotation (Placement(transformation(extent={{120,-130},{140,-110}})));
            Buildings.Controls.OBC.CDL.Logical.Pre pre1
              "Left limit of signal avoiding direct feedback"
              annotation (Placement(transformation(extent={{160,-130},{180,-110}})));
          equation
            connect(y, cmp.u)
              annotation (Line(points={{-220,0},{-102,0}},     color={0,0,127}));
            connect(cmp.y, timSpe.u)
              annotation (Line(points={{-78,0},{-72,0}},       color={255,0,255}));
            connect(ratFlo.y, cmp2.u1)
              annotation (Line(points={{-126,80},{-120,80},{-120,100},{-102,100}},
                                                           color={0,0,127}));
            connect(addOff.y, cmp2.u2) annotation (Line(points={{-102,140},{-110,140},{
                    -110,92},{-102,92}},            color={0,0,127}));
            connect(timFlo.passed, up.u1) annotation (Line(points={{-50,92},{-36,92},{-36,
                    0},{-32,0}},     color={255,0,255}));
            connect(ratFlo.y, cmp3.u1) annotation (Line(points={{-126,80},{-120,80},{-120,
                    60},{-102,60}}, color={0,0,127}));
            connect(y, cmp4.u) annotation (Line(points={{-220,0},{-160,0},{-160,-40},{-102,
                    -40}},       color={0,0,127}));
            connect(cmp4.y, timSpe1.u)
              annotation (Line(points={{-78,-40},{-72,-40}},   color={255,0,255}));
            connect(timFlo1.passed,dow. u1) annotation (Line(points={{-50,52},{-40,52},{
                    -40,-40},{-32,-40}},                   color={255,0,255}));
            connect(addOff.u, ratOpeDsg.y)
              annotation (Line(points={{-78,140},{-62,140}}, color={0,0,127}));
            connect(rep.y, cvtBoo.u)
              annotation (Line(points={{142,0},{158,0}}, color={255,127,0}));
            connect(cmp2.y, timFlo.u)
              annotation (Line(points={{-78,100},{-74,100}},
                                                           color={255,0,255}));
            connect(cmp3.y, timFlo1.u)
              annotation (Line(points={{-78,60},{-74,60}}, color={255,0,255}));
            connect(timSpe.passed, up.u2) annotation (Line(points={{-48,-8},{-32,-8}},
                                         color={255,0,255}));
            connect(timSpe1.passed,dow. u2) annotation (Line(points={{-48,-48},{-40,-48},
                    {-40,-48},{-32,-48}},color={255,0,255}));
            connect(y1Ena, staLag.u1) annotation (Line(points={{-220,160},{0,160},{0,6},{
                    28,6}},
                         color={255,0,255}));
            connect(cvtInt.y, ratOpeDsg.u)
              annotation (Line(points={{28,140},{-38,140}}, color={0,0,127}));
            connect(cvtBoo.y, y1)
              annotation (Line(points={{182,0},{220,0}}, color={255,0,255}));
            connect(addOff.y, addOffLowSta.u) annotation (Line(points={{-102,140},{-160,
                    140},{-160,40},{-152,40}}, color={0,0,127}));
            connect(addOffLowSta.y, cmp3.u2) annotation (Line(points={{-128,40},{-116,40},
                    {-116,52},{-102,52}}, color={0,0,127}));
            connect(y1Ena, leaEna.u) annotation (Line(points={{-220,160},{0,160},{0,40},{
                    28,40}},
                          color={255,0,255}));
            connect(dow.y, staLag.u1Dow) annotation (Line(points={{-8,-40},{0,-40},{0,
                    -5.8},{28,-5.8}},
                                color={255,0,255}));
            connect(num.y, rep.u)
              annotation (Line(points={{102,0},{118,0}},
                                                       color={255,127,0}));
            connect(staLag.idxSta, num.u2) annotation (Line(points={{52,0},{60,0},{60,-6},
                    {78,-6}}, color={255,127,0}));
            connect(leaEna.y, num.u1) annotation (Line(points={{52,40},{60,40},{60,6},{78,
                    6}}, color={255,127,0}));
            connect(numPre.y, cvtInt.u) annotation (Line(points={{102,60},{120,60},{120,
                    140},{52,140}},
                               color={255,127,0}));
            connect(leaEna.y, numPre.u1) annotation (Line(points={{52,40},{60,40},{60,66},
                    {78,66}}, color={255,127,0}));
            connect(staLag.preIdxSta, numPre.u2) annotation (Line(points={{52,-6},{56,-6},
                    {56,54},{78,54}}, color={255,127,0}));
            connect(zer.y, num.u2) annotation (Line(points={{52,-40},{68,-40},{68,-6},{78,
                    -6}}, color={255,127,0}));
            connect(zer.y, numPre.u2) annotation (Line(points={{52,-40},{68,-40},{68,54},
                    {78,54}},color={255,127,0}));
            connect(up.y, staLag.u1Up)
              annotation (Line(points={{-8,0},{28,0}}, color={255,0,255}));
            connect(fal.y, dow.u1) annotation (Line(points={{-48,-80},{-36,-80},{-36,-40},
                    {-32,-40}}, color={255,0,255}));
            connect(fal.y, up.u1) annotation (Line(points={{-48,-80},{-36,-80},{-36,0},{-32,
                    0}}, color={255,0,255}));
            connect(num.y, nPumEna) annotation (Line(points={{102,0},{110,0},{110,-60},{
                    220,-60}}, color={255,127,0}));
            connect(anyEna.y, pre1.u)
              annotation (Line(points={{142,-120},{158,-120}}, color={255,0,255}));
            connect(pre1.y, y1Any)
              annotation (Line(points={{182,-120},{220,-120}}, color={255,0,255}));
            connect(num.y, anyEna.u) annotation (Line(points={{102,0},{110,0},{110,-120},
                    {118,-120}}, color={255,127,0}));
            connect(m_flow, ratFlo.u)
              annotation (Line(points={{-220,80},{-150,80}}, color={0,0,127}));
            annotation (
            defaultComponentName="staPum",
            Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                  Text(
                    textColor={0,0,255},
                    extent={{-150,110},{150,150}},
                    textString="%name"),
                  Rectangle(
                    extent={{-100,-100},{100,100}},
                    lineColor={0,0,127},
                    fillColor={255,255,255},
                    fillPattern=FillPattern.Solid)}),          Diagram(
                  coordinateSystem(preserveAspectRatio=false, extent={{-200,-200},{200,
                      200}})),
              Documentation(info="<html>
<p>
This block implements the logic for staging the lag pump of
a multiple-pump group.
<p>
The first staging criterion is optional and is based on <i>ratFlo</i>,
the ratio of current flow rate to design flow rate.
The lag pump is enabled whenever any of the following is true.
</p>
<ul>
<li>The pump speed command is higher than <code>yUp</code> for <i>5</i>&nbsp;min.
</li>
<li>Optionally if <code>have_flowCriterion</code> is set to <code>true</code>, the ratio <i>ratFlo</i> 
is higher than <i>n / nPum - 0.03</i> for <i>10</i>&nbsp;min, where <i>n</i> is the number 
of operating pumps and <i>nPum</i> is the number of pumps operating at design conditions.
</li>
</ul>
<p>
The lag pump is disabled whenever any of the following is true.
</p>
<ul>
<li>The lead pump is disabled.
</li>
<li>The pump speed command is lower than <code>yDow</code> for <i>5</i>&nbsp;min.
</li>
<li>Optionally if <code>have_flowCriterion</code> is set to <code>true</code>, the ratio <i>ratFlo</i> 
is higher than <i>(n - 1) / nPum - 0.03</i> for <i>10</i>&nbsp;min.
</li>
</ul>
</html>",           revisions="<html>
<ul>
<li>
February 24, 2023, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>"));
          end StagingPump;

          block TankCycle "Block that determines the tank cycle flag"

            parameter Modelica.Units.SI.MassFlowRate mConWatHexCoo_flow_nominal
              "Design total CW mass flow rate through condenser barrels (all units)";

            parameter Modelica.Units.SI.Temperature TTanSet[2, 2]
              "Tank temperature setpoints: 2 cycles with 2 setpoints"
              annotation(Dialog(group="CW loop, TES tank and heat pumps"));
            parameter Integer nTTan=0
              "Number of tank temperature points"
              annotation (Dialog(connectorSizing=true),HideResult=true);

            Buildings.Controls.OBC.CDL.Interfaces.RealInput mConWatOutTan_flow(
              final unit="kg/s")
              "Mass flow rate out of lower port of TES tank (>0 when charging)"
              annotation (Placement(transformation(extent={{-200,100},{-160,140}}),
                  iconTransformation(extent={{-140,40},{-100,80}})));
            Buildings.Controls.OBC.CDL.Interfaces.RealInput TTan[nTTan](
              each final unit="K",
              each displayUnit="degC")
              "TES tank temperature"
              annotation (Placement(
                  transformation(extent={{-200,-60},{-160,-20}}),   iconTransformation(
                    extent={{-140,-80},{-100,-40}})));
            Buildings.Controls.OBC.CDL.Interfaces.IntegerOutput idxCycTan(
              final min=1, final max=2)
              "Index of active tank cycle"
              annotation (Placement(transformation(extent={{160,-20},{200,20}}),
                                       iconTransformation(extent={{100,-20},{140,20}})));

            Buildings.Controls.OBC.CDL.Reals.GreaterThreshold criTem1[nTTan](
              each t=sum(TTanSet[2])/2, each h=1E-4)
              "Temperature criterion for first tank cycle"
              annotation (Placement(transformation(extent={{-140,-50},{-120,-30}})));
            Buildings.Controls.OBC.CDL.Logical.MultiAnd allCriTem1(final nin=nTTan)
              "All temperature criteria met"
              annotation (Placement(transformation(extent={{-60,-50},{-40,-30}})));
            Buildings.Controls.OBC.CDL.Reals.GreaterThreshold criFlo1(final t=1E-3*
                  mConWatHexCoo_flow_nominal, h=1E-3*mConWatHexCoo_flow_nominal/2)
              "Flow criterion for first tank cycle"
              annotation (Placement(transformation(extent={{-150,110},{-130,130}})));
            Buildings.Controls.OBC.CDL.Reals.LessThreshold criTem2[nTTan](each t=sum(TTanSet[1])/2, each h=1E-4)
            "Temperature criterion for first tank cycle"
              annotation (Placement(transformation(extent={{-140,-90},{-120,-70}})));
            Buildings.Controls.OBC.CDL.Logical.MultiAnd allCriTem2(final nin=nTTan)
              "All temperature criteria met"
              annotation (Placement(transformation(extent={{-60,-90},{-40,-70}})));
            Buildings.Controls.OBC.CDL.Conversions.BooleanToInteger booToInt(final
                integerTrue=1, final integerFalse=2) "Convert"
              annotation (Placement(transformation(extent={{-70,110},{-50,130}})));
            Buildings.Controls.OBC.CDL.Logical.Or or2
              "Neither of temperature criterion is true" annotation (Placement(
                  transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=90,
                  origin={0,10})));
            Buildings.Controls.OBC.CDL.Conversions.BooleanToInteger booToInt3(final
                integerTrue=2, final integerFalse=0) "Convert" annotation (Placement(
                  transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=90,
                  origin={-30,10})));
            Buildings.Controls.OBC.CDL.Conversions.BooleanToInteger booToInt4(final
                integerTrue=1, final integerFalse=0) "Convert" annotation (Placement(
                  transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=90,
                  origin={-60,10})));
            Buildings.Controls.OBC.CDL.Integers.Max maxInt1 "Set cycle index as maximum"
              annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=90,
                  origin={-40,90})));
            Buildings.Controls.OBC.CDL.Logical.And allCri2 "All criteria met"
              annotation (Placement(transformation(extent={{-20,-90},{0,-70}})));
            Buildings.Controls.OBC.CDL.Logical.And allCri1 "All criteria met"
              annotation (Placement(transformation(extent={{-20,-50},{0,-30}})));
            Buildings.Controls.OBC.CDL.Integers.Switch idxIni "Index at initial time"
              annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={110,120})));
            Buildings.Controls.OBC.CDL.Logical.Timer timAllCri1(t=5*60)
              "All criteria met for given time"
              annotation (Placement(transformation(extent={{10,-50},{30,-30}})));
            Buildings.Controls.OBC.CDL.Logical.Timer timAllCri2(t=5*60)
              "All criteria met for given time"
              annotation (Placement(transformation(extent={{10,-90},{30,-70}})));
            Buildings.Controls.OBC.CDL.Integers.Switch
                                                     intSwi "Switch index"
              annotation (Placement(transformation(extent={{110,-10},{130,10}})));
            Buildings.Controls.OBC.CDL.Integers.Sources.Constant idx1(final k=1) "Index"
              annotation (Placement(transformation(extent={{40,10},{60,30}})));
            Buildings.Controls.OBC.CDL.Integers.Switch
                                                     intSwi1 "Switch index"
              annotation (Placement(transformation(extent={{70,-110},{90,-90}})));
            Buildings.Controls.OBC.CDL.Integers.Sources.Constant idx2(final k=2) "Index"
              annotation (Placement(transformation(extent={{40,-90},{60,-70}})));
            Modelica.Blocks.Sources.IntegerExpression preIdxCycTan(y=pre(idxCycTan))
              "Previous index value"
              annotation (Placement(transformation(extent={{38,-130},{60,-110}})));
            Buildings.Controls.OBC.CDL.Logical.Not criFlo2
              "Flow criterion for second tank cycle"
              annotation (Placement(transformation(extent={{-140,70},{-120,90}})));
            IntegerArrayHold hol(holdDuration=30*60, nin=1) "Hold for minimum runtime"
              annotation (Placement(transformation(extent={{136,-10},{156,10}})));
          initial equation
            pre(idxCycTan)=idxIni.y;
          equation
            connect(criTem1.y, allCriTem1.u)
              annotation (Line(points={{-118,-40},{-62,-40}},color={255,0,255}));
            connect(TTan, criTem2.u) annotation (Line(points={{-180,-40},{-152,-40},{-152,
                    -80},{-142,-80}},
                                color={0,0,127}));
            connect(TTan, criTem1.u)
              annotation (Line(points={{-180,-40},{-142,-40}},color={0,0,127}));
            connect(criTem2.y, allCriTem2.u)
              annotation (Line(points={{-118,-80},{-62,-80}},  color={255,0,255}));
            connect(allCriTem2.y, booToInt3.u) annotation (Line(points={{-38,-80},{-30,
                    -80},{-30,-2}},
                                color={255,0,255}));
            connect(allCriTem1.y, booToInt4.u) annotation (Line(points={{-38,-40},{-34,
                    -40},{-34,-20},{-60,-20},{-60,-2}},
                                                    color={255,0,255}));
            connect(allCriTem1.y, allCri1.u1)
              annotation (Line(points={{-38,-40},{-22,-40}}, color={255,0,255}));
            connect(allCriTem2.y, allCri2.u1)
              annotation (Line(points={{-38,-80},{-22,-80}},   color={255,0,255}));
            connect(maxInt1.u2, booToInt3.y) annotation (Line(points={{-34,78},{-34,30},{-30,
                    30},{-30,22}}, color={255,127,0}));
            connect(booToInt4.y, maxInt1.u1) annotation (Line(points={{-60,22},{-60,30},{-46,
                    30},{-46,78}}, color={255,127,0}));
            connect(allCriTem1.y, or2.u1) annotation (Line(points={{-38,-40},{-34,-40},{
                    -34,-20},{0,-20},{0,-2}},                    color={255,0,255}));
            connect(allCriTem2.y, or2.u2) annotation (Line(points={{-38,-80},{-30,-80},{
                    -30,-24},{8,-24},{8,-2}},  color={255,0,255}));
            connect(or2.y, idxIni.u2) annotation (Line(points={{0,22},{0,120},{98,120}},
                                   color={255,0,255}));
            connect(maxInt1.y, idxIni.u1)
              annotation (Line(points={{-40,102},{-40,128},{98,128}},
                                                                    color={255,127,0}));
            connect(criFlo1.y, booToInt.u)
              annotation (Line(points={{-128,120},{-72,120}},
                                                           color={255,0,255}));
            connect(booToInt.y, idxIni.u3) annotation (Line(points={{-48,120},{-20,120},{-20,
                    112},{98,112}},color={255,127,0}));
            connect(mConWatOutTan_flow, criFlo1.u)
              annotation (Line(points={{-180,120},{-152,120}},
                                                             color={0,0,127}));
            connect(allCri1.y, timAllCri1.u)
              annotation (Line(points={{2,-40},{8,-40}}, color={255,0,255}));
            connect(allCri2.y, timAllCri2.u)
              annotation (Line(points={{2,-80},{8,-80}},   color={255,0,255}));
            connect(timAllCri1.passed, intSwi.u2) annotation (Line(points={{32,-48},{80,
                    -48},{80,0},{108,0}}, color={255,0,255}));
            connect(idx1.y, intSwi.u1) annotation (Line(points={{62,20},{100,20},{100,8},
                    {108,8}}, color={255,127,0}));
            connect(timAllCri2.passed, intSwi1.u2) annotation (Line(points={{32,-88},{36,
                    -88},{36,-100},{68,-100}},  color={255,0,255}));
            connect(idx2.y, intSwi1.u1) annotation (Line(points={{62,-80},{66,-80},{66,
                    -92},{68,-92}},   color={255,127,0}));
            connect(intSwi1.y, intSwi.u3) annotation (Line(points={{92,-100},{100,-100},{
                    100,-8},{108,-8}}, color={255,127,0}));
            connect(preIdxCycTan.y, intSwi1.u3) annotation (Line(points={{61.1,-120},{66,
                    -120},{66,-108},{68,-108}}, color={255,127,0}));
            connect(criFlo1.y, criFlo2.u) annotation (Line(points={{-128,120},{-120,120},
                    {-120,100},{-150,100},{-150,80},{-142,80}},
                                         color={255,0,255}));
            connect(hol.y[1], idxCycTan)
              annotation (Line(points={{158,0},{180,0}}, color={255,127,0}));
            connect(criFlo1.y, allCri1.u2) annotation (Line(points={{-128,120},{-100,120},
                    {-100,-54},{-26,-54},{-26,-48},{-22,-48}}, color={255,0,255}));
            connect(criFlo2.y, allCri2.u2) annotation (Line(points={{-118,80},{-106,80},{
                    -106,-60},{-26,-60},{-26,-88},{-22,-88}}, color={255,0,255}));
            connect(intSwi.y, hol.u[1])
              annotation (Line(points={{132,0},{134,0}}, color={255,127,0}));
            annotation (
            defaultComponentName="cycTan",
            Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                  Rectangle(
                    extent={{-100,-100},{100,100}},
                    lineColor={0,0,127},
                    fillColor={255,255,255},
                    fillPattern=FillPattern.Solid),
                  Text(
                    textColor={0,0,255},
                    extent={{-150,110},{150,150}},
                    textString="%name")}),                                 Diagram(
                  coordinateSystem(preserveAspectRatio=false, extent={{-160,-160},{160,160}})),
              Documentation(info="<html>
<p>
The tank operating conditions should match the operating limits and selection
conditions of the chillers and HRCs.
The highest temperature (at the top of the tank) should be limited by the 
maximum evaporator entering temperature per manufacturer’s recommendations.
The lowest temperature (at the bottom of the tank) should be limited by the 
design CHW supply temperature.
This gives the tank maximum <i>&Delta;T</i> and the actual storage capacity.
However, this value is likely above the maximum <i>&Delta;T</i> that chillers
and HRCs can achieve across the condenser or evaporator barrel (typically
<i>11&nbsp;</i>K). Therefore, in order to fully leverage the TES capacity,
two temperature cycles are needed.
</p>
<p>
The first tank cycle (higher temperature setpoint) is activated whenever 
all of the following conditions are true.
</p>
<ul>
<li>
All tank temperature sensors measure a value higher than the mean setpoint value
of the second tank cycle for <i>5&nbsp;</i>min.
</li>
<li>
The flow rate out of the lower port of the tank is positive (tank is charging)
for <i>5&nbsp;</i>min.
</li>
</ul>
<p>
The second tank cycle (lower temperature setpoint) is activated 
whenever both of the following conditions are true.
</p>
<ul>
<li>
All tank temperature sensors measure a value lower than the mean setpoint value
of the first tank cycle for <i>5&nbsp;</i>min.
</li>
<li>
The flow rate out of the lower port of the tank is negative (tank is discharging)
for <i>5&nbsp;</i>min.
</li>
</ul>
<p>
At initial time the tank cycle flag is set based on the tank temperature condition 
only from the above two clauses without a time delay.
If neither condition is true, the tank cycle flag is set based on the flow condition 
only in the above two clauses without a time delay.
</p>
<p>
The minimum runtime of each tank cycle is fixed at <i>30&nbsp;</i>min.
</p>
</html>",           revisions="<html>
<ul>
<li>
February 24, 2023, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>"));
          end TankCycle;

          block ValveCondenserEvaporator
            "Controller for chiller and HRC condenser and evaporator valves"

            parameter Integer nChi(final min=1, start=1)
              "Number of units operating at design conditions"
              annotation (Dialog(group="CHW loop and cooling-only chillers"),
                Evaluate=true);
            parameter Integer nChiHea(final min=1, start=1)
              "Number of units operating at design conditions"
              annotation (Dialog(group="HW loop and heat recovery chillers"),
                Evaluate=true);
            parameter Modelica.Units.SI.MassFlowRate mChiWatChi_flow_nominal
              "Chiller CHW design mass flow rate (value will be used for each unit)"
              annotation(Dialog(group="CHW loop and cooling-only chillers"));
            parameter Modelica.Units.SI.MassFlowRate mChiWatChi_flow_min
              "Chiller CHW minimum mass flow rate (value will be used for each unit)"
              annotation(Dialog(group="CHW loop and cooling-only chillers"));
            parameter Modelica.Units.SI.MassFlowRate mConWatChi_flow_nominal
              "Chiller CW design mass flow rate (value will be used for each unit)"
              annotation(Dialog(group="CHW loop and cooling-only chillers"));
            parameter Modelica.Units.SI.PressureDifference dpEvaChi_nominal(displayUnit="Pa")
              "Chiller evaporator design pressure drop (value will be used for each unit)"
              annotation(Dialog(group="CHW loop and cooling-only chillers"));
            parameter Modelica.Units.SI.PressureDifference dpValEvaChi_nominal(
                displayUnit="Pa")
              "Chiller evaporator isolation valve design pressure drop (value will be used for each unit)"
              annotation(Dialog(group="CHW loop and cooling-only chillers"));
            parameter Modelica.Units.SI.MassFlowRate mChiWatChiHea_flow_nominal
              "HRC CHW design mass flow rate (value will be used for each unit)"
              annotation(Dialog(group="HW loop and heat recovery chillers"));
            parameter Modelica.Units.SI.MassFlowRate mChiWatChiHea_flow_min
              "HRC CHW minimum mass flow rate (value will be used for each unit)"
              annotation(Dialog(group="HW loop and heat recovery chillers"));
            parameter Modelica.Units.SI.MassFlowRate mConWatChiHea_flow_nominal
              "HRC CW design mass flow rate (value will be used for each unit)"
              annotation(Dialog(group="HW loop and heat recovery chillers"));
            parameter Modelica.Units.SI.MassFlowRate mHeaWatChiHea_flow_min
              "Chiller HW minimum mass flow rate (value will be used for each unit)"
              annotation(Dialog(group="HW loop and heat recovery chillers"));
            parameter Modelica.Units.SI.PressureDifference dpEvaChiHea_nominal(
                displayUnit="Pa")
              "Design chiller evaporator  pressure drop (value will be used for each unit)"
              annotation(Dialog(group="HW loop and heat recovery chillers"));
            parameter Modelica.Units.SI.PressureDifference dpValEvaChiHea_nominal(
                displayUnit="Pa")
              "HRC evaporator isolation valve design pressure drop (value will be used for each unit)"
              annotation(Dialog(group="HW loop and heat recovery chillers"));
            parameter Modelica.Units.SI.Temperature TTanSet[2, 2]
              "Tank temperature setpoints: 2 cycles with 2 setpoints"
              annotation(Dialog(group="CW loop, TES tank and heat pumps"));
            parameter Real k(min=0)=0.01
              "Gain of controller"
              annotation (Dialog(group="Control parameters"));
            parameter Modelica.Units.SI.Time Ti=60
              "Time constant of integrator block"
              annotation (Dialog(group="Control parameters"));
            parameter Real yMin=0.1
              "Lower limit of valve opening when control loop enabled"
              annotation (Dialog(group="Control parameters"));
            parameter Real y_reset=1
              "Value to which the controller output is reset if the boolean trigger has a rising edge"
              annotation (Dialog(group="Control parameters"));
            parameter Real y_neutral=0
              "Value to which the controller output is reset when the controller is disabled"
              annotation (Dialog(group="Control parameters"));
            parameter Real yBalEvaChi = if dpEvaChiHea_nominal + dpValEvaChiHea_nominal - dpEvaChi_nominal <= 0
              then 1 else (dpValEvaChi_nominal / (dpEvaChiHea_nominal + dpValEvaChiHea_nominal - dpEvaChi_nominal))^0.5
              "Chiller evaporator isolation valve opening for flow balancing with HRC";
            parameter Real yBalEvaChiHea = if dpEvaChi_nominal + dpValEvaChi_nominal - dpEvaChiHea_nominal <= 0
              then 1 else (dpValEvaChiHea_nominal / (dpEvaChi_nominal + dpValEvaChi_nominal - dpEvaChiHea_nominal))^0.5
              "HRC evaporator isolation valve opening for flow balancing with chiller";

            Buildings.Controls.OBC.CDL.Interfaces.IntegerInput idxCycTan(final min=1,
                final max=2)
              "Index of active tank cycle"
              annotation (Placement(transformation(extent={{-280,80},{-240,120}}),
              iconTransformation(extent={{-140,60},{-100,100}})));
            Buildings.Controls.OBC.CDL.Interfaces.IntegerInput mode(final min=estcp.DHC.Plants.Combined.Controls.ModeCondenserLoop.tankCharge,
                final max=estcp.DHC.Plants.Combined.Controls.ModeCondenserLoop.heatRejection)
              "Condenser loop operating mode"
              annotation (Placement(transformation(extent={{-280,160},{-240,200}}),
                  iconTransformation(extent={{-140,80},{-100,120}})));
            Buildings.Controls.OBC.CDL.Interfaces.BooleanInput u1Chi[nChi]
              "Cooling-only chiller On/Off command"
              annotation (Placement(transformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={-260,360}),iconTransformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={-120,180})));
            Buildings.Controls.OBC.CDL.Interfaces.BooleanInput u1ChiHea[nChiHea]
              "HRC On/Off command"
              annotation (Placement(transformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={-260,-60}),iconTransformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={-120,160})));
            Buildings.Controls.OBC.CDL.Interfaces.BooleanInput u1CooChiHea[nChiHea]
              "HRC cooling mode switchover command: true for cooling, false for heating"
              annotation (Placement(transformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={-260,-80}),iconTransformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={-120,140})));
            Buildings.Controls.OBC.CDL.Interfaces.BooleanInput u1HeaCooChiHea[nChiHea]
              "HRC direct heat recovery switchover command: true for direct HR, false for cascading"
              annotation (Placement(transformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={-260,-100}),
                                     iconTransformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={-120,120})));
            Buildings.Controls.OBC.CDL.Interfaces.RealInput TEvaLvgChiHea[nChiHea](each final
                      unit="K", each displayUnit="degC")
              "HRC evaporator barrel leaving temperature"
                                                         annotation (Placement(
                  transformation(extent={{-280,20},{-240,60}}),   iconTransformation(
                    extent={{-140,-160},{-100,-120}})));

            Buildings.Controls.OBC.CDL.Interfaces.RealInput mEvaChiSet_flow(final
                unit="kg/s") "Chiller evaporator flow setpoint" annotation (Placement(
                  transformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={-260,400}), iconTransformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={-120,60})));
            Buildings.Controls.OBC.CDL.Interfaces.RealInput mEvaChiHeaSet_flow(final
                      unit="kg/s") "HRC evaporator flow setpoint" annotation (Placement(
                  transformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={-260,0}),  iconTransformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={-120,40})));
            Buildings.Controls.OBC.CDL.Interfaces.RealInput mEvaChi_flow[nChi](
              each final unit="kg/s")
              "Chiller evaporator mass flow rate" annotation (Placement(
                  transformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={-260,300}), iconTransformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={-120,20})));
            Buildings.Controls.OBC.CDL.Interfaces.RealInput mConChi_flow[nChi](
              each final unit="kg/s")
              "Chiller condenser mass flow rate" annotation (Placement(
                  transformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={-260,280}),iconTransformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={-120,0})));
            Buildings.Controls.OBC.CDL.Interfaces.RealInput mEvaChiHea_flow[nChiHea](
              each final unit="kg/s")
              "HRC evaporator mass flow rate" annotation (Placement(transformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={-260,-20}), iconTransformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={-120,-20})));
            Buildings.Controls.OBC.CDL.Interfaces.RealInput TConWatEvaEnt(final unit="K",
                displayUnit="degC") "HRC evaporator entering CW temperature " annotation (
               Placement(transformation(extent={{-280,-500},{-240,-460}}),
                  iconTransformation(extent={{-140,-200},{-100,-160}})));
            Buildings.Controls.OBC.CDL.Interfaces.RealInput mConChiHea_flow[nChiHea](
              each final unit="kg/s")
              "HRC condenser mass flow rate" annotation (Placement(transformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={-260,-140}),iconTransformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={-120,-40})));
            Buildings.Controls.OBC.CDL.Interfaces.RealInput TConEntChiHeaSet(final unit="K",
                displayUnit="degC") "HRC condenser entering temperature setpoint"
               annotation (Placement(
                  transformation(extent={{-280,-420},{-240,-380}}), iconTransformation(
                    extent={{-140,-80},{-100,-40}})));
            Buildings.Controls.OBC.CDL.Interfaces.RealInput TConEntChiHea[nChiHea](each final
                unit="K", each displayUnit="degC") "HRC condenser entering temperature"
              annotation (Placement(transformation(extent={{-280,-460},{-240,-420}}),
                  iconTransformation(extent={{-140,-100},{-100,-60}})));

            Buildings.Controls.OBC.CDL.Interfaces.RealInput TConLvgChiHea[nChiHea](each final
                      unit="K", each displayUnit="degC")
              "HRC condenser barrel leaving temperature" annotation (Placement(
                  transformation(extent={{-280,200},{-240,240}}), iconTransformation(
                    extent={{-140,-120},{-100,-80}})));
            Buildings.Controls.OBC.CDL.Interfaces.RealInput TConLvgChi[nChi](each final
                unit="K", each displayUnit="degC")
              "Chiller condenser barrel leaving temperature" annotation (Placement(
                  transformation(extent={{-280,220},{-240,260}}), iconTransformation(
                    extent={{-140,-140},{-100,-100}})));
            Buildings.Controls.OBC.CDL.Interfaces.RealInput TConWatConRet(final unit=
                 "K", displayUnit="degC") "CWC return temperature"
              annotation (Placement(transformation(extent={{-280,120},{-240,160}}),
                  iconTransformation(extent={{-140,-180},{-100,-140}})));
            Buildings.Controls.OBC.CDL.Interfaces.BooleanOutput y1PumChiWat
              "Enable signal for lead CHW pump"
              annotation (Placement(transformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={260,340}), iconTransformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={120,180})));
            Buildings.Controls.OBC.CDL.Interfaces.BooleanOutput y1PumHeaWat
              "Enable signal for lead HW pump"
              annotation (Placement(transformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={260,-340}),iconTransformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={120,160})));
            Buildings.Controls.OBC.CDL.Interfaces.BooleanOutput y1PumConWatCon
              "Enable signal for lead CW pump serving evaporator loop"
              annotation (Placement(transformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={260,300}), iconTransformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={120,140})));
            Buildings.Controls.OBC.CDL.Interfaces.BooleanOutput y1PumConWatEva
              "Enable signal for lead CW pump serving evaporator loop"
              annotation (Placement(transformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={260,-300}),iconTransformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={120,120})));
            Buildings.Controls.OBC.CDL.Interfaces.RealOutput yValEvaChi[nChi]
              "Cooling-only chiller evaporator isolation valve commanded position"
              annotation (Placement(
                  transformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={260,-20}),iconTransformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={120,20})));
            Buildings.Controls.OBC.CDL.Interfaces.RealOutput yValConChi[nChi](each final
                unit="1")
              "Cooling-only chiller condenser isolation valve commanded position"
              annotation (
                Placement(transformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={260,-40}),iconTransformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={120,0})));
            Buildings.Controls.OBC.CDL.Interfaces.RealOutput yValEvaChiHea[nChiHea](each final
                      unit="1") "HRC evaporator isolation valve commanded position"
              annotation (Placement(
                  transformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={260,-80}),iconTransformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={120,-20})));
            Buildings.Controls.OBC.CDL.Interfaces.RealOutput yValConChiHea[nChiHea](each final
                      unit="1") "HRC condenser isolation valve commanded position"
              annotation (
                Placement(transformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={260,-100}),
                                    iconTransformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={120,-40})));
            Buildings.Controls.OBC.CDL.Interfaces.RealOutput yValEvaSwiChiHea[nChiHea](
                each final unit="1") "HRC evaporator switchover valve commanded position"
              annotation (Placement(transformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={260,-200}), iconTransformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={120,-60})));
            Buildings.Controls.OBC.CDL.Interfaces.RealOutput yValConSwiChiHea[nChiHea](
                each final unit="1") "HRC condenser switchover valve commanded position"
              annotation (Placement(transformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={260,-240}), iconTransformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={120,-80})));
            Buildings.Controls.OBC.CDL.Interfaces.RealOutput yValConWatEvaMix
              "HRC evaporator CW mixing valve commanded position" annotation (Placement(
                  transformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={260,-440}), iconTransformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={120,-100})));
            Buildings.Controls.OBC.CDL.Interfaces.RealOutput yValChiWatMinByp(final unit=
                  "1") "CHW minimum flow bypass valve control signal" annotation (
                Placement(transformation(extent={{240,440},{280,480}}),
                  iconTransformation(extent={{100,60},{140,100}})));
            Buildings.Controls.OBC.CDL.Interfaces.RealOutput yValHeaWatMinByp(final unit=
                  "1") "HW minimum flow bypass valve control signal" annotation (
                Placement(transformation(extent={{240,400},{280,440}}),
                  iconTransformation(extent={{100,40},{140,80}})));
            EnergyTransferStations.Combined.Controls.PIDWithEnable valEvaChi[nChi](
              each k=k,
              each Ti=Ti,
              each final yMin=yMin,
              each final yMax=1,
              each final reverseActing=true,
              each final y_reset=y_reset,
              each final y_neutral=y_neutral)
              "Chiller evaporator isolation valve control when HRC in direct HR"
              annotation (Placement(transformation(extent={{-110,390},{-90,410}})));
            EnergyTransferStations.Combined.Controls.PIDWithEnable valConChi[nChi](
              each k=k,
              each Ti=Ti,
              each final yMin=yMin,
              each final yMax=1,
              each final reverseActing=true,
              each final y_reset=y_reset,
              each final y_neutral=y_neutral) "Chiller condenser isolation valve control"
              annotation (Placement(transformation(extent={{70,350},{90,370}})));
            EnergyTransferStations.Combined.Controls.PIDWithEnable valEvaChiHea[nChiHea](
              each k=4*k,
              each Ti=Ti/3,
              each final yMin=yMin,
              each final yMax=1,
              each final reverseActing=true,
              each final y_reset=y_reset,
              each final y_neutral=y_neutral) "HRC evaporator isolation valve control"
              annotation (Placement(transformation(extent={{-130,-10},{-110,10}})));
            EnergyTransferStations.Combined.Controls.PIDWithEnable valConChiHea[nChiHea](
              each k=k,
              each Ti=Ti,
              each final yMin=yMin,
              each final yMax=1,
              each final reverseActing=true,
              each final y_reset=y_reset,
              each final y_neutral=y_neutral)
              "HRC condenser isolation valve control"
              annotation (Placement(transformation(extent={{50,-50},{70,-30}})));
            Buildings.Controls.OBC.CDL.Conversions.BooleanToReal yValConSwi[nChiHea]
              "HRC condenser switchover valve commanded position"
              annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={130,-240})));
            Buildings.Controls.OBC.CDL.Logical.Not hea[nChiHea] "Return true if heating"
              annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={-190,-240})));
            Buildings.Controls.OBC.CDL.Conversions.BooleanToInteger booToInt[nChiHea](
              each final integerTrue=1,
              each final integerFalse=0) "Convert"
              annotation (Placement(transformation(extent={{-80,-250},{-60,-230}})));
            Buildings.Controls.OBC.CDL.Integers.MultiSum numHeaAndOn(nin=nChiHea)
              "Number of HRC connected to HW loop and On"
              annotation (Placement(transformation(extent={{-50,-250},{-30,-230}})));
            Buildings.Controls.OBC.CDL.Integers.Less intLes[nChiHea]
              "Return true if switchover valve to be open for heating operation"
              annotation (Placement(transformation(extent={{30,-250},{50,-230}})));
            Buildings.Controls.OBC.CDL.Routing.IntegerScalarReplicator rep(
              final nout=nChiHea)
              "Replicate"
              annotation (Placement(transformation(extent={{-24,-250},{-4,-230}})));
            Buildings.Controls.OBC.CDL.Logical.Or heaOrCooCon[nChiHea]
              "Return true if switchover valve to be open for heating or cooling operation"
              annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={80,-240})));
            Buildings.Controls.OBC.CDL.Logical.And heaAndOn[nChiHea]
              "Return true if heating AND On" annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={-110,-240})));
            Buildings.Controls.OBC.CDL.Integers.Sources.Constant idx[nChiHea](final k={i
                  for i in 1:nChiHea}) "HRC index"
              annotation (Placement(transformation(extent={{-24,-290},{-4,-270}})));
            Buildings.Controls.OBC.CDL.Logical.Or cooOrDir[nChiHea]
              "Return true if cooling OR direct HR" annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={-190,-200})));
            Buildings.Controls.OBC.CDL.Conversions.BooleanToReal yValEvaSwi[nChiHea]
              "HRC evaporator switchover valve commanded position" annotation (Placement(
                  transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={180,-200})));
            Buildings.Controls.OBC.CDL.Logical.Not heaAndCas[nChiHea]
              "Return true if cascading heating" annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={-154,-200})));
            Buildings.Controls.OBC.CDL.Conversions.BooleanToInteger booToInt1[nChiHea]
              "Convert"
              annotation (Placement(transformation(extent={{-80,-210},{-60,-190}})));
            Buildings.Controls.OBC.CDL.Integers.MultiSum numHeaAndCasAndOn(nin=nChiHea)
              "Number of HRC in cascading heating AND On"
              annotation (Placement(transformation(extent={{-52,-210},{-32,-190}})));
            Buildings.Controls.OBC.CDL.Routing.IntegerScalarReplicator rep1(final nout=
                  nChiHea) "Replicate"
              annotation (Placement(transformation(extent={{-24,-210},{-4,-190}})));
            Buildings.Controls.OBC.CDL.Integers.Less intLes1[nChiHea]
              "Return true if switchover valve to be open for heating operation"
              annotation (Placement(transformation(extent={{30,-210},{50,-190}})));
            Buildings.Controls.OBC.CDL.Logical.Or heaOrCooEva[nChiHea]
              "Return true if switchover valve to be open for heating or cooling operation"
              annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={130,-200})));
            Buildings.Controls.OBC.CDL.Logical.And cooOrDirAndOn[nChiHea]
              "Return true if (cooling OR direct HR) AND On"
              annotation (Placement(
                  transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={-110,-160})));
            Buildings.Controls.OBC.CDL.Logical.And heaAndCasAndOn[nChiHea]
              "Return true if cascading heating AND On"
              annotation (Placement(
                  transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={-110,-200})));
            Buildings.Controls.OBC.CDL.Reals.GreaterThreshold isOpe[nChiHea](each t=0.1,
                each h=5E-2) "Check if valve open"
              annotation (Placement(transformation(extent={{190,-90},{170,-70}})));
            Buildings.Controls.OBC.CDL.Reals.GreaterThreshold isOpe1[nChiHea](each t=
                 0.1, each h=5E-2) "Check if valve open"
              annotation (Placement(transformation(extent={{190,-130},{170,-110}})));
            Buildings.Controls.OBC.CDL.Reals.GreaterThreshold isOpe2[nChi](each t=0.1,
                each h=5E-2) "Check if valve open"
              annotation (Placement(transformation(extent={{190,-30},{170,-10}})));
            Buildings.Controls.OBC.CDL.Reals.GreaterThreshold isOpe3[nChi](each t=0.1,
                each h=5E-2) "Check if valve open"
              annotation (Placement(transformation(extent={{150,-50},{130,-30}})));
            Buildings.Controls.OBC.CDL.Logical.And cooOrDirAndOnAndOpe[nChiHea]
              "Return true if HRC (cooling OR direct HR) AND On AND isolation valve open"
              annotation (Placement(transformation(
                  extent={{-10,10},{10,-10}},
                  rotation=0,
                  origin={130,380})));
            Buildings.Controls.OBC.CDL.Logical.And onAndOpe[nChi]
              "Return true if On AND isolation valve open" annotation (Placement(
                  transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={130,340})));
            Buildings.Controls.OBC.CDL.Logical.And onAndOpe1[nChi]
              "Return true if On AND isolation valve open" annotation (Placement(
                  transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={130,300})));
            Buildings.Controls.OBC.CDL.Logical.MultiOr enaPumChiWat(nin=nChi+nChiHea)
              "Enable signal for lead CHW pump"
                                            annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={180,340})));
            Buildings.Controls.OBC.CDL.Logical.MultiOr enaPumConWatCon(nin=nChi+nChiHea+1)
              "Enable signal for lead CW pump serving condenser loop"
              annotation (Placement(
                  transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={180,300})));
            Buildings.Controls.OBC.CDL.Logical.And cooAndOpe[nChiHea]
              "Return true if cooling (necessarily cascading) AND isolation valve open"
              annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={130,270})));
            Buildings.Controls.OBC.CDL.Logical.MultiOr enaPumHeaWat(nin=nChiHea)
              "Enable signal for lead HW pump"
                                           annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={220,-340})));
            Buildings.Controls.OBC.CDL.Logical.MultiOr enaPumConWatEva(nin=nChiHea)
              "Enable signal for lead CW pump serving evaporator loop"
              annotation (Placement(
                  transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={180,-300})));
            Buildings.Controls.OBC.CDL.Logical.And heaAndOnAndOpe[nChiHea]
              "Return true if heating AND On AND isolation valve open" annotation (
                Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={180,-340})));
            Buildings.Controls.OBC.CDL.Logical.And heaAndCasAndOnAndOpe[nChiHea]
              "Return true if cascading heating AND On AND isolation valve open"
              annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={130,-300})));
            Buildings.Controls.OBC.CDL.Routing.RealScalarReplicator rep2(final nout=nChi)
              "Replicate"
              annotation (Placement(transformation(extent={{-220,390},{-200,410}})));
            Buildings.Controls.OBC.CDL.Routing.RealScalarReplicator rep3(final nout=
                  nChiHea) "Replicate"
              annotation (Placement(transformation(extent={{-210,-10},{-190,10}})));
            Buildings.Controls.OBC.CDL.Logical.And dirHeaCooAndOn[nChiHea]
              "Return true if direct HR AND On"
              annotation (Placement(
                  transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={-170,-380})));
            Buildings.Controls.OBC.CDL.Logical.MultiOr anyDirHeaCooAndOn(nin=nChiHea)
              "Return true if any HRC in direct HR AND On" annotation (Placement(
                  transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={-130,-380})));
            EnergyTransferStations.Combined.Controls.PIDWithEnable valConSwi(
              u_s(unit="K", displayUnit="degC"),
              u_m(unit="K", displayUnit="degC"),
              k=k,
              Ti=Ti,
              final yMin=0,
              final yMax=1,
              final reverseActing=false,
              final y_reset=0,
              final y_neutral=0)
              "Condenser switchover valve control"
              annotation (Placement(transformation(extent={{-80,-410},{-60,-390}})));
            Modelica.Blocks.Sources.IntegerExpression idxHig(final y=max({if
                  dirHeaCooAndOn[i].y then i else 1 for i in 1:nChiHea}))
              "Highest index of HRC in direct HR (defaulted to 1 if all false)"
              annotation (Placement(transformation(extent={{-220,-470},{-200,-450}})));
            Buildings.Controls.OBC.CDL.Routing.RealScalarReplicator rep4(final nout=
                  nChiHea) "Replicate" annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={-30,-400})));
            Buildings.Controls.OBC.CDL.Integers.Equal equIdx[nChiHea]
              "Return true if index equals highest index of HRC in direct HR"
              annotation (Placement(transformation(extent={{20,-378},{40,-358}})));
            Modelica.Blocks.Sources.IntegerExpression idxChiHea[nChiHea](final y={i for i in
                      1:nChiHea}) "HRC index"
              annotation (Placement(transformation(extent={{-50,-386},{-30,-366}})));
            Buildings.Controls.OBC.CDL.Reals.Switch selCtl[nChiHea]
              "Select control signal" annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={70,-400})));
            Buildings.Controls.OBC.CDL.Reals.Sources.Constant zer[nChiHea](each final
                      k=0) "Constant" annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={30,-420})));
            Buildings.Controls.OBC.CDL.Reals.Max max1[nChiHea]
              "Take into account entering CW temperature control in direct HR mode"
              annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={180,-240})));
            Buildings.Controls.OBC.CDL.Routing.RealExtractor extT(final nin=nChiHea)
              "Extract value at given index"
              annotation (Placement(transformation(extent={{-180,-450},{-160,-430}})));
            Buildings.Controls.OBC.CDL.Routing.IntegerScalarReplicator rep5(final nout=
                  nChiHea) "Replicate" annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={-70,-360})));
            EnergyTransferStations.Combined.Controls.PIDWithEnable ctlTConWatEvaLvg[nChiHea](
              u_s(each final unit="K", each displayUnit="degC"),
              u_m(each final unit="K", each displayUnit="degC"),
              each final k=k/2,
              each Ti=Ti,
              each final yMin=0,
              each final yMax=1,
              each final reverseActing=true,
              each final y_reset=0.75,
              each final y_neutral=0.75) "HRC evaporator leaving temperature control"
              annotation (Placement(transformation(extent={{-110,50},{-90,70}})));
            Buildings.Controls.OBC.CDL.Routing.RealExtractor TConWatEvaLvgSet(final nin=2)
              "Extract value at given index"
              annotation (Placement(transformation(extent={{-170,50},{-150,70}})));
            Buildings.Controls.OBC.CDL.Reals.Sources.Constant TConWatEvaLvgSetCst[2](
              final k=TTanSet[:, 1])
              "HRC evaporator leaving CW temperature setpoint"
              annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={-200,60})));

            Buildings.Controls.OBC.CDL.Routing.RealScalarReplicator rep6(final nout=
                  nChiHea) "Replicate"
              annotation (Placement(transformation(extent={{-140,50},{-120,70}})));
            Buildings.Controls.OBC.CDL.Reals.Line valConWatEvaMix[nChiHea]
              "Mixing valve opening reset: 1 means no bypass flow"
              annotation (Placement(transformation(extent={{-40,90},{-20,110}})));
            Buildings.Controls.OBC.CDL.Reals.Sources.Constant xVal[nChiHea,2](final
                k=fill({0,0.5}, nChiHea)) "x-value for mixing valve opening reset"
              annotation (Placement(transformation(extent={{-80,110},{-60,130}})));
            Buildings.Controls.OBC.CDL.Reals.Sources.Constant yVal[nChiHea,2](final k=
                  fill({0,1}, nChiHea))
              "y-value for mixing valve opening reset: 1 means no bypass flow"
              annotation (Placement(transformation(extent={{-80,80},{-60,100}})));
            Buildings.Controls.OBC.CDL.Reals.Line floEva[nChiHea]
              "HRC evaporator flow reset when On AND cascading heating"
              annotation (Placement(transformation(extent={{-40,10},{-20,30}})));
            Buildings.Controls.OBC.CDL.Reals.Sources.Constant xFlo[nChiHea,2](final
                k=fill({0.5,1}, nChiHea)) "x-value for evaporator flow reset"
              annotation (Placement(transformation(extent={{-80,30},{-60,50}})));
            Buildings.Controls.OBC.CDL.Reals.Sources.Constant yFlo[nChiHea,2](final
                k=fill({mChiWatChiHea_flow_min,mChiWatChiHea_flow_nominal}, nChiHea))
              "y-value for evaporator flow reset"
              annotation (Placement(transformation(extent={{-80,0},{-60,20}})));
            Buildings.Controls.OBC.CDL.Reals.Switch selFloSet[nChiHea]
              "Select HRC evaporator flow setpoint based on operating mode"
              annotation (Placement(transformation(extent={{-160,-10},{-140,10}})));
            EnergyTransferStations.Combined.Controls.PIDWithEnable ctlTConWatEvaEnt(
              u_s(final unit="K", displayUnit="degC"),
              u_m(final unit="K", displayUnit="degC"),
              k=k,
              Ti=Ti,
              final yMin=0,
              final yMax=1,
              final reverseActing=true,
              final y_reset=1,
              final y_neutral=1)
              "HRC evaporator entering temperature control: 1 means no bypass flow"
              annotation (Placement(transformation(extent={{-10,-470},{10,-450}})));
            Buildings.Controls.OBC.CDL.Logical.MultiOr anyHeaAndCasAndOn(nin=nChiHea)
              "Return true if ANY HRC cascading heating AND On" annotation (Placement(
                  transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={-50,-500})));
            Buildings.Controls.OBC.CDL.Reals.Sources.Constant TConWatEvaEntSet(final k=
                  max(TTanSet))      "HRC evaporator entering CW temperature setpoint"
              annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={-50,-460})));
            Buildings.Controls.OBC.CDL.Reals.MultiMin mulMin(nin=nChiHea+1)
              "Combine outputs from evaporator entering and leaving temperature control"
              annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={210,-440})));
            Buildings.Controls.OBC.CDL.Reals.Sources.Constant TConWatConRetSetCst[2](final
                k=TTanSet[:, 2]) "CW condenser loop return temperature setpoint"
              annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={-200,100})));
            Buildings.Controls.OBC.CDL.Routing.RealExtractor TConWatConRetSet(final nin=2)
              "Extract value at given index"
              annotation (Placement(transformation(extent={{-170,90},{-150,110}})));
            EnergyTransferStations.Combined.Controls.PIDWithEnable ctlTConWatConRet(
              u_s(final unit="K", displayUnit="degC"),
              u_m(final unit="K", displayUnit="degC"),
              k=k,
              Ti=Ti,
              final yMin=0,
              final yMax=1,
              final reverseActing=false,
              final y_reset=0.2,
              final y_neutral=0.0)
              "Condenser loop CW return temperature control"
              annotation (Placement(transformation(extent={{-90,170},{-70,190}})));
            Buildings.Controls.OBC.CDL.Integers.Equal isChaAss
              "Check if charge assist mode is active"
              annotation (Placement(transformation(extent={{-170,150},{-150,170}})));
            Buildings.Controls.OBC.CDL.Integers.Sources.Constant chaAss(final k=estcp.DHC.Plants.Combined.Controls.ModeCondenserLoop.chargeAssist)
              "Charge assist mode index"
              annotation (Placement(transformation(extent={{-210,150},{-190,170}})));
            Buildings.Controls.OBC.CDL.Reals.Line floCon[nChi + nChiHea]
              "Condenser flow reset (normalized output)"
              annotation (Placement(transformation(extent={{130,190},{150,210}})));
            Buildings.Controls.OBC.CDL.Reals.Sources.Constant xFloCon[nChi + nChiHea,
              2](final k=fill({0,1}, nChi + nChiHea)) "x-value for flow reset"
              annotation (Placement(transformation(extent={{60,210},{80,230}})));
            Buildings.Controls.OBC.CDL.Reals.Sources.Constant yFloCon[nChi + nChiHea,
              2](final k=fill({0.1,1}, nChi + nChiHea))
              "y-value for condenser flow reset"
              annotation (Placement(transformation(extent={{60,170},{80,190}})));
            Buildings.Controls.OBC.CDL.Reals.MultiplyByParameter scaFloConChi[nChi](
                each final k=mConWatChi_flow_nominal) "Scale flow reset signal"
              annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={50,360})));
            Buildings.Controls.OBC.CDL.Reals.MultiplyByParameter scaFloConChiHea[nChiHea](
                each final k=mConWatChiHea_flow_nominal) "Scale flow reset signal"
              annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={30,-40})));
            EnergyTransferStations.Combined.Controls.PIDWithEnable ctlTConLvgChi[nChi +
              nChiHea](
              u_s(each final unit="K", each displayUnit="degC"),
              u_m(each final unit="K", each displayUnit="degC"),
              each k=k,
              each Ti=Ti,
              each final yMin=0,
              each final yMax=1,
              each final reverseActing=false,
              each final y_reset=0.5,
              each final y_neutral=0) "Condenser leaving temperature control"
              annotation (Placement(transformation(extent={{-70,250},{-50,270}})));

            Buildings.Controls.OBC.CDL.Integers.Sources.Constant tanCha(final k=estcp.DHC.Plants.Combined.Controls.ModeCondenserLoop.tankCharge)
              "Tank charge/discharge mode index"
              annotation (Placement(transformation(extent={{-210,190},{-190,210}})));
            Buildings.Controls.OBC.CDL.Integers.Equal isTanCha
              "Check if tank charge/discharge mode is active"
              annotation (Placement(transformation(extent={{-170,190},{-150,210}})));
            Buildings.Controls.OBC.CDL.Routing.BooleanScalarReplicator
                                                                    rep9(final nout=nChi +
                  nChiHea) "Replicate"
              annotation (Placement(transformation(extent={{-140,190},{-120,210}})));
            Buildings.Controls.OBC.CDL.Routing.RealScalarReplicator rep10(final nout=nChi +
                  nChiHea) "Replicate"
              annotation (Placement(transformation(extent={{-100,250},{-80,270}})));
            Buildings.Controls.OBC.CDL.Routing.RealScalarReplicator rep11(final nout=nChi +
                  nChiHea) "Replicate"
              annotation (Placement(transformation(extent={{-50,170},{-30,190}})));
            Buildings.Controls.OBC.CDL.Reals.Sources.Constant one[nChi + nChiHea](
                each final k=1) "Constant" annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={-40,220})));
            Buildings.Controls.OBC.CDL.Reals.Switch swiFloSet[nChi + nChiHea]
              "Switch condenser flow setpoint based on condenser loop operating mode"
              annotation (Placement(transformation(extent={{30,190},{50,210}})));
            Buildings.Controls.OBC.CDL.Routing.BooleanScalarReplicator
                                                                    rep12(final nout=nChi +
                  nChiHea) "Replicate"
              annotation (Placement(transformation(extent={{-10,190},{10,210}})));
            Buildings.Controls.OBC.CDL.Reals.Switch swiFloSet1[nChi + nChiHea]
              "Switch condenser flow setpoint based on condenser loop operating mode"
              annotation (Placement(transformation(extent={{-10,230},{10,250}})));
            EnergyTransferStations.Combined.Controls.PIDWithEnable valChiWatMinByp[nChi +
              nChiHea](
              each k=0.01,
              each Ti=Ti,
              each final yMin=0,
              each final yMax=1,
              each final reverseActing=true,
              each final y_reset=0,
              each final y_neutral=0) "CHW minimum flow bypass valve control"
              annotation (Placement(transformation(extent={{144,450},{164,470}})));
            EnergyTransferStations.Combined.Controls.PIDWithEnable valHeaWatMinByp[nChiHea](
              each k=0.01,
              each Ti=Ti,
              each final yMin=0,
              each final yMax=1,
              each final reverseActing=true,
              each final y_reset=0,
              each final y_neutral=0) "HW minimum flow bypass valve control"
              annotation (Placement(transformation(extent={{170,410},{190,430}})));
            Buildings.Controls.OBC.CDL.Reals.Sources.Constant floChiWatMin[nChi +
              nChiHea](final k=1.1*cat(
                  1,
                  fill(mChiWatChi_flow_min, nChi),
                  fill(mChiWatChiHea_flow_min, nChiHea))) "Minimum flow setpoint"
              annotation (Placement(transformation(extent={{100,450},{120,470}})));
            Buildings.Controls.OBC.CDL.Reals.Sources.Constant floHeaWatMin[nChiHea](final k=
                  1.1*fill(mHeaWatChiHea_flow_min, nChiHea))   "Minimum flow setpoint"
              annotation (Placement(transformation(extent={{100,410},{120,430}})));
            Buildings.Controls.OBC.CDL.Reals.MultiMax max2(nin=nChi + nChiHea)
              "Maximum control signal"
              annotation (Placement(transformation(extent={{200,450},{220,470}})));
            Buildings.Controls.OBC.CDL.Reals.MultiMax max3(nin=nChiHea)
              "Maximum control signal"
              annotation (Placement(transformation(extent={{200,410},{220,430}})));
            Buildings.Controls.OBC.CDL.Routing.BooleanScalarReplicator
                                                                    rep7(final nout=nChi)
              "Replicate"
              annotation (Placement(transformation(extent={{-150,370},{-130,390}})));
            Buildings.Controls.OBC.CDL.Reals.Switch swi[nChi]
              "Condition to enable evaporator flow control loop" annotation (Placement(
                  transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={0,500})));
            Buildings.Controls.OBC.CDL.Reals.Sources.Constant zer1[nChi](final k=
                  fill(0, nChi)) "Constant"
              annotation (Placement(transformation(extent={{-70,490},{-50,510}})));
            Buildings.Controls.OBC.CDL.Logical.Not noHeaAndCooAndOn
              "Return true if NO HRC in direct HR AND On"
              annotation (Placement(transformation(extent={{-220,430},{-200,450}})));
            Buildings.Controls.OBC.CDL.Logical.MultiOr anyCooAndOn(nin=nChiHea)
              "Return true if ANY HRC in cascading cooling AND On"
              annotation (Placement(transformation(extent={{-220,470},{-200,490}})));
            Buildings.Controls.OBC.CDL.Logical.And and2
              "Condition to switch to fixed valve opening (balancing)" annotation (
                Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={-170,460})));
            Buildings.Controls.OBC.CDL.Routing.BooleanScalarReplicator
                                                                    rep8(final nout=nChi)
              "Replicate"
              annotation (Placement(transformation(extent={{-150,450},{-130,470}})));
            Buildings.Controls.OBC.CDL.Reals.Switch swi1[nChi]
              "Condition to enable evaporator flow control loop" annotation (Placement(
                  transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={-60,470})));
            Buildings.Controls.OBC.CDL.Reals.Sources.Constant yBalChi[nChi](final k=
                  fill(yBalEvaChi, nChi)) "Constant"
              annotation (Placement(transformation(extent={{-150,490},{-130,510}})));
            Buildings.Controls.OBC.CDL.Logical.Not fulOpe[nChi]
              "Condition to switch to fixed full opening"
              annotation (Placement(transformation(extent={{-110,430},{-90,450}})));
            Buildings.Controls.OBC.CDL.Reals.Switch swi2[nChi]
              "Condition to enable evaporator flow control loop" annotation (Placement(
                  transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={-60,440})));
            Buildings.Controls.OBC.CDL.Reals.Sources.Constant one1[nChi](final k=
                  fill(1, nChi)) "Constant"
              annotation (Placement(transformation(extent={{-110,490},{-90,510}})));
            Buildings.Controls.OBC.CDL.Logical.And cooAndOn[nChiHea]
              "Return true if HRC in cascading cooling AND On" annotation (Placement(
                  transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={-170,-60})));
            Buildings.Controls.OBC.CDL.Reals.Switch selValPos[nChiHea]
              "Select HRC evaporator isolation valve command signal"
              annotation (Placement(transformation(extent={{-40,-70},{-20,-50}})));
            Buildings.Controls.OBC.CDL.Reals.Sources.Constant yBalChiHea[nChiHea](
                final k=fill(yBalEvaChiHea, nChiHea)) "Constant"
              annotation (Placement(transformation(extent={{-80,-70},{-60,-50}})));
            Buildings.Controls.OBC.CDL.Logical.MultiOr anyCooOrDirAndOn(nin=nChiHea)
              "Return true if any HRC in (cooling OR direct HR) AND On" annotation (
                Placement(transformation(
                  extent={{-10,10},{10,-10}},
                  rotation=0,
                  origin={-170,420})));
            Buildings.Controls.OBC.CDL.Routing.BooleanScalarReplicator rep13(final nout=nChi)
              "Replicate"
              annotation (Placement(transformation(extent={{-150,410},{-130,430}})));
            Buildings.Controls.OBC.CDL.Conversions.BooleanToReal booToRea[nChiHea]
              "Convert"
              annotation (Placement(transformation(extent={{20,-110},{40,-90}})));
            Buildings.Controls.OBC.CDL.Reals.Max max4[nChiHea] "Convert"
              annotation (Placement(transformation(extent={{120,-110},{140,-90}})));
            Buildings.Controls.OBC.CDL.Interfaces.RealOutput yValConWatByp(final unit="1")
              "CW chiller bypass valve control signal" annotation (Placement(
                  transformation(extent={{240,80},{280,120}}, rotation=0),
                  iconTransformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={120,-140})));
            Buildings.Controls.OBC.CDL.Logical.Not isCloConChi[nChi]
              "Check if valve closed"
              annotation (Placement(transformation(extent={{80,10},{60,30}})));
            Buildings.Controls.OBC.CDL.Logical.MultiAnd allCloAndChaAndEna(nin=nChi+2)
              "Check if all valves closed AND Charge Assist mode is active"
              annotation (Placement(transformation(extent={{40,10},{20,30}})));
            Buildings.Controls.OBC.CDL.Reals.Switch enaCtlValConWatByp
              "Enable CW bypass valve control"
              annotation (Placement(transformation(extent={{170,90},{190,110}})));
            Buildings.Controls.OBC.CDL.Reals.Sources.Constant zer2(final k=0)
              "Constant" annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={140,80})));
            Buildings.Controls.OBC.CDL.Reals.GreaterThreshold isOpe4(t=0.1, h=5E-2)
                             "Check if valve open"
              annotation (Placement(transformation(extent={{190,130},{170,150}})));
            Buildings.Controls.OBC.CDL.Interfaces.BooleanInput u1CooOrHea
              "Plant Enable signal: either cooling or heating is enabled" annotation (
                Placement(transformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={-260,-40}), iconTransformation(
                  extent={{-20,-20},{20,20}},
                  rotation=-90,
                  origin={-78,220})));
          equation
            connect(u1Chi, valConChi.uEna) annotation (Line(points={{-260,360},{-220,360},
                    {-220,340},{76,340},{76,348}},color={255,0,255}));
            connect(valConChi.y, yValConChi) annotation (Line(points={{92,360},{226,360},
                    {226,-40},{260,-40}},
                                      color={0,0,127}));
            connect(rep.y,intLes. u2) annotation (Line(points={{-2,-240},{10,-240},{10,-248},
                    {28,-248}}, color={255,127,0}));
            connect(intLes.y, heaOrCooCon.u2) annotation (Line(points={{52,-240},{56,-240},
                    {56,-248},{68,-248}}, color={255,0,255}));
            connect(heaOrCooCon.y, yValConSwi.u)
              annotation (Line(points={{92,-240},{118,-240}},color={255,0,255}));
            connect(numHeaAndOn.y, rep.u)
              annotation (Line(points={{-28,-240},{-26,-240}}, color={255,127,0}));
            connect(u1CooChiHea, hea.u) annotation (Line(points={{-260,-80},{-220,-80},{
                    -220,-240},{-202,-240}},
                                        color={255,0,255}));
            connect(u1ChiHea, heaAndOn.u1) annotation (Line(points={{-260,-60},{-216,-60},
                    {-216,-220},{-130,-220},{-130,-240},{-122,-240}},
                                                                color={255,0,255}));
            connect(hea.y, heaAndOn.u2) annotation (Line(points={{-178,-240},{-134,-240},
                    {-134,-248},{-122,-248}},color={255,0,255}));
            connect(heaAndOn.y, booToInt.u)
              annotation (Line(points={{-98,-240},{-82,-240}},   color={255,0,255}));
            connect(idx.y, intLes.u1) annotation (Line(points={{-2,-280},{20,-280},{20,-240},
                    {28,-240}},        color={255,127,0}));
            connect(cooOrDir.y,heaAndCas. u) annotation (Line(points={{-178,-200},{-166,
                    -200}},                                           color={255,0,255}));
            connect(booToInt1.y, numHeaAndCasAndOn.u)
              annotation (Line(points={{-58,-200},{-54,-200}}, color={255,127,0}));
            connect(numHeaAndCasAndOn.y, rep1.u)
              annotation (Line(points={{-30,-200},{-26,-200}}, color={255,127,0}));
            connect(rep1.y,intLes1. u2) annotation (Line(points={{-2,-200},{10,-200},{10,-208},
                    {28,-208}},        color={255,127,0}));
            connect(intLes1.y, heaOrCooEva.u2) annotation (Line(points={{52,-200},{80,
                    -200},{80,-208},{118,-208}},color={255,0,255}));
            connect(heaOrCooEva.y, yValEvaSwi.u)
              annotation (Line(points={{142,-200},{168,-200}},
                                                             color={255,0,255}));
            connect(u1CooChiHea, cooOrDir.u1) annotation (Line(points={{-260,-80},{-220,-80},
                    {-220,-200},{-202,-200}}, color={255,0,255}));
            connect(u1HeaCooChiHea, cooOrDir.u2) annotation (Line(points={{-260,-100},{-224,
                    -100},{-224,-208},{-202,-208}},color={255,0,255}));
            connect(cooOrDir.y, cooOrDirAndOn.u2) annotation (Line(points={{-178,-200},{-170,
                    -200},{-170,-168},{-122,-168}}, color={255,0,255}));
            connect(u1ChiHea, cooOrDirAndOn.u1) annotation (Line(points={{-260,-60},{-216,
                    -60},{-216,-160},{-122,-160}},                    color={255,0,255}));
            connect(heaAndCas.y, heaAndCasAndOn.u2) annotation (Line(points={{-142,-200},
                    {-134,-200},{-134,-208},{-122,-208}},color={255,0,255}));
            connect(u1ChiHea, heaAndCasAndOn.u1) annotation (Line(points={{-260,-60},{
                    -216,-60},{-216,-180},{-130,-180},{-130,-200},{-122,-200}},
                                                                      color={255,0,255}));
            connect(heaAndCasAndOn.y, booToInt1.u)
              annotation (Line(points={{-98,-200},{-82,-200}}, color={255,0,255}));
            connect(booToInt.y, numHeaAndOn.u)
              annotation (Line(points={{-58,-240},{-52,-240}}, color={255,127,0}));
            connect(idx.y, intLes1.u1) annotation (Line(points={{-2,-280},{20,-280},{20,-200},
                    {28,-200}},       color={255,127,0}));
            connect(cooOrDirAndOn.y, heaOrCooEva.u1)
              annotation (Line(points={{-98,-160},{100,-160},{100,-200},{118,-200}},
                                                              color={255,0,255}));
            connect(yValEvaChi, isOpe2.u) annotation (Line(points={{260,-20},{192,-20}},
                                   color={0,0,127}));
            connect(yValConChi, isOpe3.u) annotation (Line(points={{260,-40},{152,-40}},
                               color={0,0,127}));
            connect(yValEvaChiHea, isOpe.u) annotation (Line(points={{260,-80},{192,-80}},
                                         color={0,0,127}));
            connect(yValConChiHea, isOpe1.u) annotation (Line(points={{260,-100},{220,
                    -100},{220,-120},{192,-120}},
                                          color={0,0,127}));
            connect(isOpe.y, cooOrDirAndOnAndOpe.u1) annotation (Line(points={{168,-80},{
                    108,-80},{108,380},{118,380}},
                                                 color={255,0,255}));
            connect(cooOrDirAndOn.y, cooOrDirAndOnAndOpe.u2) annotation (Line(points={{-98,
                    -160},{100,-160},{100,388},{118,388}},   color={255,0,255}));
            connect(isOpe2.y, onAndOpe.u2) annotation (Line(points={{168,-20},{116,-20},{
                    116,332},{118,332}},
                                   color={255,0,255}));
            connect(u1Chi, onAndOpe.u1) annotation (Line(points={{-260,360},{-220,360},{
                    -220,340},{118,340}},                color={255,0,255}));
            connect(isOpe3.y, onAndOpe1.u2) annotation (Line(points={{128,-40},{112,-40},
                    {112,292},{118,292}},
                                   color={255,0,255}));
            connect(u1Chi, onAndOpe1.u1) annotation (Line(points={{-260,360},{-220,360},{-220,
                    340},{92,340},{92,300},{118,300}}, color={255,0,255}));
            connect(onAndOpe[1:nChi].y, enaPumChiWat.u[1:nChi])
              annotation (Line(points={{142,340},{168,340}}, color={255,0,255}));
            connect(cooOrDirAndOnAndOpe[1:nChiHea].y, enaPumChiWat.u[nChi+1:nChi+nChiHea]) annotation (Line(points={{142,380},
                    {160,380},{160,340},{168,340}},  color={255,0,255}));
            connect(onAndOpe1[1:nChi].y, enaPumConWatCon.u[1:nChi])
              annotation (Line(points={{142,300},{168,300}},
                                                          color={255,0,255}));
            connect(u1CooChiHea, cooAndOpe.u1) annotation (Line(points={{-260,-80},{88,-80},
                    {88,270},{118,270}},     color={255,0,255}));
            connect(isOpe1.y, cooAndOpe.u2) annotation (Line(points={{168,-120},{92,-120},
                    {92,262},{118,262}},   color={255,0,255}));
            connect(cooAndOpe[1:nChiHea].y, enaPumConWatCon.u[nChi+1:nChi+nChiHea]) annotation (Line(points={{142,270},
                    {160,270},{160,300},{168,300}},
                                             color={255,0,255}));
            connect(heaAndOn.y, heaAndOnAndOpe.u1) annotation (Line(points={{-98,-240},{
                    -84,-240},{-84,-340},{168,-340}}, color={255,0,255}));
            connect(isOpe1.y, heaAndOnAndOpe.u2) annotation (Line(points={{168,-120},{160,
                    -120},{160,-348},{168,-348}}, color={255,0,255}));
            connect(heaAndOnAndOpe.y, enaPumHeaWat.u)
              annotation (Line(points={{192,-340},{208,-340}}, color={255,0,255}));
            connect(heaAndCasAndOn.y, heaAndCasAndOnAndOpe.u1) annotation (Line(points={{-98,
                    -200},{-90,-200},{-90,-300},{118,-300}},color={255,0,255}));
            connect(isOpe.y, heaAndCasAndOnAndOpe.u2) annotation (Line(points={{168,-80},
                    {108,-80},{108,-308},{118,-308}},
                                                  color={255,0,255}));
            connect(heaAndCasAndOnAndOpe.y, enaPumConWatEva.u)
              annotation (Line(points={{142,-300},{168,-300}},
                                                             color={255,0,255}));
            connect(enaPumChiWat.y, y1PumChiWat)
              annotation (Line(points={{192,340},{260,340}}, color={255,0,255}));
            connect(enaPumConWatCon.y, y1PumConWatCon)
              annotation (Line(points={{192,300},{260,300}},
                                                           color={255,0,255}));
            connect(enaPumHeaWat.y, y1PumHeaWat) annotation (Line(points={{232,-340},{260,
                    -340}},                       color={255,0,255}));
            connect(rep3.u, mEvaChiHeaSet_flow)
              annotation (Line(points={{-212,0},{-260,0}},   color={0,0,127}));
            connect(yValEvaSwi.y, yValEvaSwiChiHea) annotation (Line(points={{192,-200},{
                    260,-200}},                       color={0,0,127}));
            connect(enaPumConWatEva.y, y1PumConWatEva)
              annotation (Line(points={{192,-300},{260,-300}}, color={255,0,255}));
            connect(u1ChiHea, dirHeaCooAndOn.u1) annotation (Line(points={{-260,-60},{
                    -216,-60},{-216,-380},{-182,-380}},
                                                  color={255,0,255}));
            connect(u1HeaCooChiHea, dirHeaCooAndOn.u2) annotation (Line(points={{-260,
                    -100},{-224,-100},{-224,-388},{-182,-388}},
                                                        color={255,0,255}));
            connect(dirHeaCooAndOn.y, anyDirHeaCooAndOn.u)
              annotation (Line(points={{-158,-380},{-142,-380}}, color={255,0,255}));
            connect(TConEntChiHeaSet, valConSwi.u_s)
              annotation (Line(points={{-260,-400},{-82,-400}}, color={0,0,127}));
            connect(anyDirHeaCooAndOn.y, valConSwi.uEna) annotation (Line(points={{-118,
                    -380},{-100,-380},{-100,-420},{-74,-420},{-74,-412}}, color={255,0,
                    255}));
            connect(valConSwi.y, rep4.u)
              annotation (Line(points={{-58,-400},{-42,-400}}, color={0,0,127}));
            connect(equIdx.y, selCtl.u2) annotation (Line(points={{42,-368},{50,-368},{50,
                    -400},{58,-400}}, color={255,0,255}));
            connect(rep4.y, selCtl.u1) annotation (Line(points={{-18,-400},{40,-400},{40,-392},
                    {58,-392}},       color={0,0,127}));
            connect(zer.y, selCtl.u3) annotation (Line(points={{42,-420},{50,-420},{50,-408},
                    {58,-408}},       color={0,0,127}));
            connect(yValConSwi.y, max1.u1) annotation (Line(points={{142,-240},{150,-240},
                    {150,-234},{168,-234}}, color={0,0,127}));
            connect(max1.y, yValConSwiChiHea) annotation (Line(points={{192,-240},{260,
                    -240}},                     color={0,0,127}));
            connect(selCtl.y, max1.u2) annotation (Line(points={{82,-400},{150,-400},{150,
                    -246},{168,-246}}, color={0,0,127}));
            connect(TConEntChiHea, extT.u)
              annotation (Line(points={{-260,-440},{-182,-440}}, color={0,0,127}));
            connect(idxHig.y, extT.index) annotation (Line(points={{-199,-460},{-170,-460},
                    {-170,-452}},                         color={255,127,0}));
            connect(extT.y, valConSwi.u_m) annotation (Line(points={{-158,-440},{-70,-440},
                    {-70,-412}}, color={0,0,127}));
            connect(idxHig.y, rep5.u)
              annotation (Line(points={{-199,-460},{-110,-460},{-110,-360},{-82,-360}},
                                                                color={255,127,0}));
            connect(idxChiHea.y, equIdx.u2)
              annotation (Line(points={{-29,-376},{18,-376}},  color={255,127,0}));
            connect(rep5.y, equIdx.u1) annotation (Line(points={{-58,-360},{-20,-360},{-20,
                    -368},{18,-368}},      color={255,127,0}));
            connect(heaAndCasAndOn.y, ctlTConWatEvaLvg.uEna) annotation (Line(points={{-98,
                    -200},{-90,-200},{-90,20},{-104,20},{-104,48}},  color={255,0,255}));
            connect(TEvaLvgChiHea, ctlTConWatEvaLvg.u_m) annotation (Line(points={{-260,40},
                    {-100,40},{-100,48}},   color={0,0,127}));
            connect(TConWatEvaLvgSetCst.y, TConWatEvaLvgSet.u)
              annotation (Line(points={{-188,60},{-172,60}},   color={0,0,127}));
            connect(idxCycTan, TConWatEvaLvgSet.index) annotation (Line(points={{-260,100},
                    {-230,100},{-230,44},{-160,44},{-160,48}},    color={255,127,0}));
            connect(rep6.y, ctlTConWatEvaLvg.u_s)
              annotation (Line(points={{-118,60},{-112,60}},   color={0,0,127}));
            connect(TConWatEvaLvgSet.y, rep6.u)
              annotation (Line(points={{-148,60},{-142,60}},   color={0,0,127}));
            connect(yVal[:, 2].y, valConWatEvaMix.f2) annotation (Line(points={{-58,90},{-46,
                    90},{-46,92},{-42,92}},     color={0,0,127}));
            connect(yVal[:, 1].y, valConWatEvaMix.f1) annotation (Line(points={{-58,90},{-46,
                    90},{-46,104},{-42,104}},     color={0,0,127}));
            connect(xVal[:, 1].y, valConWatEvaMix.x1) annotation (Line(points={{-58,120},{
                    -48,120},{-48,108},{-42,108}},  color={0,0,127}));
            connect(xVal[:, 2].y, valConWatEvaMix.x2) annotation (Line(points={{-58,120},{
                    -48,120},{-48,96},{-42,96}},  color={0,0,127}));
            connect(yFlo[:, 2].y, floEva.f2) annotation (Line(points={{-58,10},{-46,10},{-46,
                    12},{-42,12}},        color={0,0,127}));
            connect(yFlo[:, 1].y, floEva.f1) annotation (Line(points={{-58,10},{-46,10},{-46,
                    24},{-42,24}},        color={0,0,127}));
            connect(xFlo[:, 1].y, floEva.x1) annotation (Line(points={{-58,40},{-48,40},{-48,
                    28},{-42,28}},        color={0,0,127}));
            connect(xFlo[:, 2].y, floEva.x2) annotation (Line(points={{-58,40},{-48,40},{-48,
                    16},{-42,16}},        color={0,0,127}));
            connect(heaAndCasAndOn.y, selFloSet.u2) annotation (Line(points={{-98,-200},{-90,
                    -200},{-90,-24},{-168,-24},{-168,0},{-162,0}},    color={255,0,255}));
            connect(rep3.y, selFloSet.u3) annotation (Line(points={{-188,0},{-180,0},{-180,
                    -8},{-162,-8}},        color={0,0,127}));
            connect(ctlTConWatEvaLvg.y, valConWatEvaMix.u) annotation (Line(points={{-88,
                    60},{-44,60},{-44,100},{-42,100}}, color={0,0,127}));
            connect(ctlTConWatEvaLvg.y, floEva.u) annotation (Line(points={{-88,60},{-44,60},
                    {-44,20},{-42,20}},        color={0,0,127}));
            connect(selFloSet.y, valEvaChiHea.u_s)
              annotation (Line(points={{-138,0},{-132,0}},     color={0,0,127}));
            connect(floEva.y, selFloSet.u1) annotation (Line(points={{-18,20},{-10,20},{-10,
                    -16},{-174,-16},{-174,8},{-162,8}},         color={0,0,127}));
            connect(TConWatEvaEnt, ctlTConWatEvaEnt.u_m) annotation (Line(points={{-260,
                    -480},{0,-480},{0,-472}},
                                            color={0,0,127}));
            connect(anyHeaAndCasAndOn.y, ctlTConWatEvaEnt.uEna) annotation (Line(points={{-38,
                    -500},{-4,-500},{-4,-472}},                             color={255,0,255}));
            connect(heaAndCasAndOn.y, anyHeaAndCasAndOn.u) annotation (Line(points={{-98,
                    -200},{-90,-200},{-90,-500},{-62,-500}},
                                                      color={255,0,255}));
            connect(TConWatEvaEntSet.y, ctlTConWatEvaEnt.u_s)
              annotation (Line(points={{-38,-460},{-12,-460}},  color={0,0,127}));
            connect(ctlTConWatEvaEnt.y, mulMin.u[nChiHea+1])
              annotation (Line(points={{12,-460},{180,-460},{180,-440},{198,-440}},
                                                              color={0,0,127}));
            connect(valConWatEvaMix.y, mulMin.u[1:nChiHea]) annotation (Line(points={{-18,100},
                    {0,100},{0,-440},{198,-440}},          color={0,0,127}));
            connect(mulMin.y, yValConWatEvaMix)
              annotation (Line(points={{222,-440},{260,-440}}, color={0,0,127}));
            connect(TConWatConRetSetCst.y, TConWatConRetSet.u) annotation (Line(points={{-188,
                    100},{-172,100}},                            color={0,0,127}));
            connect(idxCycTan, TConWatConRetSet.index) annotation (Line(points={{-260,100},
                    {-230,100},{-230,80},{-160,80},{-160,88}},    color={255,127,0}));
            connect(mode, isChaAss.u1) annotation (Line(points={{-260,180},{-180,180},{-180,
                    160},{-172,160}},      color={255,127,0}));
            connect(chaAss.y, isChaAss.u2) annotation (Line(points={{-188,160},{-184,160},
                    {-184,152},{-172,152}}, color={255,127,0}));
            connect(isChaAss.y, ctlTConWatConRet.uEna) annotation (Line(points={{-148,160},
                    {-84,160},{-84,168}},   color={255,0,255}));
            connect(TConWatConRetSet.y, ctlTConWatConRet.u_s) annotation (Line(points={{-148,
                    100},{-110,100},{-110,180},{-92,180}},       color={0,0,127}));
            connect(TConWatConRet, ctlTConWatConRet.u_m) annotation (Line(points={{-260,140},
                    {-80,140},{-80,168}},   color={0,0,127}));
            connect(xFloCon[:, 1].y, floCon.x1) annotation (Line(points={{82,220},{124,220},
                    {124,208},{128,208}},
                                        color={0,0,127}));
            connect(xFloCon[:, 2].y, floCon.x2) annotation (Line(points={{82,220},{124,220},
                    {124,196},{128,196}},
                                        color={0,0,127}));
            connect(mode, isTanCha.u2) annotation (Line(points={{-260,180},{-180,180},{-180,
                    192},{-172,192}}, color={255,127,0}));
            connect(tanCha.y, isTanCha.u1)
              annotation (Line(points={{-188,200},{-172,200}}, color={255,127,0}));
            connect(TConLvgChi, ctlTConLvgChi[1:nChi].u_m) annotation (Line(points={{-260,
                    240},{-60,240},{-60,248}},   color={0,0,127}));
            connect(TConLvgChiHea, ctlTConLvgChi[nChi + 1:nChi + nChiHea].u_m)
              annotation (Line(points={{-260,220},{-60,220},{-60,248}},   color={0,0,127}));
            connect(isTanCha.y, rep9.u)
              annotation (Line(points={{-148,200},{-142,200}}, color={255,0,255}));
            connect(rep9.y, ctlTConLvgChi.uEna) annotation (Line(points={{-118,200},{-64,200},
                    {-64,248}},       color={255,0,255}));
            connect(rep10.y, ctlTConLvgChi.u_s)
              annotation (Line(points={{-78,260},{-72,260}}, color={0,0,127}));
            connect(ctlTConWatConRet.y, rep11.u)
              annotation (Line(points={{-68,180},{-52,180}}, color={0,0,127}));
            connect(TConWatConRetSet.y, rep10.u) annotation (Line(points={{-148,100},{-110,
                    100},{-110,260},{-102,260}}, color={0,0,127}));
            connect(rep12.y, swiFloSet.u2) annotation (Line(points={{12,200},{28,200}},
                                    color={255,0,255}));
            connect(isChaAss.y, rep12.u)
              annotation (Line(points={{-148,160},{-20,160},{-20,200},{-12,200}},
                                                              color={255,0,255}));
            connect(rep11.y, swiFloSet.u1) annotation (Line(points={{-28,180},{16,180},{16,
                    208},{28,208}},
                               color={0,0,127}));
            connect(rep9.y, swiFloSet1.u2) annotation (Line(points={{-118,200},{-56,200},
                    {-56,240},{-12,240}},color={255,0,255}));
            connect(ctlTConLvgChi.y, swiFloSet1.u1) annotation (Line(points={{-48,260},{
                    -20,260},{-20,248},{-12,248}},
                                               color={0,0,127}));
            connect(one.y, swiFloSet1.u3) annotation (Line(points={{-28,220},{-20,220},{-20,
                    232},{-12,232}}, color={0,0,127}));
            connect(swiFloSet1.y, swiFloSet.u3) annotation (Line(points={{12,240},{20,240},
                    {20,192},{28,192}}, color={0,0,127}));
            connect(swiFloSet.y, floCon.u)
              annotation (Line(points={{52,200},{128,200}}, color={0,0,127}));
            connect(yFloCon[:, 1].y, floCon.f1) annotation (Line(points={{82,180},{120,180},
                    {120,204},{128,204}}, color={0,0,127}));
            connect(yFloCon[:, 2].y, floCon.f2) annotation (Line(points={{82,180},{120,180},
                    {120,192},{128,192}}, color={0,0,127}));
            connect(scaFloConChi.y, valConChi.u_s)
              annotation (Line(points={{62,360},{68,360}}, color={0,0,127}));
            connect(scaFloConChiHea.y, valConChiHea.u_s)
              annotation (Line(points={{42,-40},{48,-40}},   color={0,0,127}));
            connect(floCon[nChi + 1:nChi + nChiHea].y, scaFloConChiHea.u) annotation (
                Line(points={{152,200},{160,200},{160,150},{4,150},{4,-40},{18,-40}},
                  color={0,0,127}));
            connect(floCon[1:nChi].y, scaFloConChi.u) annotation (Line(points={{152,200},{
                    160,200},{160,240},{32,240},{32,360},{38,360}}, color={0,0,127}));
            connect(onAndOpe.y, valChiWatMinByp[1:nChi].uEna) annotation (Line(points={{142,340},
                    {150,340},{150,448}},                              color={255,0,255}));
            connect(cooOrDirAndOnAndOpe.y, valChiWatMinByp[nChi + 1:nChi + nChiHea].uEna)
              annotation (Line(points={{142,380},{160,380},{160,430},{150,430},{150,448}},
                  color={255,0,255}));
            connect(heaAndOnAndOpe.y, valHeaWatMinByp.uEna) annotation (Line(points={{192,
                    -340},{200,-340},{200,390},{176,390},{176,408}},
                                                                   color={255,0,255}));
            connect(floChiWatMin.y, valChiWatMinByp.u_s) annotation (Line(points={{122,460},
                    {142,460}},                            color={0,0,127}));
            connect(floHeaWatMin.y, valHeaWatMinByp.u_s)
              annotation (Line(points={{122,420},{168,420}}, color={0,0,127}));
            connect(max2.y, yValChiWatMinByp)
              annotation (Line(points={{222,460},{260,460}}, color={0,0,127}));
            connect(valChiWatMinByp.y, max2.u)
              annotation (Line(points={{166,460},{198,460}}, color={0,0,127}));
            connect(max3.y, yValHeaWatMinByp) annotation (Line(points={{222,420},{234,420},
                    {234,420},{260,420}}, color={0,0,127}));
            connect(valHeaWatMinByp.y, max3.u)
              annotation (Line(points={{192,420},{198,420}},color={0,0,127}));
            connect(mEvaChiHea_flow, valEvaChiHea.u_m) annotation (Line(points={{-260,-20},
                    {-120,-20},{-120,-12}}, color={0,0,127}));
            connect(mEvaChiHea_flow, valChiWatMinByp[nChi + 1:nChi + nChiHea].u_m)
              annotation (Line(points={{-260,-20},{96,-20},{96,436},{154,436},{154,448}},
                  color={0,0,127}));
            connect(mConChi_flow, valConChi.u_m)
              annotation (Line(points={{-260,280},{80,280},{80,348}}, color={0,0,127}));
            connect(mEvaChi_flow, valEvaChi.u_m) annotation (Line(points={{-260,300},{
                    -100,300},{-100,388}},
                                      color={0,0,127}));
            connect(mEvaChi_flow, valChiWatMinByp[1:nChi].u_m) annotation (Line(points={{-260,
                    300},{0,300},{0,440},{154,440},{154,448}},
                                               color={0,0,127}));
            connect(mConChiHea_flow, valConChiHea.u_m) annotation (Line(points={{-260,-140},
                    {60,-140},{60,-52}},  color={0,0,127}));
            connect(mConChiHea_flow, valHeaWatMinByp.u_m)
              annotation (Line(points={{-260,-140},{104,-140},{104,400},{180,400},{180,
                    408}},                                            color={0,0,127}));
            connect(mEvaChiSet_flow, rep2.u)
              annotation (Line(points={{-260,400},{-222,400}}, color={0,0,127}));
            connect(rep2.y, valEvaChi.u_s)
              annotation (Line(points={{-198,400},{-112,400}}, color={0,0,127}));
            connect(anyDirHeaCooAndOn.y, rep7.u) annotation (Line(points={{-118,-380},{
                    -100,-380},{-100,-340},{-234,-340},{-234,380},{-152,380}},
                                                                          color={255,0,255}));
            connect(zer1.y, swi.u3) annotation (Line(points={{-48,500},{-30,500},{-30,492},
                    {-12,492}}, color={0,0,127}));
            connect(u1Chi, swi.u2) annotation (Line(points={{-260,360},{-20,360},{-20,500},
                    {-12,500}}, color={255,0,255}));
            connect(anyDirHeaCooAndOn.y, noHeaAndCooAndOn.u) annotation (Line(points={{-118,
                    -380},{-100,-380},{-100,-340},{-234,-340},{-234,440},{-222,440}},
                  color={255,0,255}));
            connect(anyCooAndOn.y, and2.u1) annotation (Line(points={{-198,480},{-190,480},
                    {-190,460},{-182,460}}, color={255,0,255}));
            connect(noHeaAndCooAndOn.y, and2.u2) annotation (Line(points={{-198,440},{
                    -190,440},{-190,452},{-182,452}},
                                                 color={255,0,255}));
            connect(and2.y, rep8.u)
              annotation (Line(points={{-158,460},{-152,460}}, color={255,0,255}));
            connect(yBalChi.y, swi1.u1) annotation (Line(points={{-128,500},{-120,500},{-120,
                    478},{-72,478}}, color={0,0,127}));
            connect(rep8.y, swi1.u2) annotation (Line(points={{-128,460},{-100,460},{-100,
                    470},{-72,470}}, color={255,0,255}));
            connect(fulOpe.y, swi2.u2)
              annotation (Line(points={{-88,440},{-72,440}}, color={255,0,255}));
            connect(valEvaChi.y, swi2.u3) annotation (Line(points={{-88,400},{-80,400},{
                    -80,432},{-72,432}},
                                     color={0,0,127}));
            connect(rep7.y, valEvaChi.uEna) annotation (Line(points={{-128,380},{-104,380},
                    {-104,388}}, color={255,0,255}));
            connect(one1.y, swi2.u1) annotation (Line(points={{-88,500},{-80,500},{-80,448},
                    {-72,448}}, color={0,0,127}));
            connect(swi2.y, swi1.u3) annotation (Line(points={{-48,440},{-44,440},{-44,456},
                    {-76,456},{-76,462},{-72,462}}, color={0,0,127}));
            connect(swi1.y, swi.u1) annotation (Line(points={{-48,470},{-40,470},{-40,508},
                    {-12,508}}, color={0,0,127}));
            connect(swi.y, yValEvaChi) annotation (Line(points={{12,500},{230,500},{230,-20},
                    {260,-20}}, color={0,0,127}));
            connect(heaAndOn.y, valEvaChiHea.uEna) annotation (Line(points={{-98,-240},{-94,
                    -240},{-94,-28},{-124,-28},{-124,-12}}, color={255,0,255}));
            connect(u1ChiHea, cooAndOn.u1)
              annotation (Line(points={{-260,-60},{-182,-60}}, color={255,0,255}));
            connect(u1CooChiHea, cooAndOn.u2) annotation (Line(points={{-260,-80},{-200,
                    -80},{-200,-68},{-182,-68}}, color={255,0,255}));
            connect(cooAndOn.y, selValPos.u2) annotation (Line(points={{-158,-60},{-120,-60},
                    {-120,-76},{-46,-76},{-46,-60},{-42,-60}},
                                               color={255,0,255}));
            connect(yBalChiHea.y, selValPos.u1) annotation (Line(points={{-58,-60},{-50,-60},
                    {-50,-52},{-42,-52}},        color={0,0,127}));
            connect(valEvaChiHea.y, selValPos.u3) annotation (Line(points={{-108,0},{-100,
                    0},{-100,-10},{-54,-10},{-54,-68},{-42,-68}},    color={0,0,127}));
            connect(selValPos.y, yValEvaChiHea) annotation (Line(points={{-18,-60},{220,-60},
                    {220,-80},{260,-80}}, color={0,0,127}));
            connect(anyCooOrDirAndOn.y, rep13.u)
              annotation (Line(points={{-158,420},{-152,420}}, color={255,0,255}));
            connect(rep13.y, fulOpe.u) annotation (Line(points={{-128,420},{-120,420},{
                    -120,440},{-112,440}}, color={255,0,255}));
            connect(cooOrDirAndOn.y, anyCooOrDirAndOn.u) annotation (Line(points={{-98,
                    -160},{-80,-160},{-80,-120},{-238,-120},{-238,420},{-182,420}}, color=
                   {255,0,255}));
            connect(cooAndOn.y, anyCooAndOn.u) annotation (Line(points={{-158,-60},{-140,-60},
                    {-140,-46},{-236,-46},{-236,480},{-222,480}},      color={255,0,255}));
            connect(cooAndOn.y, heaOrCooCon.u1) annotation (Line(points={{-158,-60},{-140,
                    -60},{-140,-260},{60,-260},{60,-240},{68,-240}},
                                               color={255,0,255}));
            connect(cooAndOn.y, valConChiHea.uEna) annotation (Line(points={{-158,-60},{-140,
                    -60},{-140,-116},{56,-116},{56,-52}},      color={255,0,255}));
            connect(heaAndOn.y, booToRea.u) annotation (Line(points={{-98,-240},{-94,-240},
                    {-94,-100},{18,-100}}, color={255,0,255}));
            connect(max4.y, yValConChiHea)
              annotation (Line(points={{142,-100},{260,-100}}, color={0,0,127}));
            connect(booToRea.y, max4.u2) annotation (Line(points={{42,-100},{80,-100},{80,
                    -106},{118,-106}}, color={0,0,127}));
            connect(valConChiHea.y, max4.u1) annotation (Line(points={{72,-40},{80,-40},{80,
                    -94},{118,-94}},    color={0,0,127}));
            connect(isOpe3.y, isCloConChi.u) annotation (Line(points={{128,-40},{112,-40},
                    {112,20},{82,20}}, color={255,0,255}));
            connect(isCloConChi.y, allCloAndChaAndEna.u[1:nChi])
              annotation (Line(points={{58,20},{42,20}}, color={255,0,255}));
            connect(enaCtlValConWatByp.y, yValConWatByp)
              annotation (Line(points={{192,100},{260,100}}, color={0,0,127}));
            connect(allCloAndChaAndEna.y, enaCtlValConWatByp.u2) annotation (Line(points={
                    {18,20},{12,20},{12,100},{168,100}}, color={255,0,255}));
            connect(ctlTConWatConRet.y, enaCtlValConWatByp.u1) annotation (Line(points={{-68,
                    180},{-60,180},{-60,140},{160,140},{160,108},{168,108}}, color={0,0,127}));
            connect(isChaAss.y, allCloAndChaAndEna.u[nChi + 1]) annotation (Line(points={{
                    -148,160},{50,160},{50,20},{42,20}}, color={255,0,255}));
            connect(zer2.y, enaCtlValConWatByp.u3) annotation (Line(points={{152,80},{160,
                    80},{160,92},{168,92}}, color={0,0,127}));
            connect(yValConWatByp, isOpe4.u) annotation (Line(points={{260,100},{220,100},
                    {220,140},{192,140}}, color={0,0,127}));
            connect(isOpe4.y, enaPumConWatCon.u[nChi+nChiHea+1]) annotation (Line(points={{168,140},{164,
                    140},{164,300},{168,300}}, color={255,0,255}));
            connect(u1CooOrHea, allCloAndChaAndEna.u[nChi+2]) annotation (Line(points={{-260,-40},
                    {-4,-40},{-4,0},{50,0},{50,20},{42,20}}, color={255,0,255}));
            annotation (
            defaultComponentName="valCmd",
            Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-200},{100,200}}),
                                   graphics={
                  Rectangle(
                    extent={{-100,-202},{100,200}},
                    lineColor={0,0,127},
                    fillColor={255,255,255},
                    fillPattern=FillPattern.Solid),
                  Text(
                    textColor={0,0,255},
                    extent={{-150,210},{150,250}},
                    textString="%name")}), Diagram(coordinateSystem(preserveAspectRatio=false,
                    extent={{-240,-520},{240,520}})),
              Documentation(info="<html>
<p>
This block implements the control logic for the chiller isolation valves,
the HRC isolation and switchover valves, the CHW and HW minimum flow
bypass valves, the HRC evaporator CW mixing valve, and the
CW chiller bypass valve.
It also computes the lead pump Enable signal for the CHW, HW, CWC and CWE
pump groups.
</p>
<h4>Chiller evaporator isolation valve</h4>
<p>
When a chiller is enabled, the valve position is controlled as follows.
</p>
<ul>
<li>
If no HRC is concurrently operating and connected to the CHW loop,
the valve is commanded to a fully open position,
</li>
<li>
If any HRC is concurrently operating in cascading cooling mode,
but no HRC is in direct heat recovery mode, the valve is
commanded to a fixed position ensuring flow balancing proportionally to
design flow.
</li>
<li>
If any HRC is concurrently operating in direct heat recovery mode, the valve
is modulated with a control loop tracking an evaporator flow setpoint
which is reset as described hereunder.
The loop output is mapped to a valve position of <i>10&nbsp;%</i> (resp. <i>100&nbsp;%</i>)
at <i>0&nbsp;%</i> (resp. <i>100&nbsp;%</i>) output signal.
The loop is biased to launch from <i>100&nbsp;%</i>.
</li>
</ul>
<p>Otherwise, the valve is commanded to a closed position.</p>
<h5>Chiller evaporator flow setpoint</h5>
<p>
The setpoint is computed based on the logic implemented in
<a href=\"modelica://Buildings.Experimental.DHC.Plants.Combined.Controls.BaseClasses.DirectHeatRecovery\">
Buildings.Experimental.DHC.Plants.Combined.Controls.BaseClasses.DirectHeatRecovery</a>.
</p>
<h4>Chiller condenser isolation valve</h4>
<p>
When a chiller is enabled, the condenser isolation valve is modulated with a
control loop tracking a condenser flow setpoint which is reset as described hereunder.
The loop output is mapped to a valve position of <i>10&nbsp;%</i> (resp. <i>100&nbsp;%</i>)
at <i>0&nbsp;%</i> (resp. <i>100&nbsp;%</i>) output signal.
The loop is biased to launch from <i>100&nbsp;%</i>.
</p>
<p>Otherwise, the valve is commanded to a closed position.</p>
<h5>Chiller condenser flow setpoint</h5>
<p>
The condenser flow setpoint varies based on the condenser loop mode and
on the tank cycle index.
</p>
<ul>
<li>
When the condenser loop mode is Charge Assist, a control loop
maintains the condenser loop return temperature at a target setpoint
equal to the highest temperature setpoint of the active tank cycle.
The loop output is mapped to a flow setpoint of <i>10&nbsp;%</i> (resp. <i>100&nbsp;%</i>)
of design flow at <i>0&nbsp;%</i> (resp. <i>100&nbsp;%</i>) output signal.
The loop is biased to launch from <i>20&nbsp;%</i>.
</li>
<li>
When the condenser loop mode is Tank Charge/Discharge, a control loop
maintains the chiller condenser leaving temperature at target setpoint equal
to the highest temperature setpoint of the active tank cycle.
The loop output is mapped to a flow setpoint of <i>5&nbsp;%</i> (resp. <i>100&nbsp;%</i>)
of design flow at <i>0&nbsp;%</i> (resp. <i>100&nbsp;%</i>) output signal.
The loop is biased to launch from <i>50&nbsp;%</i>.
</li>
<li>
When the condenser loop mode is Heat Rejection, the condenser flow setpoint
is set at design value.
</li>
</ul>
<h4>HRC evaporator isolation valve</h4>
<p>
When a HRC is enabled, the valve position is controlled as follows.
</p>
<ul>
<li>
If the HRC is operating in cascading cooling mode, the valve is commanded
to a fixed position ensuring flow balancing proportionally to
design flow.
</li>
<li>
If the HRC is operating either in cascading heating mode or in direct
heat recovery mode, the valve is modulated with a control loop tracking
an evaporator flow setpoint which is reset as described hereunder.
The loop output is mapped to a valve position of <i>10&nbsp;%</i> (resp. <i>100&nbsp;%</i>)
at <i>0&nbsp;%</i> (resp. <i>100&nbsp;%</i>) output signal.
The loop is biased to launch from <i>100&nbsp;%</i>.
</li>
</ul>
<p>Otherwise, the valve is commanded to a closed position.</p>
<h5>HRC evaporator flow setpoint</h5>
<p>In direct heat recovery mode, the setpoint is reset based on the logic implemented in
<a href=\"modelica://Buildings.Experimental.DHC.Plants.Combined.Controls.BaseClasses.DirectHeatRecovery\">
Buildings.Experimental.DHC.Plants.Combined.Controls.BaseClasses.DirectHeatRecovery</a>.</p>
<p>In cascading heating mode, the setpoint is reset with a control loop
that maintains the evaporator leaving temperature at target setpoint
equal to the lowest temperature setpoint of the active tank cycle.
The loop output is mapped as follows.
From <i>0&nbsp;%</i> to <i>50&nbsp;%</i>, the HRC evaporator
CW mixing valve commanded position is reset from <i>0&nbsp;%</i> (full bypass flow)
to <i>100&nbsp;%</i> (no bypass flow).
From <i>50&nbsp;%</i> to <i>100&nbsp;%</i>, the
evaporator flow setpoint is reset from minimum to design value.
The loop is biased to launch from <i>75&nbsp;%</i>.
When disabled, the loop output is set to <i>75&nbsp;%</i> to
ensure that the HRC evaporator CW mixing valve is fully open
(no bypass flow).
</p>
<h4>HRC condenser isolation valve</h4>
<p>
When a HRC is enabled, the valve position is controlled as follows.
</p>
<ul>
<li>
If the HRC condenser is indexed to the HW loop (cascading heating or
direct heat recovery mode), the valve is commanded to a fully open
position.
</li>
<li>
If the HRC condenser is indexed to the CW loop (cascading cooling mode),
the valve is modulated with a control loop tracking a condenser flow setpoint
which is reset based
on the same logic as for the chiller condenser flow setpoint (see above).
The loop output is mapped to a valve position of <i>10&nbsp;%</i> (resp. <i>100&nbsp;%</i>)
at <i>0&nbsp;%</i> (resp. <i>100&nbsp;%</i>) output signal.
The loop is biased to launch from <i>100&nbsp;%</i>.
</li>
</ul>
<p>Otherwise, the valve is commanded to a closed position.</p>
<h4>HRC condenser and evaporator switchover valve</h4>
<p>
Each valve is commanded to a fully open or fully closed position depending
on the valve index and the current operating mode of the HRC (cascading cooling,
cascading heating or direct heat recovery).
In addition, the condenser switchover valve indexed to the HRC which is nearest to the
interconnection with the condenser loop (highest index) and which is operating
in direct heat recovery mode is modulated with a control loop tracking
the condenser entering temperature.
The condenser entering temperature setpoint is reset based on the logic implemented in
<a href=\"modelica://Buildings.Experimental.DHC.Plants.Combined.Controls.BaseClasses.DirectHeatRecovery\">
Buildings.Experimental.DHC.Plants.Combined.Controls.BaseClasses.DirectHeatRecovery</a>.
This allows false loading the HRC that is controlled to meet the HW supply
temperature setpoint in direct heat recovery mode, and thus meeting
the CHW supply temperature setpoint simultaneously.
</p>
<h4>HRC evaporator CW mixing valve</h4>
<p>
The valve is modulated based on two control loops:
the HRC evaporator leaving temperature control loop (see the section
<i>HRC evaporator flow setpoint</i>) and another control loop that maintains
the HRC evaporator entering water temperature below the highest tank temperature
setpoint.
This latter control loop is enabled when any HRC is operating in cascading
heating mode.
When the loop is enabled, the loop output is mapped to a valve position
of <i>100&nbsp;%</i> (resp. <i>0&nbsp;%</i>) at <i>0&nbsp;%</i> (resp. <i>100&nbsp;%</i>)
output signal.
When the loop is disabled, the loop output is set to <i>100&nbsp;%</i> (no bypass flow).
The valve control signal is the minimum (maximum bypass flow) of the resulting
signals of those two control loops.
</p>
<h4>CHW and HW minimum flow bypass valve</h4>
<p>
Each chiller and HRC has its own CHW (resp. HW) minimum flow control loop.
The loop is enabled whenever the unit's evaporator (resp. condenser) is indexed
to the CHW (resp. HW) loop and its evaporator (resp. condenser) isolation valve
is commanded open (with a threshold of <i>10&nbsp;%</i>).
When enabled, each loop tracks a flow setpoint equal to <i>1.1</i> times the
minimum CHW (resp. HW) flow rate.
When disabled, each loop output is set to <i>0&nbsp;%</i>.
The valve control signal is the maximum (maximum bypass flow) of the resulting
signals of all control loops.
</p>
<h4>CW chiller bypass valve</h4>
<p>
The valve control is enabled when the plant is enabled either in cooling or
heating mode, the Charge Assist mode is active and
all chiller condenser isolation valves are closed (based on their
commanded position).
</p>
<p>
When the valve control is enabled the valve position is modulated
by the same control loop used to maintain the condenser loop return
temperature at a target setpoint equal to the highest temperature
setpoint of the active tank cycle (see the section \"Chiller condenser flow setpoint\").
</p>
<p>Otherwise, the valve is commanded to a closed position.</p>
<h4>CHW, HW, CWC, CWE lead pump</h4>
<p>
The lead pump of each loop is enabled whenever any chiller or HRC is indexed
to the loop and the corresponding evaporator or condenser isolation valve is
commanded open (with a threshold of <i>10&nbsp;%</i>).
In addition, the CWC lead pump may also be enabled if the CW chiller
bypass valve is commanded open.
</p>
</html>",           revisions="<html>
<ul>
<li>
February 24, 2023, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>"));
          end ValveCondenserEvaporator;

          package Validation "Package with validation models"
            extends Modelica.Icons.ExamplesPackage;

            model StageIndex
              extends Modelica.Icons.Example;

              estcp.DHC.Plants.Combined.Controls.BaseClasses.StageIndex sta(nSta=3,
                  tSta=60) "Staging" annotation (Placement(transformation(
                      extent={{-10,-10},{10,10}})));
              Buildings.Controls.OBC.CDL.Logical.Sources.TimeTable booTimTab(
                table=[0,0,0,0; 1,1,0,0; 2,1,1,1; 3,0,1,1; 4,1,0,0; 5,1,0,1; 6,1,1,0; 7,1,0,
                    1],
                timeScale=100,
                period=1000) "Source signal"
                annotation (Placement(transformation(extent={{-60,-10},{-40,10}})));
            equation
              connect(booTimTab.y[1], sta.u1) annotation (Line(points={{-38,0},{-20,0},{-20,
                      6},{-12,6}}, color={255,0,255}));
              connect(booTimTab.y[2], sta.u1Up)
                annotation (Line(points={{-38,0},{-12,0}}, color={255,0,255}));
              connect(booTimTab.y[3], sta.u1Dow) annotation (Line(points={{-38,0},{-20,0},{-20,
                      -5.8},{-12,-5.8}}, color={255,0,255}));

            annotation (
                __Dymola_Commands(
                  file="modelica://Buildings/Resources/Scripts/Dymola/Experimental/DHC/Plants/Combined/Controls/BaseClasses/Validation/StageIndex.mos"
                  "Simulate and plot"),
                experiment(
                  StopTime=1000,
                  Tolerance=1e-06),
                Documentation(info="<html>
<p>
This is a validation model for the block
<a href=\"modelica://Buildings.Experimental.DHC.Plants.Combined.Controls.BaseClasses.StageIndex\">
Buildings.Experimental.DHC.Plants.Combined.Controls.BaseClasses.StageIndex</a>.
</p>
</html>",             revisions="<html>
<ul>
<li>
February 24, 2023, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>"));
            end StageIndex;

            model StagingPlant "Validation of plant staging block"
              extends Modelica.Icons.Example;

              parameter Integer nChi(final min=1, start=1)=2
                "Number of units operating at design conditions"
                annotation (Dialog(group="CHW loop and cooling-only chillers"),
                  Evaluate=true);
              parameter Modelica.Units.SI.HeatFlowRate QChiWatChi_flow_nominal=-4.4E6
                "Cooling design heat flow rate of cooling-only chillers (all units)"
                annotation (Dialog(group="CHW loop and cooling-only chillers"));
              parameter Integer nChiHea(final min=1, start=1)=3
                "Number of units operating at design conditions"
                annotation (Dialog(group="HW loop and heat recovery chillers"),
                  Evaluate=true);
              parameter Real PLRStaTra(final unit="1", final min=0, final max=1) = 0.85
                "Part load ratio triggering stage transition";
              parameter Modelica.Units.SI.HeatFlowRate QChiWatCasCoo_flow_nominal=-6E6
                "Cooling design heat flow rate of HRC in cascading cooling mode (all units)"
                annotation (Dialog(group="HW loop and heat recovery chillers"));
              parameter Modelica.Units.SI.HeatFlowRate QHeaWat_flow_nominal=6.4E6
                "Heating design heat flow rate (all units)"
                annotation (Dialog(group="HW loop and heat recovery chillers"));
              final parameter Modelica.Units.SI.HeatFlowRate mChiWat_flow_nominal=
                abs(QChiWatChi_flow_nominal+QChiWatCasCoo_flow_nominal) /
                Buildings.Utilities.Psychrometrics.Constants.cpWatLiq /
                5
                "CHW design mass flow rate"
                annotation (Dialog(group="CHW loop and cooling-only chillers"));
              final parameter Modelica.Units.SI.HeatFlowRate mHeaWat_flow_nominal=
                QHeaWat_flow_nominal /
                Buildings.Utilities.Psychrometrics.Constants.cpWatLiq /
                10
                "HW design mass flow rate"
                annotation (Dialog(group="HW loop and heat recovery chillers"));

              BaseClasses.StagingPlant
                staChi(
                final nChi=nChi,
                final nChiHea=nChiHea,
                final QChiWatChi_flow_nominal=QChiWatChi_flow_nominal,
                final QChiWatCasCoo_flow_nominal=QChiWatCasCoo_flow_nominal,
                QChiWatCasCoo_flow_nominal_approx=QChiWatCasCoo_flow_nominal,
                final QHeaWat_flow_nominal=QHeaWat_flow_nominal) "Chiller staging block"
                annotation (Placement(transformation(extent={{80,-10},{100,10}})));
              Buildings.Controls.OBC.CDL.Reals.Sources.TimeTable ratFlo(table=[0,0,0; 1,
                    0,0; 4,0.3,0.1; 5,1,0.1; 10,0.1,0.1; 13,1,0.3; 16,0.3,1;20,0.1,0.1; 24,0.1,0.3; 25,
                    0.1,1; 30,0,0],
                timeScale=1000) "Source signal"
                annotation (Placement(transformation(extent={{-100,10},{-80,30}})));
              Modelica.Blocks.Sources.BooleanExpression u1(y=time > 0)
                "Enable signal"
                annotation (Placement(transformation(extent={{-100,70},{-80,90}})));
              Buildings.Controls.OBC.CDL.Reals.Sources.Constant TChiWatSupSet(k=7 + 273.15)
                "Source signal"
                annotation (Placement(transformation(extent={{-60,-30},{-40,-10}})));
              Buildings.Controls.OBC.CDL.Reals.Sources.Constant TChiWatPriRet(k=12 + 273.15)
                "Source signal"
                annotation (Placement(transformation(extent={{-100,-50},{-80,-30}})));
              Buildings.Controls.OBC.CDL.Reals.Sources.Constant THeaWatSupSet(k=60 + 273.15)
                "Source signal"
                annotation (Placement(transformation(extent={{-60,-70},{-40,-50}})));
              Buildings.Controls.OBC.CDL.Reals.Sources.Constant THeaWatPriRet(k=50 + 273.15)
                "Source signal"
                annotation (Placement(transformation(extent={{-100,-90},{-80,-70}})));
              Buildings.Controls.OBC.CDL.Reals.MultiplyByParameter sca(final k=
                    mChiWat_flow_nominal) "Scale signal"
                annotation (Placement(transformation(extent={{12,30},{32,50}})));
              Buildings.Controls.OBC.CDL.Reals.MultiplyByParameter sca1(final k=
                    mHeaWat_flow_nominal) "Scale signal"
                annotation (Placement(transformation(extent={{12,-10},{32,10}})));
              Buildings.Controls.OBC.CDL.Reals.Sources.Constant dpSet(k=20E4)
                "Source signal"
                annotation (Placement(transformation(extent={{-60,-110},{-40,-90}})));
            equation
              connect(u1.y, staChi.u1Coo) annotation (Line(points={{-79,80},{60,80},{60,
                      8.875},{78,8.875}},
                           color={255,0,255}));
              connect(u1.y, staChi.u1Hea) annotation (Line(points={{-79,80},{60,80},{60,
                      7.625},{78,7.625}},
                           color={255,0,255}));
              connect(TChiWatSupSet.y, staChi.TChiWatSupSet) annotation (Line(points={{-38,-20},
                      {40,-20},{40,5},{78,5}},
                                             color={0,0,127}));
              connect(THeaWatPriRet.y, staChi.THeaWatPriRet) annotation (Line(points={{-78,-80},
                      {50,-80},{50,-6.25},{78,-6.25}},
                                                 color={0,0,127}));
              connect(THeaWatSupSet.y, staChi.THeaWatSupSet) annotation (Line(points={{-38,-60},
                      {48,-60},{48,-3.75},{78,-3.75}},
                                               color={0,0,127}));
              connect(TChiWatPriRet.y, staChi.TChiWatPriRet) annotation (Line(points={{-78,-40},
                      {42,-40},{42,2.5},{78,2.5}},
                                               color={0,0,127}));
              connect(sca.y, staChi.mChiWatPri_flow)
                annotation (Line(points={{34,40},{40,40},{40,6.25},{78,6.25}},
                                                                       color={0,0,127}));
              connect(sca1.y, staChi.mHeaWatPri_flow) annotation (Line(points={{34,0},{38,0},
                      {38,-2.5},{78,-2.5}}, color={0,0,127}));
              connect(TChiWatSupSet.y, staChi.TChiWatSup) annotation (Line(points={{-38,-20},
                      {40,-20},{40,3.75},{78,3.75}},       color={0,0,127}));
              connect(dpSet.y, staChi.dpChiWat) annotation (Line(points={{-38,-100},{46,
                      -100},{46,0},{78,0}}, color={0,0,127}));
              connect(dpSet.y, staChi.dpChiWatSet) annotation (Line(points={{-38,-100},{46,
                      -100},{46,1.25},{78,1.25}}, color={0,0,127}));
              connect(dpSet.y, staChi.dpHeaWatSet) annotation (Line(points={{-38,-100},{
                      45.8824,-100},{45.8824,-7.5},{78,-7.5}}, color={0,0,127}));
              connect(dpSet.y, staChi.dpHeaWat) annotation (Line(points={{-38,-100},{
                      45.8824,-100},{45.8824,-8.75},{78,-8.75}}, color={0,0,127}));
              connect(THeaWatSupSet.y, staChi.THeaWatSup) annotation (Line(points={{-38,-60},
                      {47.8431,-60},{47.8431,-5},{78,-5}}, color={0,0,127}));
              connect(ratFlo.y[1], sca.u) annotation (Line(points={{-78,20},{0,20},{0,40},{
                      10,40}}, color={0,0,127}));
              connect(ratFlo.y[2], sca1.u)
                annotation (Line(points={{-78,20},{0,20},{0,0},{10,0}}, color={0,0,127}));
                      annotation (
                          __Dymola_Commands(
                  file="modelica://Buildings/Resources/Scripts/Dymola/Experimental/DHC/Plants/Combined/Controls/BaseClasses/Validation/StagingPlant.mos"
                  "Simulate and plot"),
                experiment(
                  StopTime=30000,
                  Tolerance=1e-06),
                Diagram(coordinateSystem(extent={{-120,-120},{120,120}})),
                Documentation(info="<html>
<p>
This is a validation model for the plant staging logic implemented in
<a href=\"modelica://Buildings.Experimental.DHC.Plants.Combined.Controls.BaseClasses.StagingPlant\">
Buildings.Experimental.DHC.Plants.Combined.Controls.BaseClasses.StagingPlant</a>.
</p>
</html>",             revisions="<html>
<ul>
<li>
February 24, 2023, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>"));
            end StagingPlant;

            model StagingPump "Validation of pump staging block"
              extends Modelica.Icons.Example;

              parameter Integer nPum(
                final min=1,
                start=1)=3
                "Number of pumps"
                annotation(Evaluate=true);
              parameter Integer nChi(
                final min=1,
                start=1)=1
                "Number of chillers served by the pumps"
                annotation(Evaluate=true);
              parameter Modelica.Units.SI.MassFlowRate m_flow_nominal=1
                annotation(Dialog(group="Nominal condition"));

              Buildings.Controls.OBC.CDL.Reals.Sources.TimeTable floSpe(
                table=[
                  0,0,0;
                  1,0,0;
                  4,(nPum - 1)/nPum*m_flow_nominal,1;
                  5,m_flow_nominal,0.9;
                  10,0,0.1],
                timeScale=500)
                "Source signal"
                annotation (Placement(transformation(extent={{-80,30},{-60,50}})));
              estcp.DHC.Plants.Combined.Controls.BaseClasses.StagingPump staDet(final
                  nPum=nPum, final m_flow_nominal=m_flow_nominal)
                "Pump staging block - Detailed version" annotation (Placement(
                    transformation(extent={{40,-10},{60,10}})));
              Buildings.Controls.OBC.CDL.Reals.Sources.Constant yVal(k=1)
                "Source signal"
                annotation (Placement(transformation(extent={{-80,-10},{-60,10}})));
              Buildings.Controls.OBC.CDL.Reals.GreaterThreshold isOpe(t=0.1,
                h=5E-2) "Check if valve open"
                annotation (Placement(transformation(extent={{-40,-10},{-20,10}})));
            equation
              connect(floSpe.y[1],staDet. m_flow) annotation (Line(points={{-58,40},{30,40},
                      {30,0},{38,0}},     color={0,0,127}));
              connect(floSpe.y[2],staDet. y)
                annotation (Line(points={{-58,40},{30,40},{30,-6},{38,-6}},
                                                             color={0,0,127}));
              connect(yVal.y, isOpe.u)
                annotation (Line(points={{-58,0},{-42,0}}, color={0,0,127}));
              connect(isOpe.y,staDet.y1Ena)
                annotation (Line(points={{-18,0},{0,0},{0,6},{38,6}}, color={255,0,255}));
              annotation (
                __Dymola_Commands(
                  file="modelica://Buildings/Resources/Scripts/Dymola/Experimental/DHC/Plants/Combined/Controls/BaseClasses/Validation/StagingPump.mos"
                  "Simulate and plot"),
                experiment(
                  StopTime=5000,
                  Tolerance=1e-06),
              Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
                    coordinateSystem(preserveAspectRatio=false)),
                Documentation(info="<html>
<p>
This is a validation model for the pump staging logic implemented in
<a href=\"modelica://Buildings.Experimental.DHC.Plants.Combined.Controls.BaseClasses.StagingPump\">
Buildings.Experimental.DHC.Plants.Combined.Controls.BaseClasses.StagingPump</a>.
</p>
</html>",             revisions="<html>
<ul>
<li>
February 24, 2023, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>"));
            end StagingPump;
            annotation (Documentation(info="<html>
<p>
This package contains validation models.
</p>
</html>"));
          end Validation;
          annotation (Documentation(info="<html>
<p>
This package contains base classes that are used to construct
the main plant controller.
Those include an interface class for the controller as well
as blocks that implement the sequence of operation for each
component of the plant.
</p>
</html>"));
        end BaseClasses;
        annotation (Documentation(info="<html>
<p>
This package contains control blocks for combined heating and cooling plants.
</p>
</html>"));
      end Controls;

      package Subsystems "Package of models for subsystems of combined plants"
        extends Modelica.Icons.VariantsPackage;

        model ChillerGroup
          "Model of multiple identical chillers in parallel"
          extends Buildings.Fluid.Interfaces.PartialFourPortInterface(
            final m1_flow_nominal = mConWat_flow_nominal,
            final m2_flow_nominal = mChiWat_flow_nominal);

          parameter Integer nUni(final min=1, start=1)
            "Number of units operating at design conditions"
            annotation(Evaluate=true);
          final parameter Modelica.Units.SI.Temperature TChiWatSup_nominal=
            dat.TEvaLvg_nominal
            "Design (minimum) CHW supply temperature";
          final parameter Modelica.Units.SI.Temperature TConWatLvg_nominal=
            dat.TConLvg_nominal
            "Design (maximum) CW leaving temperature";
          final parameter Modelica.Units.SI.HeatFlowRate QChiWatUni_flow_nominal=
            dat.QEva_flow_nominal
            "Design cooling heat flow rate (each unit, <0)"
            annotation(Dialog(group="Nominal condition"));
          final parameter Modelica.Units.SI.HeatFlowRate QConWatUni_flow_nominal=
            -dat.QEva_flow_nominal * (1 + 1 / dat.COP_nominal * dat.etaMotor)
            "Design CW heat flow rate (each unit, >0)"
            annotation(Dialog(group="Nominal condition"));
          final parameter Modelica.Units.SI.HeatFlowRate QChiWat_flow_nominal=
            nUni * QChiWatUni_flow_nominal
            "Design cooling heat flow rate (all units, <0)"
            annotation(Dialog(group="Nominal condition"));
          final parameter Modelica.Units.SI.HeatFlowRate QConWat_flow_nominal=
            nUni * QConWatUni_flow_nominal
            "Design CW heat flow rate (all units, >0)"
            annotation(Dialog(group="Nominal condition"));
          final parameter Modelica.Units.SI.MassFlowRate mChiWatUni_flow_nominal(
            final min=0)=dat.mEva_flow_nominal
            "Design chiller CHW mass flow rate (each unit)"
            annotation(Dialog(group="Nominal condition"));
          final parameter Modelica.Units.SI.MassFlowRate mConWatUni_flow_nominal(
            final min=0)=dat.mCon_flow_nominal
            "Design chiller CW mass flow rate (each unit)"
            annotation(Dialog(group="Nominal condition"));
          final parameter Modelica.Units.SI.MassFlowRate mChiWat_flow_nominal(
            final min=0)=nUni * mChiWatUni_flow_nominal
            "Design CHW mass flow rate (all units)"
            annotation(Dialog(group="Nominal condition"));
          final parameter Modelica.Units.SI.MassFlowRate mConWat_flow_nominal(
            final min=0)=nUni * mConWatUni_flow_nominal
            "Design CW mass flow rate (all units)"
            annotation(Dialog(group="Nominal condition"));
          parameter Modelica.Units.SI.PressureDifference dpEva_nominal(displayUnit="Pa")
            "Design chiller evaporator pressure drop (each unit)"
            annotation(Dialog(group="Nominal condition"));
          parameter Modelica.Units.SI.PressureDifference dpCon_nominal(displayUnit="Pa")
            "Chiller condenser design pressure drop (each unit)"
            annotation(Dialog(group="Nominal condition"));

          replaceable parameter
            Buildings.Fluid.Chillers.Data.ElectricReformulatedEIR.Generic dat
            "Chiller parameters (each unit)" annotation (Placement(
                transformation(extent={{-10,-134},{10,-114}})));

          // Assumptions
          parameter Modelica.Fluid.Types.Dynamics energyDynamics=
            Modelica.Fluid.Types.Dynamics.DynamicFreeInitial
            "Type of energy balance: dynamic (3 initialization options) or steady state"
            annotation(Evaluate=true, Dialog(tab = "Dynamics", group="Conservation equations"));

          parameter Boolean use_inputFilter=energyDynamics<>Modelica.Fluid.Types.Dynamics.SteadyState
            "= true, if opening is filtered with a 2nd order CriticalDamping filter"
            annotation(Dialog(tab="Dynamics", group="Filtered opening"));
          parameter Modelica.Units.SI.Time riseTime=120
            "Rise time of the filter (time to reach 99.6 % of an opening step)"
            annotation (Dialog(
              tab="Dynamics",
              group="Filtered opening",
              enable=use_inputFilter));
          parameter Modelica.Blocks.Types.Init init=Modelica.Blocks.Types.Init.InitialOutput
            "Type of initialization (no init/steady state/initial state/initial output)"
            annotation(Dialog(tab="Dynamics", group="Filtered opening",enable=use_inputFilter));
          parameter Real y_start=1 "Initial position of actuator"
            annotation(Dialog(tab="Dynamics", group="Filtered opening",enable=use_inputFilter));

          Buildings.Controls.OBC.CDL.Interfaces.BooleanInput y1[nUni]
            "Chiller On/Off command"
            annotation (Placement(transformation(extent={{-140,
                    100},{-100,140}}), iconTransformation(extent={{-140,70},{-100,110}})));
          Buildings.Controls.OBC.CDL.Interfaces.RealInput TSet(
            final unit="K", displayUnit="degC")
            "Supply temperature setpoint"
            annotation (Placement(transformation(extent={{-140,-110},{-100,-70}}),
              iconTransformation(extent={{-140,-110},{-100, -70}})));
          Buildings.Controls.OBC.CDL.Interfaces.RealOutput P(
            final unit="W")
            "Power drawn"
            annotation (Placement(transformation(extent={{100,0},{140,40}}),
              iconTransformation(extent={{100,70},{140,110}})));
          Buildings.Controls.OBC.CDL.Interfaces.RealInput yValCon[nUni](
            each final unit="1", each final min=0, each final max=1)
            "Chiller condenser isolation valve commanded position"
            annotation (
              Placement(transformation(
                extent={{-20,-20},{20,20}},
                rotation=-90,
                origin={0,178}),  iconTransformation(
                extent={{-20,-20},{20,20}},
                rotation=-90,
                origin={-60,120})));
          Buildings.Controls.OBC.CDL.Interfaces.RealInput yValEva[nUni](
            each final unit="1", each final min=0, each final max=1)
            "Chiller evaporator isolation valve commanded position"
            annotation (
              Placement(transformation(
                extent={{20,-20},{-20,20}},
                rotation=-90,
                origin={0,-180}),   iconTransformation(
                extent={{-20,-20},{20,20}},
                rotation=90,
                origin={-58,-120})));
          Buildings.Controls.OBC.CDL.Interfaces.RealOutput TConLvg[nUni](each final
              unit="K", each displayUnit="degC")
            "Chiller condenser leaving temperature" annotation (Placement(
                transformation(
                extent={{20,-20},{-20,20}},
                rotation=-90,
                origin={40,180}), iconTransformation(
                extent={{-20,-20},{20,20}},
                rotation=90,
                origin={60,120})));
          Buildings.Controls.OBC.CDL.Interfaces.RealOutput mCon_flow[nUni](
            each final unit="kg/s")
            "Chiller condenser barrel mass flow rate" annotation (
              Placement(transformation(
                extent={{20,-20},{-20,20}},
                rotation=-90,
                origin={60,180}), iconTransformation(
                extent={{-20,-20},{20,20}},
                rotation=90,
                origin={80,120})));
          Buildings.Controls.OBC.CDL.Interfaces.RealOutput TEvaLvg[nUni](each final
              unit="K", each displayUnit="degC")
            "Chiller evaporator leaving temperature" annotation (Placement(
                transformation(
                extent={{-20,-20},{20,20}},
                rotation=-90,
                origin={40,-180}), iconTransformation(
                extent={{-20,-20},{20,20}},
                rotation=-90,
                origin={60,-120})));
          Buildings.Controls.OBC.CDL.Interfaces.RealOutput mEva_flow[nUni](
            each final unit="kg/s")
            "Chiller evaporator barrel mass flow rate" annotation (
              Placement(transformation(
                extent={{-20,-20},{20,20}},
                rotation=-90,
                origin={60,-180}), iconTransformation(
                extent={{-20,-20},{20,20}},
                rotation=-90,
                origin={80,-120})));

          Buildings.Fluid.Chillers.ElectricReformulatedEIR chi(
            PLR1(start=0),
            final per=dat,
            redeclare final package Medium1 = Medium1,
            redeclare final package Medium2 = Medium2,
            final have_switchover=false,
            final dp1_nominal=0,
            final dp2_nominal=0,
            final allowFlowReversal1=allowFlowReversal1,
            final allowFlowReversal2=allowFlowReversal2,
            final energyDynamics=energyDynamics,
            final show_T=show_T) "Chiller"
            annotation (Placement(transformation(extent={{-4,-10},{16,10}})));
          Buildings.Fluid.BaseClasses.MassFlowRateMultiplier mulConInl(
            redeclare final package Medium = Medium1,
            final allowFlowReversal=allowFlowReversal1,
            final use_input=true) "Flow rate multiplier"
            annotation (Placement(transformation(extent={{-50,50},{-30,70}})));
          Buildings.Fluid.BaseClasses.MassFlowRateMultiplier mulConOut(
            redeclare final package Medium = Medium1,
            final allowFlowReversal=allowFlowReversal1,
            final use_input=true) "Flow rate multiplier"
            annotation (Placement(transformation(extent={{30,50},{50,70}})));
          Buildings.Fluid.BaseClasses.MassFlowRateMultiplier mulEvaInl(
            redeclare final package Medium = Medium2,
            final allowFlowReversal=allowFlowReversal2,
            final use_input=true) "Flow rate multiplier"
            annotation (Placement(transformation(extent={{50,-70},{30,-50}})));
          Buildings.Fluid.BaseClasses.MassFlowRateMultiplier mulEvaOut(
            redeclare final package Medium = Medium2,
            final allowFlowReversal=allowFlowReversal2,
            final use_input=true) "Flow rate multiplier" annotation (Placement(
                transformation(extent={{-30,-70},{-50,-50}})));
          BaseClasses.MultipleCommands com(
            final nUni=nUni)
            "Convert command signals"
            annotation (Placement(transformation(extent={{-80,110},{-60,130}})));
          BaseClasses.MultipleValves valEva(
            redeclare final package Medium = Medium2,
            redeclare final Buildings.Fluid.Actuators.Valves.TwoWayLinear val,
            linearized=true,
            final nUni=nUni,
            final mUni_flow_nominal=mChiWatUni_flow_nominal,
            final dpFixed_nominal=dpEva_nominal,
            dpValve_nominal=1E3,
            final allowFlowReversal=allowFlowReversal2,
            final energyDynamics=energyDynamics,
            final use_inputFilter=use_inputFilter,
            final riseTime=riseTime,
            final init=init,
            final y_start=y_start,
            final show_T=show_T)
            "Chiller evaporator isolation valves"
            annotation (Placement(transformation(extent={{-70,-50},{-90,-70}})));
          BaseClasses.MultipleValves valCon(
            redeclare final package Medium = Medium1,
            redeclare final Buildings.Fluid.Actuators.Valves.TwoWayLinear val,
            linearized=true,
            final nUni=nUni,
            final mUni_flow_nominal=mConWatUni_flow_nominal,
            final dpFixed_nominal=dpCon_nominal,
            dpValve_nominal=1E3,
            final allowFlowReversal=allowFlowReversal1,
            final energyDynamics=energyDynamics,
            final use_inputFilter=use_inputFilter,
            final riseTime=riseTime,
            final init=init,
            final y_start=y_start,
            final show_T=show_T)
            "Chiller condenser isolation valves"
            annotation (Placement(transformation(extent={{70,50},{90,70}})));
          Buildings.Controls.OBC.CDL.Reals.Multiply mulP "Scale power"
            annotation (Placement(transformation(extent={{70,30},{90,10}})));
          Buildings.Fluid.Sensors.TemperatureTwoPort temConLvg(
            redeclare final package Medium = Medium1,
            final m_flow_nominal=mConWatUni_flow_nominal,
            final allowFlowReversal=allowFlowReversal1)
            "Chiller condenser leaving temperature" annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=90,
                origin={20,20})));
          Buildings.Fluid.Sensors.TemperatureTwoPort temEvaLvg(
            redeclare final package Medium = Medium2,
            final m_flow_nominal=mChiWatUni_flow_nominal,
            final allowFlowReversal=allowFlowReversal2)
            "Chiller evaporator leaving temperature" annotation (Placement(
                transformation(
                extent={{10,10},{-10,-10}},
                rotation=90,
                origin={-20,-20})));
          Buildings.Fluid.Sensors.MassFlowRate floCon(redeclare final package
              Medium = Medium1, final allowFlowReversal=allowFlowReversal1)
            "Chiller condenser barrel mass flow rate" annotation (Placement(
                transformation(
                extent={{-10,10},{10,-10}},
                rotation=90,
                origin={20,40})));
          Buildings.Fluid.Sensors.MassFlowRate floEva(redeclare final package
              Medium = Medium2, final allowFlowReversal=allowFlowReversal2)
            "Chiller evaporator barrel mass flow rate" annotation (Placement(
                transformation(
                extent={{10,10},{-10,-10}},
                rotation=90,
                origin={-20,-40})));
          Buildings.Controls.OBC.CDL.Routing.RealScalarReplicator rep(nout=nUni)
            "Replicate" annotation (Placement(transformation(
                extent={{-10,10},{10,-10}},
                rotation=90,
                origin={40,140})));
          Buildings.Controls.OBC.CDL.Routing.RealScalarReplicator rep1(nout=nUni)
            "Replicate" annotation (Placement(transformation(
                extent={{-10,10},{10,-10}},
                rotation=90,
                origin={60,140})));
          Buildings.Controls.OBC.CDL.Routing.RealScalarReplicator rep2(nout=nUni)
            "Replicate" annotation (Placement(transformation(
                extent={{10,10},{-10,-10}},
                rotation=90,
                origin={60,-140})));
          Buildings.Controls.OBC.CDL.Routing.RealScalarReplicator rep3(nout=nUni)
            "Replicate" annotation (Placement(transformation(
                extent={{10,10},{-10,-10}},
                rotation=90,
                origin={40,-140})));
        equation
          connect(mulEvaInl.port_b,chi. port_a2)
            annotation (Line(points={{30,-60},{20,-60},{20,-6},{16,-6}},
            color={0,127,255}));
          connect(TSet,chi. TSet) annotation (Line(points={{-120,-90},{-10,-90},{-10,-3},
                  {-6,-3}},  color={0,0,127}));
          connect(mulConOut.uInv, mulConInl.u) annotation (Line(points={{51,66},{54,66},
                  {54,80},{-54,80},{-54,66},{-52,66}}, color={0,0,127}));
          connect(mulEvaOut.uInv, mulEvaInl.u) annotation (Line(points={{-51,-54},{-54,-54},
                  {-54,-80},{56,-80},{56,-54},{52,-54}}, color={0,0,127}));
          connect(port_a1, mulConInl.port_a)
            annotation (Line(points={{-100,60},{-50,60}}, color={0,127,255}));
          connect(port_a2, mulEvaInl.port_a)
            annotation (Line(points={{100,-60},{50,-60}}, color={0,127,255}));
          connect(port_b2, valEva.port_b)
            annotation (Line(points={{-100,-60},{-90,-60}}, color={0,127,255}));
          connect(mulEvaOut.port_b, valEva.port_a)
            annotation (Line(points={{-50,-60},{-70,-60}}, color={0,127,255}));
          connect(y1, com.y1) annotation (Line(points={{-120,120},{-82,120}},
                             color={255,0,255}));
          connect(chi.P, mulP.u1) annotation (Line(points={{17,9},{60,9},{60,14},{68,14}},
                         color={0,0,127}));
          connect(com.nUniOn, mulP.u2) annotation (Line(points={{-58,120},{56,120},{56,
                  26},{68,26}},     color={0,0,127}));
          connect(yValCon, valCon.y) annotation (Line(points={{0,178},{0,122},{64,122},
                  {64,66},{68,66}}, color={0,0,127}));
          connect(yValEva, valEva.y) annotation (Line(points={{0,-180},{0,-140},{-60,
                  -140},{-60,-66},{-68,-66}}, color={0,0,127}));

          connect(mulConInl.port_b,chi. port_a1) annotation (Line(points={{-30,60},{-20,
                  60},{-20,6},{-4,6}},  color={0,127,255}));
          connect(mulP.y, P)
            annotation (Line(points={{92,20},{120,20}}, color={0,0,127}));
          connect(com.nUniOnBou, mulConOut.u) annotation (Line(points={{-58,114},{20,114},
                  {20,66},{28,66}},      color={0,0,127}));
          connect(mulConInl.uInv, mulEvaOut.u) annotation (Line(points={{-29,66},{-24,66},
                  {-24,-54},{-28,-54}},     color={0,0,127}));
          connect(com.y1One,chi. on) annotation (Line(points={{-58,126},{-10,126},{-10,3},
                  {-6,3}},                  color={255,0,255}));
          connect(valCon.port_b, port_b1)
            annotation (Line(points={{90,60},{100,60}}, color={0,127,255}));
          connect(mulConOut.port_b, valCon.port_a)
            annotation (Line(points={{50,60},{70,60}}, color={0,127,255}));
          connect(temEvaLvg.port_a, chi.port_b2)
            annotation (Line(points={{-20,-10},{-20,-6},{-4,-6}}, color={0,127,255}));
          connect(chi.port_b1, temConLvg.port_a)
            annotation (Line(points={{16,6},{20,6},{20,10}}, color={0,127,255}));
          connect(temConLvg.port_b, floCon.port_a)
            annotation (Line(points={{20,30},{20,30}}, color={0,127,255}));
          connect(floCon.port_b, mulConOut.port_a)
            annotation (Line(points={{20,50},{20,60},{30,60}}, color={0,127,255}));
          connect(temEvaLvg.port_b, floEva.port_a)
            annotation (Line(points={{-20,-30},{-20,-30}}, color={0,127,255}));
          connect(floEva.port_b, mulEvaOut.port_a) annotation (Line(points={{-20,-50},{
                  -20,-60},{-30,-60}}, color={0,127,255}));
          connect(rep.y, TConLvg)
            annotation (Line(points={{40,152},{40,180}}, color={0,0,127}));
          connect(rep1.y, mCon_flow)
            annotation (Line(points={{60,152},{60,180}}, color={0,0,127}));
          connect(floCon.m_flow, rep1.u)
            annotation (Line(points={{31,40},{60,40},{60,128}}, color={0,0,127}));
          connect(temConLvg.T, rep.u) annotation (Line(points={{9,20},{0,20},{0,100},{
                  40,100},{40,128}}, color={0,0,127}));
          connect(rep3.y, TEvaLvg)
            annotation (Line(points={{40,-152},{40,-180},{40,-180}}, color={0,0,127}));
          connect(rep2.y, mEva_flow) annotation (Line(points={{60,-152},{60,-158},{60,
                  -158},{60,-180}}, color={0,0,127}));
          connect(floEva.m_flow, rep2.u)
            annotation (Line(points={{-9,-40},{60,-40},{60,-128}}, color={0,0,127}));
          connect(temEvaLvg.T, rep3.u) annotation (Line(points={{-9,-20},{24,-20},{24,-120},
                  {40,-120},{40,-128}}, color={0,0,127}));
          annotation (
            defaultComponentName="chi",
            Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                Rectangle(
                  extent={{-100,-100},{100,100}},
                  lineColor={0,0,127},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Rectangle(
                  extent={{-70,80},{70,-80}},
                  lineColor={0,0,255},
                  pattern=LinePattern.None,
                  fillColor={95,95,95},
                  fillPattern=FillPattern.Solid),
                Rectangle(
                  extent={{-44,52},{-40,12}},
                  lineColor={0,0,0},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Rectangle(
                  extent={{-56,70},{58,52}},
                  lineColor={0,0,0},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Polygon(
                  points={{-42,2},{-52,12},{-32,12},{-42,2}},
                  lineColor={0,0,0},
                  smooth=Smooth.None,
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Polygon(
                  points={{-42,2},{-52,-10},{-32,-10},{-42,2}},
                  lineColor={0,0,0},
                  smooth=Smooth.None,
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Rectangle(
                  extent={{-44,-10},{-40,-50}},
                  lineColor={0,0,0},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Rectangle(
                  extent={{38,52},{42,-50}},
                  lineColor={0,0,0},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Rectangle(
                  extent={{-56,-50},{58,-68}},
                  lineColor={0,0,0},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Ellipse(
                  extent={{18,24},{62,-18}},
                  lineColor={0,0,0},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Polygon(
                  points={{40,24},{22,-8},{58,-8},{40,24}},
                  lineColor={0,0,0},
                  smooth=Smooth.None,
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Rectangle(
                  extent={{-44,52},{-40,12}},
                  lineColor={0,0,0},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Rectangle(
                  extent={{-56,70},{58,52}},
                  lineColor={0,0,0},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Polygon(
                  points={{-42,2},{-52,12},{-32,12},{-42,2}},
                  lineColor={0,0,0},
                  smooth=Smooth.None,
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Polygon(
                  points={{-42,2},{-52,-10},{-32,-10},{-42,2}},
                  lineColor={0,0,0},
                  smooth=Smooth.None,
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Rectangle(
                  extent={{-44,-10},{-40,-50}},
                  lineColor={0,0,0},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Rectangle(
                  extent={{38,52},{42,-50}},
                  lineColor={0,0,0},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Rectangle(
                  extent={{-56,-50},{58,-68}},
                  lineColor={0,0,0},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Ellipse(
                  extent={{18,24},{62,-18}},
                  lineColor={0,0,0},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Polygon(
                  points={{40,24},{22,-8},{58,-8},{40,24}},
                  lineColor={0,0,0},
                  smooth=Smooth.None,
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid)}),                      Diagram(
                coordinateSystem(preserveAspectRatio=false, extent={{-100,-160},{100,160}})),
            Documentation(info="<html>
<p>
This model represents a set of identical water-cooled compression chillers
that are piped in parallel.
Modulating isolation valves are included on condenser and evaporator side.
</p>
<h4>Control points</h4>
<p>
The following input and output points are available.
</p>
<ul>
<li>
On/Off command <code>y1</code>:
DO signal dedicated to each unit, with a dimensionality of one
</li>
<li>
CHW supply temperature setpoint <code>TSet</code>:
AO signal common to all units, with a dimensionality of zero
</li>
<li>
Condenser and evaporator isolation valve commanded position <code>yVal(Con|Eva)</code>:
AO signal dedicated to each unit, with a dimensionality of one
</li>
<li>
Condenser and evaporator leaving temperature <code>T(Con|Eva)Lvg</code>:
AI signal dedicated to each unit, with a dimensionality of one
</li>
<li>
Condenser and evaporator mass flow rate <code>m(Con|Eva)_flow</code>:
AI signal dedicated to each unit, with a dimensionality of one
</li>
</ul>
<h4>Details</h4>
<h5>Modeling approach</h5>
<p>
In a parallel arrangement, all operating units have the same operating point,
<i>provided that the isolation valves are commanded to the same position</i>.
This allows modeling the heat transfer through the condenser and evaporator
barrel with a single instance of
<a href=\"modelica://Buildings.Fluid.Chillers.ElectricReformulatedEIR\">
Buildings.Fluid.Chillers.ElectricReformulatedEIR</a>.
Hydronics are resolved with mass flow rate multiplier components in
conjunction with instances of
<a href=\"modelica://Buildings.Experimental.DHC.Plants.Combined.Subsystems.BaseClasses.MultipleValves\">
Buildings.Experimental.DHC.Plants.Combined.Subsystems.BaseClasses.MultipleValves</a>
which represent the parallel network of valves and fixed resistances.
</p>
<h5>Actuators</h5>
<p>
By default, linear valve models are used. Those are configured with
a pressure drop varying linearly with the flow rate, as opposed
to the quadratic dependency usually considered for a turbulent flow
regime.
This is because the whole plant model contains large nonlinear systems
of equations and this configuration limits the risk of solver failure
while reducing the time to solution.
This has no significant impact on the operating point of the circulation pumps
when a control loop is used to modulate the valve opening and maintain
the flow rate or the leaving temperature at setpoint.
Then, whatever the modeling assumptions for the valve, the
control loop ensures that the valve creates the adequate pressure drop
and flow, which will simply be reached at a different valve opening
with the above simplification.
</p>
</html>",         revisions="<html>
<ul>
<li>
February 24, 2023, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>"));
        end ChillerGroup;

        model ChillerHeatRecoveryGroup
          "Model of multiple identical heat recovery chillers in parallel"
          extends Buildings.Fluid.Interfaces.PartialEightPortInterface(
            redeclare final package Medium1=Medium,
            redeclare final package Medium2=Medium,
            redeclare final package Medium3=Medium,
            redeclare final package Medium4=Medium,
            final m1_flow_nominal = mConWat_flow_nominal,
            final m2_flow_nominal = mChiWat_flow_nominal,
            final m3_flow_nominal = mConWat_flow_nominal,
            final m4_flow_nominal = mChiWat_flow_nominal,
            final allowFlowReversal1=allowFlowReversal,
            final allowFlowReversal2=allowFlowReversal,
            final allowFlowReversal3=allowFlowReversal,
            final allowFlowReversal4=allowFlowReversal);

          replaceable package Medium=Buildings.Media.Water
            constrainedby Modelica.Media.Interfaces.PartialMedium
            "Medium model for all four fluid circuits"
            annotation (choices(
              choice(redeclare package Medium=Buildings.Media.Water "Water"),
              choice(redeclare package Medium =
                    Buildings.Media.Antifreeze.PropyleneGlycolWater (
                property_T=293.15,X_a=0.40)
                "Propylene glycol water, 40% mass fraction")));

          parameter Integer nUni(final min=1, start=1)
            "Number of units operating at design conditions"
            annotation(Evaluate=true);
          parameter Modelica.Units.SI.Temperature TCasHeaEnt_nominal=298.15
            "Design evaporator entering temperature in cascading heating mode";
          parameter Modelica.Units.SI.Temperature TCasCooEnt_nominal=288.15
            "Design condenser entering temperature in cascading cooling mode";
          final parameter Modelica.Units.SI.Temperature TChiWatSup_nominal=
            dat.TEvaLvg_nominal
            "Design (minimum) CHW supply temperature";
          final parameter Modelica.Units.SI.Temperature THeaWatSup_nominal=
            dat.TConLvg_nominal
            "Design (maximum) HW supply temperature";
          final parameter Modelica.Units.SI.HeatFlowRate QChiWatUni_flow_nominal=
            dat.QEva_flow_nominal
            "Design cooling heat flow rate (each unit, <0)"
            annotation(Dialog(group="Nominal condition"));
          final parameter Modelica.Units.SI.HeatFlowRate QHeaWatUni_flow_nominal=
            -dat.QEva_flow_nominal * (1 + 1 / dat.COP_nominal * dat.etaMotor)
            "Design heating heat flow rate in direct heat recovery mode (each unit, >0)"
            annotation(Dialog(group="Nominal condition"));
          final parameter Modelica.Units.SI.Efficiency COPCasHea_nominal(fixed=false)
            "Coefficient of performance in cascading heating mode";
          final parameter Modelica.Units.SI.Efficiency COPCasCoo_nominal(fixed=false)
            "Coefficient of performance in cascading cooling mode";
          final parameter Modelica.Units.SI.Temperature TCasHeaLvg_nominal(fixed=false)
            "Design value of evaporator leaving temperature in cascading heating mode";
          final parameter Modelica.Units.SI.Temperature TCasCooLvg_nominal(fixed=false)
            "Design value of condenser leaving temperature in cascading cooling mode";
          final parameter Modelica.Units.SI.HeatFlowRate QEvaCasHeaUni_flow_nominal(
            fixed=false,
            start=QChiWatUni_flow_nominal * (1 + 2E-2 * (TCasHeaEnt_nominal -
              (dat.TEvaLvg_nominal - QChiWatUni_flow_nominal / mChiWatUni_flow_nominal / cpCas))))
            "Design evaporator heat flow rate in cascading heating mode (each unit, <0)"
            annotation(Dialog(group="Nominal condition"));
          final parameter Modelica.Units.SI.HeatFlowRate QChiWatCasCooUni_flow_nominal(
            fixed=false,
            start=QChiWatUni_flow_nominal * (1 - 2E-2 * (TCasCooEnt_nominal -
              (dat.TConLvg_nominal - QHeaWatUni_flow_nominal / mConWatUni_flow_nominal / cpCas))))
            "Design cooling heat flow rate in cascading cooling mode (each unit, <0)"
            annotation(Dialog(group="Nominal condition"));
          final parameter Modelica.Units.SI.HeatFlowRate QHeaWatCasHeaUni_flow_nominal=
            -QEvaCasHeaUni_flow_nominal * (1 + 1 / COPCasHea_nominal * dat.etaMotor)
            "Design heating heat flow rate in cascading heating mode (each unit, >0)"
            annotation(Dialog(group="Nominal condition"));
          final parameter Modelica.Units.SI.HeatFlowRate QConCasCooUni_flow_nominal=
            -QChiWatCasCooUni_flow_nominal * (1 + 1 / COPCasCoo_nominal * dat.etaMotor)
            "Design condenser heat flow rate in cascading cooling mode (each unit, >0)"
            annotation(Dialog(group="Nominal condition"));
          final parameter Modelica.Units.SI.HeatFlowRate QChiWat_flow_nominal=
            nUni * QChiWatUni_flow_nominal
            "Design cooling heat flow rate (all units, <0)"
            annotation(Dialog(group="Nominal condition"));
          final parameter Modelica.Units.SI.HeatFlowRate QHeaWat_flow_nominal=
            nUni * QHeaWatUni_flow_nominal
            "Design heating heat flow rate (all units, >0)"
            annotation(Dialog(group="Nominal condition"));
          final parameter Modelica.Units.SI.HeatFlowRate QEvaCasHea_flow_nominal=
            nUni * QEvaCasHeaUni_flow_nominal
            "Design evaporator heat flow rate in cascading heating mode (all units, <0)"
            annotation(Dialog(group="Nominal condition"));
          final parameter Modelica.Units.SI.HeatFlowRate QChiWatCasCoo_flow_nominal=
            nUni * QChiWatCasCooUni_flow_nominal
            "Design cooling heat flow rate in cascading cooling mode (all units, <0)"
            annotation(Dialog(group="Nominal condition"));
          final parameter Modelica.Units.SI.HeatFlowRate QHeaWatCasHea_flow_nominal=
            nUni * QHeaWatCasHeaUni_flow_nominal
            "Design heating heat flow rate in cascading heating mode (all units, >0)"
            annotation(Dialog(group="Nominal condition"));
          final parameter Modelica.Units.SI.HeatFlowRate QConCasCoo_flow_nominal=
            nUni * QConCasCooUni_flow_nominal
            "Design condenser heat flow rate in cascading cooling mode (all units, >0)"
            annotation(Dialog(group="Nominal condition"));
          final parameter Modelica.Units.SI.MassFlowRate mChiWatUni_flow_nominal(
            final min=0)=dat.mEva_flow_nominal
            "Design CHW mass flow rate (each unit)"
            annotation(Dialog(group="Nominal condition"));
          final parameter Modelica.Units.SI.MassFlowRate mConWatUni_flow_nominal(
            final min=0)=dat.mCon_flow_nominal
            "Design CW mass flow rate (each unit)"
            annotation(Dialog(group="Nominal condition"));
          final parameter Modelica.Units.SI.MassFlowRate mChiWat_flow_nominal(
            final min=0)=nUni * mChiWatUni_flow_nominal
            "Design CHW mass flow rate (all units)"
            annotation(Dialog(group="Nominal condition"));
          final parameter Modelica.Units.SI.MassFlowRate mConWat_flow_nominal(
            final min=0)=nUni * mConWatUni_flow_nominal
            "Design CW mass flow rate (all units)"
            annotation(Dialog(group="Nominal condition"));
          parameter Modelica.Units.SI.PressureDifference dpEva_nominal(displayUnit="Pa")
            "Design evaporator pressure drop (each unit)"
            annotation(Dialog(group="Nominal condition"));
          parameter Modelica.Units.SI.PressureDifference dpCon_nominal(displayUnit="Pa")
            "Design condenser pressure drop (each unit)"
            annotation(Dialog(group="Nominal condition"));

          replaceable parameter
            Buildings.Fluid.Chillers.Data.ElectricReformulatedEIR.Generic dat
            "Chiller parameters (each unit)" annotation (Placement(
                transformation(extent={{-90,-120},{-70,-100}})));

          // Assumptions
          parameter Boolean allowFlowReversal = true
            "= false to simplify equations, assuming, but not enforcing, no flow reversal"
            annotation(Dialog(tab="Assumptions"), Evaluate=true);

          parameter Modelica.Fluid.Types.Dynamics energyDynamics=
            Modelica.Fluid.Types.Dynamics.DynamicFreeInitial
            "Type of energy balance: dynamic (3 initialization options) or steady state"
            annotation(Evaluate=true, Dialog(tab = "Dynamics", group="Conservation equations"));

          parameter Boolean use_inputFilter=energyDynamics<>Modelica.Fluid.Types.Dynamics.SteadyState
            "= true, if opening is filtered with a 2nd order CriticalDamping filter"
            annotation(Dialog(tab="Dynamics", group="Filtered opening"));
          parameter Modelica.Units.SI.Time riseTime=120
            "Rise time of the filter (time to reach 99.6 % of an opening step)"
            annotation (Dialog(
              tab="Dynamics",
              group="Filtered opening",
              enable=use_inputFilter));
          parameter Modelica.Blocks.Types.Init init=Modelica.Blocks.Types.Init.InitialOutput
            "Type of initialization (no init/steady state/initial state/initial output)"
            annotation(Dialog(tab="Dynamics", group="Filtered opening",enable=use_inputFilter));
          parameter Real y_start=1 "Initial position of actuator"
            annotation(Dialog(tab="Dynamics", group="Filtered opening",enable=use_inputFilter));

          Buildings.Controls.OBC.CDL.Interfaces.BooleanInput y1[nUni]
            "Chiller On/Off command"
            annotation (Placement(transformation(extent={{-140,100},{-100,140}}),
              iconTransformation(extent={{-140,40},{-100,80}})));
          Buildings.Controls.OBC.CDL.Interfaces.BooleanInput y1Coo[nUni]
            "Cooling switchover command: true for cooling, false for heating"
            annotation (Placement(transformation(extent={{-140,80},{-100,120}}),
              iconTransformation(extent={{-20,-20},{20,20}}, rotation=0,  origin={-120,0})));
          Buildings.Controls.OBC.CDL.Interfaces.RealInput TSet[nUni](
            each final unit="K", each displayUnit="degC")
            "Supply temperature setpoint"
            annotation (Placement(
              transformation(extent={{-140,-20},{-100,20}}),   iconTransformation(
                extent={{-140,-80},{-100,-40}})));
          Buildings.Controls.OBC.CDL.Interfaces.RealInput yValConSwi[nUni](
            each final unit="1",
            each final min=0,
            each final max=1) "Chiller condenser switchover valve commanded position"
            annotation (Placement(transformation(
                extent={{-20,-20},{20,20}},
                rotation=-90,
                origin={-40,160}), iconTransformation(
                extent={{-20,-20},{20,20}},
                rotation=-90,
                origin={-60,120})));
          Buildings.Controls.OBC.CDL.Interfaces.RealInput yValEvaSwi[nUni](
            each final unit="1",
            each final min=0,
            each final max=1) "Chiller evaporator switchover valve commanded position"
            annotation (Placement(transformation(
                extent={{20,-20},{-20,20}},
                rotation=-90,
                origin={0,-160}), iconTransformation(
                extent={{-20,-20},{20,20}},
                rotation=90,
                origin={-60,-120})));
          Buildings.Controls.OBC.CDL.Interfaces.RealOutput P(
            final unit="W") "Power drawn"
            annotation (Placement(transformation(extent={{100,100},{140,140}}),
              iconTransformation(extent={{100,-20},{140,20}})));
          Buildings.Controls.OBC.CDL.Interfaces.RealInput yValCon[nUni](
            each final unit="1", each final min=0, each final max=1)
            "Chiller condenser isolation valve commanded position"
            annotation (
              Placement(transformation(
                extent={{-20,-20},{20,20}},
                rotation=-90,
                origin={0,160}),  iconTransformation(
                extent={{-20,-20},{20,20}},
                rotation=-90,
                origin={-80,120})));
          Buildings.Controls.OBC.CDL.Interfaces.RealInput yValEva[nUni](
            each final unit="1", each final min=0, each final max=1)
            "Chiller evaporator isolation valve commanded position"
            annotation (
              Placement(transformation(
                extent={{20,-20},{-20,20}},
                rotation=-90,
                origin={-40,-160}), iconTransformation(
                extent={{-20,-20},{20,20}},
                rotation=90,
                origin={-80,-120})));
          Buildings.Controls.OBC.CDL.Interfaces.RealOutput mEva_flow[nUni](each final
              unit="kg/s") "Chiller evaporator barrel mass flow rate" annotation (
              Placement(transformation(
                extent={{-20,-20},{20,20}},
                rotation=-90,
                origin={60,-160}), iconTransformation(
                extent={{-20,-20},{20,20}},
                rotation=-90,
                origin={80,-120})));
          Buildings.Controls.OBC.CDL.Interfaces.RealOutput TEvaLvg[nUni](
            each final unit="K", each displayUnit="degC")
            "Chiller evaporator leaving temperature" annotation (Placement(
                transformation(
                extent={{-20,-20},{20,20}},
                rotation=-90,
                origin={40,-160}), iconTransformation(
                extent={{-20,-20},{20,20}},
                rotation=-90,
                origin={60,-120})));
          Buildings.Controls.OBC.CDL.Interfaces.RealOutput mCon_flow[nUni](
            each final unit="kg/s")
            "Chiller condenser barrel mass flow rate" annotation (
              Placement(transformation(
                extent={{20,-20},{-20,20}},
                rotation=-90,
                origin={60,160}), iconTransformation(
                extent={{-20,-20},{20,20}},
                rotation=90,
                origin={90,120})));
          Buildings.Controls.OBC.CDL.Interfaces.RealOutput TConLvg[nUni](
            each final unit="K", each displayUnit="degC")
            "Chiller condenser leaving temperature" annotation (Placement(
                transformation(
                extent={{20,-20},{-20,20}},
                rotation=-90,
                origin={40,160}), iconTransformation(
                extent={{-20,-20},{20,20}},
                rotation=90,
                origin={70,120})));

          Buildings.Fluid.Chillers.ElectricReformulatedEIR chi[nUni](
            PLR1(each start=0),
            each final per=dat,
            redeclare each final package Medium1 = Medium,
            redeclare final package Medium2 = Medium,
            each final have_switchover=true,
            each final dp1_nominal=0,
            each final dp2_nominal=0,
            each final allowFlowReversal1=allowFlowReversal,
            each final allowFlowReversal2=allowFlowReversal,
            each final energyDynamics=energyDynamics,
            each final show_T=show_T) "Chiller"
            annotation (Placement(transformation(extent={{-10,-10},{10,10}})));
          Buildings.Fluid.Actuators.Valves.TwoWayLinear valCon[nUni](
            redeclare each final package Medium = Medium,
            each linearized=true,
            each final CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
            each final m_flow_nominal=mConWatUni_flow_nominal,
            each dpValve_nominal=1E3,
            each final dpFixed_nominal=dpCon_nominal,
            each final allowFlowReversal=allowFlowReversal,
            each final use_inputFilter=use_inputFilter,
            each final riseTime=riseTime,
            each final init=init,
            each final y_start=y_start) "Condenser isolation valve" annotation
            (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=90,
                origin={20,80})));
          Buildings.Fluid.Actuators.Valves.TwoWayLinear valEva[nUni](
            redeclare each final package Medium = Medium,
            each linearized=true,
            each final CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
            each final m_flow_nominal=mChiWatUni_flow_nominal,
            each dpValve_nominal=1E3,
            each final dpFixed_nominal=dpEva_nominal,
            each final allowFlowReversal=allowFlowReversal,
            each final use_inputFilter=use_inputFilter,
            each final riseTime=riseTime,
            each final init=init,
            each final y_start=y_start) "Evaporator isolation valve"
            annotation (Placement(transformation(
                extent={{10,10},{-10,-10}},
                rotation=90,
                origin={-20,-80})));
          Buildings.Fluid.FixedResistances.Junction junConWatEvaOut[nUni](
            redeclare each final package Medium = Medium,
            each final m_flow_nominal=mChiWatUni_flow_nominal*{1,-1,1},
            each final dp_nominal=fill(1E3, 3),
            each final energyDynamics=energyDynamics,
            each final portFlowDirection_1=Modelica.Fluid.Types.PortFlowDirection.Bidirectional,

            each final portFlowDirection_2=Modelica.Fluid.Types.PortFlowDirection.Bidirectional,

            each final portFlowDirection_3=if allowFlowReversal then Modelica.Fluid.Types.PortFlowDirection.Bidirectional
                 else Modelica.Fluid.Types.PortFlowDirection.Entering)
            "Fluid junction" annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=90,
                origin={-80,-60})));
          Buildings.Fluid.FixedResistances.Junction junConWatEvaInl[nUni](
            redeclare each final package Medium = Medium,
            each final m_flow_nominal=mChiWatUni_flow_nominal*{1,-1,-1},
            each final dp_nominal=fill(1E3, 3),
            each final energyDynamics=energyDynamics,
            each final portFlowDirection_1=Modelica.Fluid.Types.PortFlowDirection.Bidirectional,

            each final portFlowDirection_2=Modelica.Fluid.Types.PortFlowDirection.Bidirectional,

            each final portFlowDirection_3=if allowFlowReversal then Modelica.Fluid.Types.PortFlowDirection.Bidirectional
                 else Modelica.Fluid.Types.PortFlowDirection.Leaving)
            "Fluid junction" annotation (Placement(transformation(
                extent={{-10,10},{10,-10}},
                rotation=90,
                origin={60,-6})));
          Buildings.Fluid.Sensors.TemperatureTwoPort temEvaLvg[nUni](
            redeclare each final package Medium = Medium,
            each final m_flow_nominal=mChiWatUni_flow_nominal,
            each final allowFlowReversal=allowFlowReversal)
            "Chiller evaporator leaving temperature" annotation (Placement(
                transformation(
                extent={{10,10},{-10,-10}},
                rotation=90,
                origin={-20,-20})));
          Buildings.Fluid.FixedResistances.Junction junHeaWatConInl[nUni](
            redeclare each final package Medium = Medium,
            each final m_flow_nominal=mConWatUni_flow_nominal*{1,-1,-1},
            each final dp_nominal=fill(1E3, 3),
            each final energyDynamics=energyDynamics,
            each final portFlowDirection_1=Modelica.Fluid.Types.PortFlowDirection.Bidirectional,

            each final portFlowDirection_2=Modelica.Fluid.Types.PortFlowDirection.Bidirectional,

            each final portFlowDirection_3=if allowFlowReversal then Modelica.Fluid.Types.PortFlowDirection.Bidirectional
                 else Modelica.Fluid.Types.PortFlowDirection.Leaving)
            "Fluid junction" annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=90,
                origin={-60,60})));
          Buildings.Fluid.FixedResistances.Junction junHeaWatConOut[nUni](
            redeclare each final package Medium = Medium,
            each final m_flow_nominal=mConWatUni_flow_nominal*{1,-1,1},
            each final dp_nominal=fill(1E3, 3),
            each final energyDynamics=energyDynamics,
            each final portFlowDirection_1=Modelica.Fluid.Types.PortFlowDirection.Bidirectional,

            each final portFlowDirection_2=Modelica.Fluid.Types.PortFlowDirection.Bidirectional,

            each final portFlowDirection_3=if allowFlowReversal then Modelica.Fluid.Types.PortFlowDirection.Bidirectional
                 else Modelica.Fluid.Types.PortFlowDirection.Entering)
            "Fluid junction" annotation (Placement(transformation(
                extent={{-10,10},{10,-10}},
                rotation=90,
                origin={80,60})));
          Buildings.Fluid.Sensors.TemperatureTwoPort temConEnt[nUni](
            redeclare each final package Medium = Medium,
            each final m_flow_nominal=mConWatUni_flow_nominal,
            each final allowFlowReversal=allowFlowReversal)
            "Chiller condenser entering temperature" annotation (Placement(
                transformation(
                extent={{10,-10},{-10,10}},
                rotation=90,
                origin={-20,20})));
          Buildings.Fluid.Sensors.TemperatureTwoPort temConLvg[nUni](
            redeclare each final package Medium = Medium,
            each final m_flow_nominal=mConWatUni_flow_nominal,
            each final allowFlowReversal=allowFlowReversal)
            "Chiller condenser leaving temperature" annotation (Placement(
                transformation(
                extent={{-10,10},{10,-10}},
                rotation=90,
                origin={20,20})));
          Buildings.Controls.OBC.CDL.Reals.MultiSum mulSum(nin=nUni)
            "Sum up power of all units"
            annotation (Placement(transformation(extent={{70,110},{90,130}})));
          Buildings.Fluid.Sensors.MassFlowRate floEva[nUni](redeclare each
              final package Medium = Medium, each final allowFlowReversal=
                allowFlowReversal) "Chiller evaporator barrel mass flow rate"
            annotation (Placement(transformation(
                extent={{10,10},{-10,-10}},
                rotation=90,
                origin={-20,-50})));
          Buildings.Fluid.Sensors.MassFlowRate floCon[nUni](redeclare each
              final package Medium = Medium, each final allowFlowReversal=
                allowFlowReversal) "Chiller condenser barrel mass flow rate"
            annotation (Placement(transformation(
                extent={{-10,10},{10,-10}},
                rotation=90,
                origin={20,50})));
          Buildings.Fluid.Actuators.Valves.TwoWayLinear valConSwi[nUni](
            redeclare each final package Medium = Medium,
            each linearized=true,
            each final CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
            each final m_flow_nominal=mConWatUni_flow_nominal,
            each dpValve_nominal=1E3,
            each final dpFixed_nominal=0,
            each final allowFlowReversal=true,
            each final use_inputFilter=use_inputFilter,
            each final riseTime=riseTime,
            each final init=init,
            each final y_start=y_start) "Condenser switchover valve"
            annotation (Placement(transformation(
                extent={{-10,10},{10,-10}},
                rotation=90,
                origin={-60,20})));
          Buildings.Fluid.Actuators.Valves.TwoWayLinear valEvaSwi[nUni](
            redeclare each final package Medium = Medium,
            each linearized=true,
            each final CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
            each final m_flow_nominal=mChiWatUni_flow_nominal,
            each dpValve_nominal=1E3,
            each final dpFixed_nominal=0,
            each final allowFlowReversal=true,
            each final use_inputFilter=use_inputFilter,
            each final riseTime=riseTime,
            each final init=init,
            each final y_start=y_start) "Evaporator switchover valve"
            annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=90,
                origin={60,-40})));
          Buildings.Controls.OBC.CDL.Interfaces.RealOutput TConEnt[nUni](each final
              unit="K", each displayUnit="degC")
            "Chiller condenser entering temperature" annotation (Placement(
                transformation(
                extent={{20,-20},{-20,20}},
                rotation=-90,
                origin={20,160}), iconTransformation(
                extent={{-20,-20},{20,20}},
                rotation=90,
                origin={50,120})));
        protected
          parameter Medium.ThermodynamicState staCas=Medium.setState_pTX(
            T=(TCasHeaEnt_nominal + TCasCooEnt_nominal) / 2,
            p=Medium.p_default,
            X=Medium.X_default)
            "State of source medium in cascading mode (at mean source temperature)";
          parameter Modelica.Units.SI.SpecificHeatCapacity cpCas=
            Medium.specificHeatCapacityCp(state=staCas)
            "Heat capacity of source medium in cascading mode";
        initial equation
          TCasHeaLvg_nominal = TCasHeaEnt_nominal +
            QEvaCasHeaUni_flow_nominal / cpCas / mConWatUni_flow_nominal;
          TCasCooLvg_nominal = TCasCooEnt_nominal +
            QConCasCooUni_flow_nominal / cpCas / mConWatUni_flow_nominal;
          QEvaCasHeaUni_flow_nominal = dat.QEva_flow_nominal *
            Buildings.Utilities.Math.Functions.biquadratic(
              a=dat.capFunT,
              x1=Modelica.Units.Conversions.to_degC(TCasHeaLvg_nominal),
              x2=Modelica.Units.Conversions.to_degC(THeaWatSup_nominal));
          QChiWatCasCooUni_flow_nominal = dat.QEva_flow_nominal *
            Buildings.Utilities.Math.Functions.biquadratic(
              a=dat.capFunT,
              x1=Modelica.Units.Conversions.to_degC(TChiWatSup_nominal),
              x2=Modelica.Units.Conversions.to_degC(TCasCooLvg_nominal));
          COPCasHea_nominal = dat.COP_nominal /
            Buildings.Utilities.Math.Functions.biquadratic(
              a=dat.EIRFunT,
              x1=Modelica.Units.Conversions.to_degC(TCasCooLvg_nominal),
              x2=Modelica.Units.Conversions.to_degC(THeaWatSup_nominal));
          COPCasCoo_nominal = dat.COP_nominal /
            Buildings.Utilities.Math.Functions.biquadratic(
              a=dat.EIRFunT,
              x1=Modelica.Units.Conversions.to_degC(TChiWatSup_nominal),
              x2=Modelica.Units.Conversions.to_degC(TCasCooLvg_nominal));
        equation
          if nUni > 1 then
            connect(junHeaWatConOut[1:nUni - 1].port_1, junHeaWatConOut[2:nUni].port_2)
              annotation (Line(points={{80,50},{66,50},{66,70},{80,70}}, color={0,127,255}));
            connect(valEvaSwi[1:nUni - 1].port_a, junConWatEvaInl[2:nUni].port_2)
              annotation (Line(points={{60,-50},{40,-50},{40,4},{60,4}}, color={0,127,255}));
            connect(valConSwi[1:nUni - 1].port_a, junHeaWatConInl[2:nUni].port_2)
              annotation (Line(points={{-60,10},{-44,10},{-44,70},{-60,70}}, color={0,127,
                    255}));
            connect(junConWatEvaOut[1:nUni - 1].port_1, junConWatEvaOut[2:nUni].port_2)
              annotation (Line(points={{-80,-70},{-60,-70},{-60,-50},{-80,-50}}, color={0,
                    127,255}));
          end if;
          connect(port_a4, valEvaSwi[nUni].port_a)
            annotation (Line(points={{100,-80},{60,-80},{60,-50}}, color={0,127,255}));
          connect(yValConSwi, valConSwi.y)
            annotation (Line(points={{-40,160},{-40,20},{-48,20}}, color={0,0,127}));

          connect(y1, chi.on) annotation (Line(points={{-120,120},{-16,120},{-16,3},{-12,
                  3}}, color={255,0,255}));
          connect(TSet, chi.TSet) annotation (Line(points={{-120,0},{-20,0},{-20,-3},{-12,
                  -3}},      color={0,0,127}));
          connect(y1Coo, chi.coo)
            annotation (Line(points={{-120,100},{-8,100},{-8,14}}, color={255,0,255}));
          connect(yValCon, valCon.y) annotation (Line(points={{0,160},{0,80},{8,80}},
                           color={0,0,127}));
          connect(chi.port_b2, temEvaLvg.port_a)
            annotation (Line(points={{-10,-6},{-20,-6},{-20,-10}}, color={0,127,255}));
          connect(yValEva, valEva.y) annotation (Line(points={{-40,-160},{-40,-120},{-4,
                  -120},{-4,-80},{-8,-80}},
                                     color={0,0,127}));
          connect(temConEnt.port_b, chi.port_a1)
            annotation (Line(points={{-20,10},{-20,6},{-10,6}}, color={0,127,255}));
          connect(chi.port_b1, temConLvg.port_a)
            annotation (Line(points={{10,6},{20,6},{20,10}}, color={0,127,255}));
          connect(valCon.port_b, junHeaWatConOut.port_3)
            annotation (Line(points={{20,90},{20,100},{60,100},{60,60},{70,60}},
                                                               color={0,127,255}));
          connect(valEva.port_b,junConWatEvaOut. port_3) annotation (Line(points={{-20,-90},
                  {-20,-100},{-40,-100},{-40,-60},{-70,-60}},
                                        color={0,127,255}));
          connect(chi.P, mulSum.u) annotation (Line(points={{11,9},{64,9},{64,120},{68,120}},
                color={0,0,127}));
          connect(temEvaLvg.port_b, floEva.port_a)
            annotation (Line(points={{-20,-30},{-20,-40}}, color={0,127,255}));
          connect(floEva.port_b, valEva.port_a)
            annotation (Line(points={{-20,-60},{-20,-70}}, color={0,127,255}));
          connect(mulSum.y, P)
            annotation (Line(points={{92,120},{120,120}}, color={0,0,127}));
          connect(floEva.m_flow, mEva_flow)
            annotation (Line(points={{-9,-50},{2,-50},{2,-118},{60,-118},{60,-160}},
                                                                   color={0,0,127}));
          connect(temEvaLvg.T, TEvaLvg) annotation (Line(points={{-9,-20},{-2,-20},{-2,-120},
                  {40,-120},{40,-160}}, color={0,0,127}));
          connect(temConLvg.port_b, floCon.port_a)
            annotation (Line(points={{20,30},{20,40}}, color={0,127,255}));
          connect(floCon.port_b, valCon.port_a)
            annotation (Line(points={{20,60},{20,70}}, color={0,127,255}));
          connect(temConLvg.T, TConLvg)
            annotation (Line(points={{31,20},{40,20},{40,160}}, color={0,0,127}));
          connect(floCon.m_flow, mCon_flow) annotation (Line(points={{31,50},{62,50},{
                  62,140},{60,140},{60,160}}, color={0,0,127}));
          connect(junConWatEvaInl.port_3, chi.port_a2) annotation (Line(points={{50,-6},
                  {10,-6}},                  color={0,127,255}));
          connect(yValEvaSwi, valEvaSwi.y)
            annotation (Line(points={{0,-160},{0,-40},{48,-40}}, color={0,0,127}));
          connect(junHeaWatConInl.port_3, temConEnt.port_a)
            annotation (Line(points={{-50,60},{-20,60},{-20,30}}, color={0,127,255}));

          connect(port_a1, junHeaWatConInl[1].port_2)
            annotation (Line(points={{-100,80},{-60,80},{-60,70}}, color={0,127,255}));
          connect(valConSwi.port_b, junHeaWatConInl.port_1)
            annotation (Line(points={{-60,30},{-60,50}}, color={0,127,255}));
          connect(junHeaWatConOut[1].port_2, port_b1)
            annotation (Line(points={{80,70},{80,80},{100,80}}, color={0,127,255}));
          connect(valEvaSwi.port_b, junConWatEvaInl.port_1)
            annotation (Line(points={{60,-30},{60,-16}}, color={0,127,255}));
          connect(port_a2, junConWatEvaInl[1].port_2)
            annotation (Line(points={{100,30},{60,30},{60,4}}, color={0,127,255}));
          connect(junHeaWatConOut[nUni].port_1, port_b3)
            annotation (Line(points={{80,50},{80,-30},{100,-30}}, color={0,127,255}));
          connect(junConWatEvaOut[1].port_2, port_b2) annotation (Line(points={{-80,-50},
                  {-80,30},{-100,30}}, color={0,127,255}));
          connect(junConWatEvaOut[nUni].port_1, port_b4) annotation (Line(points={{-80,-70},
                  {-80,-80},{-100,-80}}, color={0,127,255}));
          connect(valConSwi[nUni].port_a, port_a3) annotation (Line(points={{-60,10},{
                  -60,-32},{-100,-32}},
                                    color={0,127,255}));

          connect(temConEnt.T, TConEnt) annotation (Line(points={{-31,20},{-32,20},{-32,
                  130},{20,130},{20,160}}, color={0,0,127}));
          annotation (
            defaultComponentName="chi",
            Icon(coordinateSystem(preserveAspectRatio=false),
              graphics={
                Rectangle(
                  extent={{-100,-100},{100,100}},
                  lineColor={0,0,127},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Rectangle(
                  extent={{-70,80},{70,-80}},
                  lineColor={0,0,255},
                  pattern=LinePattern.None,
                  fillColor={95,95,95},
                  fillPattern=FillPattern.Solid),
                Rectangle(
                  extent={{-44,52},{-40,12}},
                  lineColor={0,0,0},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Rectangle(
                  extent={{-56,70},{58,52}},
                  lineColor={0,0,0},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Polygon(
                  points={{-42,2},{-52,12},{-32,12},{-42,2}},
                  lineColor={0,0,0},
                  smooth=Smooth.None,
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Polygon(
                  points={{-42,2},{-52,-10},{-32,-10},{-42,2}},
                  lineColor={0,0,0},
                  smooth=Smooth.None,
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Rectangle(
                  extent={{-44,-10},{-40,-50}},
                  lineColor={0,0,0},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Rectangle(
                  extent={{38,52},{42,-50}},
                  lineColor={0,0,0},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Rectangle(
                  extent={{-56,-50},{58,-68}},
                  lineColor={0,0,0},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Ellipse(
                  extent={{18,24},{62,-18}},
                  lineColor={0,0,0},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Polygon(
                  points={{40,24},{22,-8},{58,-8},{40,24}},
                  lineColor={0,0,0},
                  smooth=Smooth.None,
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Rectangle(
                  extent={{-44,52},{-40,12}},
                  lineColor={0,0,0},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Rectangle(
                  extent={{-56,70},{58,52}},
                  lineColor={0,0,0},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Polygon(
                  points={{-42,2},{-52,12},{-32,12},{-42,2}},
                  lineColor={0,0,0},
                  smooth=Smooth.None,
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Polygon(
                  points={{-42,2},{-52,-10},{-32,-10},{-42,2}},
                  lineColor={0,0,0},
                  smooth=Smooth.None,
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Rectangle(
                  extent={{-44,-10},{-40,-50}},
                  lineColor={0,0,0},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Rectangle(
                  extent={{38,52},{42,-50}},
                  lineColor={0,0,0},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Rectangle(
                  extent={{-56,-50},{58,-68}},
                  lineColor={0,0,0},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Ellipse(
                  extent={{18,24},{62,-18}},
                  lineColor={0,0,0},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Polygon(
                  points={{40,24},{22,-8},{58,-8},{40,24}},
                  lineColor={0,0,0},
                  smooth=Smooth.None,
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid)}),                      Diagram(
                coordinateSystem(preserveAspectRatio=false, extent={{-100,-140},{100,140}})),
            Documentation(info="<html>
<p>
This model represents a set of identical heat recovery chillers
that are piped in parallel.
Modulating isolation valves and modulating switchover valves are included
on condenser and evaporator side.
The switchover valves allow indexing the condenser (resp. the evaporator)
either to the CWC loop or to the HW loop (resp. to the CWE loop or to
the CHW loop). Modulating valves are used to allow for sequences of
operation that bleed CWE into the HW return flow to modulate the
condenser entering temperature.
</p>
<h4>Control points</h4>
<p>
The following input and output points are available.
</p>
<ul>
<li>
On/Off command <code>y1</code>:
DO signal dedicated to each unit, with a dimensionality of one
</li>
<li>
Cooling switchover command <code>y1Coo</code>:
DO signal dedicated to each unit, with a dimensionality of one
</li>
<li>
Supply temperature setpoint <code>TSet</code>:
AO signal dedicated to each unit, with a dimensionality of one</br>
The signal corresponds either to the HW supply temperature setpoint when
the unit operates in heating mode, or to the CHW supply temperature setpoint when
the unit operates in cooling mode.
</li>
<li>
Condenser and evaporator isolation valve commanded position <code>yVal(Con|Eva)</code>:
AO signal dedicated to each unit, with a dimensionality of one
</li>
<li>
Condenser and evaporator switchover valve commanded position <code>yVal(Con|Eva)Swi</code>:
AO signal dedicated to each unit, with a dimensionality of one
</li>
<li>
Condenser and evaporator leaving temperature <code>T(Con|Eva)Lvg</code>:
AI signal dedicated to each unit, with a dimensionality of one
</li>
<li>
Condenser entering temperature <code>TConEnt</code>:
AI signal dedicated to each unit, with a dimensionality of one
</li>
<li>
Condenser and evaporator mass flow rate <code>m(Con|Eva)_flow</code>:
AI signal dedicated to each unit, with a dimensionality of one
</li>
</ul>
<h4>
Details
</h4>
<h5>
HRC performance data
</h5>
<p>
The performance data should cover the HRC lift envelope,
that is when the HRC is operating in direct heat recovery mode,
producing CHW and HW at their setpoint value at full load.
In this case, and to allow for cascading heat recovery where
a third fluid circuit is used to generate a cascade of thermodynamic cycles,
two additional parameters <code>TCasEntCoo_nominal</code> and
<code>TCasEntHea_nominal</code> are exposed to specify the
<i>entering</i> temperature of the third fluid circuit when
the HRC is operating in cooling mode and in heating mode,
respectively.
In cooling mode the third fluid circuit is connected to the
condenser barrel.
In heating mode, the third fluid circuit is connected to the
evaporator barrel.
The parameters <code>TCasEnt*_nominal</code> are then used to assess the
design capacity in heating and cooling mode, respectively.
</p>
<h5>
Actuators
</h5>
<p>
By default, linear valve models are used. Those are configured with
a pressure drop varying linearly with the flow rate, as opposed
to the quadratic dependency usually considered for a turbulent flow
regime.
This is because the whole plant model contains large nonlinear systems
of equations and this configuration limits the risk of solver failure
while reducing the time to solution.
This has no significant impact on the operating point of the circulation pumps
when a control loop is used to modulate the valve opening and maintain
the flow rate or the leaving temperature at setpoint.
Then, whatever the modeling assumptions for the valve, the
control loop ensures that the valve creates the adequate pressure drop
and flow, which will simply be reached at a different valve opening
with the above simplification.
</p>
</html>",         revisions="<html>
<ul>
<li>
February 24, 2023, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>"));
        end ChillerHeatRecoveryGroup;

        model CoolingTowerGroup "Model of multiple identical cooling towers in parallel"
          extends Buildings.Fluid.Interfaces.PartialTwoPortInterface(
            final m_flow_nominal(final min=Modelica.Constants.small)=mConWat_flow_nominal);

          parameter Integer nUni(final min=1, start=1)
            "Number of units operating at design conditions"
            annotation(Evaluate=true);
          parameter Modelica.Units.SI.MassFlowRate mConWatUni_flow_nominal(
            final min=0)
            "CW design mass flow rate (each unit)"
            annotation(Dialog(group="Nominal condition"));
          final parameter Modelica.Units.SI.MassFlowRate mConWat_flow_nominal(
            final min=0)=nUni * mConWatUni_flow_nominal
            "CW design mass flow rate (all units)"
            annotation(Dialog(group="Nominal condition"));
          parameter Modelica.Units.SI.PressureDifference dpConWatFriUni_nominal(
              displayUnit="Pa")
            "CW flow-friction losses through tower and piping only (without elevation head or valve)"
            annotation (Dialog(group="Nominal condition"));
          parameter Modelica.Units.SI.MassFlowRate mAirUni_flow_nominal(
            final min=0,
            start=mConWatUni_flow_nominal / 1.45)
            "Air mass flow rate (each unit)"
            annotation (Dialog(group="Nominal condition"));
          parameter Modelica.Units.SI.Temperature TWetBulEnt_nominal(
            final min=273.15)
            "Entering air wetbulb temperature"
            annotation (Dialog(group="Nominal condition"));
          parameter Modelica.Units.SI.Temperature TConWatRet_nominal(
            final min=273.15)
            "CW return temperature (tower entering)"
            annotation (Dialog(group="Nominal condition"));
          parameter Modelica.Units.SI.Temperature TConWatSup_nominal(
            final min=273.15)
            "CW supply temperature (tower leaving)"
            annotation (Dialog(group="Nominal condition"));
          parameter Modelica.Units.SI.Power PFanUni_nominal(
            final min=0,
            start=340 * mConWatUni_flow_nominal)
            "Fan power (each unit)"
            annotation (Dialog(group="Nominal condition"));
          parameter Real yFan_min(unit="1")=0.1
            "CT fan minimum speed";

          // Assumptions
          parameter Modelica.Fluid.Types.Dynamics energyDynamics=
            Modelica.Fluid.Types.Dynamics.DynamicFreeInitial
            "Type of energy balance: dynamic (3 initialization options) or steady state"
            annotation(Evaluate=true, Dialog(tab = "Dynamics", group="Conservation equations"));

          parameter Modelica.Units.SI.Time tau=30
            "Time constant of fluid volume for nominal flow, used if energy or mass balance is dynamic"
            annotation (Dialog(
              tab="Dynamics",
              group="Nominal condition",
              enable=energyDynamics <> Modelica.Fluid.Types.Dynamics.SteadyState));

          Buildings.Controls.OBC.CDL.Interfaces.BooleanInput y1[nUni]
            "Cooling tower Start command"
            annotation (Placement(transformation(extent={{-140,80},{-100,120}}),
                                 iconTransformation(extent={{-140,40},{-100,80}})));
          Buildings.Controls.OBC.CDL.Interfaces.RealInput y(
            final unit="1", final min=0)
            "Cooling tower speed (common to all tower cells)"
            annotation (Placement(
                transformation(extent={{-140,40},{-100,80}}),   iconTransformation(
                  extent={{-140,-80},{-100,-40}})));
          Buildings.BoundaryConditions.WeatherData.Bus weaBus
            "Bus with weather data" annotation (Placement(transformation(extent
                  ={{90,-50},{110,-30}}), iconTransformation(extent={{-20,80},{
                    20,120}})));
          Buildings.Controls.OBC.CDL.Interfaces.RealOutput P(final unit="W")
            "Power drawn by tower fans"
            annotation (Placement(transformation(extent={{100,60},{140,100}}),
              iconTransformation(extent={{100,60},{140,100}})));
          Buildings.Controls.OBC.CDL.Interfaces.RealOutput TConWatSup(
            final unit="K", displayUnit="degC")
            "CW supply temperature (tower leaving)"
            annotation (Placement(
                transformation(extent={{100,20},{140,60}}), iconTransformation(extent={{100,20},
                    {140,60}})));

          Buildings.Fluid.BaseClasses.MassFlowRateMultiplier mulInl(
            redeclare final package Medium = Medium,
            final allowFlowReversal=allowFlowReversal,
            final use_input=false,
            final k=1/nUni) "Flow rate multiplier"
            annotation (Placement(transformation(extent={{-80,-10},{-60,10}})));
          Buildings.Fluid.BaseClasses.MassFlowRateMultiplier mulOut(
            redeclare final package Medium = Medium,
            final allowFlowReversal=allowFlowReversal,
            final use_input=false,
            final k=nUni) "Flow rate multiplier"
            annotation (Placement(transformation(extent={{60,-10},{80,10}})));
          BaseClasses.MultipleCommands com(final nUni=nUni)
            "Convert command signals"
            annotation (Placement(transformation(extent={{-60,90},{-40,110}})));
          Buildings.Controls.OBC.CDL.Reals.Multiply mulP "Scale power"
            annotation (Placement(transformation(extent={{60,90},{80,70}})));

          Buildings.Fluid.HeatExchangers.CoolingTowers.Merkel coo(
            redeclare final package Medium = Medium,
            final m_flow_nominal=mConWatUni_flow_nominal,
            final dp_nominal=dpConWatFriUni_nominal,
            final yMin=yFan_min,
            final ratWatAir_nominal=mConWatUni_flow_nominal/
                mAirUni_flow_nominal,
            final TAirInWB_nominal=TWetBulEnt_nominal,
            final TWatIn_nominal=TConWatRet_nominal,
            final TWatOut_nominal=TConWatSup_nominal,
            final PFan_nominal=PFanUni_nominal,
            final tau=tau,
            final allowFlowReversal=allowFlowReversal,
            final show_T=show_T,
            final energyDynamics=energyDynamics) "Cooling tower"
            annotation (Placement(transformation(extent={{-10,-10},{10,10}})));

          Buildings.Controls.OBC.CDL.Logical.Pre preY1[nUni]
            "Left limit of signal avoiding direct feedback of status to controller"
            annotation (Placement(transformation(extent={{-90,90},{-70,110}})));
          Buildings.Controls.OBC.CDL.Conversions.BooleanToReal booToRea
            "Convert to real"
            annotation (Placement(transformation(extent={{-10,-10},{10,10}},
                rotation=-90,
                origin={-14,80})));
          Buildings.Controls.OBC.CDL.Reals.Multiply inp
            "Compute pump input signal"
            annotation (Placement(transformation(
                extent={{10,-10},{-10,10}},
                rotation=90,
                origin={-20,30})));
        equation
          connect(com.nUniOn, mulP.u2) annotation (Line(points={{-38,100},{40,100},{40,
                  86},{58,86}},     color={0,0,127}));

          connect(mulP.y, P)
            annotation (Line(points={{82,80},{120,80}}, color={0,0,127}));
          connect(mulOut.port_b, port_b)
            annotation (Line(points={{80,0},{100,0}}, color={0,127,255}));
          connect(mulInl.port_b, coo.port_a)
            annotation (Line(points={{-60,0},{-10,0}},
                                                     color={0,127,255}));
          connect(coo.port_b, mulOut.port_a)
            annotation (Line(points={{10,0},{60,0}}, color={0,127,255}));
          connect(weaBus.TWetBul, coo.TAir) annotation (Line(
              points={{100,-40},{-20,-40},{-20,4},{-12,4}},
              color={255,204,51},
              thickness=0.5), Text(
              string="%first",
              index=-1,
              extent={{-6,3},{-6,3}},
              horizontalAlignment=TextAlignment.Right));
          connect(coo.PFan, mulP.u1)
            annotation (Line(points={{11,8},{40,8},{40,74},{58,74}}, color={0,0,127}));
          connect(coo.TLvg, TConWatSup) annotation (Line(points={{11,-6},{50,-6},{50,40},
                  {120,40}}, color={0,0,127}));
          connect(y1, preY1.u)
            annotation (Line(points={{-120,100},{-92,100}},
                                                          color={255,0,255}));
          connect(preY1.y, com.y1)
            annotation (Line(points={{-68,100},{-62,100}},
                                                         color={255,0,255}));
          connect(com.y1One, booToRea.u) annotation (Line(points={{-38,106},{-14,106},{
                  -14,92}}, color={255,0,255}));
          connect(inp.y, coo.y)
            annotation (Line(points={{-20,18},{-20,8},{-12,8}}, color={0,0,127}));
          connect(y, inp.u1)
            annotation (Line(points={{-120,60},{-26,60},{-26,42}}, color={0,0,127}));
          connect(booToRea.y, inp.u2)
            annotation (Line(points={{-14,68},{-14,42}}, color={0,0,127}));
          connect(port_a, mulInl.port_a)
            annotation (Line(points={{-100,0},{-80,0}}, color={0,127,255}));
          annotation (
            defaultComponentName="coo",
            Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                Rectangle(
                  extent={{-100,-100},{100,100}},
                  lineColor={0,0,127},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Rectangle(
                  extent={{-70,80},{70,-80}},
                  lineColor={0,0,255},
                  pattern=LinePattern.None,
                  fillColor={95,95,95},
                  fillPattern=FillPattern.Solid),
                Text(
                 extent={{190,-12},{70,-62}},
                  textColor={0,0,0},
                  textString=DynamicSelect("", String(TLvg-273.15, format=".1f"))),
                Ellipse(
                  extent={{-54,56},{0,44}},
                  lineColor={255,255,255},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Ellipse(
                  extent={{0,56},{54,44}},
                  lineColor={255,255,255},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Ellipse(
                  extent={{0,56},{54,44}},
                  lineColor={255,255,255},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Ellipse(
                  extent={{-54,56},{0,44}},
                  lineColor={255,255,255},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid)}),
            Diagram(coordinateSystem(extent={{-100,-120},{100,120}})),
            Documentation(info="<html>
<p>
This model represents a set of identical cooling towers
that are piped in parallel.
No actuated isolation valves are included.
</p>
<h4>Control points</h4>
<p>
The following input and output points are available.
</p>
<ul>
<li>
Start command (VFD Run) <code>y1</code>: 
DO signal dedicated to each unit, with a dimensionality of one
</li>
<li>
Speed command <code>y</code>:
AO signal common to all units, with a dimensionality of zero
</li>
<li>
CW supply temperature <code>TConWatSup</code>: 
AI signal common to all units, with a dimensionality of zero
</li>
</ul>
<h4>Details</h4>
<h5>Modeling approach</h5>
<p>
In a parallel arrangement, all operating units have the same operating point.
This allows modeling the heat transfer from outdoor air to condenser water
with a single instance of
<a href=\"modelica://Buildings.Fluid.HeatExchangers.CoolingTowers.Merkel\">
Buildings.Fluid.HeatExchangers.CoolingTowers.Merkel</a>.
Hydronics are resolved with mass flow rate multiplier components.
Note that the elevation head of open-circuit cooling towers is not modeled,
which is an inherent limitation of the cooling tower component model.
</p>
<p>
The fan cycling On and Off is implicitly modeled
in the cooling tower component which uses a low limit of the control signal
to switch to a free convection regime at zero fan power.
</p>
</html>",         revisions="<html>
<ul>
<li>
February 24, 2023, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>"));
        end CoolingTowerGroup;

        model HeatPumpGroup
          "Model of multiple identical air-source heat pumps in parallel"
          extends Buildings.Fluid.Interfaces.PartialTwoPortInterface(
            final m_flow_nominal(final min=Modelica.Constants.small)=mHeaWat_flow_nominal);

          replaceable package MediumAir=Buildings.Media.Air
            "Air medium";

          parameter Integer nUni(final min=1, start=1)
            "Number of units operating at design conditions"
            annotation(Evaluate=true);
          final parameter Modelica.Units.SI.HeatFlowRate capUni_nominal(
            final min=0)=dat.hea.Q_flow
            "Heat pump design capacity (each unit)"
            annotation(Dialog(group="Nominal condition"));
          final parameter Modelica.Units.SI.MassFlowRate mHeaWatUni_flow_nominal(
            final min=0)=dat.hea.mLoa_flow
            "HW design mass flow rate (each unit)"
            annotation(Dialog(group="Nominal condition"));
          final parameter Modelica.Units.SI.MassFlowRate mAirUni_flow_nominal(
            final min=0)=dat.hea.mSou_flow
            "Air design mass flow rate (each unit)"
            annotation(Dialog(group="Nominal condition"));
          final parameter Modelica.Units.SI.MassFlowRate mHeaWat_flow_nominal(
            final min=0)=nUni * mHeaWatUni_flow_nominal
            "HW design mass flow rate (all units)"
            annotation(Dialog(group="Nominal condition"));
          parameter Modelica.Units.SI.PressureDifference dpPumHeaWatUni_nominal(
            final min=0,
            displayUnit="Pa")=dat.dpHeaLoa_nominal
            "HW pump design head (each unit)"
            annotation(Dialog(group="Nominal condition"));

          replaceable parameter Buildings.Fluid.HeatPumps.Data.EquationFitReversible.Generic dat
            "Heat pump parameters (each unit)"
            annotation (Placement(transformation(extent={{-10,-110},{10,-90}})));
          replaceable parameter Buildings.Fluid.Movers.Data.Generic datPum
            constrainedby Buildings.Fluid.Movers.Data.Generic(pressure(V_flow={
                  0,1,2}*mHeaWatUni_flow_nominal/rho_nominal, dp={1.14,1,0.42}*
                  dpPumHeaWatUni_nominal), motorCooledByFluid=false)
            "Condenser pump parameters (each unit)"
            annotation (Placement(transformation(extent={{20,-110},{40,-90}})));

          // Assumptions
          parameter Modelica.Fluid.Types.Dynamics energyDynamics=
            Modelica.Fluid.Types.Dynamics.DynamicFreeInitial
            "Type of energy balance: dynamic (3 initialization options) or steady state"
            annotation(Evaluate=true, Dialog(tab = "Dynamics", group="Conservation equations"));

          parameter Modelica.Units.SI.Time tau=30
            "Time constant of fluid volume for nominal HW flow, used if energy or mass balance is dynamic"
            annotation (Dialog(
              tab="Dynamics",
              group="Nominal condition",
              enable=energyDynamics <> Modelica.Fluid.Types.Dynamics.SteadyState));

          // Pump speed filter parameters
          parameter Boolean use_inputFilter=energyDynamics<>Modelica.Fluid.Types.Dynamics.SteadyState
            "= true, if signal is filtered with a 2nd order CriticalDamping filter"
            annotation(Dialog(tab="Dynamics", group="Filtered pump speed"));
          parameter Modelica.Units.SI.Time riseTime=30
            "Rise time of the filter (time to reach 99.6 % of the speed)"
            annotation (Dialog(
              tab="Dynamics",
              group="Filtered pump speed",
              enable=use_inputFilter));
          parameter Modelica.Blocks.Types.Init init=Modelica.Blocks.Types.Init.InitialOutput
            "Type of initialization (no init/steady state/initial state/initial output)"
            annotation(Dialog(tab="Dynamics", group="Filtered pump speed",enable=use_inputFilter));
          parameter Real y_start=1 "Initial position of actuator"
            annotation(Dialog(tab="Dynamics", group="Filtered pump speed",enable=use_inputFilter));

          Buildings.Controls.OBC.CDL.Interfaces.BooleanInput y1[nUni]
            "Heat pump On/Off command"
            annotation (Placement(transformation(extent={{-140,80},{-100,120}}),
                                 iconTransformation(extent={{-140,40},{-100,80}})));
          Buildings.Controls.OBC.CDL.Interfaces.RealInput TSet(
            final unit="K", displayUnit="degC")
            "Supply temperature setpoint"
            annotation (Placement(transformation(extent={{-140,-80},{-100,-40}}),
              iconTransformation(extent={{-140,-80},{-100,-40}})));
          Buildings.BoundaryConditions.WeatherData.Bus weaBus
            "Bus with weather data" annotation (Placement(transformation(extent
                  ={{90,-50},{110,-30}}), iconTransformation(extent={{-20,80},{
                    20,120}})));
          Buildings.Controls.OBC.CDL.Interfaces.RealOutput PPum(
            final unit="W")
            "Power drawn by HW pumps"
            annotation (Placement(transformation(extent={{100,40},{140,80}}),
                             iconTransformation(extent={{100,20},{140,60}})));
          Buildings.Controls.OBC.CDL.Interfaces.RealOutput P(
            final unit="W")
            "Power drawn by heat pumps"
            annotation (Placement(transformation(extent={{100,80},{140,120}}),
              iconTransformation(extent={{100,60},{140,100}})));

          Buildings.Fluid.BaseClasses.MassFlowRateMultiplier mulConInl(
            redeclare final package Medium = Medium,
            final allowFlowReversal=allowFlowReversal,
            final use_input=true) "Flow rate multiplier"
            annotation (Placement(transformation(extent={{-80,-10},{-60,10}})));
          Buildings.Fluid.BaseClasses.MassFlowRateMultiplier mulConOut(
            redeclare final package Medium = Medium,
            final allowFlowReversal=allowFlowReversal,
            final use_input=true) "Flow rate multiplier"
            annotation (Placement(transformation(extent={{60,-10},{80,10}})));
          BaseClasses.MultipleCommands com(final nUni=nUni)
            "Convert command signals"
            annotation (Placement(transformation(extent={{-60,90},{-40,110}})));
          Buildings.Controls.OBC.CDL.Reals.Multiply mulP "Scale power"
            annotation (Placement(transformation(extent={{70,110},{90,90}})));
          Buildings.Fluid.HeatPumps.EquationFitReversible heaPum(
            redeclare final package Medium1 = Medium,
            redeclare final package Medium2 = MediumAir,
            final per=dat,
            final tau1=tau,
            final show_T=show_T,
            final energyDynamics=energyDynamics,
            final allowFlowReversal1=allowFlowReversal,
            final allowFlowReversal2=false) "Heat pump"
            annotation (Placement(transformation(extent={{-10,-16},{10,4}})));
          Buildings.Fluid.Movers.SpeedControlled_y pum(
            redeclare final package Medium = Medium,
            inputType=Buildings.Fluid.Types.InputType.Continuous,
            final tau=tau,
            final show_T=show_T,
            final allowFlowReversal=allowFlowReversal,
            final energyDynamics=energyDynamics,
            final use_inputFilter=use_inputFilter,
            final riseTime=riseTime,
            final init=init,
            final per=datPum,
            addPowerToMedium=false) "HW pump"
            annotation (Placement(transformation(extent={{-50,-10},{-30,10}})));
          Buildings.Fluid.Sources.MassFlowSource_WeatherData airSou(
            redeclare final package Medium = MediumAir,
            final use_m_flow_in=true,
            final nPorts=1) "Air flow source"
            annotation (Placement(transformation(extent={{42,-50},{22,-30}})));
          Buildings.Fluid.Sources.Boundary_pT airSin(redeclare final package
              Medium = MediumAir, final nPorts=1) "Air flow sink" annotation (
              Placement(transformation(extent={{-50,-50},{-30,-30}})));
          Buildings.Controls.OBC.CDL.Reals.MultiplyByParameter comFan(
            final k=mAirUni_flow_nominal)
            "Convert On/Off command to air flow setpoint"
            annotation (Placement(transformation(extent={{-10,10},{10,-10}},
                rotation=-90,
                origin={46,30})));
          Buildings.Controls.OBC.CDL.Reals.Multiply mulP1 "Scale power"
            annotation (Placement(transformation(extent={{70,70},{90,50}})));

          Buildings.Controls.OBC.CDL.Logical.Pre preY1[nUni]
            "Left limit of signal avoiding direct feedback of status to controller"
            annotation (Placement(transformation(extent={{-90,90},{-70,110}})));
          Buildings.Controls.OBC.CDL.Conversions.BooleanToReal booToRea
            "Convert to real"
            annotation (Placement(transformation(extent={{-10,-10},{10,10}},
                rotation=-90,
                origin={-20,80})));
          Buildings.Controls.OBC.CDL.Reals.Multiply inp
            "Compute pump input signal" annotation (Placement(transformation(
                extent={{10,-10},{-10,10}},
                rotation=90,
                origin={-40,30})));
          Buildings.Controls.OBC.CDL.Reals.Sources.Constant cst(final k=1)
            "Constant"
            annotation (Placement(transformation(extent={{-90,50},{-70,70}})));
          Buildings.Controls.OBC.CDL.Conversions.RealToInteger reaToInt
            "Convert to integer"
            annotation (Placement(transformation(extent={{-10,-10},{10,10}},
                rotation=-90,
                origin={-14,30})));
        protected
          parameter Medium.ThermodynamicState sta_nominal=Medium.setState_pTX(
            T=dat.hea.TRefLoa,
            p=3E5,
            X=Medium.X_default)
            "State of the medium at the medium default properties";
          parameter Modelica.Units.SI.Density rho_nominal=Medium.density(sta_nominal)
            "Density at the medium default properties";
        equation
          connect(mulConOut.uInv, mulConInl.u) annotation (Line(points={{81,6},{86,6},{86,
                  -20},{-86,-20},{-86,6},{-82,6}},     color={0,0,127}));
          connect(com.nUniOn, mulP.u2) annotation (Line(points={{-38,100},{60,100},{60,
                  106},{68,106}},   color={0,0,127}));

          connect(mulP.y, P)
            annotation (Line(points={{92,100},{120,100}},
                                                        color={0,0,127}));
          connect(com.nUniOnBou, mulConOut.u) annotation (Line(points={{-38,94},{16,94},
                  {16,6},{58,6}},        color={0,0,127}));
          connect(pum.port_b, heaPum.port_a1)
            annotation (Line(points={{-30,0},{-10,0}}, color={0,127,255}));
          connect(heaPum.port_b1, mulConOut.port_a) annotation (Line(points={{10,0},{60,
                  0}},                 color={0,127,255}));
          connect(mulConInl.port_b, pum.port_a) annotation (Line(points={{-60,0},{-50,0}},
                                    color={0,127,255}));
          connect(mulConOut.port_b, port_b)
            annotation (Line(points={{80,0},{100,0}}, color={0,127,255}));
          connect(heaPum.P, mulP.u1) annotation (Line(points={{11,-6.2},{18,-6.2},{18,
                  94},{68,94}},
                            color={0,0,127}));
          connect(port_a, mulConInl.port_a)
            annotation (Line(points={{-100,0},{-80,0}}, color={0,127,255}));
          connect(airSou.ports[1], heaPum.port_a2) annotation (Line(points={{22,-40},{
                  16,-40},{16,-12},{10,-12}},
                                           color={0,127,255}));
          connect(airSin.ports[1], heaPum.port_b2) annotation (Line(points={{-30,-40},{-20,
                  -40},{-20,-12},{-10,-12}}, color={0,127,255}));
          connect(TSet, heaPum.TSet) annotation (Line(points={{-120,-60},{-16,-60},{-16,
                  3},{-11.4,3}}, color={0,0,127}));
          connect(comFan.y, airSou.m_flow_in) annotation (Line(points={{46,18},{46,-32},
                  {42,-32}},         color={0,0,127}));
          connect(weaBus, airSou.weaBus) annotation (Line(
              points={{100,-40},{42,-40},{42,-39.8}},
              color={255,204,51},
              thickness=0.5), Text(
              string="%first",
              index=-1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          connect(mulP1.y, PPum)
            annotation (Line(points={{92,60},{120,60}}, color={0,0,127}));
          connect(pum.P, mulP1.u1) annotation (Line(points={{-29,9},{60,9},{60,54},{68,
                  54}}, color={0,0,127}));
          connect(com.nUniOn, mulP1.u2) annotation (Line(points={{-38,100},{60,100},{60,
                  66},{68,66}},
                            color={0,0,127}));
          connect(y1, preY1.u)
            annotation (Line(points={{-120,100},{-92,100}}, color={255,0,255}));
          connect(preY1.y, com.y1)
            annotation (Line(points={{-68,100},{-62,100}}, color={255,0,255}));
          connect(com.y1One, booToRea.u) annotation (Line(points={{-38,106},{-20,106},{
                  -20,92}},      color={255,0,255}));
          connect(inp.y, pum.y)
            annotation (Line(points={{-40,18},{-40,12}}, color={0,0,127}));
          connect(booToRea.y, comFan.u)
            annotation (Line(points={{-20,68},{-20,60},{46,60},{46,42}},
                                                              color={0,0,127}));
          connect(booToRea.y, inp.u2) annotation (Line(points={{-20,68},{-20,60},{-34,
                  60},{-34,42}}, color={0,0,127}));
          connect(cst.y, inp.u1)
            annotation (Line(points={{-68,60},{-46,60},{-46,42}}, color={0,0,127}));
          connect(booToRea.y, reaToInt.u) annotation (Line(points={{-20,68},{-20,60},{
                  -14,60},{-14,42}}, color={0,0,127}));
          connect(reaToInt.y, heaPum.uMod)
            annotation (Line(points={{-14,18},{-14,-6},{-11,-6}}, color={255,127,0}));
          annotation (
            defaultComponentName="heaPum",
            Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                Rectangle(
                  extent={{-100,-100},{100,100}},
                  lineColor={0,0,127},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Rectangle(
                  extent={{-70,80},{70,-80}},
                  lineColor={0,0,0},
                  fillColor={215,215,215},
                  fillPattern=FillPattern.Solid,
                  lineThickness=0.5),
                Rectangle(
                  extent={{-56,68},{58,50}},
                  lineColor={0,0,0},
                  fillColor={135,135,135},
                  fillPattern=FillPattern.Solid),
                Rectangle(
                  extent={{-56,-52},{58,-70}},
                  lineColor={0,0,0},
                  fillColor={135,135,135},
                  fillPattern=FillPattern.Solid),
                Polygon(
                  points={{-42,0},{-52,-12},{-32,-12},{-42,0}},
                  lineColor={0,0,0},
                  fillColor={135,135,135},
                  fillPattern=FillPattern.Solid,
                  lineThickness=0.5),
                Polygon(
                  points={{-42,0},{-52,10},{-32,10},{-42,0}},
                  lineColor={0,0,0},
                  fillColor={135,135,135},
                  fillPattern=FillPattern.Solid,
                  lineThickness=0.5),
                Rectangle(
                  extent={{-44,50},{-40,10}},
                  lineColor={0,0,0},
                  fillColor={135,135,135},
                  fillPattern=FillPattern.Solid),
                Rectangle(
                  extent={{-44,-12},{-40,-52}},
                  lineColor={0,0,0},
                  fillColor={135,135,135},
                  fillPattern=FillPattern.Solid),
                Rectangle(
                  extent={{38,50},{42,-52}},
                  lineColor={0,0,0},
                  fillColor={135,135,135},
                  fillPattern=FillPattern.Solid),
                Ellipse(
                  extent={{18,22},{62,-20}},
                  lineColor={0,0,0},
                  fillColor={135,135,135},
                  fillPattern=FillPattern.Solid,
                  lineThickness=0.5),
                Polygon(
                  points={{40,22},{22,-10},{58,-10},{40,22}},
                  lineColor={0,0,0},
                  fillColor={0,0,0},
                  fillPattern=FillPattern.Solid)}),
            Diagram(coordinateSystem(extent={{-100,-120},{100,120}})),
            Documentation(info="<html>
<p>
This model represents a set of identical air-to-water heat pumps
that are piped in parallel.
Dedicated constant-speed condenser pumps are included.
</p>
<h4>Control points</h4>
<p>
The following input and output points are available.
</p>
<ul>
<li>
On/Off command <code>y1</code>:
DO signal dedicated to each unit, with a dimensionality of one
</li>
<li>
Supply temperature setpoint <code>TSet</code>:
AO signal common to all units, with a dimensionality of zero
</li>
<li>
CW supply temperature <code>TConWatSup</code>:
AI signal common to all units, with a dimensionality of zero
</li>
</ul>
<h4>Details</h4>
<h5>Modeling approach</h5>
<p>
In a parallel arrangement, all operating units have the same operating point.
This allows modeling the heat transfer from outdoor air to condenser water
with a single instance of
<a href=\"modelica://Buildings.Fluid.HeatPumps.EquationFitReversible\">
Buildings.Fluid.HeatPumps.EquationFitReversible</a>.
Hydronics are resolved with mass flow rate multiplier components.
<p>
The model
<a href=\"modelica://Buildings.Fluid.HeatPumps.EquationFitReversible\">
Buildings.Fluid.HeatPumps.EquationFitReversible</a>
does not capture the sensitivity of the heat pump performance
to the HW supply temperature setpoint.
This means that a varying HW supply temperature setpoint
has no impact on the heat pump <i>COP</i> (all other variables
such as the HW return temperature being kept invariant).
This is a limitation of the model.
</p>
</html>",         revisions="<html>
<ul>
<li>
February 24, 2023, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>"));
        end HeatPumpGroup;

        model MultiplePumpsDp
          "Model of multiple identical pumps in parallel with dp-controlled pump model"
          extends BaseClasses.PartialMultiplePumps(
            final have_var=have_varSet,
            redeclare final Buildings.Fluid.Movers.FlowControlled_dp pum(
              final m_flow_nominal=mPum_flow_nominal,
              final dp_nominal=dpPum_nominal),
            cst(final k=dpPum_nominal));

          parameter Boolean have_varSet = true
            "Set to true for variable setpoint, false for constant setpoint (design value)"
            annotation(Evaluate=true);

          Buildings.Controls.OBC.CDL.Interfaces.RealInput dp_in(
            final unit="Pa",
            final min=0)
            if have_var
            "Differential pressure setpoint"
            annotation (
            Placement(transformation(extent={{-140,40},{-100,80}}),
              iconTransformation(extent={{-140,20},{-100,60}})));
        equation
          connect(dp_in, inp.u1) annotation (Line(points={{-120,60},{-6,60},{-6,52}},
                            color={0,0,127}));
          connect(inp.y, pum.dp_in)
            annotation (Line(points={{-8.88178e-16,28},{0,28},{0,12}},
                                                             color={0,0,127}));
          annotation (
            defaultComponentName="pum", Documentation(info="<html>
<p>
This model represents a set of identical dp-controlled 
variable speed pumps that are piped in parallel.
An optional check valve in series with each pump is included. 
</p>
<h4>Control points</h4>
<p>
The following input and output points are available.
</p>
<ul>
<li>
Start command (VFD Run) <code>y1</code>: 
DO signal dedicated to each unit, with a dimensionality of one
</li>
<li>
(Optionally if <code>have_varSet</code> is <code>true</code>) Differential pressure setpoint <code>dp_in</code>:
AO signal common to all units, with a dimensionality of zero
</li>
<li>
Pump status <code>y1_actual</code>: 
DI signal dedicated to each unit, with a dimensionality of one
</li>
</ul>
<h4>Details</h4>
<p>
See the base class 
<a href=\"modelica://Buildings.Experimental.DHC.Plants.Combined.Subsystems.BaseClasses.PartialMultiplePumps\">
Buildings.Experimental.DHC.Plants.Combined.Subsystems.BaseClasses.PartialMultiplePumps</a>.
for a description of the modeling approach.
</p>
</html>",         revisions="<html>
<ul>
<li>
February 24, 2023, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>"));
        end MultiplePumpsDp;

        model MultiplePumpsFlow
          "Model of multiple identical pumps in parallel with flow-controlled pump model"
          extends BaseClasses.PartialMultiplePumps(
            final have_var=have_varSet,
            redeclare final Buildings.Fluid.Movers.FlowControlled_m_flow pum(
              final m_flow_nominal=mPum_flow_nominal,
              final dp_nominal=dpPum_nominal),
            cst(final k=mPum_flow_nominal));

          parameter Boolean have_varSet = true
            "Set to true for variable setpoint, false for constant setpoint (design value)"
            annotation(Evaluate=true);

          Buildings.Controls.OBC.CDL.Interfaces.RealInput m_flow_in(
            final unit="kg/s",
            final min=0)
            if have_var
            "Mass flow rate setpoint (total over all pumps)"
            annotation (
            Placement(transformation(extent={{-140,40},{-100,80}}),
              iconTransformation(extent={{-140,20},{-100,60}})));
          Buildings.Controls.OBC.CDL.Reals.Divide div1
            "Divide total flow setpoint by number of pumps commanded On"
            annotation (Placement(transformation(extent={{-80,50},{-60,70}})));
        equation
          connect(m_flow_in, div1.u1) annotation (Line(points={{-120,60},{-90,60},{-90,66},
                  {-82,66}}, color={0,0,127}));
          connect(com.nUniOnBou, div1.u2) annotation (Line(points={{-28,94},{-20,94},{
                  -20,80},{-86,80},{-86,54},{-82,54}}, color={0,0,127}));
          connect(div1.y, inp.u1) annotation (Line(points={{-58,60},{-6,60},{-6,52}},
                        color={0,0,127}));
          connect(inp.y, pum.m_flow_in)
            annotation (Line(points={{-8.88178e-16,28},{0,28},{0,12}},
                                                             color={0,0,127}));
          annotation (
            defaultComponentName="pum", Documentation(info="<html>
<p>
This model represents a set of identical flow-controlled 
variable speed pumps that are piped in parallel.
An optional check valve in series with each pump is included. 
</p>
<h4>Control points</h4>
<p>
The following input and output points are available.
</p>
<ul>
<li>
Start command (VFD Run) <code>y1</code>: 
DO signal dedicated to each unit, with a dimensionality of one
</li>
<li>
(Optionally if <code>have_varSet</code> is <code>true</code>) Mass flow rate setpoint <code>m_flow_in</code>:
AO signal with a dimensionality of zero</br>
The setpoint corresponds to the <i>total</i> flow rate of all units.
</li>
<li>
Pump status <code>y1_actual</code>: 
DI signal dedicated to each unit, with a dimensionality of one
</li>
</ul>
<h4>Details</h4>
<p>
See the base class 
<a href=\"modelica://Buildings.Experimental.DHC.Plants.Combined.Subsystems.BaseClasses.PartialMultiplePumps\">
Buildings.Experimental.DHC.Plants.Combined.Subsystems.BaseClasses.PartialMultiplePumps</a>.
for a description of the modeling approach.
</p>
</html>",         revisions="<html>
<ul>
<li>
February 24, 2023, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>"));
        end MultiplePumpsFlow;

        model MultiplePumpsSpeed
          "Model of multiple identical pumps in parallel with speed-controlled pump model"
          extends
            estcp.DHC.Plants.Combined.Subsystems.BaseClasses.PartialMultiplePumps(
              redeclare final Buildings.Fluid.Movers.SpeedControlled_y pum, cst(
                final k=1));

          Buildings.Controls.OBC.CDL.Interfaces.RealInput y(
            final unit="1",
            final min=0,
            final max=1)
            if have_var
            "Pump speed (common to all pumps)"
            annotation (
             Placement(transformation(extent={{-140,40},{-100,80}}), iconTransformation(
                  extent={{-140,20},{-100,60}})));

        equation
          connect(y, inp.u1) annotation (Line(points={{-120,60},{-6,60},{-6,52}},
                color={0,0,127}));
          connect(inp.y, pum.y)
            annotation (Line(points={{-8.88178e-16,28},{0,28},{0,12}},
                                                             color={0,0,127}));
          annotation (
            defaultComponentName="pum", Documentation(info="<html>
<p>
This model represents a set of identical speed-controlled 
pumps that are piped in parallel.
The model may be configured to represent either constant speed
pumps or variable speed pumps.
An optional check valve in series with each pump is included. 
</p>
<h4>Control points</h4>
<p>
The following input and output points are available.
</p>
<ul>
<li>
Start command (VFD Run for variable speed pumps or Starter contact for constant speed pumps) <code>y1</code>: 
DO signal dedicated to each unit, with a dimensionality of one
</li>
<li>
(Optionally if <code>have_var</code> is <code>true</code>) Speed command <code>y</code>:
AO signal common to all units, with a dimensionality of zero
</li>
<li>
Pump status <code>y1_actual</code>: 
DI signal dedicated to each unit, with a dimensionality of one
</li>
</ul>
<h4>Details</h4>
<p>
See the base class 
<a href=\"modelica://Buildings.Experimental.DHC.Plants.Combined.Subsystems.BaseClasses.PartialMultiplePumps\">
Buildings.Experimental.DHC.Plants.Combined.Subsystems.BaseClasses.PartialMultiplePumps</a>.
for a description of the modeling approach.
</p>
</html>",         revisions="<html>
<ul>
<li>
February 24, 2023, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>"));
        end MultiplePumpsSpeed;

        package Validation "Package with validation models"
          extends Modelica.Icons.ExamplesPackage;

          model ChillerGroup "Validation of chiller group model"
            extends Modelica.Icons.Example;

            replaceable package MediumChiWat=Buildings.Media.Water
              constrainedby Modelica.Media.Interfaces.PartialMedium
              "CHW medium";
            replaceable package MediumConWat=Buildings.Media.Water
              constrainedby Modelica.Media.Interfaces.PartialMedium
              "CW medium";

            parameter
              Buildings.Fluid.Chillers.Data.ElectricReformulatedEIR.ReformEIRChiller_Carrier_19XR_1403kW_7_09COP_VSD
              dat "Chiller parameters" annotation (Placement(transformation(
                    extent={{90,92},{110,112}})));

            estcp.DHC.Plants.Combined.Subsystems.ChillerGroup chi(
              redeclare final package Medium1 = MediumConWat,
              redeclare final package Medium2 = MediumChiWat,
              show_T=true,
              nUni=2,
              dpEva_nominal=3E5,
              dpCon_nominal=3E5,
              final dat=dat,
              energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial)
              "Chiller group" annotation (Placement(transformation(extent={{-10,
                      -10},{10,10}})));

            Buildings.Fluid.Sources.Boundary_pT retChiWat(
              redeclare final package Medium = MediumChiWat,
              p=supChiWat.p + chi.dpEva_nominal + chi.valEva.dpValve_nominal,
              T=288.15,
              nPorts=1) "Boundary conditions for CHW" annotation (Placement(
                  transformation(
                  extent={{10,-10},{-10,10}},
                  rotation=-90,
                  origin={20,-102})));

            Buildings.Fluid.Sources.Boundary_pT supConWat(
              redeclare final package Medium = MediumConWat,
              p=retConWat.p + chi.dpCon_nominal + chi.valCon.dpValve_nominal,
              nPorts=1) "Boundary conditions for CW" annotation (Placement(
                  transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=-90,
                  origin={-20,100})));

            Buildings.Fluid.Sources.Boundary_pT retConWat(
              redeclare final package Medium = MediumConWat,
              p=200000,
              nPorts=1) "Boundary conditions for CW" annotation (Placement(
                  transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=-90,
                  origin={20,100})));
            Buildings.Fluid.Sources.Boundary_pT supChiWat(
              redeclare final package Medium = MediumChiWat,
              p=200000,
              nPorts=1) "Boundary conditions for CHW" annotation (Placement(
                  transformation(
                  extent={{10,-10},{-10,10}},
                  rotation=-90,
                  origin={-20,-102})));
            Buildings.Controls.OBC.CDL.Reals.Sources.Ramp TChiWatSupSet(
              y(displayUnit="degC", unit="K"),
              height=+5,
              duration=1000,
              offset=dat.TEvaLvg_nominal) "CHW supply temperature setpoint"
              annotation (Placement(transformation(extent={{-110,-50},{-90,-30}})));
            Buildings.Controls.OBC.CDL.Logical.Sources.TimeTable y1(
              table=[0,1,1; 0.5,1,1; 0.5,1,0; 0.8,1,0; 0.8,0,0; 1,0,0],
              timeScale=1000,
              period=1000) "Chiller On/Off command"
              annotation (Placement(transformation(extent={{-110,70},{-90,90}})));
            Buildings.Controls.OBC.CDL.Conversions.BooleanToReal booToRea[chi.nUni]
              "Convert DO to AO" annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={-60,80})));
          equation
            connect(chi.port_b1, retConWat.ports[1])
              annotation (Line(points={{10,6},{20,6},{20,90}}, color={0,127,255}));
            connect(supConWat.ports[1], chi.port_a1)
              annotation (Line(points={{-20,90},{-20,6},{-10,6}}, color={0,127,255}));
            connect(retChiWat.ports[1], chi.port_a2)
              annotation (Line(points={{20,-92},{20,-6},{10,-6}}, color={0,127,255}));
            connect(supChiWat.ports[1], chi.port_b2)
              annotation (Line(points={{-20,-92},{-20,-6},{-10,-6}}, color={0,127,255}));
            connect(TChiWatSupSet.y, chi.TSet) annotation (Line(points={{-88,-40},{-16,
                    -40},{-16,-9},{-12,-9}}, color={0,0,127}));
            connect(y1.y, chi.y1) annotation (Line(points={{-88,80},{-80,80},{-80,9},{-12,
                    9}}, color={255,0,255}));
            connect(y1.y, booToRea.u)
              annotation (Line(points={{-88,80},{-72,80}}, color={255,0,255}));
            connect(booToRea.y, chi.yValCon)
              annotation (Line(points={{-48,80},{-6,80},{-6,12}}, color={0,0,127}));
            connect(booToRea.y, chi.yValEva) annotation (Line(points={{-48,80},{-40,80},{
                    -40,-20},{-5.8,-20},{-5.8,-12}}, color={0,0,127}));
            annotation (
              __Dymola_Commands(
                file="modelica://Buildings/Resources/Scripts/Dymola/Experimental/DHC/Plants/Combined/Subsystems/Validation/ChillerGroup.mos"
                "Simulate and plot"),
              experiment(
                StopTime=1000,
                Tolerance=1e-06),
              Diagram(coordinateSystem(extent={{-120,-120},{120,120}})),
              Documentation(info="<html>
<p>
This model validates 
<a href=\"modelica://Buildings.Experimental.DHC.Plants.Combined.Subsystems.ChillerGroup\">
Buildings.Experimental.DHC.Plants.Combined.Subsystems.ChillerGroup</a>
in a configuration with two chillers.
The chillers are initially On and they are switched Off one after the other
as they receive an increasing CHW supply temperature setpoint.
</p>
</html>",           revisions="<html>
<ul>
<li>
February 24, 2023, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>"));
          end ChillerGroup;

          model ChillerHeatRecoveryGroup
            "Validation of heat recovery chiller group model"
            extends Modelica.Icons.Example;

            replaceable package Medium=Buildings.Media.Water
              constrainedby Modelica.Media.Interfaces.PartialMedium
              "Medium model";
            final parameter Integer nChiHea(final min=1, start=1)=2
              "Number of HRCs operating at design conditions"
              annotation(Evaluate=true);
            parameter
              Buildings.Fluid.Chillers.Data.ElectricReformulatedEIR.ReformEIRChiller_Carrier_19XR_1403kW_7_09COP_VSD
              dat(
              EIRFunT={0.0101739374,0.0607200115,0.0003348647,0.003162578,
                  0.0002388594,-0.0014121289},
              capFunT={0.0387084662,0.2305017927,0.0004779504,0.0178244359,-8.48808e-05,
                  -0.0032406711},
              EIRFunPLR={0.4304252832,-0.0144718912,5.12039e-05,-0.7562386674,
                  0.5661683373,0.0406987748,3.0278e-06,-0.3413411197,-0.000469572,
                  0.0055009208},
              QEva_flow_nominal=-1E6,
              COP_nominal=2.5,
              mEva_flow_nominal=20,
              mCon_flow_nominal=22,
              TEvaLvg_nominal=279.15,
              TEvaLvgMin=277.15,
              TEvaLvgMax=308.15,
              TConLvg_nominal=333.15,
              TConLvgMin=296.15,
              TConLvgMax=336.15) "Chiller parameters (each unit)" annotation (
                Dialog(group="CHW loop and cooling-only chillers"), Placement(
                  transformation(extent={{140,200},{160,220}})));

            estcp.DHC.Plants.Combined.Subsystems.ChillerHeatRecoveryGroup chi(
              redeclare final package Medium = Medium,
              show_T=true,
              final nUni=nChiHea,
              dpEva_nominal=3E5,
              dpCon_nominal=3E5,
              final dat=dat,
              energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial)
              "Chiller group"
              annotation (Placement(transformation(extent={{50,-10},{70,10}})));

            Buildings.Fluid.Sources.Boundary_pT bouChiWat(
              redeclare final package Medium = Medium,
              p=300000,
              nPorts=1) "Pressure boundary condition for CHW" annotation (
                Placement(transformation(
                  extent={{10,-10},{-10,10}},
                  rotation=-90,
                  origin={120,-190})));

            Buildings.Controls.OBC.CDL.Logical.Sources.TimeTable y1(
              table=[0,1,1; 0.8,1,1; 0.8,1,0; 0.9,1,0; 0.9,0,0; 1,0,0],
              timeScale=2000,
              period=2000) "Chiller On/Off command"
              annotation (Placement(transformation(extent={{-240,170},{-220,190}})));

            Buildings.Controls.OBC.CDL.Logical.Sources.TimeTable y1Coo(
              table=[0,0,0; 0.2,0,0; 0.2,0,1; 0.6,0,1; 0.6,1,1; 1,1,1],
              timeScale=2000,
              period=2000)
              "Cooling mode switchover command"
              annotation (Placement(transformation(extent={{-240,90},{-220,110}})));
            Buildings.Controls.OBC.CDL.Logical.Sources.TimeTable y1HeaCoo(
              table=[0,0,0; 0.4,0,0; 0.4,1,0; 0.6,1,0; 0.6,0,0; 1,0,0],
              timeScale=2000,
              period=2000)
              "Direct heat recovery switchover command"
              annotation (Placement(transformation(extent={{-240,50},{-220,70}})));
            Buildings.Controls.OBC.CDL.Reals.Sources.Constant TChiWatSet[nChiHea](
                each final k=chi.TChiWatSup_nominal, y(each final unit="K", each
                  displayUnit="degC")) "Supply temperature setpoint"
              annotation (Placement(transformation(extent={{-240,-190},{-220,-170}})));
            Buildings.Controls.OBC.CDL.Conversions.BooleanToReal booToRea[chi.nUni]
              "Convert DO to AO" annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={-130,200})));
            Buildings.Fluid.Sensors.TemperatureTwoPort THeaWatSup(redeclare
                final package Medium = Medium, final m_flow_nominal=chi.mConWat_flow_nominal)
              "HW supply temperature" annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={100,20})));
            Buildings.Fluid.Sensors.MassFlowRate floHeaWat(redeclare final
                package Medium = Medium) "HW flow" annotation (Placement(
                  transformation(
                  extent={{10,-10},{-10,10}},
                  rotation=0,
                  origin={130,80})));
            Buildings.Fluid.Sensors.MassFlowRate floChiWat(redeclare final
                package Medium = Medium) "CHW flow" annotation (Placement(
                  transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=90,
                  origin={160,-100})));
            Buildings.Fluid.Sensors.TemperatureTwoPort TChiWatSup(redeclare
                final package Medium = Medium, final m_flow_nominal=chi.mChiWat_flow_nominal)
              "CHW supply temperature" annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=-90,
                  origin={40,-80})));
            Buildings.Controls.OBC.CDL.Logical.Or cooOrDir[nChiHea]
              "Return true if cooling OR direct HR" annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={-160,-60})));
            Buildings.Controls.OBC.CDL.Conversions.BooleanToReal yValConSwi[nChiHea]
              "HRC condenser switchover valve commanded position"
                                                     annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={0,-20})));
            Buildings.Controls.OBC.CDL.Logical.Not hea[nChiHea] "Return true if heating"
              annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={-160,20})));
            Buildings.Controls.OBC.CDL.Conversions.BooleanToInteger booToInt[nChiHea]
              "Convert"
              annotation (Placement(transformation(extent={{-140,10},{-120,30}})));
            Buildings.Controls.OBC.CDL.Integers.MultiSum numHea(nin=nChiHea)
              "Number of HRC connected to HW loop"
              annotation (Placement(transformation(extent={{-110,10},{-90,30}})));
            Buildings.Controls.OBC.CDL.Integers.Less intLes[nChiHea]
              "Return true if switchover valve to be open"
              annotation (Placement(transformation(extent={{-110,-30},{-90,-10}})));
            Buildings.Controls.OBC.CDL.Integers.Sources.Constant idx[nChiHea](final k={i
                  for i in 1:nChiHea}) "HRC index"
              annotation (Placement(transformation(extent={{-240,-30},{-220,-10}})));
            Buildings.Controls.OBC.CDL.Routing.IntegerScalarReplicator rep(final nout=
                  nChiHea) "Replicate"
              annotation (Placement(transformation(extent={{-150,-50},{-130,-30}})));
            Buildings.Controls.OBC.CDL.Logical.Or mul[nChiHea]
              "Return true if cooling OR direct HR" annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={-30,-20})));
            Buildings.Controls.OBC.CDL.Conversions.BooleanToReal yValEvaSwi[nChiHea]
              "HRC evaporator switchover valve commanded position" annotation (Placement(
                  transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={0,-60})));
            Buildings.Controls.OBC.CDL.Logical.Not heaAndCas[nChiHea]
              "Return true if cascading heating" annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={-160,-100})));
            Buildings.Controls.OBC.CDL.Conversions.BooleanToInteger booToInt1[nChiHea]
              "Convert"
              annotation (Placement(transformation(extent={{-140,-110},{-120,-90}})));
            Buildings.Controls.OBC.CDL.Integers.MultiSum numHeaAndCas(nin=nChiHea)
              "Number of HRC in cascading heating"
              annotation (Placement(transformation(extent={{-110,-110},{-90,-90}})));
            Buildings.Controls.OBC.CDL.Routing.IntegerScalarReplicator rep1(final nout=
                  nChiHea) "Replicate"
              annotation (Placement(transformation(extent={{-150,-170},{-130,-150}})));
            Buildings.Controls.OBC.CDL.Integers.Less intLes1
                                                           [nChiHea]
              "Return true if switchover valve to be open"
              annotation (Placement(transformation(extent={{-110,-150},{-90,-130}})));
            Buildings.Controls.OBC.CDL.Logical.Or mul1
                                                     [nChiHea]
              "Return true if cooling OR direct HR" annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={-30,-60})));
            Buildings.Controls.OBC.CDL.Reals.Switch TChiHeaSupSet[nChiHea]
              "Switch supply temperature setpoint"
              annotation (Placement(transformation(extent={{-168,-210},{-148,-190}})));
            Buildings.Controls.OBC.CDL.Reals.Sources.Constant THeaWatSet[nChiHea](
                each final k=chi.THeaWatSup_nominal, y(each final unit="K", each
                  displayUnit="degC")) "Supply temperature setpoint"
              annotation (Placement(transformation(extent={{-240,-230},{-220,-210}})));
            estcp.DHC.Plants.Combined.Subsystems.MultiplePumpsSpeed pumChiWat(
              redeclare package Medium = Medium,
              energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,
              nPum=1,
              have_var=false,
              have_valve=true,
              final mPum_flow_nominal=chi.mChiWat_flow_nominal,
              final dpPum_nominal=chi.dpEva_nominal) "CHW pumps" annotation (
                Placement(transformation(extent={{120,-150},{140,-130}})));
            Buildings.Controls.OBC.CDL.Logical.MultiOr y1PumConWatCon(nin=2)
              "Start pump if any HRC in cascading cooling" annotation (Placement(
                  transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={-30,140})));
            estcp.DHC.Plants.Combined.Subsystems.MultiplePumpsSpeed pumHeaWat(
              redeclare package Medium = Medium,
              energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,
              nPum=1,
              have_var=false,
              have_valve=true,
              final mPum_flow_nominal=chi.mConWat_flow_nominal,
              final dpPum_nominal=chi.dpCon_nominal) "HW pumps" annotation (
                Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={130,20})));
            Buildings.Controls.OBC.CDL.Logical.And onAndHea[nChiHea]
              "Return true if On and heating" annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={-100,60})));
            Buildings.Controls.OBC.CDL.Logical.MultiOr y1PumHeaWat(nin=2)
              "Start pump if any HRC On and in heating" annotation (Placement(
                  transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={-30,60})));
            estcp.DHC.Plants.Combined.Subsystems.MultiplePumpsSpeed pumConWatCon(
              redeclare package Medium = Medium,
              energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,
              nPum=1,
              have_var=false,
              have_valve=true,
              final mPum_flow_nominal=chi.mConWat_flow_nominal,
              final dpPum_nominal=chi.dpCon_nominal)
              "CW pumps serving condenser barrels" annotation (Placement(
                  transformation(
                  extent={{10,-10},{-10,10}},
                  rotation=0,
                  origin={130,160})));
            estcp.DHC.Plants.Combined.Subsystems.MultiplePumpsSpeed pumConWatEva(
              redeclare package Medium = Medium,
              energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,
              nPum=1,
              have_var=false,
              have_valve=true,
              final mPum_flow_nominal=chi.mChiWat_flow_nominal,
              final dpPum_nominal=chi.dpEva_nominal)
              "CW pumps serving evaporator barrels" annotation (Placement(
                  transformation(extent={{120,-70},{140,-50}})));
            Buildings.Controls.OBC.CDL.Integers.GreaterEqualThreshold y1PumConWatEva(t=1)
              "Return true if CW to be operating"
              annotation (Placement(transformation(extent={{-40,-110},{-20,-90}})));
            Buildings.Controls.OBC.CDL.Logical.MultiOr y1PumChiWat(nin=2)
              "Start pump if any HRC in cooling or direct HR mode" annotation (Placement(
                  transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={-30,-160})));
            Buildings.Fluid.HeatExchangers.SensibleCooler_T disHeaWat(
              redeclare final package Medium = Medium,
              final m_flow_nominal=THeaWatRet.k,
              final dp_nominal=0,
              energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,
              tau=300,
              T_start=chi.THeaWatSup_nominal - 12)
              "Distribution system approximated by prescribed temperature"
              annotation (Placement(transformation(extent={{100,70},{80,90}})));
            Buildings.Fluid.HeatExchangers.Heater_T disConWatEva(
              redeclare final package Medium = Medium,
              final m_flow_nominal=chi.mChiWat_flow_nominal,
              final dp_nominal=0,
              energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,
              tau=300,
              T_start=TConWatEvaSup.k)
              "Distribution system approximated by prescribed temperature"
              annotation (Placement(transformation(extent={{80,-70},{100,-50}})));
            Buildings.Fluid.HeatExchangers.SensibleCooler_T disConWatCon(
              redeclare final package Medium = Medium,
              final m_flow_nominal=TConWatConSup.k,
              final dp_nominal=0,
              energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,
              tau=300,
              T_start=chi.TCasCooEnt_nominal)
              "Distribution system approximated by prescribed temperature"
              annotation (Placement(transformation(extent={{100,150},{80,170}})));
            Buildings.Controls.OBC.CDL.Reals.Sources.Constant THeaWatRet(
              final k=chi.THeaWatSup_nominal - 12,
              y(final unit="K", displayUnit="degC"))
              "Return temperature"
              annotation (Placement(transformation(extent={{220,90},{200,110}})));
            Buildings.Controls.OBC.CDL.Reals.Sources.Constant TConWatConSup(final k=
                  chi.TCasCooEnt_nominal, y(final unit="K", displayUnit="degC"))
              "Supply temperature"
              annotation (Placement(transformation(extent={{220,170},{200,190}})));
            Buildings.Controls.OBC.CDL.Reals.Sources.Constant TConWatEvaSup(final k=
                  chi.TCasHeaEnt_nominal, y(final unit="K", displayUnit="degC"))
              "Supply temperature"
              annotation (Placement(transformation(extent={{220,-30},{200,-10}})));
            Buildings.Fluid.HeatExchangers.Heater_T disChiWat(
              redeclare final package Medium = Medium,
              final m_flow_nominal=TChiWatRet.k,
              final dp_nominal=0,
              energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,
              tau=300,
              T_start=chi.TChiWatSup_nominal)
              "Distribution system approximated by prescribed temperature"
              annotation (Placement(transformation(extent={{80,-150},{100,-130}})));
            Buildings.Controls.OBC.CDL.Reals.Sources.Constant TChiWatRet(
              final k=chi.TChiWatSup_nominal + 6, y(final unit="K", displayUnit="degC"))
              "Return temperature"
              annotation (Placement(transformation(extent={{220,-130},{200,-110}})));
            Buildings.Fluid.Sources.Boundary_pT bouHeaWat(
              redeclare final package Medium = Medium,
              p=300000,
              nPorts=1) "Pressure boundary condition for HW" annotation (
                Placement(transformation(
                  extent={{10,-10},{-10,10}},
                  rotation=0,
                  origin={210,40})));
          equation
            connect(y1.y, chi.y1)
              annotation (Line(points={{-218,180},{26,180},{26,6},{48,6}},
                                                         color={255,0,255}));
            connect(y1Coo.y, chi.y1Coo)
              annotation (Line(points={{-218,100},{14,100},{14,0},{48,0}},
                                                                  color={255,0,255}));
            connect(y1.y, booToRea.u) annotation (Line(points={{-218,180},{-160,180},{-160,
                    200},{-142,200}},
                               color={255,0,255}));
            connect(booToRea.y, chi.yValEva) annotation (Line(points={{-118,200},{20,200},
                    {20,-16},{52,-16},{52,-12}},
                                 color={0,0,127}));
            connect(chi.port_b1, THeaWatSup.port_a)
              annotation (Line(points={{70,8},{80,8},{80,20},{90,20}},
                                                       color={0,127,255}));
            connect(floChiWat.port_b, chi.port_a4)
              annotation (Line(points={{160,-90},{160,-8},{70,-8}},
                                                                  color={0,127,255}));
            connect(TChiWatSup.port_a, chi.port_b4) annotation (Line(points={{40,-70},{40,
                    -8.5},{50,-8.5}},  color={0,127,255}));
            connect(y1Coo.y, cooOrDir.u1) annotation (Line(points={{-218,100},{-180,100},{
                    -180,-60},{-172,-60}},
                                         color={255,0,255}));
            connect(y1HeaCoo.y, cooOrDir.u2) annotation (Line(points={{-218,60},{-190,60},
                    {-190,-68},{-172,-68}},
                                          color={255,0,255}));
            connect(y1Coo.y, hea.u) annotation (Line(points={{-218,100},{-180,100},{-180,20},
                    {-172,20}}, color={255,0,255}));
            connect(hea.y, booToInt.u)
              annotation (Line(points={{-148,20},{-142,20}}, color={255,0,255}));
            connect(booToInt.y, numHea.u)
              annotation (Line(points={{-118,20},{-112,20}},
                                                           color={255,127,0}));
            connect(idx.y, intLes.u1)
              annotation (Line(points={{-218,-20},{-112,-20}},color={255,127,0}));
            connect(rep.y, intLes.u2) annotation (Line(points={{-128,-40},{-120,-40},{-120,
                    -28},{-112,-28}},
                                color={255,127,0}));
            connect(intLes.y, mul.u2) annotation (Line(points={{-88,-20},{-80,-20},{-80,-28},
                    {-42,-28}}, color={255,0,255}));
            connect(mul.y, yValConSwi.u)
              annotation (Line(points={{-18,-20},{-12,-20}},
                                                           color={255,0,255}));
            connect(yValConSwi.y, chi.yValConSwi) annotation (Line(points={{12,-20},{36,-20},
                    {36,16},{54,16},{54,12}}, color={0,0,127}));
            connect(y1Coo.y[1:2], mul.u1) annotation (Line(points={{-218,100},{-60,100},{-60,
                    -20},{-42,-20}}, color={255,0,255}));
            connect(yValEvaSwi.y, chi.yValEvaSwi) annotation (Line(points={{12,-60},{34,-60},
                    {34,-40},{54,-40},{54,-26},{54,-26},{54,-12}},
                                       color={0,0,127}));
            connect(numHea.y, rep.u) annotation (Line(points={{-88,20},{-80,20},{-80,0},{-160,
                    0},{-160,-40},{-152,-40}}, color={255,127,0}));
            connect(cooOrDir.y, heaAndCas.u) annotation (Line(points={{-148,-60},{-140,
                    -60},{-140,-80},{-176,-80},{-176,-100},{-172,-100}},
                                                                      color={255,0,255}));
            connect(heaAndCas.y, booToInt1.u) annotation (Line(points={{-148,-100},{-142,-100}},
                                              color={255,0,255}));
            connect(booToInt1.y, numHeaAndCas.u)
              annotation (Line(points={{-118,-100},{-112,-100}},
                                                               color={255,127,0}));
            connect(numHeaAndCas.y, rep1.u) annotation (Line(points={{-88,-100},{-80,-100},
                    {-80,-120},{-160,-120},{-160,-160},{-152,-160}},
                                            color={255,127,0}));
            connect(rep1.y, intLes1.u2) annotation (Line(points={{-128,-160},{-120,-160},
                    {-120,-148},{-112,-148}},
                                       color={255,127,0}));
            connect(idx.y, intLes1.u1) annotation (Line(points={{-218,-20},{-200,-20},{-200,
                    -140},{-112,-140}},                  color={255,127,0}));
            connect(cooOrDir.y, mul1.u1) annotation (Line(points={{-148,-60},{-42,-60}},
                                    color={255,0,255}));
            connect(intLes1.y, mul1.u2) annotation (Line(points={{-88,-140},{-56,-140},{
                    -56,-68},{-42,-68}},
                                    color={255,0,255}));
            connect(mul1.y, yValEvaSwi.u) annotation (Line(points={{-18,-60},{-12,-60}},
                               color={255,0,255}));
            connect(TChiWatSet.y, TChiHeaSupSet.u1) annotation (Line(points={{-218,-180},{
                    -190,-180},{-190,-192},{-170,-192}}, color={0,0,127}));
            connect(THeaWatSet.y, TChiHeaSupSet.u3) annotation (Line(points={{-218,-220},{
                    -190,-220},{-190,-208},{-170,-208}}, color={0,0,127}));
            connect(y1Coo.y, TChiHeaSupSet.u2) annotation (Line(points={{-218,100},{-180,100},
                    {-180,-200},{-170,-200}}, color={255,0,255}));
            connect(TChiHeaSupSet.y, chi.TSet) annotation (Line(points={{-146,-200},{24,
                    -200},{24,-6},{48,-6}},
                                      color={0,0,127}));
            connect(pumChiWat.port_b, floChiWat.port_a) annotation (Line(points={{140,-140},
                    {160,-140},{160,-110}},color={0,127,255}));
            connect(y1Coo.y[1:2], y1PumConWatCon.u[1:2]) annotation (Line(points={{-218,100},
                    {-180,100},{-180,140},{-42,140},{-42,141.75}}, color={255,0,255}));
            connect(pumHeaWat.port_b, floHeaWat.port_a) annotation (Line(points={{140,20},
                    {160,20},{160,80},{140,80}}, color={0,127,255}));
            connect(y1.y[1:2], onAndHea.u1) annotation (Line(points={{-218,180},{-160,180},
                    {-160,60},{-112,60}}, color={255,0,255}));
            connect(hea.y, onAndHea.u2) annotation (Line(points={{-148,20},{-146,20},{-146,
                    52},{-112,52}}, color={255,0,255}));
            connect(onAndHea.y, y1PumHeaWat.u[1:2]) annotation (Line(points={{-88,60},{-42,
                    60},{-42,61.75}}, color={255,0,255}));
            connect(y1PumHeaWat.y, pumHeaWat.y1[1]) annotation (Line(points={{-18,60},{110,
                    60},{110,28},{118,28}}, color={255,0,255}));
            connect(THeaWatSup.port_b, pumHeaWat.port_a)
              annotation (Line(points={{110,20},{120,20}}, color={0,127,255}));
            connect(pumConWatEva.port_b, chi.port_a2) annotation (Line(points={{140,-60},{
                    150,-60},{150,3},{70,3}}, color={0,127,255}));
            connect(chi.port_b3, pumConWatCon.port_a) annotation (Line(points={{70,-3.1},{
                    170,-3.1},{170,160},{140,160}}, color={0,127,255}));
            connect(numHeaAndCas.y, y1PumConWatEva.u)
              annotation (Line(points={{-88,-100},{-42,-100}}, color={255,127,0}));
            connect(y1PumConWatEva.y, pumConWatEva.y1[1]) annotation (Line(points={{-18,-100},
                    {110,-100},{110,-52},{118,-52}}, color={255,0,255}));
            connect(y1PumConWatCon.y, pumConWatCon.y1[1]) annotation (Line(points={{-18,140},
                    {160,140},{160,168},{142,168}}, color={255,0,255}));
            connect(y1PumChiWat.y, pumChiWat.y1[1]) annotation (Line(points={{-18,-160},{110,
                    -160},{110,-132},{118,-132}}, color={255,0,255}));
            connect(cooOrDir.y, y1PumChiWat.u[1:2]) annotation (Line(points={{-148,-60},{-60,
                    -60},{-60,-160},{-42,-160},{-42,-158.25}}, color={255,0,255}));
            connect(floHeaWat.port_b, disHeaWat.port_a)
              annotation (Line(points={{120,80},{100,80}}, color={0,127,255}));
            connect(disHeaWat.port_b, chi.port_a1) annotation (Line(points={{80,80},{44,80},
                    {44,8},{50,8}},     color={0,127,255}));
            connect(chi.port_b2, disConWatEva.port_a) annotation (Line(points={{50,3},{44,
                    3},{44,-60},{80,-60}}, color={0,127,255}));
            connect(disConWatEva.port_b, pumConWatEva.port_a)
              annotation (Line(points={{100,-60},{120,-60}}, color={0,127,255}));
            connect(pumConWatCon.port_b, disConWatCon.port_a)
              annotation (Line(points={{120,160},{100,160}}, color={0,127,255}));
            connect(disConWatCon.port_b, chi.port_a3) annotation (Line(points={{80,160},{40,
                    160},{40,-3.2},{50,-3.2}},    color={0,127,255}));
            connect(THeaWatRet.y, disHeaWat.TSet) annotation (Line(points={{198,100},{110,
                    100},{110,88},{102,88}},color={0,0,127}));
            connect(TConWatConSup.y, disConWatCon.TSet) annotation (Line(points={{198,180},
                    {110,180},{110,168},{102,168}}, color={0,0,127}));
            connect(TConWatEvaSup.y, disConWatEva.TSet) annotation (Line(points={{198,-20},
                    {70,-20},{70,-52},{78,-52}}, color={0,0,127}));
            connect(disChiWat.port_b, pumChiWat.port_a)
              annotation (Line(points={{100,-140},{120,-140}}, color={0,127,255}));
            connect(TChiWatSup.port_b, disChiWat.port_a) annotation (Line(points={{40,-90},
                    {40,-140},{80,-140}}, color={0,127,255}));
            connect(TChiWatRet.y, disChiWat.TSet) annotation (Line(points={{198,-120},{68,
                    -120},{68,-132},{78,-132}}, color={0,0,127}));
            connect(bouChiWat.ports[1], pumChiWat.port_a)
              annotation (Line(points={{120,-180},{120,-140}}, color={0,127,255}));
            connect(booToRea.y, chi.yValCon) annotation (Line(points={{-118,200},{52,200},
                    {52,12}},                color={0,0,127}));
            connect(bouHeaWat.ports[1], pumHeaWat.port_a) annotation (Line(points={{200,40},
                    {116,40},{116,20},{120,20}}, color={0,127,255}));
            annotation (
              __Dymola_Commands(
                file="modelica://Buildings/Resources/Scripts/Dymola/Experimental/DHC/Plants/Combined/Subsystems/Validation/ChillerHeatRecoveryGroup.mos"
                "Simulate and plot"),
              experiment(
                StopTime=2000,
                Tolerance=1e-06),
              Diagram(coordinateSystem(extent={{-260,-260},{260,260}})),
              Documentation(info="<html>
<p>
This model validates
<a href=\"modelica://Buildings.Experimental.DHC.Plants.Combined.Subsystems.ChillerHeatRecoveryGroup\">
Buildings.Experimental.DHC.Plants.Combined.Subsystems.ChillerHeatRecoveryGroup</a>
in a configuration with two HRCs.
</p>
</html>",           revisions="<html>
<ul>
<li>
February 24, 2023, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>"));
          end ChillerHeatRecoveryGroup;

          model CoolingTowerGroup "Validation of cooling tower group model"
            extends Modelica.Icons.Example;

            replaceable package MediumConWat=Buildings.Media.Water
              constrainedby Modelica.Media.Interfaces.PartialMedium
              "CW medium";

            estcp.DHC.Plants.Combined.Subsystems.CoolingTowerGroup coo(
              redeclare final package Medium = MediumConWat,
              show_T=true,
              nUni=2,
              mConWatUni_flow_nominal=1,
              dpConWatFriUni_nominal=1E4,
              mAirUni_flow_nominal=coo.mConWatUni_flow_nominal/1.45,
              TWetBulEnt_nominal=297.05,
              TConWatRet_nominal=308.15,
              TConWatSup_nominal=302.55,
              PFanUni_nominal=340*coo.mConWatUni_flow_nominal,
              energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial)
              "Cooling tower group" annotation (Placement(transformation(extent
                    ={{-10,-10},{10,10}})));

            Buildings.Fluid.Sources.Boundary_pT bouConWat(
              redeclare final package Medium = MediumConWat,
              T=coo.TConWatRet_nominal,
              nPorts=2) "Boundary conditions for CW" annotation (Placement(
                  transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=-90,
                  origin={0,-70})));

            Buildings.Controls.OBC.CDL.Reals.Sources.Ramp TConWatSupSet(
              height=+3,
              duration=500,
              offset=coo.TConWatSup_nominal,
              startTime=500,
              y(displayUnit="degC", unit="K"))
              "CW supply temperature setpoint"
              annotation (Placement(transformation(extent={{-110,50},{-90,70}})));
            Buildings.Controls.OBC.CDL.Logical.Sources.TimeTable y1(
              table=[0,1,1; 0.4,1,1; 0.4,1,0; 0.8,1,0; 0.8,0,0; 1,0,0],
              timeScale=1000,
              period=1000)
              "On/Off command"
              annotation (Placement(transformation(extent={{-110,90},{-90,110}})));
            Buildings.BoundaryConditions.WeatherData.ReaderTMY3 weaDat(filNam=
                  Modelica.Utilities.Files.loadResource(
                  "modelica://Buildings/Resources/weatherdata/USA_CA_San.Francisco.Intl.AP.724940_TMY3.mos"))
              "Outdoor conditions" annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={-100,20})));
            Buildings.Fluid.Sensors.TemperatureTwoPort TConWatSup(redeclare
                package Medium = MediumConWat, final m_flow_nominal=coo.mConWat_flow_nominal)
              "CW supply temperature" annotation (Placement(transformation(
                  extent={{10,10},{-10,-10}},
                  rotation=180,
                  origin={30,0})));
            Buildings.Fluid.Sensors.TemperatureTwoPort TConWatRet(redeclare
                package Medium = MediumConWat, final m_flow_nominal=coo.mConWat_flow_nominal)
              "CW return temperature" annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=90,
                  origin={-60,-40})));
            EnergyTransferStations.Combined.Controls.PIDWithEnable ctl(
              k=1,
              Ti=60,
              reverseActing=false) "Controller"
              annotation (Placement(transformation(extent={{-10,50},{10,70}})));
            estcp.DHC.Plants.Combined.Subsystems.MultiplePumpsSpeed pum(
              redeclare package Medium = MediumConWat,
              energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,
              final nPum=coo.nUni,
              have_var=false,
              have_valve=false,
              final mPum_flow_nominal=coo.mConWatUni_flow_nominal,
              final dpPum_nominal=coo.dpConWatFriUni_nominal) "CW pumps"
              annotation (Placement(transformation(extent={{50,-10},{70,10}})));
          equation
            connect(y1.y, coo.y1) annotation (Line(points={{-88,100},{-40,100},{-40,6},{-12,
                    6}}, color={255,0,255}));
            connect(weaDat.weaBus, coo.weaBus) annotation (Line(
                points={{-90,20},{0,20},{0,10}},
                color={255,204,51},
                thickness=0.5));
            connect(coo.port_b, TConWatSup.port_a)
              annotation (Line(points={{10,0},{10,1.77636e-15},{20,1.77636e-15}},
                                                                color={0,127,255}));
            connect(bouConWat.ports[1],TConWatRet. port_a) annotation (Line(points={{-1,-80},
                    {-60,-80},{-60,-50}},  color={0,127,255}));
            connect(TConWatRet.port_b, coo.port_a)
              annotation (Line(points={{-60,-30},{-60,0},{-10,0}}, color={0,127,255}));
            connect(coo.TConWatSup, ctl.u_m) annotation (Line(points={{12,4},{20,4},{20,
                    40},{0,40},{0,48}}, color={0,0,127}));
            connect(y1.y[1], ctl.uEna) annotation (Line(points={{-88,100},{-40,100},{-40,
                    40},{-4,40},{-4,48}}, color={255,0,255}));
            connect(TConWatSupSet.y, ctl.u_s)
              annotation (Line(points={{-88,60},{-12,60}}, color={0,0,127}));
            connect(ctl.y, coo.y) annotation (Line(points={{12,60},{20,60},{20,80},{-28,
                    80},{-28,-6},{-12,-6}}, color={0,0,127}));
            connect(pum.port_b, bouConWat.ports[2]) annotation (Line(points={{70,0},{80,0},
                    {80,-80},{1,-80}},   color={0,127,255}));
            connect(TConWatSup.port_b, pum.port_a)
              annotation (Line(points={{40,0},{50,0}}, color={0,127,255}));
            connect(y1.y, pum.y1) annotation (Line(points={{-88,100},{40,100},{40,8},{48,8}},
                  color={255,0,255}));
            annotation (
              __Dymola_Commands(
                file="modelica://Buildings/Resources/Scripts/Dymola/Experimental/DHC/Plants/Combined/Subsystems/Validation/CoolingTowerGroup.mos"
                "Simulate and plot"),
              experiment(
                StopTime=1000,
                Tolerance=1e-06),
              Diagram(coordinateSystem(extent={{-120,-120},{120,120}})),
              Documentation(info="<html>
<p>
This model validates
<a href=\"modelica://Buildings.Experimental.DHC.Plants.Combined.Subsystems.CoolingTowerGroup\">
Buildings.Experimental.DHC.Plants.Combined.Subsystems.CoolingTowerGroup</a>
in a configuration with two tower cells.
The tower cells are initially enabled and they are disabled one after the other
as the CW supply temperature setpoint is increasing after an initial
period where it is fixed at its design value.
The Start command of the CW pumps is the same signal
as the one used for the cooling towers.
</p>
</html>",           revisions="<html>
<ul>
<li>
February 24, 2023, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>"));
          end CoolingTowerGroup;

          model HeatPumpGroup "Validation of heat pump group model"
            extends Modelica.Icons.Example;

            replaceable package MediumHeaWat=Buildings.Media.Water
              constrainedby Modelica.Media.Interfaces.PartialMedium
              "CHW medium";
            replaceable package MediumAir=Buildings.Media.Air
              constrainedby Modelica.Media.Interfaces.PartialMedium
              "CW medium";

            parameter
              Buildings.Fluid.HeatPumps.Data.EquationFitReversible.Generic dat(
              dpHeaLoa_nominal=50000,
              dpHeaSou_nominal=100,
              hea(
                mLoa_flow=dat.hea.Q_flow/10/4186,
                mSou_flow=1E-4*dat.hea.Q_flow,
                Q_flow=1E6,
                P=dat.hea.Q_flow/2.2,
                coeQ={-5.64420084,1.95212447,9.96663913,0.23316322,-5.64420084},

                coeP={-3.96682255,6.8419453,1.99606939,0.01393387,-3.96682255},

                TRefLoa=298.15,
                TRefSou=253.15),
              coo(
                mLoa_flow=0,
                mSou_flow=0,
                Q_flow=-1,
                P=0,
                coeQ=fill(0, 5),
                coeP=fill(0, 5),
                TRefLoa=273.15,
                TRefSou=273.15)) "Heat pump parameters (each unit)" annotation
              (Placement(transformation(extent={{90,92},{110,112}})));

            estcp.DHC.Plants.Combined.Subsystems.HeatPumpGroup heaPum(
              redeclare final package Medium = MediumHeaWat,
              redeclare final package MediumAir = MediumAir,
              show_T=true,
              nUni=2,
              final dat=dat,
              energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial)
              "Heat pump group" annotation (Placement(transformation(extent={{-10,
                      -10},{10,10}})));

            Buildings.Fluid.Sources.Boundary_pT bouHeaWat(
              redeclare final package Medium = MediumHeaWat,
              use_T_in=true,
              nPorts=2) "Boundary conditions for HW" annotation (Placement(
                  transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=-90,
                  origin={2,-90})));

            Buildings.Controls.OBC.CDL.Reals.Sources.Constant THeaWatSupSet(
              k=dat.hea.TRefLoa+ 10,
              y(displayUnit="degC", unit="K")) "HW supply temperature setpoint"
              annotation (Placement(transformation(extent={{-110,50},{-90,70}})));
            Buildings.Controls.OBC.CDL.Logical.Sources.TimeTable y1(
              table=[0,1,1; 0.5,1,1; 0.5,1,0; 0.8,1,0; 0.8,0,0; 1,0,0],
              timeScale=1000,
              period=1000)
              "Heat pump On/Off command"
              annotation (Placement(transformation(extent={{-110,90},{-90,110}})));

            Buildings.BoundaryConditions.WeatherData.ReaderTMY3 weaDat(filNam=
                  Modelica.Utilities.Files.loadResource(
                  "modelica://Buildings/Resources/weatherdata/USA_IL_Chicago-OHare.Intl.AP.725300_TMY3.mos"))
              "Outdoor conditions" annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={-100,20})));
            Buildings.Controls.OBC.CDL.Reals.Sources.Ramp THeaWatRetBou(
              y(displayUnit="degC", unit="K"),
              height=+5,
              duration=1000,
              offset=dat.hea.TRefLoa) "HW return temperature"
              annotation (Placement(transformation(extent={{-110,-70},{-90,-50}})));
            Buildings.Fluid.Sensors.TemperatureTwoPort THeaWatSup(redeclare
                package Medium = MediumHeaWat, final m_flow_nominal=heaPum.mHeaWat_flow_nominal)
              "HW supply temperature" annotation (Placement(transformation(
                  extent={{10,10},{-10,-10}},
                  rotation=90,
                  origin={20,-40})));
            Buildings.Fluid.Sensors.TemperatureTwoPort THeaWatRet(redeclare
                package Medium = MediumHeaWat, final m_flow_nominal=heaPum.mHeaWat_flow_nominal)
              "HW return temperature" annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=90,
                  origin={-20,-40})));
          equation
            connect(THeaWatSupSet.y,heaPum. TSet) annotation (Line(points={{-88,60},{-60,60},
                    {-60,-6},{-12,-6}},      color={0,0,127}));
            connect(y1.y,heaPum. y1) annotation (Line(points={{-88,100},{-40,100},{-40,6},
                    {-12,6}},
                         color={255,0,255}));
            connect(weaDat.weaBus,heaPum. weaBus) annotation (Line(
                points={{-90,20},{0,20},{0,10}},
                color={255,204,51},
                thickness=0.5));
            connect(THeaWatRetBou.y, bouHeaWat.T_in)
              annotation (Line(points={{-88,-60},{6,-60},{6,-78}}, color={0,0,127}));
            connect(heaPum.port_b, THeaWatSup.port_a)
              annotation (Line(points={{10,0},{20,0},{20,-30}}, color={0,127,255}));
            connect(THeaWatSup.port_b, bouHeaWat.ports[1])
              annotation (Line(points={{20,-50},{20,-100},{1,-100}}, color={0,127,255}));
            connect(bouHeaWat.ports[2], THeaWatRet.port_a) annotation (Line(points={{3,-100},
                    {-20,-100},{-20,-50}}, color={0,127,255}));
            connect(THeaWatRet.port_b, heaPum.port_a)
              annotation (Line(points={{-20,-30},{-20,0},{-10,0}}, color={0,127,255}));
            annotation (
              __Dymola_Commands(
                file="modelica://Buildings/Resources/Scripts/Dymola/Experimental/DHC/Plants/Combined/Subsystems/Validation/HeatPumpGroup.mos"
                "Simulate and plot"),
              experiment(
                StopTime=1000,
                Tolerance=1e-06),
              Diagram(coordinateSystem(extent={{-120,-120},{120,120}})),
              Documentation(info="<html>
<p>
This model validates 
<a href=\"modelica://Buildings.Experimental.DHC.Plants.Combined.Subsystems.HeatPumpGroup\">
Buildings.Experimental.DHC.Plants.Combined.Subsystems.HeatPumpGroup</a>
in a configuration with two heat pumps.
The heat pumps are initially On and they are switched Off one after the other
as they are exposed to an increasing HW return temperature.
</p>
</html>",           revisions="<html>
<ul>
<li>
February 24, 2023, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>"));
          end HeatPumpGroup;

          model MultiplePumpsDp
            "Validation of multiple pumps model with dp-controlled pump model"
            extends BaseClasses.PartialMultiplePumps(
              redeclare final Subsystems.MultiplePumpsDp pum,
              redeclare final Buildings.Fluid.Movers.FlowControlled_dp pum1(
                final m_flow_nominal=mPum_flow_nominal,
                final dp_nominal=dpPum_nominal),
              redeclare final Buildings.Fluid.Movers.FlowControlled_dp pum2(
                final m_flow_nominal=mPum_flow_nominal,
                final dp_nominal=dpPum_nominal));

            Buildings.Controls.OBC.CDL.Reals.Sources.Ramp dpSet(
              height=dpPum_nominal, duration=500)
              "Differential pressure setpoint"
              annotation (Placement(transformation(extent={{-120,30},{-100,50}})));
          equation
            connect(dpSet.y, inp1.u1)
              annotation (Line(points={{-98,40},{114,40},{114,14}}, color={0,0,127}));
            connect(dpSet.y, inp2.u1) annotation (Line(points={{-98,40},{100,40},{100,-26},
                    {114,-26},{114,-30}}, color={0,0,127}));
            connect(inp1.y, pum1.dp_in) annotation (Line(points={{120,-10},{120,-20},{0,-20},
                    {0,-28}}, color={0,0,127}));
            connect(inp2.y, pum2.dp_in) annotation (Line(points={{120,-54},{120,-60},{0,-60},
                    {0,-68}}, color={0,0,127}));
            connect(dpSet.y, pum.dp_in) annotation (Line(points={{-98,40},{-40,40},{-40,64},
                    {-12,64}}, color={0,0,127}));
            annotation (
              __Dymola_Commands(
                file="modelica://Buildings/Resources/Scripts/Dymola/Experimental/DHC/Plants/Combined/Subsystems/Validation/MultiplePumpsDp.mos"
                "Simulate and plot"),
              experiment(
                StopTime=1000,
                Tolerance=1e-06),
            Diagram(
                  coordinateSystem(preserveAspectRatio=false, extent={{-140,-140},{140,140}})),
              Documentation(info="<html>
<p>
This model validates 
<a href=\"modelica://Buildings.Experimental.DHC.Plants.Combined.Subsystems.MultiplePumpsDp\">
Buildings.Experimental.DHC.Plants.Combined.Subsystems.MultiplePumpsDp</a>
by comparing an instance of that model with two instances of
<a href=\"modelica://Buildings.Fluid.Movers.FlowControlled_dp\">
Buildings.Fluid.Movers.FlowControlled_dp</a>
connected in parallel.
The two pumps are commanded On one after the other as they receive
an increasing differential pressure setpoint and work
against a two-way modulating valve that gets progressively opened.
</p>
</html>",           revisions="<html>
<ul>
<li>
February 24, 2023, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>"));
          end MultiplePumpsDp;

          model MultiplePumpsFlow
            "Validation of multiple pumps model with flow-controlled pump model"
            extends BaseClasses.PartialMultiplePumps(
              redeclare final Subsystems.MultiplePumpsFlow pum,
              redeclare final Buildings.Fluid.Movers.FlowControlled_m_flow pum1(
                final m_flow_nominal=mPum_flow_nominal,
                final dp_nominal=dpPum_nominal),
              redeclare final Buildings.Fluid.Movers.FlowControlled_m_flow pum2(
                final m_flow_nominal=mPum_flow_nominal,
                final dp_nominal=dpPum_nominal));

            Buildings.Controls.OBC.CDL.Reals.Sources.Ramp floSet(height=
                  mPum_flow_nominal, duration=500) "Mass flow rate setpoint (each pump)"
              annotation (Placement(transformation(extent={{-120,30},{-100,50}})));
            Buildings.Controls.OBC.CDL.Reals.Add floTotSet
              "Compute total flow rate setpoint (all pumps)" annotation (Placement(
                  transformation(
                  extent={{10,-10},{-10,10}},
                  rotation=-90,
                  origin={80,0})));
          equation
            connect(floSet.y, inp1.u1)
              annotation (Line(points={{-98,40},{114,40},{114,14}}, color={0,0,127}));
            connect(floSet.y, inp2.u1) annotation (Line(points={{-98,40},{100,40},{100,-26},
                    {114,-26},{114,-30}}, color={0,0,127}));
            connect(inp2.y, pum2.m_flow_in) annotation (Line(points={{120,-54},{120,-60},
                    {0,-60},{0,-68}}, color={0,0,127}));
            connect(inp1.y, pum1.m_flow_in) annotation (Line(points={{120,-10},{120,-20},
                    {0,-20},{0,-28}}, color={0,0,127}));
            connect(floTotSet.y, pum.m_flow_in) annotation (Line(points={{80,12},{80,44},
                    {-16,44},{-16,64},{-12,64}}, color={0,0,127}));
            connect(inp1.y, floTotSet.u1) annotation (Line(points={{120,-10},{120,-20},{
                    86,-20},{86,-12}}, color={0,0,127}));
            connect(inp2.y, floTotSet.u2) annotation (Line(points={{120,-54},{120,-60},{
                    74,-60},{74,-12}}, color={0,0,127}));
            annotation (
              __Dymola_Commands(
                file="modelica://Buildings/Resources/Scripts/Dymola/Experimental/DHC/Plants/Combined/Subsystems/Validation/MultiplePumpsFlow.mos"
                "Simulate and plot"),
              experiment(
                StopTime=1000,
                Tolerance=1e-06),
            Diagram(
                  coordinateSystem(preserveAspectRatio=false, extent={{-140,-140},{140,140}})),
              Documentation(info="<html>
<p>
This model validates 
<a href=\"modelica://Buildings.Experimental.DHC.Plants.Combined.Subsystems.MultiplePumpsFlow\">
Buildings.Experimental.DHC.Plants.Combined.Subsystems.MultiplePumpsFlow</a>
by comparing an instance of that model with two instances of
<a href=\"modelica://Buildings.Fluid.Movers.FlowControlled_m_flow\">
Buildings.Fluid.Movers.FlowControlled_m_flow</a>
connected in parallel.
The two pumps are commanded On one after the other as they receive
an increasing flow setpoint and work against a two-way modulating 
valve that gets progressively opened.
</p>
</html>",           revisions="<html>
<ul>
<li>
February 24, 2023, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>"));
          end MultiplePumpsFlow;

          model MultiplePumpsSpeed
            "Validation of multiple pumps model with speed-controlled pump model"
            extends BaseClasses.PartialMultiplePumps(
              redeclare final Subsystems.MultiplePumpsSpeed pum,
              redeclare final Buildings.Fluid.Movers.SpeedControlled_y pum1,
              redeclare final Buildings.Fluid.Movers.SpeedControlled_y pum2);

            Buildings.Controls.OBC.CDL.Reals.Sources.Ramp spe(duration=500)
              "Pump speed signal"
              annotation (Placement(transformation(extent={{-120,30},{-100,50}})));
          equation
            connect(spe.y, pum.y) annotation (Line(points={{-98,40},{-40,40},{-40,64},{
                    -12,64}}, color={0,0,127}));
            connect(spe.y, inp1.u1)
              annotation (Line(points={{-98,40},{114,40},{114,14}}, color={0,0,127}));
            connect(spe.y, inp2.u1) annotation (Line(points={{-98,40},{100,40},{100,-26},
                    {114,-26},{114,-30}}, color={0,0,127}));
            connect(inp1.y, pum1.y) annotation (Line(points={{120,-10},{120,-20},{0,-20},
                    {0,-28}}, color={0,0,127}));
            connect(inp2.y, pum2.y) annotation (Line(points={{120,-54},{120,-60},{0,-60},
                    {0,-68}}, color={0,0,127}));
            annotation (
              __Dymola_Commands(
                file="modelica://Buildings/Resources/Scripts/Dymola/Experimental/DHC/Plants/Combined/Subsystems/Validation/MultiplePumpsSpeed.mos"
                "Simulate and plot"),
              experiment(
                StopTime=1000,
                Tolerance=1e-06),
            Diagram(
                  coordinateSystem(preserveAspectRatio=false, extent={{-140,-140},{140,140}})),
              Documentation(info="<html>
<p>
This model validates 
<a href=\"modelica://Buildings.Experimental.DHC.Plants.Combined.Subsystems.MultiplePumpsSpeed\">
Buildings.Experimental.DHC.Plants.Combined.Subsystems.MultiplePumpsSpeed</a>
by comparing an instance of that model with two instances of
<a href=\"modelica://Buildings.Fluid.Movers.SpeedControlled_y\">
Buildings.Fluid.Movers.SpeedControlled_y</a>
connected in parallel.
The two pumps are commanded On one after the other as they receive
an increasing speed signal and work against a two-way modulating valve 
that gets progressively opened.
</p>
</html>",           revisions="<html>
<ul>
<li>
February 24, 2023, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>"));
          end MultiplePumpsSpeed;

          model ValveOpeningFlowBalancing
            "Validation model for the computation of the valve opening ensuring flow balancing"
            extends Modelica.Icons.Example;
            replaceable package Medium=Buildings.Media.Water
              constrainedby Modelica.Media.Interfaces.PartialMedium
              "CHW medium";

            parameter Real m1_flow = 1
              "Valve #1 design mass flow rate";
            parameter Real m2_flow = 1.5
              "Valve #2 design mass flow rate";
            parameter Real dpv1 = 1E3
              "Valve #1 design pressure drop";
            parameter Real dpv2 = 1E3
              "Valve #2 design pressure drop";
            parameter Real dpf1 = 3E4
              "Design pressure drop of fixed flow resistance in series with valve #1";
            parameter Real dpf2 = 5E4
              "Design pressure drop of fixed flow resistance in series with valve #2";
            parameter Real dps = 20E4;

            parameter Real y1 = if dpf2 + dpv2 - dpf1 <= 0 then 1 else
              (dpv1 / (dpf2 + dpv2 - dpf1))^0.5
              "Valve #1 opening";
            parameter Real y2 = if dpf1 + dpv1 - dpf2 <= 0 then 1 else
              (dpv2 / (dpf1 + dpv1 - dpf2))^0.5
              "Valve #2 opening";

            Buildings.Fluid.Actuators.Valves.TwoWayLinear val1(
              redeclare package Medium = Medium,
              m_flow_nominal=m1_flow,
              linearized=true,
              dpValve_nominal=dpv1,
              use_inputFilter=false,
              dpFixed_nominal=dpf1) "Valve #1"
              annotation (Placement(transformation(extent={{-10,30},{10,50}})));
            Buildings.Fluid.Actuators.Valves.TwoWayLinear val2(
              redeclare package Medium = Medium,
              m_flow_nominal=m2_flow,
              linearized=true,
              dpValve_nominal=dpv2,
              use_inputFilter=false,
              dpFixed_nominal=dpf2) "Valve #1" annotation (Placement(
                  transformation(extent={{-10,-50},{10,-30}})));
            Buildings.Fluid.Sources.Boundary_pT bou(
              p=Medium.p_default + dps,
              nPorts=2,
              redeclare package Medium = Medium) "Pressure boundary condition"
              annotation (Placement(transformation(extent={{-80,-10},{-60,10}})));
            Buildings.Fluid.Sources.Boundary_pT bou1(nPorts=2, redeclare
                package Medium = Medium) "Pressure boundary condition"
              annotation (Placement(transformation(extent={{90,-10},{70,10}})));
            Modelica.Blocks.Sources.RealExpression y[2](y={y1, y2})
              "Valve opening signal"
              annotation (Placement(transformation(extent={{-80,50},{-60,70}})));
          equation
            connect(bou.ports[1], val1.port_a) annotation (Line(points={{-60,-1},{-40,-1},
                    {-40,40},{-10,40}}, color={0,127,255}));
            connect(val1.port_b, bou1.ports[1]) annotation (Line(points={{10,40},{40,40},{
                    40,-1},{70,-1}}, color={0,127,255}));
            connect(bou.ports[2],val2. port_a) annotation (Line(points={{-60,1},{-40,1},{-40,
                    -40},{-10,-40}}, color={0,127,255}));
            connect(val2.port_b, bou1.ports[2]) annotation (Line(points={{10,-40},{40,-40},
                    {40,1},{70,1}}, color={0,127,255}));
            connect(y[1].y, val1.y)
              annotation (Line(points={{-59,60},{0,60},{0,52}}, color={0,0,127}));
            connect(y[2].y,val2. y) annotation (Line(points={{-59,60},{-20,60},{-20,-20},{
                    0,-20},{0,-28}}, color={0,0,127}));
            annotation (
              __Dymola_Commands(
                file="modelica://Buildings/Resources/Scripts/Dymola/Experimental/DHC/Plants/Combined/Subsystems/Validation/ValveOpeningFlowBalancing.mos"
                "Simulate and plot"),
              experiment(
                StopTime=1,
                Tolerance=1e-06),
            Documentation(info="<html>
<p>
This model validates the computation of the valve opening that ensures
flow balancing proportional to design flow in the case of linear valves
configured with a pressure drop varying linearly with the flow rate.
</p>
</html>",           revisions="<html>
<ul>
<li>
February 24, 2023, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>"));
          end ValveOpeningFlowBalancing;

          package BaseClasses "Package with base classes"
            extends Modelica.Icons.BasesPackage;

            partial model PartialMultiplePumps
              "Base class for validating the multiple pumps model"
              extends Modelica.Icons.Example;

              package Medium = Buildings.Media.Water
                "Medium model for hot water";

              parameter Integer nPum(
                final min=1)=2
                "Number of pumps"
                annotation(Evaluate=true);
              parameter Modelica.Units.SI.MassFlowRate mPum_flow_nominal=1
                "Pump mass flow rate (each pump)"
                annotation(Dialog(group="Nominal condition"));
              parameter Modelica.Units.SI.PressureDifference dpPum_nominal = 1E5
                "Pump head (each pump)"
                annotation(Dialog(group="Nominal condition"));
              final parameter Modelica.Units.SI.MassFlowRate m_flow_nominal=
                nPum * mPum_flow_nominal
                "Circuit mass flow rate at design conditions";
              parameter Modelica.Units.SI.Pressure p_min = 2E5
                "Circuit minimum pressure";
              parameter Modelica.Units.SI.PressureDifference dp_nominal = dpPum_nominal
                "Circuit total pressure drop at design conditions";

              Buildings.Fluid.Sources.Boundary_pT bou(
                redeclare final package Medium = Medium,
                final p=p_min,
                nPorts=2) "Pressure boundary condition" annotation (Placement(
                    transformation(extent={{-80,50},{-60,70}})));
              replaceable
                estcp.DHC.Plants.Combined.Subsystems.MultiplePumpsSpeed pum
                constrainedby
                estcp.DHC.Plants.Combined.Subsystems.BaseClasses.PartialMultiplePumps(
                redeclare final package Medium = Medium,
                final nPum=nPum,
                final mPum_flow_nominal=mPum_flow_nominal,
                final dpPum_nominal=dpPum_nominal,
                use_inputFilter=false,
                energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial)
                "Multiple pumps in parallel - Speed controlled" annotation (
                  Placement(transformation(extent={{-10,50},{10,70}})));

              Buildings.Fluid.Sensors.RelativePressure senRelPre(redeclare
                  package Medium = Medium) "Differential pressure sensor"
                annotation (Placement(transformation(
                    extent={{-10,-10},{10,10}},
                    rotation=0,
                    origin={40,60})));
              Buildings.Fluid.Sensors.MassFlowRate senMasFlo(redeclare package
                  Medium = Medium) "Mass flow rate sensor" annotation (
                  Placement(transformation(
                    extent={{10,-10},{-10,10}},
                    rotation=90,
                    origin={20,30})));
              Buildings.Controls.OBC.CDL.Reals.Sources.Ramp ope(
                height=0.8,
                duration=300,
                offset=0.2,
                startTime=200)
                "Valve opening signal"
                annotation (Placement(transformation(extent={{-120,-10},{-100,10}})));
              Buildings.Fluid.Actuators.Valves.TwoWayEqualPercentage val(
                redeclare package Medium = Medium,
                m_flow_nominal=m_flow_nominal,
                dpValve_nominal=5000,
                dpFixed_nominal=dp_nominal - val.dpValve_nominal)
                "Modulating valve" annotation (Placement(transformation(extent=
                        {{10,-10},{-10,10}})));

              Buildings.Controls.OBC.CDL.Logical.Sources.TimeTable y1Pum(
                table=[0,0,0; 1,0,0; 1,1,0; 4,1,1; 4,1,1; 10,1,1],
                timeScale=100,
                period=1000) "Pump Start signal"
                annotation (Placement(transformation(extent={{-120,110},{-100,130}})));
              replaceable Buildings.Fluid.Movers.SpeedControlled_y pum1
                constrainedby
                Buildings.Fluid.Movers.BaseClasses.PartialFlowMachine(
                redeclare final package Medium = Medium,
                final energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,

                use_inputFilter=false,
                final per=pum.per,
                addPowerToMedium=false) "Pump" annotation (Placement(
                    transformation(extent={{-10,-50},{10,-30}})));
              Buildings.Fluid.FixedResistances.CheckValve cheVal1(
                redeclare final package Medium = Medium,
                final m_flow_nominal=mPum_flow_nominal,
                final dpValve_nominal=pum.dpValve_nominal) "Check valve"
                annotation (Placement(transformation(extent={{30,-50},{50,-30}})));
              replaceable Buildings.Fluid.Movers.SpeedControlled_y pum2
                constrainedby
                Buildings.Fluid.Movers.BaseClasses.PartialFlowMachine(
                redeclare final package Medium = Medium,
                energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,
                use_inputFilter=false,
                final per=pum.per,
                addPowerToMedium=false) "Pump" annotation (Placement(
                    transformation(extent={{-10,-90},{10,-70}})));
              Buildings.Fluid.FixedResistances.CheckValve cheVal2(
                redeclare final package Medium = Medium,
                final m_flow_nominal=mPum_flow_nominal,
                final dpValve_nominal=pum.dpValve_nominal) "Check valve"
                annotation (Placement(transformation(extent={{30,-90},{50,-70}})));
              Buildings.Fluid.Actuators.Valves.TwoWayEqualPercentage val1(
                redeclare package Medium = Medium,
                m_flow_nominal=m_flow_nominal,
                dpValve_nominal=5000,
                dpFixed_nominal=dp_nominal - val.dpValve_nominal)
                "Modulating valve" annotation (Placement(transformation(extent=
                        {{10,-130},{-10,-110}})));
              Buildings.Controls.OBC.CDL.Conversions.BooleanToReal booToRea[2]
                "Convert to real"
                annotation (Placement(transformation(extent={{80,110},{100,130}})));
              Buildings.Fluid.Sensors.RelativePressure senRelPre1(redeclare
                  package Medium = Medium) "Differential pressure sensor"
                annotation (Placement(transformation(
                    extent={{-10,-10},{10,10}},
                    rotation=0,
                    origin={90,-80})));
              Buildings.Fluid.Sensors.MassFlowRate senMasFlo1(redeclare package
                  Medium = Medium) "Mass flow rate sensor" annotation (
                  Placement(transformation(
                    extent={{10,-10},{-10,10}},
                    rotation=90,
                    origin={60,-100})));
              Buildings.Controls.OBC.CDL.Reals.Multiply inp1
                "Compute pump input signal" annotation (Placement(transformation(
                    extent={{10,-10},{-10,10}},
                    rotation=90,
                    origin={120,2})));
              Buildings.Controls.OBC.CDL.Reals.Multiply inp2
                "Compute pump input signal" annotation (Placement(transformation(
                    extent={{10,-10},{-10,10}},
                    rotation=90,
                    origin={120,-42})));
            equation
              connect(bou.ports[1], pum.port_a)
                annotation (Line(points={{-60,59},{-60,60},{-10,60}}, color={0,127,255}));
              connect(val.port_b, pum.port_a) annotation (Line(points={{-10,0},{-20,0},{-20,
                      60},{-10,60}}, color={0,127,255}));
              connect(pum.port_b, senRelPre.port_a)
                annotation (Line(points={{10,60},{30,60}}, color={0,127,255}));
              connect(ope.y, val.y) annotation (Line(points={{-98,0},{-40,0},{-40,20},{0,20},
                      {0,12}}, color={0,0,127}));
              connect(y1Pum.y, pum.y1) annotation (Line(points={{-98,120},{-14,120},{-14,68},
                      {-12,68}},         color={255,0,255}));
              connect(pum.port_b, senMasFlo.port_a)
                annotation (Line(points={{10,60},{20,60},{20,40}}, color={0,127,255}));
              connect(senMasFlo.port_b, val.port_a)
                annotation (Line(points={{20,20},{20,0},{10,0}}, color={0,127,255}));
              connect(senRelPre.port_b, pum.port_a) annotation (Line(points={{50,60},{60,60},
                      {60,74},{-10,74},{-10,60}}, color={0,127,255}));
              connect(pum1.port_b, cheVal1.port_a)
                annotation (Line(points={{10,-40},{30,-40}}, color={0,127,255}));
              connect(pum2.port_b, cheVal2.port_a)
                annotation (Line(points={{10,-80},{30,-80}}, color={0,127,255}));
              connect(val1.port_b, pum2.port_a) annotation (Line(points={{-10,-120},{-40,-120},
                      {-40,-80},{-10,-80}}, color={0,127,255}));
              connect(val1.port_b, pum1.port_a) annotation (Line(points={{-10,-120},{-40,-120},
                      {-40,-40},{-10,-40}}, color={0,127,255}));
              connect(val1.port_b, bou.ports[2]) annotation (Line(points={{-10,-120},{-60,-120},
                      {-60,61}}, color={0,127,255}));
              connect(y1Pum.y, booToRea.u)
                annotation (Line(points={{-98,120},{78,120}}, color={255,0,255}));
              connect(cheVal2.port_b, senMasFlo1.port_a)
                annotation (Line(points={{50,-80},{60,-80},{60,-90}}, color={0,127,255}));
              connect(senMasFlo1.port_b, val1.port_a) annotation (Line(points={{60,-110},{60,
                      -120},{10,-120}}, color={0,127,255}));
              connect(cheVal1.port_b, senMasFlo1.port_a)
                annotation (Line(points={{50,-40},{60,-40},{60,-90}}, color={0,127,255}));
              connect(senRelPre1.port_a, senMasFlo1.port_a)
                annotation (Line(points={{80,-80},{60,-80},{60,-90}}, color={0,127,255}));
              connect(senRelPre1.port_b, pum2.port_a) annotation (Line(points={{100,-80},{120,
                      -80},{120,-130},{-40,-130},{-40,-80},{-10,-80}}, color={0,127,255}));
              connect(booToRea[1].y, inp1.u2)
                annotation (Line(points={{102,120},{126,120},{126,14}}, color={0,0,127}));
              connect(ope.y, val1.y) annotation (Line(points={{-98,0},{-80,0},{-80,-100},{0,
                      -100},{0,-108}}, color={0,0,127}));
              connect(booToRea[2].y, inp2.u2) annotation (Line(points={{102,120},{134,120},{
                      134,-20},{126,-20},{126,-30}}, color={0,0,127}));
              annotation (
                __Dymola_Commands(
                  file="modelica://Buildings/Resources/Scripts/Dymola/Experimental/DHC/Plants/Combined/Subsystems/Validation/MultiplePumpsSpeed.mos"
                  "Simulate and plot"),
                experiment(
                  StopTime=1000,
                  Tolerance=1e-06),
              Diagram(
                    coordinateSystem(preserveAspectRatio=false, extent={{-140,-140},{140,140}})),
                Documentation(info="<html>
<p>
This base class is used to construct validation models 
for the various multiple-pump models within 
<a href=\"modelica://Buildings.Experimental.DHC.Plants.Combined.Subsystems\">
Buildings.Experimental.DHC.Plants.Combined.Subsystems</a>.
</p>
</html>",             revisions="<html>
<ul>
<li>
February 24, 2023, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>"));
            end PartialMultiplePumps;
            annotation (Documentation(info="<html>
<p>
This package contains base classes that are used 
for validation purposes.
</p>
</html>"));
          end BaseClasses;
          annotation (Documentation(info="<html>
<p>
This pakcge contains validation models.
</p>
</html>"));
        end Validation;

        package BaseClasses "Package with base classes"
          extends Modelica.Icons.BasesPackage;

          block MultipleCommands
            "Block that converts command signals for multiple units"

            parameter Integer nUni(final min=1, start=1)
              "Number of units"
              annotation(Evaluate=true);

            Buildings.Controls.OBC.CDL.Interfaces.BooleanInput y1[nUni]
              "Command signal"
              annotation (Placement(transformation(extent={{-140,-20},{-100,20}}),
                  iconTransformation(extent={{-140,-20},{-100,20}})));
            Buildings.Controls.OBC.CDL.Interfaces.BooleanOutput y1One
              "On/Off signal: true if at least one unit is commanded On"
              annotation (Placement(transformation(extent={{100,40},{140,80}}),  iconTransformation(
                    extent={{100,40},{140,80}})));
            Buildings.Controls.OBC.CDL.Interfaces.RealOutput nUniOnBou
              "Number of units that are commanded On, with lower bound of 1"
              annotation (Placement(transformation(extent={{100,-80},{140,-40}}),
                iconTransformation(extent={{100,-80},{140,-40}})));
            Buildings.Controls.OBC.CDL.Interfaces.RealOutput nUniOn
              "Number of units that are commanded On"
              annotation (Placement(transformation(extent={{100,-20},{140,20}}),
              iconTransformation(extent={{100,-20},{140,20}})));

            Buildings.Controls.OBC.CDL.Conversions.BooleanToReal booToRea[nUni]
              "Convert to real"
              annotation (Placement(transformation(extent={{-60,-10},{-40,10}})));
            Buildings.Controls.OBC.CDL.Reals.MultiSum mulSum(nin=nUni)
              "Total"
              annotation (Placement(transformation(extent={{-10,-10},{10,10}})));
            Buildings.Controls.OBC.CDL.Reals.GreaterThreshold greThr(t=0.5)
              "Returns true if at least one unit is commanded on"
              annotation (Placement(transformation(extent={{70,50},{90,70}})));
            Buildings.Controls.OBC.CDL.Reals.Max max1
              "Maximum value"
              annotation (Placement(transformation(extent={{70,-70},{90,-50}})));
            Buildings.Controls.OBC.CDL.Reals.Sources.Constant one(final k=1)
              "Constant one"
              annotation (Placement(transformation(extent={{20,-70},{40,-50}})));

          equation
            connect(booToRea.y, mulSum.u)
              annotation (Line(points={{-38,0},{-12,0}}, color={0,0,127}));
            connect(greThr.y, y1One)
              annotation (Line(points={{92,60},{120,60}},
                                                        color={255,0,255}));
            connect(mulSum.y, greThr.u)
              annotation (Line(points={{12,0},{60,0},{60,60},{68,60}},
                                                        color={0,0,127}));
            connect(max1.y, nUniOnBou)
              annotation (Line(points={{92,-60},{120,-60}},
                                                          color={0,0,127}));
            connect(mulSum.y, nUniOn) annotation (Line(points={{12,0},{120,0}},
                           color={0,0,127}));
            connect(one.y, max1.u2)
              annotation (Line(points={{42,-60},{50,-60},{50,-66},{68,-66}},
                                                                       color={0,0,127}));
            connect(mulSum.y, max1.u1) annotation (Line(points={{12,0},{60,0},{60,-54},{
                    68,-54}},
                          color={0,0,127}));
            connect(y1, booToRea.u)
              annotation (Line(points={{-120,0},{-62,0}}, color={255,0,255}));
            annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},
                      {100,100}}),                                        graphics={
                  Rectangle(
                    extent={{-100,-100},{100,100}},
                    lineColor={0,0,127},
                    fillColor={255,255,255},
                    fillPattern=FillPattern.Solid),
                  Text(
                    extent={{-150,150},{150,110}},
                    textString="%name",
                    textColor={0,0,255})}),           Diagram(coordinateSystem(
                    preserveAspectRatio=false, extent={{-100,-100},{100,100}})),
              Documentation(info="<html>
<p>
This block computes the following variables based on a Boolean array
representing typically the On/Off command signal for a group of multiple
units such as chillers or CHW pumps.
</p>
<ul>
<li>
The Boolean output <code>y1One</code> is <code>true</code> if at least
one element of the input array is <code>true</code>.
</li>
<li>
The real output <code>nUniOn</code> is the number of elements of
the input array that are <code>true</code> (may be zero).
</li>
<li>
The real output <code>nUniOnBou</code> is the maximum between <i>1</i>
and <code>nUniOn</code>.
</li>
</ul>
</html>",           revisions="<html>
<ul>
<li>
February 24, 2023, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>"));
          end MultipleCommands;

          model MultipleValves
            "Parallel arrangement of identical two-way modulating valves"
            extends Buildings.Fluid.Interfaces.LumpedVolumeDeclarations(
              final massDynamics=energyDynamics,
              final mSenFac=1);
            extends Buildings.Fluid.Interfaces.PartialTwoPortInterface(
              final m_flow_nominal(final min=Modelica.Constants.small)=nUni*mUni_flow_nominal,
              show_T=false,
              port_a(
                h_outflow(start=h_outflow_start)),
              port_b(
                h_outflow(start=h_outflow_start),
                p(start=p_start),
                final m_flow(max = if allowFlowReversal then +Modelica.Constants.inf else 0)));

            parameter Integer nUni(
              final min=1,
              start=1)
              "Number of units (branches in the network)"
              annotation(Evaluate=true);
            parameter Modelica.Units.SI.MassFlowRate mUni_flow_nominal(
              final min=Modelica.Constants.small)
              "Nominal mass flow rate (each unit)"
              annotation (Dialog(group="Nominal condition"));
            parameter Modelica.Units.SI.PressureDifference dpValve_nominal(
              displayUnit="Pa",
              min=0)
              "Nominal pressure drop of fully open valve (each unit)"
              annotation (Dialog(group="Nominal condition"));
            parameter Modelica.Units.SI.PressureDifference dpFixed_nominal(
              displayUnit="Pa",
              min=0) = 0
              "Pressure drop of pipe and other resistances that are in series (each unit)"
              annotation (Dialog(group="Nominal condition"));

            parameter Boolean use_inputFilter=true
              "Opening is filtered with a 2nd order CriticalDamping filter"
              annotation(Dialog(tab="Dynamics", group="Filtered opening"));
            parameter Modelica.Units.SI.Time riseTime=120
              "Rise time of the filter (time to reach 99.6 % of an opening step)"
              annotation (Dialog(
                tab="Dynamics",
                group="Filtered opening",
                enable=use_inputFilter));
            parameter Modelica.Blocks.Types.Init init=Modelica.Blocks.Types.Init.InitialOutput
              "Type of initialization (no init/steady state/initial state/initial output)"
              annotation(Dialog(tab="Dynamics", group="Filtered opening",enable=use_inputFilter));
            parameter Real y_start=1 "Initial position of actuator"
              annotation(Dialog(tab="Dynamics", group="Filtered opening",enable=use_inputFilter));

            parameter Boolean from_dp = false
              "= true, use m_flow = f(dp) else dp = f(m_flow)"
              annotation (Evaluate=true, Dialog(tab="Advanced"));
            parameter Boolean linearized = false
              "= true, use linear relation between m_flow and dp for any flow rate"
              annotation(Evaluate=true, Dialog(tab="Advanced"));

            Buildings.Controls.OBC.CDL.Interfaces.RealInput y[nUni]
              "Valve commanded position"
              annotation (Placement(transformation(extent={{-140,40},{-100,80}}),
              iconTransformation(extent={{-140,40},{-100,80}})));
            Buildings.Controls.OBC.CDL.Interfaces.RealOutput y_actual[nUni]
              "Valve returned position"
              annotation (Placement(transformation(extent={{100,40},{140,80}}),
                iconTransformation(extent={{100,40},{140,80}})));

            Buildings.Fluid.FixedResistances.Junction junInl[nUni](
              redeclare each final package Medium = Medium,
              each final m_flow_nominal=m_flow_nominal*{1,-1,-1},
              each final dp_nominal=fill(0, 3),
              each final energyDynamics=energyDynamics,
              each final portFlowDirection_1=if allowFlowReversal then Modelica.Fluid.Types.PortFlowDirection.Bidirectional
                   else Modelica.Fluid.Types.PortFlowDirection.Entering,
              each final portFlowDirection_2=if allowFlowReversal then Modelica.Fluid.Types.PortFlowDirection.Bidirectional
                   else Modelica.Fluid.Types.PortFlowDirection.Leaving,
              each final portFlowDirection_3=if allowFlowReversal then Modelica.Fluid.Types.PortFlowDirection.Bidirectional
                   else Modelica.Fluid.Types.PortFlowDirection.Leaving)
              "Fluid junction" annotation (Placement(transformation(
                  extent={{10,-10},{-10,10}},
                  rotation=90,
                  origin={-60,0})));
            Buildings.Fluid.FixedResistances.Junction junOut[nUni](
              redeclare each final package Medium = Medium,
              each final m_flow_nominal=m_flow_nominal*{1,-1,1},
              each final dp_nominal=fill(0, 3),
              each final energyDynamics=energyDynamics,
              each final portFlowDirection_1=if allowFlowReversal then Modelica.Fluid.Types.PortFlowDirection.Bidirectional
                   else Modelica.Fluid.Types.PortFlowDirection.Entering,
              each final portFlowDirection_2=if allowFlowReversal then Modelica.Fluid.Types.PortFlowDirection.Bidirectional
                   else Modelica.Fluid.Types.PortFlowDirection.Leaving,
              each final portFlowDirection_3=if allowFlowReversal then Modelica.Fluid.Types.PortFlowDirection.Bidirectional
                   else Modelica.Fluid.Types.PortFlowDirection.Entering)
              "Fluid junction" annotation (Placement(transformation(
                  extent={{-10,10},{10,-10}},
                  rotation=90,
                  origin={60,0})));
            replaceable Buildings.Fluid.Actuators.Valves.TwoWayEqualPercentage val[nUni]
              constrainedby
              Buildings.Fluid.Actuators.BaseClasses.PartialTwoWayValveKv(
              redeclare each final package Medium = Medium,
              each final from_dp=from_dp,
              each final linearized=linearized,
              each final CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
              each final m_flow_nominal=mUni_flow_nominal,
              each final dpValve_nominal=dpValve_nominal,
              each final dpFixed_nominal=dpFixed_nominal,
              each final allowFlowReversal=allowFlowReversal,
              each final use_inputFilter=use_inputFilter,
              each final riseTime=riseTime,
              each final init=init,
              each final y_start=y_start) "Modulating valve" annotation (
                Placement(transformation(extent={{-10,-10},{10,10}})));
          protected
            final parameter Medium.ThermodynamicState sta_start=Medium.setState_pTX(
              T=T_start,
              p=p_start,
              X=X_start)
              "Medium state at start values";
            final parameter Modelica.Units.SI.SpecificEnthalpy h_outflow_start=
              Medium.specificEnthalpy(sta_start)
              "Start value for outflowing enthalpy";
          equation
            if nUni > 1 then
              for i in 1:(nUni - 1) loop
                connect(junOut[i].port_1, junOut[i+1].port_2)
                  annotation (Line(points={{60,-10},{60,-20},{40,-20},{40,20},{60,20},{60,
                        10}},                           color={0,127,255}));
                connect(junInl[i].port_2, junInl[i+1].port_1)
                  annotation (Line(points={{-60,-10},{-60,-20},{-40,-20},{-40,20},{-60,20},
                        {-60,10}},                        color={0,127,255}));
              end for;
            end if;
            connect(junInl.port_3, val.port_a) annotation (Line(points={{-50,-6.66134e-16},
                    {-30,-6.66134e-16},{-30,0},{-10,0}}, color={0,127,255}));
            connect(val.port_b, junOut.port_3) annotation (Line(points={{10,0},{30,0},{30,
                    4.44089e-16},{50,4.44089e-16}}, color={0,127,255}));
            connect(junOut[1].port_2, port_b)
              annotation (Line(points={{60,10},{60,20},{80,20},{80,0},{100,0}},
                                                                color={0,127,255}));

            connect(port_a, junInl[1].port_1)
              annotation (Line(points={{-100,0},{-80,0},{-80,20},{-60,20},{-60,10}},
                                                                   color={0,127,255}));
            connect(val.y_actual, y_actual)
              annotation (Line(points={{5,7},{20,7},{20,60},{120,60}}, color={0,0,127}));
            connect(y, val.y)
              annotation (Line(points={{-120,60},{0,60},{0,12}}, color={0,0,127}));
            annotation (
              defaultComponentName="res",
              Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                  Rectangle(
                    extent={{-100,-100},{100,100}},
                    lineColor={0,0,127},
                    fillColor={255,255,255},
                    fillPattern=FillPattern.Solid)}),
              Documentation(info="<html>
<p>
This model represents a set of control valves piped in 
parallel.
An optional fixed resistance may be included in series with each valve.
</p>
</html>",           revisions="<html>
<ul>
<li>
February 24, 2023, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>"));
          end MultipleValves;

          partial model PartialMultiplePumps
            "Base class for modeling multiple identical pumps in parallel"
            extends Buildings.Fluid.Interfaces.LumpedVolumeDeclarations(
              final massDynamics=energyDynamics,
              final mSenFac=1);
            extends Buildings.Fluid.Interfaces.PartialTwoPortInterface(
              final m_flow_nominal(final min=Modelica.Constants.small)=nPum * mPum_flow_nominal,
              show_T=false,
              port_a(
                h_outflow(start=h_outflow_start)),
              port_b(
                h_outflow(start=h_outflow_start),
                p(start=p_start),
                final m_flow(max = if allowFlowReversal then +Modelica.Constants.inf else 0)));

            parameter Integer nPum(
              final min=1,
              start=1)
              "Number of pumps"
              annotation(Evaluate=true);
            parameter Boolean have_var = true
              "Set to true for variable speed pumps, false for constant speed"
              annotation(Evaluate=true);
            parameter Boolean have_valve = true
              "Set to true for inline check valve"
              annotation(Evaluate=true);
            parameter Modelica.Units.SI.MassFlowRate mPum_flow_nominal
              "Design mass flow rate (each pump)"
              annotation(Dialog(group="Nominal condition"));
            parameter Modelica.Units.SI.PressureDifference dpPum_nominal(
              displayUnit="Pa")
              "Design head (each pump)"
              annotation(Dialog(group="Nominal condition"));
            parameter Modelica.Units.SI.PressureDifference dpValve_nominal(
              displayUnit="Pa")=10000
              "Pressure drop of check valve fully open"
              annotation(Dialog(group="Nominal condition", enable=have_valve));
            replaceable parameter Buildings.Fluid.Movers.Data.Generic per
              constrainedby Buildings.Fluid.Movers.Data.Generic(pressure(V_flow
                  ={0,1,2}*mPum_flow_nominal/rho_default, dp={1.14,1,0.42}*
                    dpPum_nominal), motorCooledByFluid=false) "Pump parameters"
              annotation (Placement(transformation(extent={{-10,-98},{10,-78}})));

            parameter Modelica.Units.SI.Time tau=1
              "Time constant of fluid volume for nominal flow, used if energy or mass balance is dynamic"
              annotation (Dialog(
                tab="Dynamics",
                group="Nominal condition",
                enable=energyDynamics <> Modelica.Fluid.Types.Dynamics.SteadyState));

            // Classes used to implement the filtered speed
            parameter Boolean use_inputFilter=true
              "= true, if speed is filtered with a 2nd order CriticalDamping filter"
              annotation(Dialog(tab="Dynamics", group="Filtered speed"));
            parameter Modelica.Units.SI.Time riseTime=30
              "Rise time of the filter (time to reach 99.6 % of the speed)" annotation (
                Dialog(
                tab="Dynamics",
                group="Filtered speed",
                enable=use_inputFilter));
            parameter Modelica.Blocks.Types.Init init=Modelica.Blocks.Types.Init.InitialOutput
              "Type of initialization (no init/steady state/initial state/initial output)"
              annotation(Dialog(tab="Dynamics", group="Filtered speed",enable=use_inputFilter));

            Buildings.Controls.OBC.CDL.Interfaces.BooleanInput y1[nPum]
              "Start signal (VFD Run or motor starter contact)"
              annotation (Placement(
                  transformation(extent={{-140,80},{-100,120}}), iconTransformation(
                    extent={{-140,60},{-100,100}})));
            Buildings.Controls.OBC.CDL.Interfaces.RealOutput P(final unit="W")
              "Total power (all pumps)"
              annotation (Placement(transformation(extent={{100,20},{140,60}}),
                  iconTransformation(extent={{100,20},{140,60}})));
            Buildings.Controls.OBC.CDL.Interfaces.BooleanOutput y1_actual[nPum]
              "Pump status"
              annotation (Placement(transformation(extent={{100,80},{140,
                      120}}), iconTransformation(extent={{100,60},{140,100}})));

            Buildings.Fluid.BaseClasses.MassFlowRateMultiplier mulOut(
                redeclare final package Medium = Medium, final use_input=true)
              "Flow rate multiplier"
              annotation (Placement(transformation(extent={{60,-10},{80,10}})));
            Buildings.Fluid.BaseClasses.MassFlowRateMultiplier mulInl(
                redeclare final package Medium = Medium, final use_input=true)
              "Flow rate multiplier" annotation (Placement(transformation(
                    extent={{-80,-10},{-60,10}})));
            replaceable Buildings.Fluid.Movers.SpeedControlled_y pum
              constrainedby
              Buildings.Fluid.Movers.BaseClasses.PartialFlowMachine(
              redeclare final package Medium = Medium,
              final tau=tau,
              final show_T=show_T,
              final allowFlowReversal=allowFlowReversal,
              final energyDynamics=energyDynamics,
              final use_inputFilter=use_inputFilter,
              final riseTime=riseTime,
              final init=init,
              final per=per,
              addPowerToMedium=false) "Pump" annotation (Placement(
                  transformation(extent={{-10,-10},{10,10}})));
            MultipleCommands com(final nUni=nPum) "Convert command signal"
              annotation (Placement(transformation(extent={{-50,90},{-30,110}})));

            Buildings.Controls.OBC.CDL.Conversions.BooleanToReal booToRea
              "Convert to real"
              annotation (Placement(transformation(extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={10,100})));
            Buildings.Controls.OBC.CDL.Reals.Multiply mul "Compute total power"
              annotation (Placement(transformation(extent={{60,30},{80,50}})));
            Buildings.Controls.OBC.CDL.Reals.Multiply inp
              "Compute pump input signal" annotation (Placement(transformation(
                  extent={{10,-10},{-10,10}},
                  rotation=90,
                  origin={0,40})));
            Buildings.Controls.OBC.CDL.Reals.Sources.Constant cst
                         if not have_var "Constant setpoint"
              annotation (Placement(transformation(extent={{-80,20},{-60,40}})));
            Buildings.Controls.OBC.CDL.Reals.GreaterThreshold isOpe(t=1E-2, h=0.5E-2)
              "Evaluate if pump is operating"
              annotation (Placement(transformation(extent={{30,-70},{50,-50}})));
            Buildings.Fluid.FixedResistances.CheckValve cheVal(
              redeclare final package Medium = Medium,
              final m_flow_nominal=mPum_flow_nominal,
              final dpValve_nominal=dpValve_nominal,
              final show_T=show_T,
              final allowFlowReversal=allowFlowReversal) if have_valve
              "Check valve (optional)"
              annotation (Placement(transformation(extent={{30,-10},{50,10}})));
            PassThroughFluid pas(
              redeclare final package Medium=Medium,
              final allowFlowReversal=allowFlowReversal) if not have_valve
              "Direct fluid pass-through (case without check valve)"
              annotation (Placement(transformation(extent={{30,-30},{50,-10}})));
            Buildings.Controls.OBC.CDL.Routing.BooleanScalarReplicator rep(
              final nout=nPum)
              "Replicate"
              annotation (Placement(transformation(extent={{60,-70},{80,-50}})));
            Buildings.Controls.OBC.CDL.Logical.Pre preY1[nPum]
              "Left limit of signal avoiding direct feedback of status to controller"
              annotation (Placement(transformation(extent={{-80,90},{-60,110}})));
          protected
            parameter Medium.ThermodynamicState sta_default=Medium.setState_pTX(
                T=Medium.T_default,
                p=Medium.p_default,
                X=Medium.X_default)
              "State of the medium at the medium default properties";
            parameter Modelica.Units.SI.Density rho_default=Medium.density(sta_default)
              "Density at the medium default properties";
            final parameter Medium.ThermodynamicState sta_start=Medium.setState_pTX(
              T=T_start,
              p=p_start,
              X=X_start)
              "Medium state at start values";
            final parameter Modelica.Units.SI.SpecificEnthalpy h_outflow_start=
              Medium.specificEnthalpy(sta_start)
              "Start value for outflowing enthalpy";
          equation
            connect(mulOut.port_b, port_b)
              annotation (Line(points={{80,0},{100,0}}, color={0,127,255}));
            connect(port_a, mulInl.port_a)
              annotation (Line(points={{-100,0},{-80,0}}, color={0,127,255}));
            connect(mulOut.uInv, mulInl.u) annotation (Line(points={{81,6},{88,6},{88,-26},
                    {-90,-26},{-90,6},{-82,6}},color={0,0,127}));
            connect(mulInl.port_b, pum.port_a)
              annotation (Line(points={{-60,0},{-10,0}}, color={0,127,255}));
            connect(com.nUniOnBou, mulOut.u) annotation (Line(points={{-28,94},{-20,94},{
                    -20,80},{54,80},{54,6},{58,6}},
                                color={0,0,127}));
            connect(com.y1One, booToRea.u)
              annotation (Line(points={{-28,106},{-10,106},{-10,100},{-2,100}},
                                                             color={255,0,255}));
            connect(mul.y, P)
              annotation (Line(points={{82,40},{120,40}}, color={0,0,127}));
            connect(com.nUniOn, mul.u1) annotation (Line(points={{-28,100},{-18,100},{-18,
                    82},{56,82},{56,46},{58,46}},
                              color={0,0,127}));
            connect(pum.P, mul.u2) annotation (Line(points={{11,9},{20,9},{20,34},{58,34}},
                          color={0,0,127}));
            connect(pum.port_b, cheVal.port_a)
              annotation (Line(points={{10,0},{30,0}}, color={0,127,255}));
            connect(cheVal.port_b, mulOut.port_a)
              annotation (Line(points={{50,0},{60,0}}, color={0,127,255}));
            connect(cst.y, inp.u1) annotation (Line(points={{-58,30},{-40,30},{-40,60},{
                    -6,60},{-6,52}},
                          color={0,0,127}));
            connect(booToRea.y, inp.u2) annotation (Line(points={{22,100},{40,100},{40,60},
                    {6,60},{6,52}},
                               color={0,0,127}));
            connect(pum.port_b, pas.port_a)
              annotation (Line(points={{10,0},{30,0},{30,-20}}, color={0,127,255}));
            connect(pas.port_b, mulOut.port_a)
              annotation (Line(points={{50,-20},{50,0},{60,0}}, color={0,127,255}));
            connect(pum.y_actual, isOpe.u) annotation (Line(points={{11,7},{20,7},{20,-60},
                    {28,-60}}, color={0,0,127}));
            connect(isOpe.y, rep.u)
              annotation (Line(points={{52,-60},{58,-60}}, color={255,0,255}));
            connect(y1, preY1.u) annotation (Line(points={{-120,100},{-82,100}},
                                               color={255,0,255}));
            connect(preY1.y, com.y1)
              annotation (Line(points={{-58,100},{-52,100}}, color={255,0,255}));
            connect(rep.y, y1_actual) annotation (Line(points={{82,-60},{92,-60},{92,100},
                    {120,100}}, color={255,0,255}));
            annotation (
              defaultComponentName="pum",
              Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,
                      100}}),                                   graphics={
                  Rectangle(
                    extent={{-100,-100},{100,100}},
                    lineColor={0,0,127},
                    fillColor={255,255,255},
                    fillPattern=FillPattern.Solid),
                  Rectangle(
                    extent={{-100,16},{100,-16}},
                    lineColor={0,0,0},
                    fillColor={0,127,255},
                    fillPattern=FillPattern.HorizontalCylinder),
                  Ellipse(
                    extent={{-58,58},{58,-58}},
                    lineColor={0,0,0},
                    fillPattern=FillPattern.Sphere,
                    fillColor={0,100,199}),
                  Ellipse(
                    extent={{4,16},{36,-16}},
                    lineColor={0,0,0},
                    fillPattern=FillPattern.Sphere,
                    visible=energyDynamics <> Modelica.Fluid.Types.Dynamics.SteadyState,
                    fillColor={0,100,199}),
                  Polygon(
                    points={{0,50},{0,-50},{54,0},{0,50}},
                    lineColor={0,0,0},
                    pattern=LinePattern.None,
                    fillPattern=FillPattern.HorizontalCylinder,
                    fillColor={255,255,255})}),                            Diagram(
                  coordinateSystem(preserveAspectRatio=false, extent={{-100,-120},{100,120}})),
              Documentation(info="<html>
<p>
This base class represents multiple identical pumps that are piped in parallel.
An optional check valve in series with each pump is included.
This class is used to construct the various multiple-pump models within 
<a href=\"modelica://Buildings.Experimental.DHC.Plants.Combined.Subsystems\">
Buildings.Experimental.DHC.Plants.Combined.Subsystems</a>.
</p>
<h4>Details</h4>
<p>
In a parallel arrangement, all operating units have the same operating point.
This allows modeling the multiple pumps with a single instance of any
class derived from 
<a href=\"modelica://Buildings.Fluid.Movers.BaseClasses.PartialFlowMachine\">
Buildings.Fluid.Movers.BaseClasses.PartialFlowMachine</a>.
Hydronics are resolved with mass flow rate multiplier components.
</html>",           revisions="<html>
<ul>
<li>
February 24, 2023, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>"));
          end PartialMultiplePumps;

          model PassThroughFluid "Direct fluid pass-through"
            extends Buildings.Fluid.Interfaces.PartialTwoPort;

          equation
            connect(port_a, port_b) annotation (Line(points={{-100,0},{0,0},{0,0},{100,0}},
                  color={0,127,255}));
            annotation (
              defaultComponentName="pas",
              Icon(coordinateSystem(preserveAspectRatio=false),
              graphics={Line(
                    points={{-100,0},{100,0}},
                    color={28,108,200},
                    thickness=1)}), Diagram(coordinateSystem(preserveAspectRatio=false)),
              Documentation(info="<html>
<p>
This is a model of a direct fluid pass-through used for
templating purposes.
</p>
</html>",           revisions="<html>
<ul>
<li>
February 11, 2022, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>"));
          end PassThroughFluid;
          annotation (Documentation(info="<html>
<p>
This package contains base classes that are used 
to construct subsystem models.
</p>
</html>"));
        end BaseClasses;
        annotation (Documentation(info="<html>
<p>
This package contains models of components used in 
combined heating and cooling plants.
</p>
</html>"));
      end Subsystems;

      package Examples "This package holds example models using plants providing district heating and cooling"
        extends Modelica.Icons.ExamplesPackage;
        model AllElectricCWStorage
          "Validation of all-electric plant model with buildings loads"
          extends Modelica.Icons.Example;

          replaceable package Medium=Buildings.Media.Water
            constrainedby Modelica.Media.Interfaces.PartialMedium
            "Main medium (common to CHW, HW and CW)";
          replaceable package MediumConWatCoo=Buildings.Media.Water
            constrainedby Modelica.Media.Interfaces.PartialMedium
            "Medium in cooler circuit";

          parameter String filNam[2]={"modelica://Buildings/Resources/Data/Experimental/DHC/Loads/Examples/MediumOffice-90.1-2010-5A.mos",
                                      "modelica://Buildings/Resources/Data/Experimental/DHC/Loads/Examples/MediumOffice-90.1-2010-5A.mos"}
            "Path to file with timeseries loads";
          parameter Modelica.Units.SI.Temperature TSetDisSupHea = 273.15+60 "District heating supply temperature set point";
          parameter Modelica.Units.SI.Temperature TSetDisSupCoo = 273.15+6 "District cooling supply temperature set point";

          replaceable parameter
            Buildings.Fluid.Chillers.Data.ElectricReformulatedEIR.ReformEIRChiller_Carrier_19XR_1403kW_7_09COP_VSD
            datChi(
            EIRFunT={0.0101739374,0.0607200115,0.0003348647,0.003162578,
                0.0002388594,-0.0014121289},
            capFunT={0.0387084662,0.2305017927,0.0004779504,0.0178244359,-8.48808e-05,
                -0.0032406711},
            EIRFunPLR={0.4304252832,-0.0144718912,5.12039e-05,-0.7562386674,
                0.5661683373,0.0406987748,3.0278e-06,-0.3413411197,-0.000469572,
                0.0055009208},
            QEva_flow_nominal=sum(loaCoo.QCoo_flow_nominal)/pla.nChi,
            COP_nominal=2.5,
            mEva_flow_nominal=-datChi.QEva_flow_nominal/5/4186,
            mCon_flow_nominal=-datChi.QEva_flow_nominal*(1 + 1/datChi.COP_nominal)
                /10/4186,
            TEvaLvg_nominal=TSetDisSupCoo,
            TEvaLvgMin=277.15,
            TEvaLvgMax=308.15,
            TConLvg_nominal=TSetDisSupHea,
            TConLvgMin=296.15,
            TConLvgMax=336.15) constrainedby
            Buildings.Fluid.Chillers.Data.BaseClasses.Chiller
            "Chiller parameters (each unit)" annotation (Dialog(group=
                  "CHW loop and cooling-only chillers"), Placement(
                transformation(extent={{140,200},{160,220}})));
          replaceable parameter
            Buildings.Fluid.Chillers.Data.ElectricReformulatedEIR.Generic datChiHea=datChi
            constrainedby Buildings.Fluid.Chillers.Data.BaseClasses.Chiller
            "Chiller parameters (each unit)" annotation (Dialog(group=
                  "HW loop and heat recovery chillers"), Placement(
                transformation(extent={{170,200},{190,220}})));
          replaceable parameter
            Buildings.Fluid.HeatPumps.Data.EquationFitReversible.Generic datHeaPum(
            dpHeaLoa_nominal=50000,
            dpHeaSou_nominal=100,
            hea(
              mLoa_flow=datHeaPum.hea.Q_flow/10/4186,
              mSou_flow=1E-4*datHeaPum.hea.Q_flow,
              Q_flow=sum(loaHea.QHea_flow_nominal)/pla.nHeaPum,
              P=datHeaPum.hea.Q_flow/2.2,
              coeQ={-5.64420084,1.95212447,9.96663913,0.23316322,-5.64420084},
              coeP={-3.96682255,6.8419453,1.99606939,0.01393387,-3.96682255},
              TRefLoa=298.15,
              TRefSou=253.15),
            coo(
              mLoa_flow=0,
              mSou_flow=0,
              Q_flow=-1,
              P=0,
              coeQ=fill(0, 5),
              coeP=fill(0, 5),
              TRefLoa=273.15,
              TRefSou=273.15)) "Heat pump parameters (each unit)" annotation (
              Placement(transformation(extent={{200,200},{220,220}})));

          // Assumptions
          parameter Modelica.Fluid.Types.Dynamics energyDynamics=
            Modelica.Fluid.Types.Dynamics.FixedInitial
            "Type of energy balance: dynamic (3 initialization options) or steady state"
            annotation(Evaluate=true, Dialog(tab = "Dynamics", group="Conservation equations"));

          estcp.DHC.Plants.Combined.AllElectricCWStorage pla(
            redeclare final package Medium = Medium,
            redeclare package MediumHea_b = Medium,
            redeclare final package MediumConWatCoo = MediumConWatCoo,
            allowFlowReversal=true,
            dpConWatCooFri_nominal=1E4,
            mAirCooUni_flow_nominal=pla.mConWatCoo_flow_nominal/pla.nCoo/1.45,
            TWetBulCooEnt_nominal=297.05,
            PFanCoo_nominal=340*pla.mConWatCoo_flow_nominal/pla.nCoo,
            chi(show_T=true),
            chiHea(show_T=true),
            heaPum(show_T=true),
            final datChi=datChi,
            final datChiHea=datChiHea,
            final datHeaPum=datHeaPum,
            nChi=2,
            dpChiWatSet_max=sum(disCoo.dpDis_nominal),
            nChiHea=2,
            dpHeaWatSet_max=sum(disCoo.dpDis_nominal),
            nHeaPum=2,
            dInsTan=0.05,
            nCoo=3,
            final energyDynamics=energyDynamics) "CHW and HW plant"
            annotation (Placement(transformation(extent={{-30,-30},{30,30}})));

          Buildings.Controls.OBC.CDL.Reals.Sources.Constant TChiWatSupSet(final k=pla.TChiWatSup_nominal,
            y(final unit="K", displayUnit="degC"))
                           "Source signal for setpoint"
            annotation (Placement(transformation(extent={{-220,10},{-200,30}})));
          Buildings.Controls.OBC.CDL.Reals.Sources.Constant THeaWatSupSet(final k=pla.THeaWatSup_nominal,
            y(final unit="K", displayUnit="degC"))
                           "Source signal for setpoint"
            annotation (Placement(transformation(extent={{-190,-10},{-170,10}})));
          Buildings.Controls.OBC.CDL.Reals.Sources.Constant dpHeaWatSet_max(
            k=pla.dpHeaWatSet_max,
            y(final unit="Pa")) "Source signal for setpoint"
            annotation (Placement(transformation(extent={{-190,-70},{-170,-50}})));
          Buildings.Controls.OBC.CDL.Reals.Sources.Constant dpChiWatSet_max(
            k=pla.dpChiWatSet_max,
            y(final unit="Pa")) "Source signal for setpoint"
            annotation (Placement(transformation(extent={{-220,-50},{-200,-30}})));
          Buildings.BoundaryConditions.WeatherData.ReaderTMY3 weaDat(filNam=
                Modelica.Utilities.Files.loadResource(
                "modelica://Buildings/Resources/weatherdata/USA_CA_San.Francisco.Intl.AP.724940_TMY3.mos"))
            "Outdoor conditions" annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={-210,120})));

          Buildings.Controls.OBC.CDL.Reals.Sources.Constant TChiWatRet[2](each k=pla.TChiWatRet_nominal)
            "Source signal for CHW return temperature"
            annotation (Placement(transformation(extent={{-190,-110},{-170,-90}})));
          Loads.Heating.BuildingTimeSeriesWithETS loaHea[2](
            each THeaWatSup_nominal=pla.THeaWatSup_nominal,
            filNam=filNam)                     "Building heating load"
            annotation (Placement(transformation(extent={{10,100},{-10,120}})));
            // dpCheVal_nominal to avoid too hot water in building waterr supply due to problem of temperature drop in Dymola
          Loads.Cooling.BuildingTimeSeriesWithETS loaCoo[2](
            each TChiWatSup_nominal=pla.TChiWatSup_nominal,
            filNam=filNam,
            each bui(w_aLoaCoo_nominal=0.015)) "Building cooling load"
            annotation (Placement(transformation(extent={{10,-130},{-10,-110}})));
            // dpCheVal_nominal to avoid freezing in building waterr supply due to problem of temperature drop in Dymola
          Buildings.Controls.OBC.CDL.Reals.Sources.Constant THeaWatRet[2](each k=pla.THeaWatRet_nominal)
            "Source signal for HW return temperature"
            annotation (Placement(transformation(extent={{-190,40},{-170,60}})));
          Buildings.Controls.OBC.CDL.Logical.Not
                                       onPla "On signal for the plant"
            annotation (Placement(transformation(extent={{-64,146},{-44,166}})));
          Buildings.Controls.OBC.CDL.Logical.Timer
                                         tim(t=3600)
            annotation (Placement(transformation(extent={{-104,154},{-84,174}})));
          Buildings.Controls.OBC.CDL.Reals.LessThreshold offHea(t=1e-4)
            "Threshold comparison to disable the plant"
            annotation (Placement(transformation(extent={{-144,154},{-124,174}})));
          Modelica.Blocks.Math.Gain norQFloHea(k=1/sum(loaHea.QHea_flow_nominal))
            "Normalized Q_flow"
            annotation (Placement(transformation(extent={{-184,154},{-164,174}})));
          Buildings.Controls.OBC.CDL.Logical.Not
                                       onPla1
                                             "On signal for the plant"
            annotation (Placement(transformation(extent={{-26,-198},{-6,-178}})));
          Buildings.Controls.OBC.CDL.Logical.Timer
                                         tim1(t=3600)
            annotation (Placement(transformation(extent={{-66,-190},{-46,-170}})));
          Buildings.Controls.OBC.CDL.Reals.LessThreshold offCoo1(t=1e-4)
            "Threshold comparison to disable the plant"
            annotation (Placement(transformation(extent={{-106,-190},{-86,-170}})));
          Modelica.Blocks.Math.Gain norQFloCoo(k=1/sum(loaCoo.QCoo_flow_nominal))
            "Normalized Q_flow"
            annotation (Placement(transformation(extent={{-146,-190},{-126,-170}})));
          Networks.Distribution2Pipe disHea(
            redeclare final package Medium = Medium,
            nCon=2,
            allowFlowReversal=false,
            mDis_flow_nominal=sum(loaHea.mBui_flow_nominal),
            mCon_flow_nominal={loaHea[1].mBui_flow_nominal,loaHea[2].mBui_flow_nominal},
            dpDis_nominal(each displayUnit="Pa") = {200000,100000})
            "Distribution network for district heating system"
            annotation (Placement(transformation(extent={{20,62},{-20,82}})));

          Networks.Distribution2Pipe disCoo(
            redeclare final package Medium = Medium,
            nCon=2,
            allowFlowReversal=false,
            mDis_flow_nominal=sum(loaCoo.mBui_flow_nominal),
            mCon_flow_nominal={loaCoo[1].mBui_flow_nominal,loaCoo[2].mBui_flow_nominal},
            dpDis_nominal(each displayUnit="Pa") = {20e4,10e4})
            "Distribution network for district cooling system"
            annotation (Placement(transformation(extent={{20,-60},{-20,-80}})));

          Modelica.Blocks.Math.Sum QTotHea_flow(nin=2)
            "Total heating flow rate for all buildings "
            annotation (Placement(transformation(extent={{-60,120},{-80,140}})));
          Modelica.Blocks.Math.Sum QTotCoo_flow(nin=2)
            "Total cooling flow rate for all buildings "
            annotation (Placement(transformation(extent={{-82,-150},{-102,-130}})));
        equation
          connect(TChiWatSupSet.y, pla.TChiWatSupSet) annotation (Line(points={{-198,20},
                  {-34,20}},                   color={0,0,127}));
          connect(THeaWatSupSet.y, pla.THeaWatSupSet) annotation (Line(points={{-168,0},
                  {-74,0},{-74,16},{-34,16}},   color={0,0,127}));
          connect(dpChiWatSet_max.y, pla.dpChiWatSet) annotation (Line(points={{-198,-40},
                  {-70,-40},{-70,12},{-34,12}},color={0,0,127}));
          connect(dpHeaWatSet_max.y, pla.dpHeaWatSet) annotation (Line(points={{-168,-60},
                  {-66,-60},{-66,8},{-34,8}},   color={0,0,127}));

          connect(weaDat.weaBus, pla.weaBus) annotation (Line(
              points={{-200,120},{-100,120},{-100,40},{0,40},{0,30}},
              color={255,204,51},
              thickness=0.5));
          connect(norQFloHea.y,offHea. u)
            annotation (Line(points={{-163,164},{-146,164}}, color={0,0,127}));
          connect(offHea.y, tim.u)
            annotation (Line(points={{-122,164},{-106,164}}, color={255,0,255}));
          connect(tim.passed, onPla.u)
            annotation (Line(points={{-82,156},{-66,156}}, color={255,0,255}));
          connect(onPla.y, pla.u1Hea) annotation (Line(points={{-42,156},{-38,156},{-38,
                  24},{-34,24}},                     color={255,0,255}));
          connect(tim1.passed, onPla1.u)
            annotation (Line(points={{-44,-188},{-40,-188},{-40,-190},{-36,-190},{-36,-188},
                  {-28,-188}},                               color={255,0,255}));
          connect(offCoo1.y, tim1.u)
            annotation (Line(points={{-84,-180},{-80,-180},{-80,-182},{-76,-182},{-76,-180},
                  {-68,-180}},                               color={255,0,255}));
          connect(norQFloCoo.y, offCoo1.u)
            annotation (Line(points={{-125,-180},{-120,-180},{-120,-182},{-116,-182},{-116,
                  -180},{-108,-180}},                          color={0,0,127}));
          connect(onPla1.y, pla.u1Coo) annotation (Line(points={{-4,-188},{8,-188},{8,-150},
                  {-54,-150},{-54,28},{-34,28}}, color={255,0,255}));
          connect(pla.port_bSerHea, disHea.port_aDisSup) annotation (Line(points={{30,0},
                  {40,0},{40,72},{20,72}}, color={0,127,255}));
          connect(disHea.port_bDisRet, pla.port_aSerHea) annotation (Line(points={{20,66},
                  {30,66},{30,50},{-40,50},{-40,0},{-30,0}}, color={0,127,255}));
          connect(disCoo.port_aDisSup, pla.port_bSerCoo) annotation (Line(points={{20,-70},
                  {40,-70},{40,-4},{30,-4}}, color={0,127,255}));
          connect(disCoo.port_bDisRet, pla.port_aSerCoo) annotation (Line(points={{20,-64},
                  {30,-64},{30,-46},{-40,-46},{-40,-4},{-30,-4}}, color={0,127,255}));
          connect(disCoo.ports_aCon, loaCoo.port_bSerCoo) annotation (Line(points={{-12,
                  -80},{-12,-92},{-32,-92},{-32,-128},{-10,-128}}, color={0,127,255}));
          connect(disCoo.ports_bCon, loaCoo.port_aSerCoo) annotation (Line(points={{12,-80},
                  {12,-92},{30,-92},{30,-128},{10,-128}}, color={0,127,255}));
          connect(disHea.ports_bCon, loaHea.port_aSerHea) annotation (Line(points={{12,82},
                  {12,92},{32,92},{32,106},{10,106}}, color={0,127,255}));
          connect(loaHea.port_bSerHea, disHea.ports_aCon) annotation (Line(points={{-10,
                  106},{-32,106},{-32,90},{-12,90},{-12,82}}, color={0,127,255}));
          connect(QTotHea_flow.y, norQFloHea.u) annotation (Line(points={{-81,130},{-194,
                  130},{-194,164},{-186,164}}, color={0,0,127}));
          connect(loaCoo.QCoo_flow, QTotCoo_flow.u) annotation (Line(points={{-7,-132},{
                  -8,-132},{-8,-140},{-80,-140}}, color={0,0,127}));
          connect(QTotCoo_flow.y, norQFloCoo.u) annotation (Line(points={{-103,-140},{-160,
                  -140},{-160,-180},{-148,-180}}, color={0,0,127}));
          connect(loaHea.QHea_flow, QTotHea_flow.u) annotation (Line(points={{-5,98},{-4,
                  98},{-4,94},{-50,94},{-50,130},{-58,130}}, color={0,0,127}));
          connect(TChiWatRet.y, loaCoo.TSetDisRet) annotation (Line(points={{-168,-100},
                  {20,-100},{20,-113},{11,-113}}, color={0,0,127}));
          connect(THeaWatRet.y, loaHea.TSetDisRet) annotation (Line(points={{-168,50},{-44,
                  50},{-44,126},{20,126},{20,117},{11,117}}, color={0,0,127}));
          annotation (
            __Dymola_Commands(
              file="modelica://Buildings/Resources/Scripts/Dymola/Experimental/DHC/Plants/Combined/Examples/AllElectricCWStorage.mos"
              "Simulate and plot"),
            experiment(
              StartTime=3024000,
              StopTime=3456000,
              Tolerance=1e-06),
          Diagram(coordinateSystem(extent={{-240,-240},{240,240}})),
            Documentation(info="<html>
<p>
This model uses
<a href=\"modelica://Buildings.Experimental.DHC.Plants.Combined.AllElectricCWStorage\">
Buildings.Experimental.DHC.Plants.Combined.AllElectricCWStorage</a>
to provide heating and cooling to two identical buildings with heating and cooling
loads provided as time series.
</p>
</html>",         revisions="<html>
<ul>
<li>
April 7, 2023, by David Blum:<br/>
First implementation.
</li>
</ul>
</html>"));
        end AllElectricCWStorage;
      end Examples;

      package Validation "Package with validation models"
        extends Modelica.Icons.ExamplesPackage;

        model AllElectricCWStorage "Validation of all-electric plant model"
          extends Modelica.Icons.Example;

          replaceable package Medium=Buildings.Media.Water
            constrainedby Modelica.Media.Interfaces.PartialMedium
            "Main medium (common to CHW, HW and CW)";
          replaceable package MediumConWatCoo=Buildings.Media.Water
            constrainedby Modelica.Media.Interfaces.PartialMedium
            "Medium in cooler circuit";

          replaceable parameter
            Buildings.Fluid.Chillers.Data.ElectricReformulatedEIR.ReformEIRChiller_Carrier_19XR_1403kW_7_09COP_VSD
            datChi(
            EIRFunT={0.0101739374,0.0607200115,0.0003348647,0.003162578,
                0.0002388594,-0.0014121289},
            capFunT={0.0387084662,0.2305017927,0.0004779504,0.0178244359,-8.48808e-05,
                -0.0032406711},
            EIRFunPLR={0.4304252832,-0.0144718912,5.12039e-05,-0.7562386674,
                0.5661683373,0.0406987748,3.0278e-06,-0.3413411197,-0.000469572,
                0.0055009208},
            QEva_flow_nominal=-1E6,
            COP_nominal=2.5,
            mEva_flow_nominal=-datChi.QEva_flow_nominal/5/4186,
            mCon_flow_nominal=-datChi.QEva_flow_nominal*(1 + 1/datChi.COP_nominal)
                /10/4186,
            TEvaLvg_nominal=279.15,
            TEvaLvgMin=277.15,
            TEvaLvgMax=308.15,
            TConLvg_nominal=333.15,
            TConLvgMin=296.15,
            TConLvgMax=336.15) constrainedby
            Buildings.Fluid.Chillers.Data.BaseClasses.Chiller
            "Chiller parameters (each unit)" annotation (Dialog(group=
                  "CHW loop and cooling-only chillers"), Placement(
                transformation(extent={{140,200},{160,220}})));
          replaceable parameter
            Buildings.Fluid.Chillers.Data.ElectricReformulatedEIR.Generic datChiHea=datChi
            constrainedby Buildings.Fluid.Chillers.Data.BaseClasses.Chiller
            "Chiller parameters (each unit)" annotation (Dialog(group=
                  "HW loop and heat recovery chillers"), Placement(
                transformation(extent={{170,200},{190,220}})));
          replaceable parameter
            Buildings.Fluid.HeatPumps.Data.EquationFitReversible.Generic datHeaPum(
            dpHeaLoa_nominal=50000,
            dpHeaSou_nominal=100,
            hea(
              mLoa_flow=datHeaPum.hea.Q_flow/10/4186,
              mSou_flow=1E-4*datHeaPum.hea.Q_flow,
              Q_flow=1E6,
              P=datHeaPum.hea.Q_flow/2.2,
              coeQ={-5.64420084,1.95212447,9.96663913,0.23316322,-5.64420084},
              coeP={-3.96682255,6.8419453,1.99606939,0.01393387,-3.96682255},
              TRefLoa=298.15,
              TRefSou=253.15),
            coo(
              mLoa_flow=0,
              mSou_flow=0,
              Q_flow=-1,
              P=0,
              coeQ=fill(0, 5),
              coeP=fill(0, 5),
              TRefLoa=273.15,
              TRefSou=273.15)) "Heat pump parameters (each unit)" annotation (
              Placement(transformation(extent={{200,200},{220,220}})));

          // Assumptions
          parameter Modelica.Fluid.Types.Dynamics energyDynamics=
            Modelica.Fluid.Types.Dynamics.FixedInitial
            "Type of energy balance: dynamic (3 initialization options) or steady state"
            annotation(Evaluate=true, Dialog(tab = "Dynamics", group="Conservation equations"));

          estcp.DHC.Plants.Combined.AllElectricCWStorage pla(
            redeclare final package Medium = Medium,
            redeclare package MediumHea_b = Medium,
            redeclare final package MediumConWatCoo = MediumConWatCoo,
            allowFlowReversal=true,
            dpConWatCooFri_nominal=1E4,
            mAirCooUni_flow_nominal=pla.mConWatCoo_flow_nominal/pla.nCoo/1.45,
            TWetBulCooEnt_nominal=297.05,
            PFanCoo_nominal=340*pla.mConWatCoo_flow_nominal/pla.nCoo,
            chi(show_T=true),
            chiHea(show_T=true),
            heaPum(show_T=true),
            final datChi=datChi,
            final datChiHea=datChiHea,
            final datHeaPum=datHeaPum,
            nChi=2,
            dpChiWatSet_max=20E4,
            nChiHea=2,
            dpHeaWatSet_max=20E4,
            nHeaPum=2,
            dInsTan=0.05,
            nCoo=3,
            final energyDynamics=energyDynamics) "CHW and HW plant"
            annotation (Placement(transformation(extent={{-30,-30},{30,30}})));

          Buildings.Controls.OBC.CDL.Reals.Sources.Constant TChiWatSupSet(final k=pla.TChiWatSup_nominal,
            y(final unit="K", displayUnit="degC"))
                           "Source signal for setpoint"
            annotation (Placement(transformation(extent={{-220,10},{-200,30}})));
          Buildings.Controls.OBC.CDL.Reals.Sources.Constant THeaWatSupSet(final k=pla.THeaWatSup_nominal,
            y(final unit="K", displayUnit="degC"))
                           "Source signal for setpoint"
            annotation (Placement(transformation(extent={{-190,-10},{-170,10}})));
          Buildings.Controls.OBC.CDL.Reals.Sources.Constant dpHeaWatSet_max(
            k=pla.dpHeaWatSet_max,
            y(final unit="Pa")) "Source signal for setpoint"
            annotation (Placement(transformation(extent={{-190,-70},{-170,-50}})));
          Buildings.Controls.OBC.CDL.Reals.Sources.Constant dpChiWatSet_max(
            k=pla.dpChiWatSet_max,
            y(final unit="Pa")) "Source signal for setpoint"
            annotation (Placement(transformation(extent={{-220,-50},{-200,-30}})));
          Buildings.BoundaryConditions.WeatherData.ReaderTMY3 weaDat(filNam=
                Modelica.Utilities.Files.loadResource(
                "modelica://Buildings/Resources/weatherdata/USA_CA_San.Francisco.Intl.AP.724940_TMY3.mos"))
            "Outdoor conditions" annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={-210,120})));
          Buildings.Fluid.HeatExchangers.SensibleCooler_T disHeaWat(
            redeclare final package Medium = Medium,
            final m_flow_nominal=pla.mHeaWat_flow_nominal,
            final dp_nominal=0,
            final energyDynamics=energyDynamics,
            tau=300)
            "Distribution system approximated by prescribed return temperature"
            annotation (Placement(transformation(extent={{12,130},{-8,150}})));
          Buildings.Fluid.HeatExchangers.Heater_T disChiWat(
            redeclare final package Medium = Medium,
            final m_flow_nominal=pla.mChiWat_flow_nominal,
            show_T=true,
            final dp_nominal=0,
            final energyDynamics=energyDynamics,
            tau=300)
            "Distribution system approximated by prescribed return temperature"
            annotation (Placement(transformation(extent={{10,-150},{-10,-130}})));

          Buildings.Controls.OBC.CDL.Reals.Sources.Constant THeaWatRet(k=pla.THeaWatRet_nominal,
                      y(final unit="K", displayUnit="degC"))
            "Source signal for HW return temperature"
            annotation (Placement(transformation(extent={{-190,70},{-170,90}})));
          Buildings.Controls.OBC.CDL.Reals.Sources.Constant TChiWatRet(k=pla.TChiWatRet_nominal,
                      y(final unit="K", displayUnit="degC"))
            "Source signal for CHW return temperature"
            annotation (Placement(transformation(extent={{-220,-110},{-200,-90}})));
          Buildings.Controls.OBC.CDL.Logical.Sources.TimeTable u1(
            table=[0,0,0; 4,1,1; 72,0,1; 96,0,0],
            timeScale=3600,
            period=96*3600) "Plant enable signal: y[1] for cooling, y[2] for heating"
            annotation (Placement(transformation(extent={{-220,50},{-200,70}})));
          Buildings.Fluid.Actuators.Valves.TwoWayPressureIndependent valDisHeaWat(
            redeclare final package Medium = Medium,
            m_flow_nominal=pla.mHeaWat_flow_nominal,
            dpValve_nominal=1E4,
            dpFixed_nominal=pla.dpHeaWatSet_max - valDisHeaWat.dpValve_nominal)
            "Distribution system approximated by variable flow resistance"
            annotation (Placement(transformation(extent={{-30,130},{-50,150}})));
          Buildings.Fluid.Actuators.Valves.TwoWayPressureIndependent valDisChiWat(
            redeclare final package Medium = Medium,
            m_flow_nominal=pla.mChiWat_flow_nominal,
            dpValve_nominal=1E4,
            dpFixed_nominal=pla.dpChiWatSet_max - valDisChiWat.dpValve_nominal)
            "Distribution system approximated by variable flow resistance"
            annotation (Placement(transformation(extent={{-30,-150},{-50,-130}})));
          Buildings.Controls.OBC.CDL.Reals.Sources.TimeTable ratFlo(table=[0,0,0;
                6,0,0; 10,0.3,0.1; 15,1,0.1; 24,0.1,0.1; 30,0.1,1; 39,1,0.3; 48,0.1,0.1;
                54,0.1,1; 63,0.1,0.3; 72,0,0; 78,0,1; 96,0,0],
                                            timeScale=3600)
            "Source signal: y[1] for cooling load, y[2] for heating load"
            annotation (Placement(transformation(extent={{-220,170},{-200,190}})));
        equation
          connect(TChiWatSupSet.y, pla.TChiWatSupSet) annotation (Line(points={{-198,20},
                  {-34,20}},                   color={0,0,127}));
          connect(THeaWatSupSet.y, pla.THeaWatSupSet) annotation (Line(points={{-168,0},
                  {-74,0},{-74,16},{-34,16}},   color={0,0,127}));
          connect(dpChiWatSet_max.y, pla.dpChiWatSet) annotation (Line(points={{-198,-40},
                  {-70,-40},{-70,12},{-34,12}},color={0,0,127}));
          connect(dpHeaWatSet_max.y, pla.dpHeaWatSet) annotation (Line(points={{-168,-60},
                  {-66,-60},{-66,8},{-34,8}},   color={0,0,127}));

          connect(weaDat.weaBus, pla.weaBus) annotation (Line(
              points={{-200,120},{0,120},{0,30}},
              color={255,204,51},
              thickness=0.5));
          connect(pla.port_bSerHea, disHeaWat.port_a) annotation (Line(points={{30,0},{
                  60,0},{60,140},{12,140}}, color={0,127,255}));
          connect(pla.port_bSerCoo, disChiWat.port_a) annotation (Line(points={{30,-4},
                  {60,-4},{60,-140},{10,-140}},color={0,127,255}));
          connect(THeaWatRet.y, disHeaWat.TSet) annotation (Line(points={{-168,80},{20,80},
                  {20,148},{14,148}},      color={0,0,127}));
          connect(TChiWatRet.y, disChiWat.TSet) annotation (Line(points={{-198,-100},{20,
                  -100},{20,-132},{12,-132}}, color={0,0,127}));
          connect(u1.y[1], pla.u1Coo) annotation (Line(points={{-198,60},{-40,60},{-40,28},
                  {-34,28}},     color={255,0,255}));
          connect(disHeaWat.port_b, valDisHeaWat.port_a)
            annotation (Line(points={{-8,140},{-30,140}}, color={0,127,255}));
          connect(valDisHeaWat.port_b, pla.port_aSerHea) annotation (Line(points={{-50,140},
                  {-60,140},{-60,0},{-30,0}}, color={0,127,255}));
          connect(disChiWat.port_b, valDisChiWat.port_a)
            annotation (Line(points={{-10,-140},{-30,-140}}, color={0,127,255}));
          connect(valDisChiWat.port_b, pla.port_aSerCoo) annotation (Line(points={{-50,-140},
                  {-60,-140},{-60,-4},{-30,-4}}, color={0,127,255}));
          connect(ratFlo.y[2], valDisHeaWat.y) annotation (Line(points={{-198,180},{-40,
                  180},{-40,152}}, color={0,0,127}));
          connect(ratFlo.y[1], valDisChiWat.y) annotation (Line(points={{-198,180},{-80,
                  180},{-80,-120},{-40,-120},{-40,-128}}, color={0,0,127}));
          connect(u1.y[2], pla.u1Hea) annotation (Line(points={{-198,60},{-40,60},{-40,
                  24},{-34,24}}, color={255,0,255}));
          annotation (
            __Dymola_Commands(
              file="modelica://Buildings/Resources/Scripts/Dymola/Experimental/DHC/Plants/Combined/Validation/AllElectricCWStorage.mos"
              "Simulate and plot"),
            experiment(
              StopTime=345600,
              Tolerance=1e-06),
          Diagram(coordinateSystem(extent={{-240,-240},{240,240}})),
            Documentation(info="<html>
<p>
This model validates
<a href=\"modelica://Buildings.Experimental.DHC.Plants.Combined.AllElectricCWStorage\">
Buildings.Experimental.DHC.Plants.Combined.AllElectricCWStorage</a>
over a four-day simulation period where the load profile is characterized by
high cooling loads and low heating loads during the first day,
concomitant high cooling and heating loads during the second day,
low cooling loads and high heating loads during the third day,
and no cooling loads (cooling disabled) and high heating loads 
during the last day. 
</p>
</html>",         revisions="<html>
<ul>
<li>
February 24, 2023, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>"));
        end AllElectricCWStorage;
        annotation (Documentation(info="<html>
<p>
This package contains validation models.
</p>
</html>"));
      end Validation;
      annotation (Documentation(info="<html>
<p>
This package contains models for combined heating and cooling plants
used in DHC systems.
</p>
</html>"));
    end Combined;

    package Cooling "Package of models for central cooling production"
      extends Modelica.Icons.VariantsPackage;

      model ElectricChillerParallel
        "District cooling plant model"
        extends estcp.DHC.Plants.BaseClasses.PartialPlant(
          have_eleCoo=true,
          have_pum=true,
          have_fan=true,
          have_weaBus=true,
          typ=estcp.DHC.Types.DistrictSystemType.Cooling);
        // chiller parameters
        final parameter Integer numChi=2
          "Number of chillers"
          annotation (Dialog(group="Chiller"));
        replaceable parameter Buildings.Fluid.Chillers.Data.ElectricEIR.Generic perChi
          "Performance data of chiller"
          annotation (Dialog(group="Chiller"),choicesAllMatching=true,
         Placement(transformation(extent={{124,264},{138,278}})));
        parameter Modelica.Units.SI.MassFlowRate mCHW_flow_nominal
          "Nominal chilled water mass flow rate" annotation (Dialog(group="Chiller"));
        parameter Modelica.Units.SI.Pressure dpCHW_nominal
          "Pressure difference at the chilled water side"
          annotation (Dialog(group="Chiller"));
        parameter Modelica.Units.SI.HeatFlowRate QChi_nominal(max=0)
          "Nominal cooling capacity of single chiller (negative means cooling)"
          annotation (Dialog(group="Chiller"));
        parameter Modelica.Units.SI.MassFlowRate mMin_flow
          "Minimum mass flow rate of single chiller"
          annotation (Dialog(group="Chiller"));
        // cooling tower parameters
        parameter Modelica.Units.SI.MassFlowRate mCW_flow_nominal
          "Nominal condenser water mass flow rate"
          annotation (Dialog(group="Cooling Tower"));
        parameter Modelica.Units.SI.Pressure dpCW_nominal
          "Pressure difference at the condenser water side"
          annotation (Dialog(group="Cooling Tower"));
        parameter Modelica.Units.SI.Temperature TAirInWB_nominal
          "Nominal air wetbulb temperature" annotation (Dialog(group="Cooling Tower"));
        parameter Modelica.Units.SI.Temperature TCW_nominal
          "Nominal condenser water temperature at tower inlet"
          annotation (Dialog(group="Cooling Tower"));
        parameter Modelica.Units.SI.TemperatureDifference dT_nominal
          "Temperature difference between inlet and outlet of the tower"
          annotation (Dialog(group="Cooling Tower"));
        parameter Modelica.Units.SI.TemperatureDifference dTApp
          "Approach temperature" annotation (Dialog(group="Cooling Tower"));
        parameter Modelica.Units.SI.Temperature TMin
          "Minimum allowed water temperature entering chiller"
          annotation (Dialog(group="Cooling Tower"));
        parameter Modelica.Units.SI.Power PFan_nominal "Fan power"
          annotation (Dialog(group="Cooling Tower"));
        // pump parameters
        replaceable parameter Buildings.Fluid.Movers.Data.Generic perCHWPum
          constrainedby Buildings.Fluid.Movers.Data.Generic
          "Performance data of chilled water pump"
          annotation (Dialog(group="Pump"),choicesAllMatching=true,
         Placement(transformation(extent={{164,264},{178,278}})));
        replaceable parameter Buildings.Fluid.Movers.Data.Generic perCWPum
          constrainedby Buildings.Fluid.Movers.Data.Generic
          "Performance data of condenser water pump"
          annotation (Dialog(group="Pump"),choicesAllMatching=true,
         Placement(transformation(extent={{204,264},{218,278}})));
        parameter Modelica.Units.SI.Pressure dpCHWPumVal_nominal
          "Nominal pressure drop of chilled water pump valve"
          annotation (Dialog(group="Pump"));
        parameter Modelica.Units.SI.Pressure dpCWPumVal_nominal
          "Nominal pressure drop of condenser water pump valve"
          annotation (Dialog(group="Pump"));
        parameter Modelica.Units.SI.Time tau=1
          "Pump time constant at nominal flow (if energyDynamics <> SteadyState)"
          annotation (Dialog(tab="Dynamics", group="Pump"));
        parameter Boolean use_inputFilter=false
          "= true, if pump speed is filtered with a 2nd order CriticalDamping filter"
          annotation(Dialog(tab="Dynamics", group="Pump"));
        parameter Modelica.Units.SI.Time riseTimePump=30
          "Pump rise time of the filter (time to reach 99.6 % of the speed)" annotation (
            Dialog(
            tab="Dynamics",
            group="Pump",
            enable=use_inputFilter));
        parameter Modelica.Blocks.Types.Init init=Modelica.Blocks.Types.Init.InitialOutput
          "Type of initialization for pumps (no init/steady state/initial state/initial output)"
          annotation(Dialog(tab="Dynamics", group="Pump",enable=use_inputFilter));
        parameter Real[numChi] yCHWP_start=fill(0,numChi)
          "Initial value of CHW pump signals"
          annotation(Dialog(tab="Dynamics", group="Pump",enable=use_inputFilter));
        parameter Real[numChi] yCWP_start=fill(0,numChi)
          "Initial value of CW pump signals"
          annotation(Dialog(tab="Dynamics", group="Pump",enable=use_inputFilter));
        parameter Modelica.Units.SI.PressureDifference dpCooTowVal_nominal
          "Nominal pressure difference of the cooling tower valve";
        // control settings
        parameter Modelica.Units.SI.Time tWai "Waiting time"
          annotation (Dialog(group="Control Settings"));
        // dynamics
        parameter Modelica.Fluid.Types.Dynamics energyDynamics=
          Modelica.Fluid.Types.Dynamics.DynamicFreeInitial
          "Type of energy balance: dynamic (3 initialization options) or steady state"
          annotation (Evaluate=true,Dialog(tab="Dynamics",group="Conservation equations"));
        parameter Modelica.Fluid.Types.Dynamics massDynamics=energyDynamics
          "Type of mass balance: dynamic (3 initialization options) or steady state, must be steady state if energyDynamics is steady state"
          annotation(Evaluate=true, Dialog(tab = "Advanced", group="Dynamics"));
        Modelica.Blocks.Interfaces.BooleanInput on
          "On signal of the plant"
          annotation (Placement(transformation(extent={{-420,200},{-380,240}}),
         iconTransformation(extent={{-340,200},{-300,240}})));
        Modelica.Blocks.Interfaces.RealInput TCHWSupSet(
          final unit="K",
          displayUnit="degC")
          "Set point for chilled water supply temperature"
          annotation (Placement(transformation(extent={{-420,100},{-380,140}}),
         iconTransformation(extent={{-340,140},{-300,180}})));
        Buildings.Applications.BaseClasses.Equipment.ElectricChillerParallel mulChiSys(
          final use_inputFilter=use_inputFilter,
          final per=fill(
            perChi,
            numChi),
          final m1_flow_nominal=mCW_flow_nominal,
          final m2_flow_nominal=mCHW_flow_nominal,
          final dp1_nominal=dpCW_nominal/2,
          final dp2_nominal=dpCHW_nominal,
          final num=numChi,
          redeclare final package Medium1=Medium,
          redeclare final package Medium2=Medium)
          "Chillers connected in parallel"
          annotation (Placement(transformation(extent={{60,40},{40,60}})));
        estcp.DHC.Plants.Cooling.Subsystems.CoolingTowersWithBypass cooTowWitByp(
          redeclare final package Medium = Medium,
          final num=numChi,
          final m_flow_nominal=mCW_flow_nominal,
          final use_inputFilter=use_inputFilter,
          final dp_nominal=dpCW_nominal/2,
          final dpValve_nominal=dpCooTowVal_nominal,
          final TAirInWB_nominal=TAirInWB_nominal,
          final TWatIn_nominal=TCW_nominal,
          final dT_nominal=dT_nominal,
          final dTApp=dTApp,
          final PFan_nominal=PFan_nominal,
          final TMin=TMin) "Cooling towers with bypass valve"
          annotation (Placement(transformation(extent={{-40,160},{-20,180}})));
        Buildings.Applications.BaseClasses.Equipment.FlowMachine_y pumCHW(
          redeclare final package Medium=Medium,
          final per=fill(
            perCHWPum,
            numChi),
          yValve_start=fill(
            1,
            numChi),
          final tau=tau,
          final use_inputFilter=use_inputFilter,
          final riseTimePump=riseTimePump,
          final init=init,
          final yPump_start=yCHWP_start,
          final energyDynamics=energyDynamics,
          final m_flow_nominal=mCHW_flow_nominal,
          final dpValve_nominal=dpCHWPumVal_nominal,
          final num=numChi)
          "Chilled water pumps"
          annotation (Placement(transformation(extent={{-52,34},{-32,54}})));
        Buildings.Applications.BaseClasses.Equipment.FlowMachine_m pumCW(
          redeclare final package Medium=Medium,
          final per=fill(
            perCWPum,
            numChi),
          final tau=tau,
          final use_inputFilter=use_inputFilter,
          final riseTimePump=riseTimePump,
          final init=init,
          final yPump_start=yCWP_start,
          final energyDynamics=energyDynamics,
          final m_flow_nominal=mCW_flow_nominal,
          final dpValve_nominal=dpCWPumVal_nominal,
          final num=numChi)
          "Condenser water pumps"
          annotation (Placement(transformation(extent={{60,160},{80,180}})));
        Buildings.Fluid.Actuators.Valves.TwoWayEqualPercentage valByp(
          redeclare final package Medium=Medium,
          final allowFlowReversal=false,
          final m_flow_nominal=mCHW_flow_nominal,
          final dpValve_nominal=dpCHWPumVal_nominal,
          final use_inputFilter=true,
          riseTime=60)
          "Chilled water bypass valve"
          annotation (Placement(transformation(extent={{10,10},{-10,-10}},
            rotation=0,origin={-30,-70})));
        Buildings.Fluid.Sensors.TemperatureTwoPort senTCHWSup(
          redeclare final package Medium=Medium,
          final m_flow_nominal=mCHW_flow_nominal)
          "Chilled water supply temperature"
          annotation (Placement(transformation(extent={{140,-30},{160,-50}})));
        estcp.DHC.Plants.Cooling.Controls.ChillerStage chiStaCon(final tWai=
              tWai, final QChi_nominal=QChi_nominal)
          "Chiller staging controller" annotation (Placement(transformation(
                extent={{-200,200},{-180,220}})));
        Buildings.Fluid.Sensors.TemperatureTwoPort senTCHWRet(
          redeclare final package Medium=Medium,
          final m_flow_nominal=mCHW_flow_nominal)
          "Chilled water return temperature"
          annotation (Placement(transformation(extent={{-270,-50},{-250,-30}})));
        Buildings.Fluid.Sources.Boundary_pT expTanCW(
          redeclare final package Medium=Medium,
          p=300000,
          nPorts=1)
          "Condenser water expansion tank"
          annotation (Placement(transformation(extent={{10,-10},{-10,10}},
              rotation=270,
              origin={0,142})));
        Buildings.Fluid.Sources.Boundary_pT expTanCHW(
          redeclare final package Medium=Medium,
          p=300000,
          nPorts=1)
          "Chilled water expansion tank"
          annotation (Placement(transformation(extent={{-108,-26},{-88,-6}})));
        Buildings.Fluid.Sensors.MassFlowRate senMasFlo(
          redeclare final package Medium=Medium)
          "Chilled water return mass flow"
          annotation (Placement(transformation(extent={{-230,-50},{-210,-30}})));
        Buildings.Controls.OBC.CDL.Conversions.BooleanToReal chiOn[numChi]
          "Convert chiller on signal from boolean to real"
          annotation (Placement(transformation(extent={{-120,200},{-100,220}})));
        Buildings.Controls.OBC.CDL.Reals.MultiSum totPPum(
          nin=4)
          "Total pump power"
          annotation (Placement(transformation(extent={{340,150},{360,170}})));
        Buildings.Controls.OBC.CDL.Reals.MultiSum totPFan(
          nin=2)
          "Total fan power"
          annotation (Placement(transformation(extent={{340,190},{360,210}})));
        Buildings.Controls.OBC.CDL.Reals.MultiSum totPCoo(
          nin=2)
          "Total cooling power"
          annotation (Placement(transformation(extent={{340,230},{360,250}})));
        Buildings.Fluid.FixedResistances.Junction joiCHWRet(
          redeclare final package Medium=Medium,
          final m_flow_nominal=mCHW_flow_nominal .* {1,-1,1},
          energyDynamics=Modelica.Fluid.Types.Dynamics.SteadyState,
          dp_nominal={0,0,0})
          "Flow joint for the chilled water return side"
          annotation (Placement(transformation(extent={{-10,10},{10,-10}},
            rotation=90, origin={-80,-40})));
        Buildings.Fluid.FixedResistances.Junction splCHWSup(
          redeclare final package Medium=Medium,
          final m_flow_nominal=mCHW_flow_nominal .* {1,-1,-1},
          energyDynamics=Modelica.Fluid.Types.Dynamics.SteadyState,
          dp_nominal={0,0,0})
          "Flow splitter for the chilled water supply side"
          annotation (Placement(transformation(extent={{10,-10},{-10,10}},
            rotation=90,origin={120,-42})));
        estcp.DHC.Plants.Cooling.Controls.ChilledWaterBypass chiBypCon(
          final numChi=numChi,
          final mMin_flow=mMin_flow,
          k=1,
          Ti=120) "Chilled water bypass control" annotation (Placement(
              transformation(extent={{-120,-160},{-100,-140}})));
        Buildings.Fluid.Sensors.MassFlowRate senMasFloCHW(redeclare final
            package Medium = Medium) "Total chilled water pump mass flow rate"
          annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=90,
              origin={120,20})));
      protected
        final parameter Medium.ThermodynamicState sta_default=Medium.setState_pTX(
          T=Medium.T_default,
          p=Medium.p_default,
          X=Medium.X_default)
          "Medium state at default properties";
        final parameter Modelica.Units.SI.SpecificHeatCapacity cp_default=
            Medium.specificHeatCapacityCp(sta_default)
          "Specific heat capacity of the fluid";

      initial equation
        assert(energyDynamics <> Modelica.Fluid.Types.Dynamics.SteadyState or
               massDynamics == Modelica.Fluid.Types.Dynamics.SteadyState,
               "In " + getInstanceName() +
               ": energyDynamics is selected as steady state, and therefore massDynamics must also be steady-state.");

      equation
        connect(cooTowWitByp.port_b,pumCW.port_a)
          annotation (Line(points={{-20,170},{60,170}},color={0,127,255}));
        connect(on,chiStaCon.on)
          annotation (Line(points={{-400,220},{-220,220},{-220,213.75},{-201.25,
                213.75}},
            color={255,0,255}));
        connect(pumCHW.port_b,mulChiSys.port_a2)
          annotation (Line(points={{-32,44},{40,44}}, color={0,127,255}));
        connect(pumCW.port_b,mulChiSys.port_a1)
          annotation (Line(points={{80,170},{120,170},{120,56},{60,56}},
            color={0,127,255}));
        connect(mulChiSys.port_b1,cooTowWitByp.port_a)
          annotation (Line(points={{40,56},{-80,56},{-80,170},{-40,170}},
            color={0,127,255}));
        connect(expTanCW.ports[1],pumCW.port_a)
          annotation (Line(points={{1.9984e-15,152},{1.9984e-15,170},{60,170}},
            color={0,127,255}));
        connect(senTCHWRet.port_b,senMasFlo.port_a)
          annotation (Line(points={{-250,-40},{-230,-40}},color={0,127,255}));
        connect(chiStaCon.y,mulChiSys.on)
          annotation (Line(points={{-179.375,210},{-160,210},{-160,100},{80,100},{80,54},{62,54}},
            color={255,0,255}));
        connect(chiStaCon.y,chiOn.u)
          annotation (Line(points={{-179.375,210},{-122,210}},
            color={255,0,255}));
        connect(chiOn.y,pumCW.u)
          annotation (Line(points={{-98,210},{0,210},{0,174},{58,174}},
            color={0,0,127}));
        connect(chiStaCon.y,cooTowWitByp.on)
          annotation (Line(points={{-179.375,210},{-160,210},{-160,174},{-42,174}},
            color={255,0,255}));
        connect(weaBus.TWetBul,cooTowWitByp.TWetBul)
          annotation (Line(points={{0,380},{0,380},{0,238},{-50,238},{-50,168},{-42,168}},
          color={255,204,51},thickness=0.5),Text(string="%first",index=-1,
          extent={{-6,3},{-6,3}},horizontalAlignment=TextAlignment.Right));
        connect(port_aSerCoo,senTCHWRet.port_a)
          annotation (Line(points={{-380,-40},{-270,-40}},color={0,127,255}));
        connect(senTCHWSup.port_b,port_bSerCoo)
          annotation (Line(points={{160,-40},{380,-40}}, color={0,127,255}));
        connect(TCHWSupSet,mulChiSys.TSet)
          annotation (Line(points={{-400,120},{100,120},{100,50},{62,50}},color={0,0,127}));
        connect(totPPum.y,PPum)
          annotation (Line(points={{362,160},{400,160}},color={0,0,127}));
        connect(pumCW.P,totPPum.u[1:2])
          annotation (Line(points={{81,174},{240,174},{240,159.75},{338,159.75}},
                                                                               color={0,0,127}));
        connect(pumCHW.P,totPPum.u[3:4])
          annotation (Line(points={{-31,48},{0,48},{0,0},{240,0},{240,160.75},{338,
                160.75}},
            color={0,0,127}));
        connect(totPFan.y,PFan)
          annotation (Line(points={{362,200},{400,200}},color={0,0,127}));
        connect(cooTowWitByp.PFan,totPFan.u[1:2])
          annotation (Line(points={{-19,176},{-20,176},{-20,200},{338,200},{338,200.5}},
            color={0,0,127}));
        connect(totPCoo.y,PCoo)
          annotation (Line(points={{362,240},{400,240}},color={0,0,127}));
        connect(mulChiSys.P,totPCoo.u[1:2])
          annotation (Line(points={{39,52},{20,52},{20,240.5},{338,240.5}},
            color={0,0,127}));
        connect(splCHWSup.port_3,senTCHWSup.port_a)
          annotation (Line(points={{130,-42},{130,-40},{140,-40}},color={0,127,255}));
        connect(senTCHWRet.T,chiStaCon.TChiWatRet)
          annotation (Line(points={{-260,-29},{-260,209.75},{-201.25,209.75}},
            color={0,0,127}));
        connect(senTCHWSup.T,chiStaCon.TChiWatSup)
          annotation (Line(points={{150,-51},{150,-200},{-240,-200},{-240,207.5},{-201.25,207.5}},
            color={0,0,127}));
        connect(senMasFlo.m_flow,chiStaCon.mFloChiWat)
          annotation (Line(points={{-220,-29},{-220,205.25},{-201.25,205.25}},
            color={0,0,127}));
        connect(chiStaCon.y,chiBypCon.chiOn)
          annotation (Line(points={{-179.375,210},{-160,210},{-160,-145},{-122,-145}},
            color={255,0,255}));
        connect(senMasFlo.port_b, joiCHWRet.port_3)
          annotation (Line(points={{-210,-40},{-90,-40}}, color={0,127,255}));
        connect(valByp.port_b, joiCHWRet.port_1)
          annotation (Line(points={{-40,-70},{-80,-70},{-80,-50}}, color={0,127,255}));
        connect(senMasFloCHW.m_flow, chiBypCon.mFloChi) annotation (Line(points={{109,
                20},{-140,20},{-140,-155},{-122,-155}}, color={0,0,127}));
        connect(valByp.port_a, splCHWSup.port_2) annotation (Line(points={{-20,-70},{
                120,-70},{120,-52}}, color={0,127,255}));
        connect(joiCHWRet.port_2, pumCHW.port_a)
          annotation (Line(points={{-80,-30},{-80,44},{-52,44}}, color={0,127,255}));
        connect(expTanCHW.ports[1], pumCHW.port_a) annotation (Line(points={{-88,-16},
                {-80,-16},{-80,44},{-52,44}}, color={0,127,255}));
        connect(mulChiSys.port_b2, senMasFloCHW.port_a)
          annotation (Line(points={{60,44},{120,44},{120,30}}, color={0,127,255}));
        connect(senMasFloCHW.port_b, splCHWSup.port_1)
          annotation (Line(points={{120,10},{120,-32}}, color={0,127,255}));
        connect(chiBypCon.y, valByp.y) annotation (Line(points={{-99,-150},{-30,-150},
                {-30,-82}}, color={0,0,127}));
        connect(chiOn.y, pumCHW.u) annotation (Line(points={{-98,210},{-90,210},{-90,48},
                {-54,48}}, color={0,0,127}));
        annotation (
          defaultComponentName="pla",
          Documentation(
            info="<html>
<p>This model implements a generic district central cooling plant as illustrated
in the schematics below. </p>
<ul>
<li>The cooling is provided by two parallel chillers instantiated from
<a href=\"modelica://Buildings.Applications.BaseClasses.Equipment.ElectricChillerParallel\">
Buildings.Applications.BaseClasses.Equipment.ElectricChillerParallel</a>. </li>
<li>The chilled water bypass loop is controlled to ensure a minimum flow of
chilled water running through the chillers all the time. </li>
<li>The condenser water is cooled by two parallel cooling towers with a bypass
loop. See <a href=\"modelica://Buildings.Experimental.DHC.Plants.Cooling.Subsystems.CoolingTowersWithBypass\">
Buildings.Experimental.DHC.Plants.Cooling.Subsystems.CoolingTowersWithBypass</a>
for the details of the modeling of the cooling towers. </li>
<li>The chilled water loop is equipped with two parallel constant speed pumps,
which run one-and-one with each chiller. The condenser water pumps are constant speed with prescribed
mass flow rates. </li>
<li>The plant operates when it receives an <code>on</code> signal from the
external control. </li>
</ul>
<p>The staging of the chillers is based on the calculated cooling load. </p>
<p>See <a href=\"modelica://Buildings.Experimental.DHC.Plants.Cooling.Controls.ChillerStage\">
Buildings.Experimental.DHC.Plants.Cooling.Controls.ChillerStage</a> for
the detailed control logic. </p>
<p align=\"center\"><img src=\"modelica://Buildings/Resources/Images/Experimental/DHC/Plants/Cooling/ElectricChillerParallel.png\" alt=\"System schematics\"/>. </p>
</html>",   revisions="<html>
<ul>
<li>
January 2, 2023, by Kathryn Hinkelman:<br/>
Revised chilled water pump control to be constant speed and running 1-and-1 with chillers.
</li>
<li>
December 14, 2022, by Kathryn Hinkelman:<br/>
Corrected <code>chiBypCon</code> to control mass flow rate through the chillers.<br>
This is for <a href=\"https://github.com/lbl-srg/modelica-buildings/issues/2912#issuecomment-1324375700\">issue 2912</a>.
</li>
<li>
November 16, 2022, by Michael Wetter:<br/>
Corrected wrong assignments for chiller system <code>mulChiSys</code> which assigned chilled water
to condenser water parameters and vice versa.<br/>
Changed rise time of valve to 30 seconds so that it is the same as the one for the pumps.
</li>
<li>
September 15, 2022, by Kathryn Hinkelman:<br/>
Propagated dynamics and initialization parameters for pumps.
</li>
<li>
March 3, 2022, by Michael Wetter:<br/>
Moved <code>massDynamics</code> to <code>Advanced</code> tab and
added assertion for correct combination of energy and mass dynamics.<br/>
This is for
<a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1542\">issue 1542</a>.
</li>
<li>
August 6, 2020 by Jing Wang:<br/>
First implementation.
</li>
</ul>
</html>"),Icon(
            coordinateSystem(
              extent={{-300,-300},{300,300}}),
            graphics={
              Polygon(
                points={{-62,-14},{-62,-14}},
                lineColor={238,46,47},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid)}));
      end ElectricChillerParallel;

      model StoragePlant "Model of a storage plant with a chiller and a CHW tank"

        extends Buildings.Fluid.Interfaces.PartialFourPort(
          redeclare final package Medium1 = Medium,
          redeclare final package Medium2 = Medium);

        replaceable package Medium =
          Modelica.Media.Interfaces.PartialMedium "Medium package";

        parameter Modelica.Units.SI.MassFlowRate m_flow_nominal=
           mTan_flow_nominal+mChi_flow_nominal
          "Nominal mass flow rate"
          annotation(Dialog(group="Nominal values"));
        parameter Modelica.Units.SI.MassFlowRate mTan_flow_nominal(min=0)
          "Nominal mass flow rate for CHW tank branch"
          annotation(Dialog(group="Nominal values"));
        parameter Modelica.Units.SI.MassFlowRate mChi_flow_nominal(min=0)
          "Nominal mass flow rate for CHW chiller branch"
          annotation(Dialog(group="Nominal values"));
        parameter Modelica.Units.SI.PressureDifference dpPum_nominal
          "Nominal pressure difference for secondary pump sizing"
          annotation(Dialog(group="Nominal values"));
        parameter Modelica.Units.SI.PressureDifference dpVal_nominal
          "Nominal pressure difference for return valve sizing"
          annotation(Dialog(group="Nominal values"));
        parameter Modelica.Units.SI.Temperature T_CHWS_nominal(
          final displayUnit="degC")=
           7+273.15 "Nominal temperature of CHW supply"
          annotation(Dialog(group="Nominal values"));
        parameter Modelica.Units.SI.Temperature T_CHWR_nominal(
          final displayUnit="degC")=
           12+273.15
          "Nominal temperature of CHW return"
          annotation(Dialog(group="Nominal values"));

        Buildings.Fluid.Movers.Preconfigured.FlowControlled_m_flow pumPri(
          redeclare final package Medium = Medium,
          final addPowerToMedium=false,
          final m_flow_nominal=mChi_flow_nominal,
          final dp_nominal=chi2PreDro.dp_nominal) "Primary CHW pump"
          annotation (Placement(transformation(extent={{-40,-14},{-20,6}})));
        Buildings.Fluid.FixedResistances.PressureDrop chi2PreDro(
          redeclare final package Medium = Medium,
          final m_flow_nominal=mChi_flow_nominal,
          dp_nominal=0.1*dpPum_nominal) "Pressure drop of the chiller loop"
                                                           annotation (Placement(
              transformation(
              extent={{10,-10},{-10,10}},
              rotation=0,
              origin={-30,-60})));
        estcp.DHC.Plants.Cooling.BaseClasses.TankBranch tanBra(
          redeclare final package Medium = Medium,
          final m_flow_nominal=m_flow_nominal,
          final mTan_flow_nominal=mTan_flow_nominal,
          final mChi_flow_nominal=mChi_flow_nominal,
          final T_CHWS_nominal=T_CHWS_nominal,
          final T_CHWR_nominal=T_CHWR_nominal,
          VTan=0.8,
          hTan=3,
          dIns=0.3) "Tank branch, tank can be charged remotely" annotation (
            Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={10,-10})));
        estcp.DHC.Plants.Cooling.BaseClasses.ReversibleConnection revCon(
          redeclare final package Medium = Medium,
          final m_flow_nominal=m_flow_nominal,
          final mTan_flow_nominal=mTan_flow_nominal,
          final dpPum_nominal=dpPum_nominal,
          final dpVal_nominal=dpVal_nominal,
          final T_start=T_CHWS_nominal) "Reversible connection"
          annotation (Placement(transformation(extent={{40,20},{60,40}})));
        estcp.DHC.Plants.Cooling.Controls.FlowControl floCon(final
            mChi_flow_nominal=mChi_flow_nominal, final mTan_flow_nominal=
              mTan_flow_nominal) "Control block for storage plant flows"
          annotation (Placement(transformation(extent={{-60,40},{-40,60}})));
        estcp.DHC.Plants.Cooling.Controls.TankStatus tanSta(TLow=T_CHWS_nominal
               + 0.5, THig=T_CHWR_nominal - 0.5) "Tank status"
          annotation (Placement(transformation(extent={{40,-80},{60,-60}})));
        Modelica.Blocks.Interfaces.BooleanInput chiEnaSta
          "Chiller enable status, true if chiller is enabled" annotation (Placement(
              transformation(rotation=-90,
                                         extent={{-10,-10},{10,10}},
              origin={-60,110}),
              iconTransformation(extent={{-10,-10},{10,10}},
              rotation=-90,
              origin={-20,110})));
        Modelica.Blocks.Interfaces.IntegerInput com
          "Command: 1 = charge tank, 2 = no command, 3 = discharge from tank"
                                                    annotation (Placement(
              transformation(rotation=-90,
                                         extent={{-10,-10},{10,10}},
              origin={-40,110}),
              iconTransformation(extent={{-10,-10},{10,10}},
              rotation=-90,
              origin={20,110})));
        Modelica.Blocks.Interfaces.BooleanInput hasLoa
          "Set to true if the district has a load"     annotation (Placement(
              transformation(rotation=-90,
                                         extent={{-10,-10},{10,10}},
              origin={-80,110}),
              iconTransformation(extent={{-10,-10},{10,10}},
              rotation=-90,
              origin={-60,110})));
        Modelica.Blocks.Interfaces.RealInput yPum(final unit="1")
          "Normalized speed signal for the secondary pump"        annotation (
            Placement(transformation(rotation=-90,
                                                 extent={{-10,-10},{10,10}},
              origin={-20,110}),
              iconTransformation(extent={{-10,-10},{10,10}},
              rotation=-90,
              origin={60,110})));
        Buildings.Fluid.Sensors.RelativePressure senRelPre(
          redeclare final package Medium = Medium)
          "Relative pressure sensor"
          annotation (Placement(transformation(extent={{-10,10},{10,-10}},
            rotation=-90,origin={80,10})));
        Buildings.Controls.OBC.CDL.Interfaces.RealOutput dp(
          final quantity="PressureDifference",
          final unit="Pa",
          final displayUnit="Pa")
          "Pressure drop accross the connection (measured)"
          annotation (Placement(transformation(extent={{100,-40},{120,-20}}),
            iconTransformation(extent={{100,0},{140,40}})));
        Modelica.Blocks.Interfaces.BooleanOutput isChaRem
          "Is operated for remote charging" annotation (Placement(transformation(
                extent={{100,30},{120,50}}), iconTransformation(extent={{100,-30},{
                  120,-10}})));
      equation
        connect(tanSta.y, floCon.tanSta) annotation (Line(points={{61,-70},{70,-70},{70,
                -90},{-70,-90},{-70,42},{-61,42}},                   color={255,0,255}));
        connect(floCon.mPriPum_flow, pumPri.m_flow_in)
          annotation (Line(points={{-39,58},{-30,58},{-30,8}},  color={0,0,127}));
        connect(floCon.ySecPum,revCon. yPum) annotation (Line(points={{-39,54},{34,54},
                {34,36},{39,36}},          color={0,0,127}));
        connect(floCon.yVal,revCon. yVal) annotation (Line(points={{-39,50},{30,50},{
                30,24},{39,24}},           color={0,0,127}));
        connect(tanBra.TTan,tanSta. TTan) annotation (Line(points={{21,-20},{30,-20},{
                30,-70},{39,-70}},            color={0,0,127}));
        connect(chiEnaSta, floCon.chiEnaSta) annotation (Line(points={{-60,110},{-60,80},
                {-76,80},{-76,50},{-61,50}},
                                        color={255,0,255}));
        connect(com, floCon.com) annotation (Line(points={{-40,110},{-40,76},{-72,76},
                {-72,54},{-61,54}}, color={255,127,0}));
        connect(hasLoa, floCon.hasLoa) annotation (Line(points={{-80,110},{-80,46},{-61,
                46}},                                                      color={255,
                0,255}));
        connect(yPum, floCon.yPum) annotation (Line(points={{-20,110},{-20,72},{-68,72},
                {-68,58},{-61,58}},
                                  color={0,0,127}));
        connect(port_b2, chi2PreDro.port_b) annotation (Line(points={{-100,-60},{-40,
                -60}},                color={0,127,255}));
        connect(tanBra.port_a2, port_a2) annotation (Line(points={{20,-16},{80,-16},{80,
                -60},{100,-60}}, color={0,127,255}));
        connect(revCon.port_b, port_b1) annotation (Line(points={{60,30},{80,30},{80,60},
                {100,60}}, color={0,127,255}));
        connect(port_a1, pumPri.port_a) annotation (Line(points={{-100,60},{-84,60},{
                -84,-4},{-40,-4}},
                               color={0,127,255}));
        connect(pumPri.port_b, tanBra.port_a1) annotation (Line(points={{-20,-4},{0,
                -4}},            color={0,127,255}));
        connect(tanBra.port_b2, chi2PreDro.port_a) annotation (Line(points={{0,-16},{
                -6,-16},{-6,-60},{-20,-60}},
                                          color={0,127,255}));
        connect(tanBra.port_b1, revCon.port_a) annotation (Line(points={{20,-4},{34,-4},
                {34,30},{40,30}}, color={0,127,255}));
        connect(port_b1, senRelPre.port_a)
          annotation (Line(points={{100,60},{80,60},{80,20}}, color={0,127,255}));
        connect(port_a2, senRelPre.port_b) annotation (Line(points={{100,-60},{80,-60},
                {80,-3.55271e-15}}, color={0,127,255}));
        connect(senRelPre.p_rel, dp) annotation (Line(points={{89,10},{92,10},{92,-30},
                {110,-30}},color={0,0,127}));
        connect(floCon.isChaRem, isChaRem) annotation (Line(points={{-39,46},{94,46},
                {94,40},{110,40}}, color={255,0,255}));
        annotation (Diagram(coordinateSystem(extent={{-100,-100},{100,100}})), Icon(
              coordinateSystem(extent={{-100,-100},{100,100}}), graphics={
                                     Rectangle(
                extent={{-100,100},{100,-100}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-100,62},{100,58}},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                pattern=LinePattern.None,
                lineColor={0,0,0}),
              Rectangle(
                extent={{-100,-58},{100,-62}},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                pattern=LinePattern.None,
                lineColor={0,0,0}),
              Ellipse(
                extent={{20,80},{60,40}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                lineThickness=0.5),
              Polygon(
                points={{60,60},{40,80},{40,40},{60,60}},
                lineColor={0,0,0},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{-60,80},{-20,40}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                lineThickness=0.5),
              Polygon(
                points={{-20,60},{-40,80},{-40,40},{-20,60}},
                lineColor={0,0,0},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-2,58},{2,-58}},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                pattern=LinePattern.None,
                lineColor={0,0,0}),
              Rectangle(
                extent={{-20,22},{20,-18}},
                lineColor={0,0,0},
                lineThickness=0.5,
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Line(
                points={{-14,16},{14,16}},
                color={0,0,0},
                thickness=0.5),
              Line(
                points={{-14,-12},{14,-12}},
                color={0,0,0},
                thickness=0.5)}),
              defaultComponentName="stoPla",
          Documentation(info="<html>
<p>
This model encompasses the components of a chilled water storage plant.
It includes a flow-controlled primary pump, a stratefied
storage tank, a reversible connection with the district network, and related controls
to coordinate charging and discharging of the tank.
The chiller is intentionally excluded in this component so that it can be
otherwise chosen and configured.
The tank in this plant can be charged by its local chiller or by a remote
chiller on the same CHW district network.
</p>
<h4>System Concept Example</h4>
<p>
An example usage of this model within a district network is implemented in
<a href=\"Modelica://Buildings.Experimental.DHC.Plants.Cooling.Examples.StoragePlantDualSource\">
Buildings.Experimental.DHC.Plants.Cooling.Examples.StoragePlantDualSource</a>.
Shown in the schematic below, it has two CHW plants and three users.
</p>
<ul>
<li>
Plant 1 only has a chiller. The supply pump, P1, is controlled to ensure that
all users have enough pressure head.  This represents a remote chiller plant,
referenced above.
</li>
<li>
Plant 2 has a chiller and a stratified CHW tank and is represented by this model.
The storage plant has a reversible connection to the district network
that can either pump water to the network from the plant using the
pump P<sub>sec</sub>,
or throttle water from the pressurised network to charge the tank.
</li>
</ul>
<p align=\"center\">
<img alt=\"SystemConcept\"
src=\"modelica://Buildings/Resources/Images/Experimental/DHC/Plants/Cooling/SystemConcept.png\"/>
</p>
<h4>Control Signals</h4>
<p>
The plants are controlled as follows:
</p>
<ul>
<li>
In plant 1, for the sake of this discussion, assume the chiller is always on.
The speed-controlled pump
ensures that the users have enough pressure head at all times.
This includes plant 2 when its tank is charged remotely by plant 1 and
it acts like an energy consumer.
</li>
<li>
For plant 2:
<ul>
<li>
In the chiller loop, chiller 2 and its primary pump P<sub>pri</sub>
are on whenever needed (for charging the tank or producing CHW to the
network). Otherwise, they are commanded off.
</li>
<li>
The system receives one of the following three commands regarding the tank:
charge, discharge, or no action.
The tank controller returns status signals. It can be empty, charged, or in-between.
The command to tank may be disregarded. For example, if the
tank is receiving a discharge command but it is already empty, it will not
discharge which would let warm return water directly into the supply side.
See the Implementation section for details.
</li>
<li>
The reversible connection between plant 2 and the district network
modulates the flow rate needed by plant 2.
<ul>
<li>
When the storage plant produces CHW, P<sub>sec</sub> receives a speed control
signal from the same PI controller as P1 in plant 1.
</li>
<li>
When the storage plant is charged remotely, the pressure-independent valve
is controlled to maintain a constant flow from the pressurised network
to the storage tank.
</li>
<li>
Otherwise, the connection cuts off flow to isolate plant 2 from
the district network.
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p align=\"center\">
<img alt=\"ControlSignals\"
src=\"modelica://Buildings/Resources/Images/Experimental/DHC/Plants/Cooling/ControlSignals.png\"/>
</p>
<h4>Implementation</h4>
<p>
The flow control of the storage plant is implemented as a state graph in
<a href=\"modelica://Buildings.Experimental.DHC.Plants.Cooling.Controls.FlowControl\">
Buildings.Experimental.DHC.Plants.Cooling.Controls.FlowControl</a>.
</p>
</html>",       revisions="<html>
<ul>
<li>
April 28, 2023 by Hongxiang Fu:<br/>
First implementation. This is for
<a href=\"https://github.com/lbl-srg/modelica-buildings/issues/2859\">#2859</a>.
</li>
</ul>
</html>"));
      end StoragePlant;

      package Controls "Package of control sequences for cooling plants"
        extends Modelica.Icons.VariantsPackage;

        model ChilledWaterBypass
          "Controller for chilled water bypass valve"
          extends Modelica.Blocks.Icons.Block;
          parameter Integer numChi(
            min=1)
            "Number of chillers";
          parameter Modelica.Units.SI.MassFlowRate mMin_flow
            "Minimum mass flow rate of single chiller";
          parameter Real k(min=0) = 0.06 "Gain of controller";
          parameter Modelica.Units.SI.Time Ti(min=Modelica.Constants.small) = 60
            "Time constant of Integrator block" annotation (Dialog(enable=
                  controllerType == Modelica.Blocks.Types.SimpleController.PI or
                  controllerType == Modelica.Blocks.Types.SimpleController.PID));
          parameter Modelica.Blocks.Types.SimpleController controllerType=
                 Modelica.Blocks.Types.SimpleController.PI
            "Type of controller";
          Modelica.Blocks.Interfaces.BooleanInput chiOn[numChi]
            "On signals of the chillers"
            annotation (Placement(transformation(extent={{-140,30},{-100,70}}),
                iconTransformation(extent={{-140,30},{-100,70}})));
          Modelica.Blocks.Interfaces.RealInput mFloChi(final unit="kg/s")
            "Mass flow rate through the chillers"
            annotation (Placement(transformation(extent={{-140,-70},{-100,-30}})));
          Modelica.Blocks.Interfaces.RealOutput y
            "Bypass valve opening ratio"
            annotation (Placement(transformation(extent={{100,-10},{120,10}}),
                iconTransformation(extent={{100,-10},{120,10}})));
          Buildings.Controls.OBC.CDL.Reals.PIDWithReset
                                               bypValCon(
            controllerType=controllerType,
            final k=k,
            final Ti=Ti,
            y_reset=0)
            "Chilled water bypass valve controller"
            annotation (Placement(transformation(extent={{60,-10},{80,10}})));
          Modelica.Blocks.Math.BooleanToInteger booToInt[numChi]
            "Boolean signal to integer"
            annotation (Placement(transformation(extent={{-90,40},{-70,60}})));
          Buildings.Controls.OBC.CDL.Integers.GreaterThreshold intGreThr
            "Greater than zero"
            annotation (Placement(transformation(extent={{0,-40},{20,-20}})));
          Buildings.Controls.OBC.CDL.Integers.MultiSum numChiOn(nin=numChi)
            "Number of chillers on"
            annotation (Placement(transformation(extent={{-60,40},{-40,60}})));
          Buildings.Controls.OBC.CDL.Conversions.IntegerToReal intToRea
            "Integer to real"
            annotation (Placement(transformation(extent={{-20,40},{0,60}})));
          Modelica.Blocks.Math.Gain mFloSetSca(k=1/numChi)
            "Normalize mass flowrate setpoint"
            annotation (Placement(transformation(extent={{20,40},{40,60}})));
          Modelica.Blocks.Math.Gain mFloBypSca(k=1/(numChi*mMin_flow))
            "Normalize the measured mass flowrate"
            annotation (Placement(transformation(extent={{-60,-60},{-40,-40}})));
        equation
          connect(chiOn, booToInt.u)
            annotation (Line(points={{-120,50},{-92,50}}, color={255,0,255}));
          connect(booToInt.y, numChiOn.u)
            annotation (Line(points={{-69,50},{-62,50}}, color={255,127,0}));
          connect(numChiOn.y, intGreThr.u)
            annotation (Line(points={{-38,50},{-30,50},{-30,-30},{-2,-30}},
                                   color={255,127,0}));
          connect(intGreThr.y, bypValCon.trigger)
            annotation (Line(points={{22,-30},{64,-30},{64,-12}},color={255,0,255}));
          connect(numChiOn.y, intToRea.u)
            annotation (Line(points={{-38,50},{-22,50}}, color={255,127,0}));
          connect(bypValCon.y, y)
            annotation (Line(points={{82,0},{110,0}},  color={0,0,127}));
          connect(intToRea.y, mFloSetSca.u)
            annotation (Line(points={{2,50},{18,50}}, color={0,0,127}));
          connect(mFloSetSca.y, bypValCon.u_s)
            annotation (Line(points={{41,50},{50,50},{50,0},{58,0}}, color={0,0,127}));
          connect(mFloChi, mFloBypSca.u)
            annotation (Line(points={{-120,-50},{-62,-50}}, color={0,0,127}));
          connect(mFloBypSca.y, bypValCon.u_m)
            annotation (Line(points={{-39,-50},{70,-50},{70,-12}}, color={0,0,127}));
          annotation (
            defaultComponentName="chiBypCon",
            Icon(
              coordinateSystem(
                preserveAspectRatio=false),
              graphics={
                Text(
                  extent={{-150,150},{150,110}},
                  textString="%name",
                  textColor={0,0,255})}),
            Diagram(
              coordinateSystem(
                preserveAspectRatio=false, extent={{-100,-100},{100,100}})),
            Documentation(
              revisions="<html>
<ul>
<li>
January 27, 2023, by Michael Wetter:<br/>
Removed connection to itself.
</li>
<li>
December 14, 2022, by Kathryn Hinkelman:<br/>
Corrected measured mass flow rate to be on the chiller 
leg in order to control minimum flow rate through the chillers.<br>
This is for <a href=\"https://github.com/lbl-srg/modelica-buildings/issues/2912#issuecomment-1324375700\">#2912</a>.
</li>
<li>
May 3, 2021 by Jing Wang:<br/>
First implementation. 
</li>
</ul>
</html>",     info="<html>
<p>This model implements the chilled water loop bypass valve control logic as 
follows: </p>
<p>When the plant is on, the PID controller controls the valve opening ratio to 
reach the scaled mass flow rate setpoint. </p>
<p>The setpoint is <code>mMin_flow</code> multiplied by the number of chillers 
that are on. <code>mMin_flow</code> is the minimum mass flow rate required by 
one chiller. </p>
<p>This control sequence assumes that all the chillers are identical and the 
cooling load is evenly split between all of the chillers that are on.</p>
</html>"));
        end ChilledWaterBypass;

        model ChilledWaterPumpSpeed
          "Controller for two headered variable speed chilled water pumps"
          extends Modelica.Blocks.Icons.Block;
          parameter Modelica.Units.SI.PressureDifference dpSetPoi(displayUnit="Pa")
            "Pressure difference setpoint";
          parameter Modelica.Units.SI.Time tWai "Waiting time";
          parameter Modelica.Units.SI.MassFlowRate m_flow_nominal
            "Nominal mass flow rate of single chilled water pump";
          parameter Real minSpe(
            final unit="1",
            final min=0,
            final max=1)=0.05
            "Minimum speed ratio required by chilled water pumps";
          parameter Modelica.Units.SI.MassFlowRate criPoiFlo=0.7*m_flow_nominal
            "Critcal point of flowrate for switching pump on or off";
          parameter Modelica.Units.SI.MassFlowRate deaBanFlo=0.1*m_flow_nominal
            "Deadband for critical point of flowrate";
          parameter Real criPoiSpe=0.5
            "Critical point of speed signal for switching on or off";
          parameter Real deaBanSpe=0.3
            "Deadband for critical point of speed signal";
          parameter Modelica.Blocks.Types.SimpleController controllerType=
            Modelica.Blocks.Types.SimpleController.PI
            "Type of pump speed controller"
            annotation (Dialog(group="Speed Controller"));
          parameter Real k(
            final unit="1",
            final min=0)=1
            "Gain of controller"
            annotation (Dialog(group="Speed Controller"));
          parameter Modelica.Units.SI.Time Ti(final min=Modelica.Constants.small) = 60
            "Time constant of Integrator block" annotation (Dialog(enable=
                  controllerType == Modelica.Blocks.Types.SimpleController.PI or
                  controllerType == Modelica.Blocks.Types.SimpleController.PID, group=
                  "Speed Controller"));
          parameter Modelica.Units.SI.Time Td(final min=0) = 0.1
            "Time constant of Derivative block" annotation (Dialog(enable=
                  controllerType == Modelica.Blocks.Types.SimpleController.PD or
                  controllerType == Modelica.Blocks.Types.SimpleController.PID, group=
                  "Speed Controller"));
          Modelica.Blocks.Interfaces.RealInput masFloPum(
            final unit="kg/s")
            "Total mass flowrate of chilled water pumps"
            annotation (Placement(transformation(extent={{-140,0},{-100,40}}),
                iconTransformation(extent={{-140,0},{-100,40}})));
          Modelica.Blocks.Interfaces.RealInput dpMea(
            final unit="Pa")
            "Measured pressure difference"
            annotation (Placement(transformation(extent={{-140,-60},{-100,-20}})));
          Modelica.Blocks.Interfaces.RealOutput y[numPum](
            each final unit="1",
            each final min=0,
            each final max=1)
            "Pump speed signal"
            annotation (Placement(transformation(extent={{100,-10},{120,10}})));
          Modelica.Blocks.Math.Product pumSpe[numPum] "Output pump speed"
            annotation (Placement(transformation(extent={{60,-10},{80,10}})));
          Buildings.Applications.BaseClasses.Controls.VariableSpeedPumpStage pumStaCon(
            final tWai=tWai,
            final m_flow_nominal=m_flow_nominal,
            final minSpe=minSpe,
            final criPoiFlo=criPoiFlo,
            final deaBanFlo=deaBanFlo,
            final criPoiSpe=criPoiSpe,
            final deaBanSpe=deaBanSpe)
            "Chilled water pump staging control"
            annotation (Placement(transformation(extent={{10,-10},{30,10}})));
          Buildings.Controls.OBC.CDL.Reals.PIDWithReset conPID(
            final controllerType=controllerType,
            final Ti=Ti,
            final k=k,
            final Td=Td)
            "PID controller of pump speed"
            annotation (Placement(transformation(extent={{-40,-10},{-20,10}})));
          Modelica.Blocks.Sources.Constant dpSetSca(final k=1)
            "Scaled differential pressure setpoint"
            annotation (Placement(transformation(extent={{-80,-10},{-60,10}})));
          Modelica.Blocks.Math.Gain gai(k=1/dpSetPoi) "Gain for mesaured dp value"
            annotation (Placement(transformation(extent={{-80,-50},{-60,-30}})));
          Modelica.Blocks.Math.RealToBoolean twoPum(threshold=1.5) "Two pumps are on"
            annotation (Placement(transformation(extent={{10,-60},{-10,-40}})));
          Modelica.Blocks.Math.Sum totPum(final nin=numPum) "Total number of pumps on"
            annotation (Placement(transformation(extent={{42,-60},{22,-40}})));
          Modelica.Blocks.Interfaces.BooleanInput on
            "On signal of the plant"
            annotation (Placement(transformation(extent={{-140,60},{-100,100}}),
           iconTransformation(extent={{-140,60},{-100,100}})));
          Modelica.Blocks.Logical.Or orRes "Or block for controller reset"
            annotation (Placement(transformation(extent={{-60,-80},{-40,-60}})));
        protected
          final parameter Integer numPum=2
            "Number of chilled water pumps";
        equation
          connect(pumStaCon.masFloPum,masFloPum)
            annotation (Line(points={{8,4},{0,4},{0,20},{-120,20}},      color={0,0,127}));
          connect(conPID.y,pumStaCon.speSig)
            annotation (Line(points={{-18,0},{0,0},{0,0},{8,0}},      color={0,0,127}));
          connect(pumStaCon.y,pumSpe.u1)
            annotation (Line(points={{31,0},{50,0},{50,6},{58,6}},color={0,0,127}));
          connect(conPID.y,pumSpe[1].u2)
            annotation (Line(points={{-18,0},{-10,0},{-10,-20},{48,-20},{48,-6},{58,-6}},
              color={0,0,127}));
          connect(conPID.y,pumSpe[2].u2)
            annotation (Line(points={{-18,0},{-10,0},{-10,-20},{48,-20},{48,-6},{58,-6}},
              color={0,0,127}));
          connect(dpSetSca.y,conPID.u_s)
            annotation (Line(points={{-59,0},{-42,0}},color={0,0,127}));
          connect(dpMea, gai.u)
            annotation (Line(points={{-120,-40},{-82,-40}}, color={0,0,127}));
          connect(gai.y, conPID.u_m)
            annotation (Line(points={{-59,-40},{-30,-40},{-30,-12}}, color={0,0,127}));
          connect(pumStaCon.y, totPum.u) annotation (Line(points={{31,0},{50,0},{50,-50},
                  {44,-50}}, color={0,0,127}));
          connect(totPum.y, twoPum.u)
            annotation (Line(points={{21,-50},{12,-50}},color={0,0,127}));
          connect(pumSpe.y, y)
            annotation (Line(points={{81,0},{110,0}}, color={0,0,127}));
          connect(on, pumStaCon.on) annotation (Line(points={{-120,80},{4,80},{4,8},{8,
                  8}}, color={255,0,255}));
          connect(twoPum.y, orRes.u2) annotation (Line(points={{-11,-50},{-20,-50},{-20,
                  -90},{-70,-90},{-70,-78},{-62,-78}}, color={255,0,255}));
          connect(on, orRes.u1) annotation (Line(points={{-120,80},{-90,80},{-90,-70},{
                  -62,-70}}, color={255,0,255}));
          connect(orRes.y, conPID.trigger) annotation (Line(points={{-39,-70},{-36,-70},
                  {-36,-12}}, color={255,0,255}));
          annotation (
            defaultComponentName="CHWPumCon",
            Icon(
              coordinateSystem(
                preserveAspectRatio=false),
              graphics={
                Text(
                  extent={{-150,150},{150,110}},
                  textString="%name",
                  textColor={0,0,255}),
                Ellipse(
                  extent={{-54,52},{52,-52}},
                  lineColor={0,0,0},
                  fillColor={0,0,0},
                  fillPattern=FillPattern.Solid),
                Text(
                  extent={{78,8},{94,-4}},
                  textColor={0,0,127},
                  textString="y"),
                Ellipse(
                  extent={{-52,50},{50,-50}},
                  lineColor={0,0,0},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Polygon(
                  points={{-2,50},{-2,-50},{50,0},{-2,50}},
                  lineColor={0,0,0},
                  lineThickness=1,
                  fillColor={0,0,0},
                  fillPattern=FillPattern.Solid)}),
            Diagram(
              coordinateSystem(
                preserveAspectRatio=false)),
            Documentation(
              revisions="<html>
<ul>
<li>
August 9, 2023, by Hongxiang Fu:<br/>
Restricted this block to a two-pump configuration as intended.
<ul>
<li>
Set <code>final totPum.nin = numPum</code>.
</li>
<li>
Corrected the \"up to two pumps\" language in documentation.
</li>
</ul>
This is for
<a href=\"https://github.com/lbl-srg/modelica-buildings/issues/3470\">#3470</a>.
</li>
<li>
December 30, 2022, by Kathryn Hinkelman:<br/>
Added an <code>on</code> input for a plant-level override to turn pumps off.
</li>
<li>
December 14, 2022 by Kathryn Hinkelman:<br/>
Normalized <code>u_s</code> and <code>u_m</code> by <code>dpSetPoi</code>.
Added reset for PI controller based on the number of pumps that are on.<br>
This is for <a href=\"https://github.com/lbl-srg/modelica-buildings/issues/2912#issuecomment-1324375700\">#2912</a>.
</li>
<li>
August 6, 2020 by Jing Wang:<br/>
First implementation. 
</li>
</ul>
</html>",     info="<html>
<p>
This model implements the control logic for variable speed pumps. 
The staging of pumps is implemented through an instance of 
<a href=\"modelica://Buildings.Applications.BaseClasses.Controls.VariableSpeedPumpStage\">
Buildings.Applications.BaseClasses.Controls.VariableSpeedPumpStage</a>. 
</p>
<p>
The pump speed is controlled to maintain the pressure difference setpoint 
through a PI controller.
</p>
<p>The model inputs are the measured chilled water mass flow rate 
<code>masFloPum</code> and the pressure difference <code>dpMea</code> at a 
reference point from the demand side. The output <code>y</code> is a vector 
of pump speeds.
</p>
<p>
The model currently only supports the control of two variable speed pumps.
</p>
</html>"));
        end ChilledWaterPumpSpeed;

        model ChillerStage
          "Chiller staging controller for plants with two chillers of the same size"
          replaceable package Medium=Buildings.Media.Water
            constrainedby Modelica.Media.Interfaces.PartialMedium
            "Service side medium";
          parameter Modelica.Units.SI.Time tWai "Waiting time";
          parameter Modelica.Units.SI.Power QChi_nominal(final max=0)
            "Nominal cooling capacity (negative)";
          parameter Modelica.Units.SI.Power staUpThr(final min=0) = -0.8*QChi_nominal
            "Stage up load threshold(from one to two chillers)";
          parameter Modelica.Units.SI.Power staDowThr(final min=0) = -0.6*QChi_nominal
            "Stage down load threshold(from two to one chiller)";
          inner Modelica.StateGraph.StateGraphRoot stateGraphRoot
            "State graph root"
            annotation (Placement(transformation(extent={{120,60},{140,80}})));
          Modelica.Blocks.Interfaces.BooleanInput on
            "Enabling signal of the plant. True: chiller should be enabled"
            annotation (Placement(transformation(extent={{-200,40},{-160,80}}),
              iconTransformation(extent={{-200,40},{-160,80}})));
          Modelica.Blocks.Interfaces.RealInput TChiWatRet
            "Chilled water return temperature"
            annotation (Placement(transformation(extent={{-200,-24},{-160,16}}),
              iconTransformation(extent={{-200,-24},{-160,16}})));
          Modelica.Blocks.Interfaces.RealInput TChiWatSup
            "Chilled water supply temperature"
            annotation (Placement(transformation(extent={{-200,-60},{-160,-20}}),
              iconTransformation(extent={{-200,-60},{-160,-20}})));
          Modelica.Blocks.Interfaces.RealInput mFloChiWat
            "Chilled water mass flow rate"
            annotation (Placement(transformation(extent={{-200,-96},{-160,-56}}),
              iconTransformation(extent={{-200,-96},{-160,-56}})));
          Modelica.Blocks.Interfaces.BooleanOutput y[2]
            "On/off signal for the chillers - false: off; true: on"
            annotation (Placement(transformation(extent={{160,10},{180,-10}}),
              iconTransformation(extent={{160,-10},{180,10}})));
          Modelica.StateGraph.InitialStep off(nIn=1, nOut=1)
            "No cooling is demanded"
            annotation (Placement(transformation(extent={{-10,10},{10,-10}},
              rotation=-90,origin={10,90})));
          Modelica.StateGraph.StepWithSignal oneOn(
            nOut=2,
            nIn=2)
            "Status of one chiller on"
            annotation (Placement(transformation(extent={{10,-10},{-10,10}},
              rotation=90,origin={10,0})));
          Modelica.StateGraph.StepWithSignal twoOn(nOut=1, nIn=1)
            "Status of two chillers on"
            annotation (Placement(transformation(extent={{10,-10},{-10,10}},
              rotation=90,origin={10,-90})));
          Modelica.StateGraph.TransitionWithSignal offToOne(
            enableTimer=true,
            waitTime=tWai)
            "Condition of transition from off to one chiller on"
            annotation (Placement(transformation(extent={{10,10},{-10,-10}},
              rotation=90,origin={10,60})));
          Modelica.StateGraph.TransitionWithSignal oneToTwo(
            enableTimer=true,
            waitTime=tWai)
            "Condition of transition from one chiller to two chillers"
            annotation (Placement(transformation(extent={{10,10},{-10,-10}},
              rotation=90,origin={10,-40})));
          Modelica.StateGraph.TransitionWithSignal twoToOne(
            enableTimer=true,
            waitTime=tWai) "Condition of transion from two chillers to one chiller"
            annotation (Placement(transformation(extent={{-10,10},{10,-10}},
              rotation=90,origin={60,-40})));
          Modelica.StateGraph.TransitionWithSignal oneToOff(
            enableTimer=true,
            waitTime=tWai)
            "Condition of transition from one chiller to off"
            annotation (Placement(transformation(extent={{-10,10},{10,-10}},
              rotation=90,origin={40,60})));
          Buildings.Controls.OBC.CDL.Reals.Hysteresis thrOneToTwo(uLow=-staDowThr/
                QChi_nominal, uHigh=-staUpThr/QChi_nominal)
                            "Threshold of turning two chillers on"
            annotation (Placement(transformation(extent={{-60,-80},{-40,-60}})));
          Modelica.Blocks.Logical.Not thrTwoToOne
            "Threshold of turning off the second chiller"
            annotation (Placement(transformation(extent={{-100,-18},{-80,2}})));
          Modelica.Blocks.Math.Add dT(
            final k1=-1,
            final k2=+1)
            "Temperature difference"
            annotation (Placement(transformation(extent={{-140,-20},{-120,0}})));
          Modelica.Blocks.Math.Product pro
            "Product"
            annotation (Placement(transformation(extent={{-140,-80},{-120,-60}})));
          Modelica.Blocks.Math.Gain plr(final k=cp_default/QChi_nominal)
            "Specific heat multiplier to calculate heat flow rate"
            annotation (Placement(transformation(extent={{-102,-80},{-82,-60}})));
          Buildings.Controls.OBC.CDL.Logical.Or Or "On signal for either chiller"
            annotation (Placement(transformation(extent={{120,20},{140,40}})));
          Modelica.Blocks.Logical.Not notOn "on switches to false"
            annotation (Placement(transformation(extent={{-100,20},{-80,40}})));
          Modelica.Blocks.Logical.Or TwoToOne
            "Conditions that turn off the second chiller"
            annotation (Placement(transformation(extent={{-40,-20},{-20,0}})));
        protected
          final parameter Medium.ThermodynamicState sta_default=Medium.setState_pTX(
            T=Medium.T_default,
            p=Medium.p_default,
            X=Medium.X_default)
            "Medium state at default properties";
          final parameter Modelica.Units.SI.SpecificHeatCapacity cp_default=
              Medium.specificHeatCapacityCp(sta_default)
            "Specific heat capacity of the fluid";
        equation
          connect(off.outPort[1],offToOne.inPort)
            annotation (Line(points={{10,79.5},{10,64}},color={0,0,0}));
          connect(oneToTwo.outPort,twoOn.inPort[1])
            annotation (Line(points={{10,-41.5},{10,-79}},color={0,0,0}));
          connect(twoToOne.outPort,oneOn.inPort[2])
            annotation (Line(points={{60,-38.5},{60,20},{9.75,20},{9.75,11}},
              color={0,0,0}));
          connect(oneOn.outPort[2],oneToOff.inPort)
            annotation (Line(points={{9.875,-10.5},{9.875,-20},{40,-20},{40,56}},
              color={0,0,0}));
          connect(oneOn.outPort[1],oneToTwo.inPort)
            annotation (Line(points={{10.125,-10.5},{10.125,-36},{10,-36}},
              color={0,0,0}));
          connect(oneToTwo.condition,thrOneToTwo.y)
            annotation (Line(points={{-2,-40},{-20,-40},{-20,-70},{-38,-70}},
              color={255,0,255}));
          connect(dT.y,pro.u1)
            annotation (Line(points={{-119,-10},{-114,-10},{-114,-40},{-150,-40},
              {-150,-64},{-142,-64}},color={0,0,127}));
          connect(plr.u, pro.y)
            annotation (Line(points={{-104,-70},{-119,-70}},
              color={0,0,127}));
          connect(plr.y, thrOneToTwo.u) annotation (Line(points={{-81,-70},{-62,-70}},
            color={0,0,127}));
          connect(dT.u1,TChiWatRet)
            annotation (Line(points={{-142,-4},{-180,-4}},
              color={0,0,127}));
          connect(TChiWatSup,dT.u2)
            annotation (Line(points={{-180,-40},{-160,-40},{-160,-16},{-142,-16}},
              color={0,0,127}));
          connect(pro.u2,mFloChiWat)
            annotation (Line(points={{-142,-76},{-180,-76}},color={0,0,127}));
          connect(oneToTwo.condition, thrTwoToOne.u)
            annotation (Line(points={{-2,-40},{-108,-40},{-108,-8},{-102,-8}},
              color={255,0,255}));
          connect(oneOn.active, Or.u1)
            annotation (Line(points={{21,-8.88178e-16},{80,-8.88178e-16},{80,30},{118,30}},
              color={255,0,255}));
          connect(twoOn.active, Or.u2)
            annotation (Line(points={{21,-90},{100,-90},{100,22},{118,22}},
              color={255,0,255}));
          connect(Or.y, y[1])
            annotation (Line(points={{142,30},{144,30},{144,-2.5},{170,-2.5}},
              color={255,0,255}));
          connect(twoOn.active, y[2])
            annotation (Line(points={{21,-90},{120,-90},{120,2.5},{170,2.5}},
              color={255,0,255}));
          connect(on, notOn.u)
            annotation (Line(points={{-180,60},{-120,60},{-120,30},{-102,30}},
              color={255,0,255}));
          connect(twoOn.outPort[1],twoToOne.inPort)
            annotation (Line(points={{10,-100.5},{10,-120},{60,-120},{60,-44}},
              color={0,0,0}));
          connect(offToOne.outPort,oneOn.inPort[1])
            annotation (Line(points={{10,58.5},{10,11},{10.25,11}},
                                                                 color={0,0,0}));
          connect(oneToOff.outPort,off.inPort[1])
            annotation (Line(points={{40,61.5},{40,120},{10,120},{10,101}},
              color={0,0,0}));
          connect(on, offToOne.condition) annotation (Line(points={{-180,60},{-2,60}},
            color={255,0,255}));
          connect(thrTwoToOne.y, TwoToOne.u2) annotation (Line(points={{-79,-8},{-80,-8},
                  {-80,-18},{-42,-18}}, color={255,0,255}));
          connect(notOn.y, TwoToOne.u1) annotation (Line(points={{-79,30},{-60,30},{-60,
                  -10},{-42,-10}}, color={255,0,255}));
          connect(TwoToOne.y, twoToOne.condition) annotation (Line(points={{-19,-10},{-10,
                  -10},{-10,-28},{40,-28},{40,-40},{48,-40}}, color={255,0,255}));
          connect(notOn.y, oneToOff.condition)
            annotation (Line(points={{-79,30},{28,30},{28,60}}, color={255,0,255}));
          annotation (
            defaultComponentName="chiStaCon",
            Diagram(
              coordinateSystem(
                preserveAspectRatio=false,
                extent={{-160,-160},{160,160}})),
            Icon(
              coordinateSystem(
                preserveAspectRatio=false,
                extent={{-160,-160},{160,160}}),
                graphics={
                Rectangle(
                  extent={{-160,-160},{160,160}},
                  lineColor={0,0,127},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Text(
                  extent={{-154,206},{146,166}},
                  textColor={0,0,255},
                  textString="%name")}),
            Documentation(
              revisions="<html>
<ul>
<li>
December 10, 2021, by Michael Wetter:<br/>
Corrected parameter value for <code>twoOn.nOut</code>.
This correction is required to simulate the model in Dymola 2022
if the model has been updated to MSL 4.0.0. With MSL 3.2.3, the simulation
works without this correction.<br/>
This is for
<a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1563\">Buildings, #1563</a>.
</li>
<li>
August 6, 2020 by Jing Wang:<br/>
First implementation.
</li>
</ul>
</html>",     info="<html>
<p>This model implements the staging control logic as follows: </p>
<ul>
<li>When the plant enabling signal <code>on</code> changes from 
<code>false</code> to <code>true</code>, one chiller is enabled. </li>
<li>When the total cooling load <code>QLoa</code> exceeds 80 percent (adjustable) 
of one chiller&apos;s nominal capacity <code>QChi_nominal</code>, a second 
chiller is enabled. </li>
<li>When the total cooling load <code>QLoa</code> drops below 60 percent 
(adjustable) of one chiller&apos;s nominal capacity <code>QChi_nominal</code>
(i.e. 30 percent of both chillers combined), or the plant enabling signal 
<code>on</code> changes from <code>true</code> to <code>false</code>, the second 
chiller is disabled. </li>
<li>When the plant enabling signal <code>on</code> changes from <code>true</code> 
to <code>false</code>, the operating chillers will be disabled sequentially.</li>
<li>Parameter <code>tWai</code> assures a transitional time is kept between each 
operation. </li>
</ul>
<p><br>It is assumed that both chillers have the same capacity of 
<code>QChi_nominal</code>. </p>
<p>Note: This model can be used for plants with two chillers with or without 
waterside econimizer (WSE). For plants with WSE, extra control logic on top of 
this model needs to be added. </p>
<p><img src=\"modelica://Buildings/Resources/Images/Experimental/DHC/Plants/Cooling/Controls/ChillerStage.png\" alt=\"State graph\"/>. </p>
</html>"));
        end ChillerStage;

        block FlowControl
          "This block controls the flow at the primary and secondary pumps"
          extends Modelica.Blocks.Icons.Block;

          parameter Modelica.Units.SI.MassFlowRate mChi_flow_nominal
            "Nominal mass flow rate of the chiller loop"
            annotation(Dialog(group="Nominal values"));
          parameter Modelica.Units.SI.MassFlowRate mTan_flow_nominal
            "Nominal mass flow rate of the tank branch"
            annotation(Dialog(group="Nominal values"));

          parameter Boolean use_outFil=true
            "= true, if output is filtered with a 2nd order CriticalDamping filter"
            annotation(Dialog(tab="Dynamics", group="Filter"));

          Modelica.Blocks.Interfaces.IntegerInput com
            "Command: 1 = charge tank, 2 = no command, 3 = discharge tank"
            annotation (Placement(transformation(extent={{-120,50},{-100,70}}),
                iconTransformation(extent={{-120,30},{-100,50}})));
          Modelica.Blocks.Interfaces.BooleanInput chiEnaSta
            "Chiller enable status, true if chiller is enabled"
            annotation (Placement(transformation(extent={{-120,-10},{-100,10}}),
                iconTransformation(extent={{-120,-10},{-100,10}})));
          Modelica.Blocks.Interfaces.BooleanInput hasLoa "Set to true if there is a load"
            annotation (Placement(transformation(extent={{-120,-70},{-100,-50}}),
                iconTransformation(extent={{-120,-50},{-100,-30}})));
          Modelica.Blocks.Interfaces.RealInput yPum(final unit="1")
            "Normalized speed signal for the secondary pump"
             annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={-110,130}),iconTransformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={-110,80})));

          Modelica.Blocks.Interfaces.RealOutput yVal "Valve normalized mass flow rate"
            annotation (Placement(transformation(extent={{780,-80},{800,-60}}),
                iconTransformation(extent={{100,-10},{120,10}})));
          Modelica.Blocks.Interfaces.RealOutput mPriPum_flow(final unit="kg/s")
            "Primary pump mass flow rate"
            annotation (Placement(transformation(extent={{780,40},{800,60}}),
                               iconTransformation(extent={{100,70},{120,90}})));
          Modelica.Blocks.Interfaces.RealOutput ySecPum(final unit="1")
            "Secondary pump normalized speed" annotation (Placement(transformation(
                  extent={{780,-20},{800,0}}), iconTransformation(extent={{100,30},{120,
                    50}})));
          inner Modelica.StateGraph.StateGraphRoot stateGraphRoot "State graph root"
            annotation (Placement(transformation(extent={{-60,-20},{-40,0}})));
          Modelica.StateGraph.InitialStep allOff(nOut=1, nIn=1) "Initial step, all off"
            annotation (Placement(transformation(extent={{-60,-60},{-40,-40}})));

          Modelica.StateGraph.Transition traChaLoc(condition=com == 1 and (not tanSta[2])
                 and chiEnaSta)
            "Transition: Charge tank command AND tank not charged AND chiller enabled"
            annotation (Placement(transformation(extent={{260,60},{280,80}})));
          Modelica.StateGraph.Step steChaLoc(nIn=1, nOut=1) "Step: Local charging"
            annotation (Placement(transformation(extent={{300,60},{320,80}})));
          Modelica.StateGraph.Transition traRes1(condition=not traChaLoc.condition)
                                               "Transition: Reset to initial step"
            annotation (Placement(transformation(extent={{340,60},{360,80}})));
          Modelica.StateGraph.Transition traChaRem(condition=com == 1 and (not tanSta[2])
                 and not chiEnaSta)
            "Transition: Charge tank command AND tank not charged AND chiller not enabled"
            annotation (Placement(transformation(extent={{260,20},{280,40}})));
          Modelica.StateGraph.Step steChaRem(nIn=1, nOut=1) "Step: Remote charging"
            annotation (Placement(transformation(extent={{300,20},{320,40}})));
          Modelica.StateGraph.Transition traRes2(condition=not traChaRem.condition)
                                               "Transition: Reset to initial step"
            annotation (Placement(transformation(extent={{340,20},{360,40}})));
          Modelica.StateGraph.Transition traProChi(condition=chiEnaSta)
            "Transition: Chiller enabled"
            annotation (Placement(transformation(extent={{260,-160},{280,-140}})));
          Modelica.StateGraph.Step steProChi(nIn=2, nOut=2)
            "Step: Chiller produces CHW"
            annotation (Placement(transformation(extent={{300,-160},{320,-140}})));
          Modelica.StateGraph.Transition traRes4(condition=not traPro.condition)
            "Transition: Reset to initial step"
            annotation (Placement(transformation(extent={{340,-160},{360,-140}})));
          Modelica.StateGraph.Transition traProTan(condition=com == 3 and (not tanSta[1]))
            "Transition: Tank commanded to discharge AND is not empty"
            annotation (Placement(transformation(extent={{260,-80},{280,-60}})));
          Modelica.StateGraph.Step steProTan(nIn=2, nOut=2) "Step: Tank produces CHW"
            annotation (Placement(transformation(extent={{300,-80},{320,-60}})));
          Modelica.StateGraph.Transition traRes3(condition=not traPro.condition)
            "Transition: Reset to initial step"
            annotation (Placement(transformation(extent={{340,-80},{360,-60}})));
          Modelica.Blocks.Sources.BooleanExpression expPriPumFlo(
            y=steChaLoc.active or steProChi.active)
                                  "Expression for local charging OR chiller output"
            annotation (Placement(transformation(extent={{700,40},{720,60}})));
          Buildings.Controls.OBC.CDL.Conversions.BooleanToReal swiPriPum(realTrue=
                mChi_flow_nominal, realFalse=0) "Switch for primary pump flow"
            annotation (Placement(transformation(extent={{740,40},{760,60}})));
          Modelica.Blocks.Sources.BooleanExpression expSecPum(y=stePumSecOn.active)
                                  "Expression for tank output or chiller output"
            annotation (Placement(transformation(extent={{700,-20},{720,0}})));
          Modelica.Blocks.Sources.BooleanExpression expVal(y=steChaRem.active)
            "Boolean expression for remotely charging the tank"
            annotation (Placement(transformation(extent={{700,-80},{720,-60}})));
          Modelica.StateGraph.Alternative alt(nBranches=3)
            "Alternative: Tank charging or plant outputting CHW"
            annotation (Placement(transformation(extent={{-8,-200},{646,100}})));

          Buildings.Controls.OBC.CDL.Reals.Switch swiSecPum
            "Switch for secondary pump flow"
            annotation (Placement(transformation(extent={{740,-20},{760,0}})));
          Modelica.Blocks.Sources.Constant zer(final k=0) "Constant zero"
            annotation (Placement(transformation(extent={{700,-50},{720,-30}})));
          Buildings.Controls.OBC.CDL.Conversions.BooleanToReal swiVal(realTrue=
                mTan_flow_nominal, realFalse=0) "Switch for valve flow"
            annotation (Placement(transformation(extent={{740,-80},{760,-60}})));
          Modelica.Blocks.Interfaces.BooleanInput tanSta[2]
            "Tank status - 1: is empty; 2: is charged; can be both false"  annotation (
              Placement(transformation(extent={{-120,-130},{-100,-110}}),
                iconTransformation(extent={{-120,-90},{-100,-70}})));
          Modelica.StateGraph.Step stePumSecOn(nOut=1, nIn=1) "Step: Secondary pump on"
            annotation (Placement(transformation(extent={{300,-40},{320,-20}})));
          Modelica.StateGraph.Transition traPro(condition=hasLoa and (traProTan.condition
                 or traProChi.condition))
            "Transition: Has load and the plant can produce CHW via either the chiller or the tank"
            annotation (Placement(transformation(extent={{80,-100},{100,-80}})));
          Modelica.StateGraph.Parallel parallel(nBranches=2)
            "Parallel states of the components in the primary and secondary loops"
            annotation (Placement(transformation(extent={{116,-174},{510,-6}})));
          Modelica.StateGraph.Transition traTanToChi(condition=(not traProTan.condition)
                 and traProChi.condition)
            "Transition: Tank no longer available (empty or commanded off) AND chiller available"
            annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=-90,
                origin={280,-110})));
          Modelica.StateGraph.Alternative altTanCha1(nBranches=2)
            "Alternative: Tank charging locally or remotely"
            annotation (Placement(transformation(extent={{222,-170},{398,-50}})));
          Modelica.StateGraph.Step steRou1(nIn=1, nOut=1) "A step for routing only"
            annotation (Placement(transformation(extent={{180,-120},{200,-100}})));
          Modelica.StateGraph.Step steRou2(nIn=1, nOut=1) "A step for routing only"
            annotation (Placement(transformation(extent={{420,-120},{440,-100}})));
          Modelica.StateGraph.Transition traRou(final condition=true)
            "A routing transition, always true"
            annotation (Placement(transformation(extent={{540,-100},{560,-80}})));
          Modelica.StateGraph.Transition traChiToTan(condition=traProTan.condition)
            "Transition: Production priority handed to tank whenever possible"
            annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=90,
                origin={340,-110})));
          Modelica.Blocks.Interfaces.BooleanOutput isChaRem
            "Is operated for remote charging" annotation (Placement(transformation(
                  extent={{780,-140},{800,-120}}), iconTransformation(extent={{100,-50},
                    {120,-30}})));
          Modelica.Blocks.Sources.BooleanExpression booleanExpression(y=steChaRem.active)
            annotation (Placement(transformation(extent={{700,-140},{720,-120}})));
        equation
          connect(traChaLoc.outPort,steChaLoc. inPort[1])
            annotation (Line(points={{271.5,70},{299,70}}, color={0,0,0}));
          connect(steChaLoc.outPort[1], traRes1.inPort)
            annotation (Line(points={{320.5,70},{346,70}}, color={0,0,0}));
          connect(traChaRem.outPort,steChaRem. inPort[1])
            annotation (Line(points={{271.5,30},{299,30}}, color={0,0,0}));
          connect(steChaRem.outPort[1], traRes2.inPort)
            annotation (Line(points={{320.5,30},{346,30}}, color={0,0,0}));
          connect(traProChi.outPort,steProChi. inPort[1])
            annotation (Line(points={{271.5,-150},{286,-150},{286,-150.25},{299,-150.25}},
                                                             color={0,0,0}));
          connect(traProTan.outPort,steProTan. inPort[1])
            annotation (Line(points={{271.5,-70},{286,-70},{286,-70.25},{299,-70.25}},
                                                             color={0,0,0}));
          connect(expPriPumFlo.y, swiPriPum.u)
            annotation (Line(points={{721,50},{738,50}}, color={255,0,255}));
          connect(alt.inPort, allOff.outPort[1])
            annotation (Line(points={{-17.81,-50},{-39.5,-50}},
                                                           color={0,0,0}));
          connect(alt.outPort, allOff.inPort[1]) annotation (Line(points={{652.54,-50},{
                  652.54,114},{-80,114},{-80,-50},{-61,-50}},
                                                           color={0,0,0}));
          connect(mPriPum_flow, swiPriPum.y)
            annotation (Line(points={{790,50},{762,50}}, color={0,0,127}));
          connect(expSecPum.y, swiSecPum.u2)
            annotation (Line(points={{721,-10},{738,-10}}, color={255,0,255}));
          connect(swiSecPum.u1, yPum) annotation (Line(points={{738,-2},{730,-2},{730,
                  20},{680,20},{680,130},{-110,130}},                     color={0,0,
                  127}));
          connect(ySecPum, swiSecPum.y)
            annotation (Line(points={{790,-10},{762,-10}}, color={0,0,127}));
          connect(zer.y, swiSecPum.u3)
            annotation (Line(points={{721,-40},{738,-40},{738,-18}}, color={0,0,127}));
          connect(swiVal.u, expVal.y)
            annotation (Line(points={{738,-70},{721,-70}}, color={255,0,255}));
          connect(swiVal.y, yVal)
            annotation (Line(points={{762,-70},{790,-70}}, color={0,0,127}));
          connect(traPro.outPort, parallel.inPort)
            annotation (Line(points={{91.5,-90},{110.09,-90}},color={0,0,0}));
          connect(parallel.split[1], stePumSecOn.inPort[1]) annotation (Line(points={{160.325,
                  -111},{160.325,-70},{160,-70},{160,-30},{299,-30}},
                                                           color={0,0,0}));
          connect(stePumSecOn.outPort[1], parallel.join[1]) annotation (Line(points={{320.5,
                  -30},{466,-30},{466,-111},{465.675,-111}}, color={0,0,0}));
          connect(traTanToChi.outPort, steProChi.inPort[2]) annotation (Line(points={{280,
                  -111.5},{280,-149.75},{299,-149.75}},     color={0,0,0}));
          connect(traProTan.inPort, altTanCha1.split[1]) annotation (Line(points={{266,-70},
                  {240,-70},{240,-98},{240.48,-98},{240.48,-125}},
                                                              color={0,0,0}));
          connect(traRes3.outPort, altTanCha1.join[1]) annotation (Line(points={{351.5,-70},
                  {379.52,-70},{379.52,-125}},                color={0,0,0}));
          connect(traProChi.inPort, altTanCha1.split[2]) annotation (Line(points={{266,-150},
                  {240,-150},{240,-106},{240.48,-106},{240.48,-95}},
                                                              color={0,0,0}));
          connect(traRes4.outPort, altTanCha1.join[2]) annotation (Line(points={{351.5,-150},
                  {379.52,-150},{379.52,-95}},                              color={0,0,
                  0}));
          connect(steRou1.outPort[1], altTanCha1.inPort)
            annotation (Line(points={{200.5,-110},{219.36,-110}}, color={0,0,0}));
          connect(altTanCha1.outPort,steRou2. inPort[1])
            annotation (Line(points={{399.76,-110},{419,-110}}, color={0,0,0}));
          connect(steRou1.inPort[1], parallel.split[2]) annotation (Line(points={{179,-110},
                  {160,-110},{160,-70},{160.325,-70},{160.325,-69}}, color={0,0,0}));
          connect(steRou2.outPort[1], parallel.join[2]) annotation (Line(points={{440.5,
                  -110},{465.675,-110},{465.675,-69}}, color={0,0,0}));
          connect(parallel.outPort, traRou.inPort)
            annotation (Line(points={{513.94,-90},{546,-90}}, color={0,0,0}));
          connect(traChaLoc.inPort, alt.split[1]) annotation (Line(points={{266,70},{60,
                  70},{60,-100},{60.67,-100}},   color={0,0,0}));
          connect(traChaRem.inPort, alt.split[2]) annotation (Line(points={{266,30},{60.67,
                  30},{60.67,-50}},         color={0,0,0}));
          connect(traRes1.outPort, alt.join[1]) annotation (Line(points={{351.5,70},{578,
                  70},{578,-100},{577.33,-100}},       color={0,0,0}));
          connect(traRes2.outPort, alt.join[2]) annotation (Line(points={{351.5,30},{577.33,
                  30},{577.33,-50}},          color={0,0,0}));
          connect(traPro.inPort, alt.split[3]) annotation (Line(points={{86,-90},{60.67,
                  -90},{60.67,1.42109e-14}},
                                     color={0,0,0}));
          connect(traRou.outPort, alt.join[3]) annotation (Line(points={{551.5,-90},{576,
                  -90},{576,1.42109e-14},{577.33,1.42109e-14}},
                                                    color={0,0,0}));
          connect(booleanExpression.y, isChaRem)
            annotation (Line(points={{721,-130},{790,-130}}, color={255,0,255}));
          connect(traChiToTan.outPort, steProTan.inPort[2]) annotation (Line(points={{
                  340,-108.5},{340,-90},{290,-90},{290,-69.75},{299,-69.75}}, color={0,
                  0,0}));
          connect(steProChi.outPort[1], traChiToTan.inPort) annotation (Line(points={{
                  320.5,-150.125},{320.5,-150},{340,-150},{340,-114}}, color={0,0,0}));
          connect(steProChi.outPort[2], traRes4.inPort) annotation (Line(points={{320.5,
                  -149.875},{334,-149.875},{334,-150},{346,-150}}, color={0,0,0}));
          connect(steProTan.outPort[1], traTanToChi.inPort) annotation (Line(points={{
                  320.5,-70.125},{320.5,-70},{330,-70},{330,-96},{280,-96},{280,-106}},
                color={0,0,0}));
          connect(steProTan.outPort[2], traRes3.inPort) annotation (Line(points={{320.5,
                  -69.875},{334,-69.875},{334,-70},{346,-70}}, color={0,0,0}));
          annotation (Diagram(coordinateSystem(extent={{-100,-220},{780,140}})), Icon(
                coordinateSystem(extent={{-100,-100},{100,100}}), graphics={
                Rectangle(extent={{-20,80},{20,40}}, lineColor={28,108,200}),
                Line(points={{-40,-20},{-40,20},{40,20},{40,-20}}, color={28,108,200}),
                Line(points={{0,40},{0,20}}, color={28,108,200}),
                Polygon(
                  points={{-6,2},{2.74617e-16,-16},{-12,-16},{-6,2}},
                  lineColor={28,108,200},
                  lineThickness=1,
                  fillColor={28,108,200},
                  fillPattern=FillPattern.Solid,
                  origin={34,-16},
                  rotation=180),
                Polygon(
                  points={{-6,2},{2.74617e-16,-16},{-12,-16},{-6,2}},
                  lineColor={28,108,200},
                  lineThickness=1,
                  fillColor={28,108,200},
                  fillPattern=FillPattern.Solid,
                  origin={-46,-16},
                  rotation=180),
                Rectangle(
                  extent={{-80,-38},{80,-42}},
                  fillColor={0,0,0},
                  fillPattern=FillPattern.Solid,
                  pattern=LinePattern.None,
                  lineColor={0,0,0}),
                Ellipse(
                  extent={{20,-20},{60,-60}},
                  lineColor={0,0,0},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid,
                  lineThickness=0.5),
                Polygon(
                  points={{58,-40},{40,-20},{40,-60},{58,-40}},
                  lineColor={0,0,0},
                  fillColor={0,0,0},
                  fillPattern=FillPattern.Solid),
                Ellipse(
                  extent={{-60,-20},{-20,-60}},
                  lineColor={0,0,0},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid,
                  lineThickness=0.5),
                Polygon(
                  points={{-22,-40},{-40,-20},{-40,-60},{-22,-40}},
                  lineColor={0,0,0},
                  fillColor={0,0,0},
                  fillPattern=FillPattern.Solid),
                Rectangle(
                  extent={{-2,-42},{2,-80}},
                  fillColor={0,0,0},
                  fillPattern=FillPattern.Solid,
                  pattern=LinePattern.None,
                  lineColor={0,0,0})}),
        Documentation(info="<html>
<p>
This block implements a state graph to control the flows of the storage plant.
It receives two tank status Boolean signals indicating that the tank
is charged or empty. These two signals can be both false indicating an
in-between state. The block can receive one of the following commands:
</p>
<ol>
<li>
Charge tank,
</li>
<li>
No command, and
</li>
<li>
Discharge tank.
</li>
</ol>
<p>
The command to tank may be disregarded. For example, if the
tank is receiving a discharge command but it is already empty, it will not
discharge which would let warm return water directly into the supply side.
</p>
<p>
The system transitions among the following states:
</p>
<table summary=\"summary\" border=\"1\" cellspacing=\"0\" cellpadding=\"2\" style=\"border-collapse:collapse;\">
<thead>
  <tr>
    <th>Step</th>
    <th>Description</th>
    <th>Transition in</th>
    <th>Transition out</th>
  </tr>
</thead>
<tbody>
  <tr>
    <td>All Off<br>(Initial Step)</td>
    <td>All off. This is the initial step.</td>
    <td>-</td>
    <td>-</td>
  </tr>
  <tr>
    <td>Local Charging</td>
    <td>Charge the tank with the local chiller.</td>
    <td>\"Charge tank\" command<br>AND tank is not charged yet<br>AND chiller is enabled.<br>This transition takes priority<br>over the one below.<sup>1</sup></td>
    <td>The in-transition condition becomes false.</td>
  </tr>
  <tr>
    <td>Remote Charging</td>
    <td>Charge the tank with the remote chiller.</td>
    <td>Same as above except that<br>the chiller is not enabled.</td>
    <td>The in-transition condition becomes false.</td>
  </tr>
  <tr>
    <td>Secondary Pump On</td>
    <td>Turn on the secondary pump.<br>This step is in parallel with the two below.<sup>2</sup></td>
    <td>The district has load AND<br>the additional conditions of<br>either step below become true.</td>
    <td>Both steps below are no longer active (implicit).</td>
  </tr>
  <tr>
    <td rowspan=\"2\">Tank Producing</td>
    <td rowspan=\"2\">The tank produces CHW to the district.<br>This step is in parallel with \"secondary pump on\".</td>
    <td rowspan=\"2\">The district has load AND<br>\"Discharge tank\" command AND<br>tank not empty.<br>This transition takes priority<br>over the one below.</td>
    <td>To \"chiller producing\": The in-transition condition becomes false AND<br>The chiller is enabled.<br>This transition takes priority over the one below.</td>
  </tr>
  <tr>
  <td>To initial step: No load OR the in-transition conditions<br>of \"tank producing\" and \"chiller producing\" are both false<br>(i.e. neither tank or chiller is available).</td>
  </tr>
  <tr>
    <td rowspan=\"2\">Chiller Producing</td>
    <td rowspan=\"2\">The chiller produces CHW to the district.<br>This step is in parallel with \"secondary pump on\".</td>
    <td rowspan=\"2\">The district has load AND<br>the chiller is enabled.</td>
    <td>To \"tank producing\": The condition for in-transition of<br>\"tank producing\" becomes true.<br>This transition takes priority over the one below.</td>
  </tr>
  <tr>
    <td>To initial step: No load OR the in-transition conditions<br>of \"tank producing\" and \"chiller producing\" are both false.</td>
  </tr>
</tbody>
</table>
<p>
Notes:
</p>
<ol>
<li>
Out-transitions from the same step have priorities. When the conditions of
more than one of them become true, the transition connected by a connector
with the lowest index in the array fires.
For example, even when the in-transition condition of \"chiller producing\"
becomes true, as long as the in-transition condition of \"tank producing\"
is also true, the latter fires because of priority.
</li>
<li>
Steps that are in parallel are and must be active at the same time.
When \"secondary pump on\" is active, either \"tank producing\"
or \"chiller producing\" is also active.
</li>
</ol>
</html>",         revisions="<html>
<ul>
<li>
February 23, 2023 by Hongxiang Fu:<br/>
First implementation. This is for
<a href=\"https://github.com/lbl-srg/modelica-buildings/issues/2859\">#2859</a>.
</li>
</ul>
</html>"));
        end FlowControl;

        block SelectMin
          "Block that includes or excludes storage plant pressure signal for min"
          extends Modelica.Blocks.Icons.Block;
          parameter Integer nin
            "Number of input connections"
            annotation (Dialog(connectorSizing=true),HideResult=true);
          Buildings.Controls.OBC.CDL.Interfaces.RealInput dpUse[nin]
            "Connector of Real input signals" annotation (Placement(transformation(
                  extent={{-120,60},{-100,40}}), iconTransformation(extent={{-140,80},{-100,
                    40}})));
          Buildings.Controls.OBC.CDL.Interfaces.RealInput dpStoPla
            "Connector of Real input signals" annotation (Placement(transformation(
                  extent={{-120,10},{-100,-10}}), iconTransformation(extent={{-140,20},{
                    -100,-20}})));
          Modelica.Blocks.Interfaces.BooleanInput isChaRem
            "The storage plant is in remote charging mode" annotation (Placement(
                transformation(extent={{-120,-60},{-100,-40}}), iconTransformation(
                  extent={{-120,-70},{-100,-50}})));
          Modelica.Blocks.Interfaces.RealOutput y annotation (Placement(transformation(
                  extent={{100,-10},{120,10}}), iconTransformation(extent={{100,-10},{120,
                    10}})));
        equation
          y = if isChaRem then
                min(min(dpUse),dpStoPla)
              else
                min(dpUse);
        annotation(defaultComponentName="selMin",
            Icon(graphics={Line(
                  points={{-80,60},{-60,40},{-20,80}},
                  color={0,140,72},
                  thickness=5), Text(
                  extent={{-78,2},{-20,-78}},
                  textColor={28,108,200},
                  textString="?")}),
            Documentation(info="<html>
<p>
This block finds the minimum value from pressure head signals.
The signal from the storage plant is included
only when the plant is in remote charging mode.
</p>
</html>",         revisions="<html>
<ul>
<li>
Jun 23, 2023 by Hongxiang Fu:<br/>
First implementation. This is for
<a href=\"https://github.com/lbl-srg/modelica-buildings/issues/2859\">#2859</a>.
</li>
</ul>
</html>"));
        end SelectMin;

        block TankStatus "Returns the tank status from its temperature sensors"

          parameter Modelica.Units.SI.Temperature THig
            "Higher threshold to consider the tank empty";
          parameter Modelica.Units.SI.Temperature TLow
            "Lower threshold to consider the tank full";

          parameter Modelica.Units.SI.TemperatureDifference dTHys(min=0.1) = 0.5
            "Deadband for hysteresis";

          Buildings.Controls.OBC.CDL.Interfaces.RealInput TTan[2](
            each final quantity="Temperature",
            each final unit="K",
            each displayUnit="degC") "Temperatures at the tank 1: top; and 2: bottom"
                                                            annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={-110,0}), iconTransformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={-110,0})));
          Buildings.Controls.OBC.CDL.Reals.Hysteresis hysCha(
            final uLow=TLow,
            final uHigh=TLow + dTHys) "Hysteresis, tank charged"
            annotation (Placement(visible = true, transformation(origin = {0, 50}, extent = {{-40, -60}, {-20, -40}}, rotation = 0)));
          Buildings.Controls.OBC.CDL.Reals.Hysteresis hysEmp(
            final uHigh=THig,
            final uLow=THig - dTHys) "Hysteresis, tank empty"
            annotation (Placement(transformation(extent={{-40,40},{-20,60}})));
          Buildings.Controls.OBC.CDL.Logical.Not not1 "Not block"
            annotation (Placement(visible = true, transformation(origin = {0, 50}, extent = {{20, -60}, {40, -40}}, rotation = 0)));
          Buildings.Controls.OBC.CDL.Interfaces.BooleanOutput y[2]
            "Tank status - y[1]=true is empty; y[2] = true is charged; both false means partially charged"
            annotation (Placement(transformation(extent={{100,-10},{120,10}}),
              iconTransformation(extent={{100,-10},{120,10}})));
          Buildings.Controls.OBC.CDL.Reals.Sources.Constant TTanTopChe(
            final k(final unit="K", displayUnit="degC") = THig) "Set point for top temperatuer of tank"
             annotation (
            Placement(visible = true, transformation(origin = {-70, -30}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Buildings.Controls.OBC.CDL.Reals.Sources.Constant TTanBotChe(
            final k(final unit="K", displayUnit="degC") = TLow) "Set point for bottom temperature of tank"
            annotation (
            Placement(visible = true, transformation(origin = {-70, -70}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Buildings.Controls.OBC.CDL.Reals.Greater gre
           "Test for temperature set points"
          annotation (
            Placement(visible = true, transformation(origin = {-30, -50}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Buildings.Controls.OBC.CDL.Utilities.Assert assMes(
            message = "THig must be greater than TLow.")
           "Assertion if temperature set points are not correct"
           annotation (
            Placement(visible = true, transformation(origin = {10, -50}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
        equation
          connect(hysCha.y, not1.u)
            annotation (Line(points={{-18,0},{18,0}},  color={255,0,255}));
          connect(TTan[1],hysCha. u) annotation (Line(points={{-110,-2.5},{-52,-2.5},{-52,
                  0},{-42,0}},  color={0,0,127}));
          connect(TTan[2],hysEmp. u) annotation (Line(points={{-110,2.5},{-52,2.5},{-52,
                  50},{-42,50}},
                             color={0,0,127}));
          connect(hysEmp.y, y[1]) annotation (Line(points={{-18,50},{60,50},{60,0},{110,
                  0},{110,-2.5}}, color={255,0,255}));
          connect(not1.y, y[2]) annotation (Line(points={{42,0},{60,0},{60,2.5},{110,
                  2.5}}, color={255,0,255}));
          connect(TTanTopChe.y, gre.u1) annotation (
            Line(points = {{-58, -30}, {-50, -30}, {-50, -50}, {-42, -50}}, color = {0, 0, 127}));
          connect(TTanBotChe.y, gre.u2) annotation (
            Line(points = {{-58, -70}, {-52, -70}, {-52, -58}, {-42, -58}}, color = {0, 0, 127}));
          connect(gre.y, assMes.u) annotation (
            Line(points = {{-18, -50}, {-2, -50}}, color = {255, 0, 255}));
          annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                                        Rectangle(
                extent={{-100,-100},{100,100}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
                Rectangle(
                  extent={{-42,72},{40,-72}},
                  fillColor={135,135,135},
                  fillPattern=FillPattern.Solid,
                  pattern=LinePattern.None),
                Rectangle(
                  extent={{-30,-64},{28,-28}},
                  fillColor={28,108,200},
                  fillPattern=FillPattern.Solid,
                  pattern=LinePattern.None),
                Rectangle(
                  extent={{-30,-20},{28,16}},
                  fillColor={28,108,200},
                  fillPattern=FillPattern.Solid,
                  pattern=LinePattern.None),
                Rectangle(
                  extent={{-24,54},{22,30}},
                  fillColor={135,135,135},
                  fillPattern=FillPattern.Solid,
                  pattern=LinePattern.None)}),
                                       Diagram(coordinateSystem(preserveAspectRatio=false)),
          defaultComponentName="tanSta",
           Documentation(info="<html>
<p>
This model outputs tank status signals using the temperatures
at the CHW tank top and the tank bottom as input.
The status has two separate boolean signals indicating whether the tank is
charged or empty (of cooling). The two output signals can be both false,
indicating an in-between state, but they can never both be true.
</p>
</html>",
        revisions="<html>
<ul>
<li>
August 10, 2023 by Hongxiang Fu:<br/>
First implementation. This is for
<a href=\"https://github.com/lbl-srg/modelica-buildings/issues/2859\">#2859</a>.
</li>
</ul>
</html>"));
        end TankStatus;

        package Validation "Collection of validation models"
          extends Modelica.Icons.ExamplesPackage;

          model ChilledWaterBypass
            "Example to test the chilled water bypass controller"
            extends Modelica.Icons.Example;
            estcp.DHC.Plants.Cooling.Controls.ChilledWaterBypass chiBypCon(numChi=2,
                mMin_flow=0.03) "Chilled water bypass loop control"
              annotation (Placement(transformation(extent={{0,-20},{20,0}})));
            Modelica.Blocks.Sources.BooleanTable onOne(
              table(
                each displayUnit="s")={300,900})
              "On signal of the first chiller"
              annotation (Placement(transformation(extent={{-60,30},{-40,50}})));
            Modelica.Blocks.Sources.BooleanTable onTwo(
              table(
                each displayUnit="s")={600,900})
              "On signal of the second chiller"
              annotation (Placement(transformation(extent={{-60,0},{-40,20}})));
            Modelica.Blocks.Sources.Sine mFloChi(
              amplitude=0.03,
              f=1/300,
              offset=0.03,
              startTime=300) "Mass flow rate through the chillers"
              annotation (Placement(transformation(extent={{-60,-40},{-40,-20}})));
          equation
            connect(mFloChi.y,chiBypCon.mFloChi)  annotation (Line(points={{-39,-30},{-20,
                    -30},{-20,-15},{-2,-15}},
                                            color={0,0,127}));
            connect(onTwo.y,chiBypCon.chiOn[2])
              annotation (Line(points={{-39,10},{-20,10},{-20,-4},{-2,-4}},
                color={255,0,255}));
            connect(onOne.y,chiBypCon.chiOn[1])
              annotation (Line(points={{-39,40},{-20,40},{-20,-6},{-2,-6}},
                color={255,0,255}));
            annotation (
              Icon(
                coordinateSystem(
                  preserveAspectRatio=false)),
              Diagram(
                coordinateSystem(
                  preserveAspectRatio=false)),
              experiment(
                Tolerance=1e-06, StopTime=1200),
              __Dymola_Commands(
                file="modelica://Buildings/Resources/Scripts/Dymola/Experimental/DHC/Plants/Cooling/Controls/Validation/ChilledWaterBypass.mos"
                "Simulate and Plot"),
              Documentation(
                revisions="<html>
<ul>
<li>
May 3, 2021 by Jing Wang:<br/>
First implementation.
</li>
</ul>
</html>",       info="<html>
<p>This model validates the chilled water bypass valve control logic implemented in
<a href=\"modelica://Buildings.Experimental.DHC.Plants.Cooling.Controls.ChilledWaterBypass\">
Buildings.Experimental.DHC.Plants.Cooling.Controls.ChilledWaterBypass</a>.
</p>
</html>"));
          end ChilledWaterBypass;

          model ChilledWaterPumpSpeed
            "Example to test the chilled water pump speed controller"
            extends Modelica.Icons.Example;
            estcp.DHC.Plants.Cooling.Controls.ChilledWaterPumpSpeed chiWatPumSpe(
              dpSetPoi=68900,
              tWai=30,
              m_flow_nominal=0.5,
              controllerType=Modelica.Blocks.Types.SimpleController.PI,
              k=1,
              Ti=60,
              Td=0.1) "Chilled water pump speed controller" annotation (
                Placement(transformation(extent={{-10,-10},{10,10}})));
            Modelica.Blocks.Sources.Pulse mFloTot(
              amplitude=2*chiWatPumSpe.m_flow_nominal,
              period=300,
              startTime=150) "Total chilled water mass flow rate"
              annotation (Placement(transformation(extent={{-60,20},{-40,40}})));
            Modelica.Blocks.Sources.Pulse dpMea(
              amplitude=0.4*chiWatPumSpe.dpSetPoi,
              period=150,
              offset=0.8*chiWatPumSpe.dpSetPoi,
              startTime=150) "Measured pressure drop"
              annotation (Placement(transformation(extent={{-60,-40},{-40,-20}})));
            Modelica.Blocks.Sources.BooleanConstant on "Plant on signal"
              annotation (Placement(transformation(extent={{-60,60},{-40,80}})));
          equation
            connect(mFloTot.y,chiWatPumSpe.masFloPum)
              annotation (Line(points={{-39,30},{-30,30},{-30,2},{-12,2}},
                color={0,0,127}));
            connect(dpMea.y, chiWatPumSpe.dpMea) annotation (Line(points={{-39,-30},{-30,
                    -30},{-30,-4},{-12,-4}}, color={0,0,127}));
            connect(on.y, chiWatPumSpe.on) annotation (Line(points={{-39,70},{-20,70},{
                    -20,8},{-12,8}}, color={255,0,255}));
            annotation (
              Icon(
                coordinateSystem(
                  preserveAspectRatio=false)),
              Diagram(
                coordinateSystem(
                  preserveAspectRatio=false)),
              experiment(
                StopTime=1200,
                Tolerance=1e-06),
              __Dymola_Commands(
                file="modelica://Buildings/Resources/Scripts/Dymola/Experimental/DHC/Plants/Cooling/Controls/Validation/ChilledWaterPumpSpeed.mos"
                "Simulate and Plot"),
              Documentation(
                revisions="<html>
<ul>
<li>
December 14, 2022 by Kathryn Hinkelman:<br>
Revised <code>dpMea</code> input from constant to step function.
</li>
<li>
August 6, 2020 by Jing Wang:<br/>
First implementation.
</li>
</ul>
</html>",       info="<html>
<p>This model validates the variable speed pump control logic implemented in
<a href=\"modelica://Buildings.Experimental.DHC.Plants.Cooling.Controls.ChilledWaterPumpSpeed\">
Buildings.Experimental.DHC.Plants.Cooling.Controls.ChilledWaterPumpSpeed</a>.
</p>
</html>"));
          end ChilledWaterPumpSpeed;

          model ChillerStage
            "Example to test the chiller staging controller"
            extends Modelica.Icons.Example;
            estcp.DHC.Plants.Cooling.Controls.ChillerStage chiStaCon(tWai=30,
                QChi_nominal=-200*3.517*1000) "Chiller staging controller"
              annotation (Placement(transformation(extent={{0,-10},{20,10}})));
            Modelica.Blocks.Sources.BooleanTable on(
              table(
                each displayUnit="s")={300,900})
              "On signal of the cooling plant"
              annotation (Placement(transformation(extent={{-60,40},{-40,60}})));
            Modelica.Blocks.Sources.Constant TRet(k=18)
              "Return temperature"
              annotation (Placement(transformation(extent={{-60,10},{-40,30}})));
            Modelica.Blocks.Sources.Constant TSup(k=8)
              "Supply temperature"
              annotation (Placement(transformation(extent={{-60,-30},{-40,-10}})));
            Modelica.Blocks.Sources.Sine mFlo(
              amplitude=0.5*chiStaCon.QChi_nominal/(-10)/4200,
              f=1/300,
              offset=0.5*chiStaCon.QChi_nominal/(-10)/4200) "Total mass flow rate"
              annotation (Placement(transformation(extent={{-60,-60},{-40,-40}})));
          equation
            connect(on.y,chiStaCon.on)
              annotation (Line(points={{-39,50},{-28,50},{-28,3.75},{-1.25,3.75}},
                color={255,0,255}));
            connect(mFlo.y,chiStaCon.mFloChiWat)
              annotation (Line(points={{-39,-50},{-28,-50},{-28,-3.75},{-1.25,-3.75}},
                color={0,0,127}));
            connect(TRet.y,chiStaCon.TChiWatRet)
              annotation (Line(points={{-39,20},{-34,20},{-34,1.25},{-1.25,1.25}},
                color={0,0,127}));
            connect(TSup.y,chiStaCon.TChiWatSup)
              annotation (Line(points={{-39,-20},{-34,-20},{-34,-1.25},{-1.25,-1.25}},
                color={0,0,127}));
            annotation (
              Icon(
                coordinateSystem(
                  preserveAspectRatio=false)),
              Diagram(
                coordinateSystem(
                  preserveAspectRatio=false)),
              experiment(
                StopTime=1200,
                Tolerance=1e-06),
              __Dymola_Commands(
                file="modelica://Buildings/Resources/Scripts/Dymola/Experimental/DHC/Plants/Cooling/Controls/Validation/ChillerStage.mos"
                "Simulate and Plot"),
              Documentation(
                revisions="<html>
<ul>
<li>
August 6, 2020 by Jing Wang:<br/>
First implementation.
</li>
</ul>
</html>",       info="<html>
<p>This model validates the chiller staging control logic implemented in
<a href=\"modelica://Buildings.Experimental.DHC.Plants.Cooling.Controls.ChillerStage\">
Buildings.Experimental.DHC.Plants.Cooling.Controls.ChillerStage</a>.
</p>
</html>"));
          end ChillerStage;

          model TankStatus "Validation model for tank status controller"
            extends Modelica.Icons.Example;
            estcp.DHC.Plants.Cooling.Controls.TankStatus tanSta(
              TLow=280.15,
              THig=286.15,
              dTHys=1) "Tank status"
              annotation (Placement(transformation(extent={{0,0},{20,20}})));
            Buildings.Controls.OBC.CDL.Reals.Sources.TimeTable TTanBot(
              table=[0,273.15 + 11; 0.25,273.15 + 13.5; 0.5,273.15 + 12.5; 0.75,273.15 + 13.5; 1,273.15 + 11])
              "Temperature at tank bottom"
              annotation (Placement(transformation(extent={{-60,-20},{-40,0}})));
            Buildings.Controls.OBC.CDL.Reals.Sources.TimeTable TTanTop(
              table=[0,273.15 + 9; 0.25,273.15 + 6.5;
                  0.5,273.15 + 7.5; 0.75,273.15 + 6.5; 1,273.15 + 9])
              "Temperature at tank top"
              annotation (Placement(visible = true, transformation(origin = {0, 0}, extent = {{-60, 20}, {-40, 40}}, rotation = 0)));
          equation
            connect(TTanTop.y[1], tanSta.TTan[1]) annotation (Line(points={{-38,30},{-6,30},{
                    -6,9.75},{-1,9.75}}, color={0,0,127}));
            connect(TTanBot.y[1], tanSta.TTan[2]) annotation (Line(points={{-39,-10},{-6,-10},
                    {-6,10.25},{-1,10.25}}, color={0,0,127}));
                    annotation(experiment(Tolerance=1e-6, StopTime=1),
                    __Dymola_Commands(
                file="modelica://Buildings/Resources/Scripts/Dymola/Experimental/DHC/Plants/Cooling/Controls/Validation/TankStatus.mos"
                "Simulate and Plot"),
              Documentation(
                revisions="<html>
<ul>
<li>
August 11, 2023 by Hongxiang Fu:<br/>
First implementation. This is for
<a href=\"https://github.com/lbl-srg/modelica-buildings/issues/2859\">#2859</a>.
</li>
</ul>
</html>",       info="<html>
<p>
This model validates
<a href=\"modelica://Buildings.Experimental.DHC.Plants.Cooling.Controls.TankStatus\">
Buildings.Experimental.DHC.Plants.Cooling.Controls.TankStatus</a>.
Note that the output signals turn <code>true</code> as soon as their respective temperature
input crosses the threshold, but there is a delay for it to turn back to
<code>false</code> due to the hysteresis.
</p>
</html>"));
          end TankStatus;
          annotation (
            Documentation(
              info="<html>
<p>
This package contains validation models for the classes in
<a href=\"modelica://Buildings.Experimental.DHC.Plants.Cooling.Controls\">
Buildings.Experimental.DHC.Plants.Cooling.Controls</a>.
</p>
</html>"));
        end Validation;
        annotation (
          preferredView="info",
          Documentation(
            info="<html>
<p>
This package contains control sequences for central cooling plants.
</p>
</html>"));
      end Controls;

      package Subsystems "Package of models for subsystems of cooling plants"
        extends Modelica.Icons.VariantsPackage;

        model CoolingTowersParallel
          "Multiple identical cooling towers in parallel connection"
          extends Buildings.Fluid.Interfaces.PartialTwoPortInterface(
            redeclare replaceable package Medium=Buildings.Media.Water);
          parameter Integer num(
            final min=1)=2
            "Number of cooling towers";
          parameter Modelica.Fluid.Types.Dynamics energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial
            "Type of energy balance: dynamic (3 initialization options) or steady state"
            annotation (Evaluate=true,Dialog(tab="Dynamics",group="Conservation equations"));
          parameter Modelica.Units.SI.PressureDifference dp_nominal
            "Nominal pressure difference of the tower"
            annotation (Dialog(group="Nominal condition"));
          parameter Modelica.Units.SI.PressureDifference dpValve_nominal
            "Nominal pressure difference of the valve";
          parameter Real ratWatAir_nominal(
            final min=0,
            final unit="1")=0.625
            "Design water-to-air ratio"
            annotation (Dialog(group="Nominal condition"));
          parameter Modelica.Units.SI.Temperature TAirInWB_nominal
            "Nominal outdoor (air inlet) wetbulb temperature"
            annotation (Dialog(group="Heat transfer"));
          parameter Modelica.Units.SI.Temperature TWatIn_nominal
            "Nominal water inlet temperature" annotation (Dialog(group="Heat transfer"));
          parameter Modelica.Units.SI.TemperatureDifference dT_nominal
            "Temperature difference between inlet and outlet of the tower"
            annotation (Dialog(group="Heat transfer"));
          parameter Modelica.Units.SI.Power PFan_nominal "Fan power"
            annotation (Dialog(group="Fan"));
          parameter Boolean use_inputFilter=true
            "= true, if opening is filtered with a 2nd order CriticalDamping filter"
            annotation (Dialog(tab="Dynamics",group="Filtered opening"));
          Modelica.Blocks.Interfaces.BooleanInput on[num]
            "On signal for cooling towers"
            annotation (Placement(transformation(extent={{-140,40},{-100,80}})));
          Modelica.Blocks.Interfaces.RealInput uFanSpe(
            final unit="1")
            "Fan speed control signal"
            annotation (Placement(transformation(extent={{-140,0},{-100,40}})));
          Modelica.Blocks.Interfaces.RealInput TWetBul(
            final unit="K",
            displayUnit="degC")
            "Entering air wetbulb temperature"
            annotation (Placement(transformation(extent={{-140,-80},{-100,-40}})));
          Modelica.Blocks.Interfaces.RealOutput PFan[num](
            each final quantity="Power",
            each final unit="W")
            "Electric power consumed by fan"
            annotation (Placement(transformation(extent={{100,50},{120,70}})));
          Modelica.Blocks.Interfaces.RealOutput TLvg(
            final unit="K",
            displayUnit="degC")
            "Leaving water temperature"
            annotation (Placement(transformation(extent={{100,20},{120,40}})));
          replaceable Buildings.Fluid.HeatExchangers.CoolingTowers.Merkel cooTow[num](
            each final allowFlowReversal=allowFlowReversal,
            each final m_flow_small=m_flow_small,
            each final ratWatAir_nominal=ratWatAir_nominal,
            each final TAirInWB_nominal=TAirInWB_nominal,
            each final TWatIn_nominal=TWatIn_nominal,
            each final TWatOut_nominal=TWatIn_nominal-dT_nominal,
            each final PFan_nominal=PFan_nominal,
            each final dp_nominal=0)
            constrainedby
            Buildings.Fluid.HeatExchangers.CoolingTowers.BaseClasses.CoolingTowerVariableSpeed(
              redeclare each final package Medium=Medium,
              each final show_T=show_T,
              each final m_flow_nominal=m_flow_nominal,
              each final energyDynamics=energyDynamics)
            "Cooling tower type"
            annotation (Placement(transformation(extent={{-10,-10},{10,10}})));
          Buildings.Fluid.Actuators.Valves.TwoWayEqualPercentage val[num](
            redeclare each final package Medium=Medium,
            each final allowFlowReversal=allowFlowReversal,
            each final m_flow_nominal=m_flow_nominal,
            each final dpValve_nominal=dpValve_nominal,
            each final use_inputFilter=use_inputFilter,
            each riseTime=30,
            each final dpFixed_nominal=dp_nominal)
            "Cooling tower valves"
            annotation (Placement(transformation(extent={{-60,-10},{-40,10}})));
          Buildings.Controls.OBC.CDL.Conversions.BooleanToReal booToRea[num]
            "Boolean signal to real signal"
            annotation (Placement(transformation(extent={{-90,50},{-70,70}})));
          Buildings.Fluid.Sensors.TemperatureTwoPort senTem(
            redeclare final package Medium=Medium,
            final allowFlowReversal=allowFlowReversal,
            final m_flow_nominal=m_flow_nominal,
            final m_flow_small=m_flow_small,
            final T_start=Medium.T_default)
            annotation (Placement(transformation(extent={{40,-10},{60,10}})));

        equation
          for i in 1:num loop
            connect(port_a,val[i].port_a)
              annotation (Line(points={{-100,0},{-60,0}},color={0,127,255}));
            connect(val[i].port_b,cooTow[i].port_a)
              annotation (Line(points={{-40,0},{-10,0}},color={0,127,255}));
            connect(uFanSpe,cooTow[i].y)
              annotation (Line(points={{-120,20},{-20,20},{-20,8},{-12,8}},color={0,0,127}));
            connect(TWetBul,cooTow[i].TAir)
              annotation (Line(points={{-120,-60},{-20,-60},{-20,4},{-12,4}},color={0,0,127}));
            connect(cooTow[i].PFan,PFan[i])
              annotation (Line(points={{11,8},{20,8},{20,60},{110,60}},color={0,0,127}));
            connect(cooTow[i].port_b, senTem.port_a)
              annotation (Line(points={{10,0},{40,0}}, color={0,127,255}));
          end for;
          connect(on,booToRea.u)
            annotation (Line(points={{-120,60},{-92,60}},color={255,0,255}));
          connect(senTem.port_b, port_b)
            annotation (Line(points={{60,0},{100,0}}, color={0,127,255}));
          connect(senTem.T, TLvg)
            annotation (Line(points={{50,11},{50,30},{110,30}}, color={0,0,127}));
          connect(booToRea.y, val.y)
            annotation (Line(points={{-68,60},{-50,60},{-50,12}}, color={0,0,127}));
          annotation (
            defaultComponentName="cooTowPar",
            Diagram(
              coordinateSystem(
                preserveAspectRatio=false,
                extent={{-100,-100},{100,100}})),
            Icon(
              coordinateSystem(
                preserveAspectRatio=false,
                extent={{-100,-100},{100,100}}),
              graphics={
                Rectangle(
                  extent={{-30,80},{30,6}},
                  lineColor={95,95,95},
                  fillColor={95,95,95},
                  fillPattern=FillPattern.Solid),
                Ellipse(
                  extent={{-22,74},{0,66}},
                  lineColor={255,255,255},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Ellipse(
                  extent={{0,74},{22,66}},
                  lineColor={255,255,255},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Line(
                  points={{16,56},{22,44}},
                  color={255,0,0}),
                Line(
                  points={{0,56},{6,44}},
                  color={255,0,0}),
                Line(
                  points={{0,56},{-6,44}},
                  color={255,0,0}),
                Line(
                  points={{16,56},{10,44}},
                  color={255,0,0}),
                Rectangle(
                  extent={{-30,-6},{30,-80}},
                  lineColor={95,95,95},
                  fillColor={95,95,95},
                  fillPattern=FillPattern.Solid),
                Text(
                  extent={{-149,-114},{151,-154}},
                  textColor={0,0,255},
                  textString="%name"),
                Ellipse(
                  extent={{-22,-12},{0,-20}},
                  lineColor={255,255,255},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Ellipse(
                  extent={{0,-12},{22,-20}},
                  lineColor={255,255,255},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Line(
                  points={{-16,-30},{-22,-42}},
                  color={255,0,0},
                  thickness=0.5),
                Line(
                  points={{-16,-30},{-10,-42}},
                  color={255,0,0},
                  thickness=0.5),
                Line(
                  points={{0,-30},{-6,-42}},
                  color={255,0,0},
                  thickness=0.5),
                Line(
                  points={{0,-30},{6,-42}},
                  color={255,0,0},
                  thickness=0.5),
                Line(
                  points={{16,-30},{10,-42}},
                  color={255,0,0},
                  thickness=0.5),
                Line(
                  points={{16,-30},{22,-42}},
                  color={255,0,0},
                  thickness=0.5),
                Rectangle(
                  extent={{30,10},{60,6}},
                  lineColor={0,0,255},
                  pattern=LinePattern.None,
                  fillColor={0,0,127},
                  fillPattern=FillPattern.Solid),
                Rectangle(
                  extent={{30,-76},{60,-80}},
                  lineColor={0,0,255},
                  pattern=LinePattern.None,
                  fillColor={0,0,127},
                  fillPattern=FillPattern.Solid),
                Rectangle(
                  extent={{62,2},{92,-2}},
                  lineColor={0,0,255},
                  pattern=LinePattern.None,
                  fillColor={0,0,127},
                  fillPattern=FillPattern.Solid),
                Rectangle(
                  extent={{58,-80},{62,10}},
                  lineColor={0,0,255},
                  pattern=LinePattern.None,
                  fillColor={0,0,127},
                  fillPattern=FillPattern.Solid),
                Rectangle(
                  extent={{-90,2},{-60,-2}},
                  lineColor={238,46,47},
                  pattern=LinePattern.None,
                  fillColor={238,46,47},
                  fillPattern=FillPattern.Solid),
                Rectangle(
                  extent={{-64,-30},{-60,60}},
                  lineColor={238,46,47},
                  pattern=LinePattern.None,
                  fillColor={238,46,47},
                  fillPattern=FillPattern.Solid),
                Rectangle(
                  extent={{-60,-26},{16,-30}},
                  lineColor={238,46,47},
                  pattern=LinePattern.None,
                  fillColor={238,46,47},
                  fillPattern=FillPattern.Solid),
                Rectangle(
                  extent={{-60,60},{16,56}},
                  lineColor={238,46,47},
                  pattern=LinePattern.None,
                  fillColor={238,46,47},
                  fillPattern=FillPattern.Solid),
                Line(
                  points={{-16,56},{-22,44}},
                  color={255,0,0},
                  thickness=0.5),
                Line(
                  points={{-16,56},{-10,44}},
                  color={255,0,0},
                  thickness=0.5)}),
            Documentation(
              revisions="<html>
<ul>
<li>
November 16, 2022, by Michael Wetter:<br/>
Changed rise time of valve to 30 seconds so that it is the same as the one for the pumps.
</li>
<li>
May 19, 2020 by Jing Wang:<br/>
First implementation.
</li>
</ul>
</html>",     info="<html>
<p>This model implements a parallel cooling tower system with <code>num</code>
identical cooling towers. </p>
<p>The cooling tower type is replaceable.
<a href=\"modelica://Buildings.Fluid.HeatExchangers.CoolingTowers.Merkel\">
Buildings.Fluid.HeatExchangers.CoolingTowers.Merkel</a> is currently used in
this model. </p>
</html>"),  __Dymola_Commands);
        end CoolingTowersParallel;

        model CoolingTowersWithBypass
          "Cooling tower system with bypass valve"
          extends Buildings.Fluid.Interfaces.PartialTwoPortInterface(
            redeclare replaceable package Medium=Buildings.Media.Water);
          parameter Integer num(
            final min=1)=2
            "Number of cooling towers";
          parameter Modelica.Fluid.Types.Dynamics energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial
            "Type of energy balance: dynamic (3 initialization options) or steady state"
            annotation (Evaluate=true,Dialog(tab="Dynamics",group="Conservation equations"));
          parameter Boolean use_inputFilter=true
            "= true, if opening is filtered with a 2nd order CriticalDamping filter"
            annotation (Dialog(tab="Dynamics",group="Filtered opening"));
          parameter Modelica.Units.SI.Time riseTime=30
            "Pump rise time of the filter (time to reach 99.6 % of the speed)" annotation (
              Dialog(
              tab="Dynamics",
              enable=use_inputFilter));
          parameter Modelica.Units.SI.Pressure dp_nominal
            "Nominal pressure difference of the tower"
            annotation (Dialog(group="Nominal condition"));
          parameter Modelica.Units.SI.PressureDifference dpValve_nominal
            "Nominal pressure difference of the valve";
          parameter Real ratWatAir_nominal(
            final min=0,
            final unit="1")=0.625
            "Design water-to-air ratio"
            annotation (Dialog(group="Nominal condition"));
          parameter Modelica.Units.SI.Temperature TAirInWB_nominal
            "Nominal outdoor (air inlet) wetbulb temperature"
            annotation (Dialog(group="Heat transfer"));
          parameter Modelica.Units.SI.Temperature TWatIn_nominal
            "Nominal water inlet temperature" annotation (Dialog(group="Heat transfer"));
          parameter Modelica.Units.SI.TemperatureDifference dT_nominal
            "Temperature difference between inlet and outlet of the tower"
            annotation (Dialog(group="Heat transfer"));
          parameter Modelica.Units.SI.Power PFan_nominal "Fan power"
            annotation (Dialog(group="Fan"));
          parameter Modelica.Units.SI.TemperatureDifference dTApp=3
            "Approach temperature" annotation (Dialog(group="Control Settings"));
          parameter Modelica.Units.SI.Temperature TMin
            "Minimum allowed water temperature entering chiller"
            annotation (Dialog(group="Control Settings"));
          parameter Modelica.Blocks.Types.SimpleController controllerType=Modelica.Blocks.Types.SimpleController.PI
            "Type of fan speed controller"
            annotation (Dialog(group="Control Settings"));
          parameter Real k(
            final unit="1",
            final min=0)=1
            "Gain of the tower PID controller"
            annotation (Dialog(group="Control Settings"));
          parameter Modelica.Units.SI.Time Ti(final min=Modelica.Constants.small) = 60
            "Integrator time constant of the tower PID controller"
            annotation (Dialog(enable=(enableTi), group="Control Settings"));
          parameter Modelica.Units.SI.Time Td(final min=0) = 0.1
            "Derivative time constant of the tower PID controller"
            annotation (Dialog(enable=(enableTd), group="Control Settings"));
          Modelica.Blocks.Interfaces.BooleanInput on[num]
            "On signal for cooling towers"
            annotation (Placement(transformation(extent={{-140,20},{-100,60}})));
          Modelica.Blocks.Interfaces.RealInput TWetBul(
            final unit="K",
            displayUnit="degC")
            "Entering air wetbulb temperature"
            annotation (Placement(transformation(extent={{-140,-40},{-100,0}})));
          Modelica.Blocks.Interfaces.RealOutput PFan[num](
            each final quantity="Power",
            each final unit="W")
            "Electric power consumed by fan"
            annotation (Placement(transformation(extent={{100,50},{120,70}})));
          Modelica.Blocks.Interfaces.RealOutput TLvg(
            final unit="K",
            displayUnit="degC")
            "Leaving water temperature"
            annotation (Placement(transformation(extent={{100,20},{120,40}})));
          estcp.DHC.Plants.Cooling.Subsystems.CoolingTowersParallel cooTowSys(
            redeclare final package Medium = Medium,
            final use_inputFilter=false,
            final num=num,
            final show_T=show_T,
            final m_flow_small=m_flow_nominal,
            final allowFlowReversal=allowFlowReversal,
            final m_flow_nominal=m_flow_nominal/num,
            final dpValve_nominal=dpValve_nominal,
            final dp_nominal=dp_nominal,
            final ratWatAir_nominal=ratWatAir_nominal,
            final TAirInWB_nominal=TAirInWB_nominal,
            final TWatIn_nominal=TWatIn_nominal,
            final dT_nominal=dT_nominal,
            final PFan_nominal=PFan_nominal,
            final energyDynamics=energyDynamics) "Cooling tower system"
            annotation (Placement(transformation(extent={{-10,-10},{10,10}})));
          Buildings.Fluid.Actuators.Valves.TwoWayEqualPercentage valByp(
            redeclare final package Medium=Medium,
            final allowFlowReversal=allowFlowReversal,
            final m_flow_nominal=m_flow_nominal,
            final show_T=show_T,
            final dpValve_nominal=dpValve_nominal,
            final riseTime=riseTime,
            final use_inputFilter=use_inputFilter)
            "Condenser water bypass valve"
            annotation (Placement(transformation(extent={{-10,-10},{10,10}},origin={0,-40})));
          Buildings.Fluid.Sensors.TemperatureTwoPort senTCWSup(
            redeclare final package Medium=Medium,
            final allowFlowReversal=allowFlowReversal,
            final m_flow_nominal=m_flow_nominal,
            final m_flow_small=m_flow_nominal,
            final T_start=Medium.T_default)
            "Temperature sensor"
            annotation (Placement(transformation(extent={{60,-10},{80,10}})));
          Buildings.Controls.OBC.CDL.Reals.Sources.Constant TSetByp(
            final k=TMin)
            "Bypass loop temperature setpoint"
            annotation (Placement(transformation(extent={{-90,-60},{-70,-40}})));
          Buildings.Controls.OBC.CDL.Reals.PIDWithReset bypValCon(
            u_s(
              final unit="K",
              displayUnit="degC"),
            u_m(
              final unit="K",
              displayUnit="degC"),
            controllerType=Modelica.Blocks.Types.SimpleController.PI,
            final k=k,
            final Ti=Ti,
            final y_reset=0)
            "Bypass valve controller"
            annotation (Placement(transformation(extent={{-60,-60},{-40,-40}})));
          Buildings.Controls.OBC.CDL.Reals.PID cooTowSpeCon(
            u_s(
              final unit="K",
              displayUnit="degC"),
            u_m(
              final unit="K",
              displayUnit="degC"),
            final reverseActing=false,
            final controllerType=controllerType,
            final k=k,
            final Ti=Ti)
            "Cooling tower fan speed controller"
            annotation (Placement(transformation(extent={{-10,40},{10,60}})));
          Buildings.Controls.OBC.CDL.Reals.Switch swi
            "Output the input of higher value"
            annotation (Placement(transformation(extent={{-40,40},{-20,60}})));
          Buildings.Controls.OBC.CDL.Reals.Hysteresis hys(
            uLow=TMin-0.1,
            uHigh=TMin+0.1)
            "Compare if (TWetBul+dTApp) is greater than TMin"
            annotation (Placement(transformation(extent={{-70,40},{-50,60}})));
          Buildings.Controls.OBC.CDL.Reals.AddParameter addPar(
            p=dTApp)
            "Add approach temperature on top of wetbulb temperature"
            annotation (Placement(transformation(extent={{-80,70},{-60,90}})));
          Buildings.Fluid.FixedResistances.Junction jun(
          redeclare final package Medium=Medium,
            m_flow_nominal=m_flow_nominal .* {1,-1,-1},
            dp_nominal={0,0,0},
            energyDynamics=Modelica.Fluid.Types.Dynamics.SteadyState)
            "Upstream mixing point of cooTowSys and valByp"
            annotation (Placement(transformation(extent={{-34,-4},{-26,4}})));
        protected
          parameter Boolean enableTi=
            controllerType == Modelica.Blocks.Types.SimpleController.PI or
            controllerType == Modelica.Blocks.Types.SimpleController.PID
            "Flag to enable controller parameter Ti";
          parameter Boolean enableTd=
            controllerType == Modelica.Blocks.Types.SimpleController.PD or
            controllerType == Modelica.Blocks.Types.SimpleController.PID
            "Flag to enable controller parameter Td";
        equation
          connect(cooTowSys.TWetBul,TWetBul)
            annotation (Line(points={{-12,-6},{-40,-6},{-40,-20},{-120,-20}},color={0,0,127}));
          connect(cooTowSys.port_b,senTCWSup.port_a)
            annotation (Line(points={{10,0},{60,0}},color={0,127,255}));
          connect(senTCWSup.port_b,port_b)
            annotation (Line(points={{80,0},{100,0}},color={0,127,255}));
          connect(TSetByp.y,bypValCon.u_s)
            annotation (Line(points={{-68,-50},{-62,-50}},color={0,0,127}));
          connect(senTCWSup.T,bypValCon.u_m)
            annotation (Line(points={{70,11},{70,30},{54,30},{54,-80},{-50,-80},{-50,-62}},
                                                                            color={0,0,127}));
          connect(valByp.port_b,senTCWSup.port_a)
            annotation (Line(points={{10,-40},{30,-40},{30,0},{60,0}},color={0,127,255}));
          connect(cooTowSpeCon.y,cooTowSys.uFanSpe)
            annotation (Line(points={{12,50},{16,50},{16,14},{-18,14},{-18,2},{-12,2}},
              color={0,0,127}));
          connect(cooTowSys.PFan,PFan)
            annotation (Line(points={{11,6},{40,6},{40,60},{110,60}},color={0,0,127}));
          connect(bypValCon.y,valByp.y)
            annotation (Line(points={{-38,-50},{-20,-50},{-20,-20},{0,-20},{0,-28}},
              color={0,0,127}));
          connect(senTCWSup.T,cooTowSpeCon.u_m)
            annotation (Line(points={{70,11},{70,30},{0,30},{0,38}},
                              color={0,0,127}));
          connect(hys.y, swi.u2)
            annotation (Line(points={{-48,50},{-42,50}}, color={255,0,255}));
          connect(cooTowSpeCon.u_s,swi.y)
            annotation (Line(points={{-12,50},{-18,50}},color={0,0,127}));
          connect(TSetByp.y,swi.u3)
            annotation (Line(points={{-68,-50},{-66,-50},{-66,34},{-46,34},{-46,42},{-42,
                  42}},          color={0,0,127}));
          connect(TWetBul,addPar.u)
            annotation (Line(points={{-120,-20},{-86,-20},{-86,80},{-82,80}},
              color={0,0,127}));
          connect(addPar.y,swi.u1)
            annotation (Line(points={{-58,80},{-46,80},{-46,64},{-42,64},{-42,58}},
              color={0,0,127}));
          connect(on,cooTowSys.on)
            annotation (Line(points={{-120,40},{-80,40},{-80,6},{-12,6}},
              color={255,0,255}));
          connect(on[1],bypValCon.trigger)
            annotation (Line(points={{-120,30},{-80,30},{-80,-28},{-94,-28},{-94,-80},{-56,
                  -80},{-56,-62}},
              color={255,0,255}));
          connect(port_a, jun.port_1)
            annotation (Line(points={{-100,0},{-34,0}}, color={0,127,255}));
          connect(cooTowSys.port_a, jun.port_2)
            annotation (Line(points={{-10,0},{-26,0}}, color={0,127,255}));
          connect(valByp.port_a, jun.port_3)
            annotation (Line(points={{-10,-40},{-30,-40},{-30,-4}}, color={0,127,255}));
          connect(addPar.y, hys.u)
            annotation (Line(points={{-58,80},{-46,80},{-46,64},{-78,64},{-78,50},{-72,50}},
              color={0,0,127}));
          connect(senTCWSup.T, TLvg)
            annotation (Line(points={{70,11},{70,30},{110,30}},
              color={0,0,127}));
          annotation (
            defaultComponentName="cooTowWitByp",
            Diagram(
              coordinateSystem(
                preserveAspectRatio=false,
                extent={{-100,-100},{100,100}})),
            Icon(
              coordinateSystem(
                preserveAspectRatio=false,
                extent={{-100,-100},{100,100}}),
              graphics={
                Polygon(
                  points={{0,-80},{-10,-72},{-10,-88},{0,-80}},
                  lineColor={0,0,0},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Polygon(
                  points={{0,-80},{10,-72},{10,-88},{0,-80}},
                  lineColor={0,0,0},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Text(
                  extent={{-149,-114},{151,-154}},
                  textColor={0,0,255},
                  textString="%name"),
                Rectangle(
                  extent={{-30,94},{30,20}},
                  lineColor={95,95,95},
                  fillColor={95,95,95},
                  fillPattern=FillPattern.Solid),
                Ellipse(
                  extent={{-22,88},{0,80}},
                  lineColor={255,255,255},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Ellipse(
                  extent={{0,88},{22,80}},
                  lineColor={255,255,255},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Line(
                  points={{16,70},{22,58}},
                  color={255,0,0},
                  thickness=0.5),
                Line(
                  points={{0,70},{6,58}},
                  color={255,0,0},
                  thickness=0.5),
                Line(
                  points={{0,70},{-6,58}},
                  color={255,0,0},
                  thickness=0.5),
                Line(
                  points={{16,70},{10,58}},
                  color={255,0,0},
                  thickness=0.5),
                Rectangle(
                  extent={{-30,8},{30,-66}},
                  lineColor={95,95,95},
                  fillColor={95,95,95},
                  fillPattern=FillPattern.Solid),
                Ellipse(
                  extent={{-22,2},{0,-6}},
                  lineColor={255,255,255},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Ellipse(
                  extent={{0,2},{22,-6}},
                  lineColor={255,255,255},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Line(
                  points={{-16,-16},{-22,-28}},
                  color={255,0,0},
                  thickness=0.5),
                Line(
                  points={{-16,-16},{-10,-28}},
                  color={255,0,0},
                  thickness=0.5),
                Line(
                  points={{0,-16},{-6,-28}},
                  color={255,0,0},
                  thickness=0.5),
                Line(
                  points={{0,-16},{6,-28}},
                  color={255,0,0},
                  thickness=0.5),
                Line(
                  points={{16,-16},{10,-28}},
                  color={255,0,0},
                  thickness=0.5),
                Line(
                  points={{16,-16},{22,-28}},
                  color={255,0,0},
                  thickness=0.5),
                Rectangle(
                  extent={{30,24},{60,20}},
                  lineColor={0,0,255},
                  pattern=LinePattern.None,
                  fillColor={0,0,127},
                  fillPattern=FillPattern.Solid),
                Rectangle(
                  extent={{30,-62},{60,-66}},
                  lineColor={0,0,255},
                  pattern=LinePattern.None,
                  fillColor={0,0,127},
                  fillPattern=FillPattern.Solid),
                Rectangle(
                  extent={{62,2},{92,-2}},
                  lineColor={0,0,255},
                  pattern=LinePattern.None,
                  fillColor={0,0,127},
                  fillPattern=FillPattern.Solid),
                Rectangle(
                  extent={{58,-80},{62,24}},
                  lineColor={0,0,255},
                  pattern=LinePattern.None,
                  fillColor={0,0,127},
                  fillPattern=FillPattern.Solid),
                Rectangle(
                  extent={{-90,2},{-60,-2}},
                  lineColor={238,46,47},
                  pattern=LinePattern.None,
                  fillColor={238,46,47},
                  fillPattern=FillPattern.Solid),
                Rectangle(
                  extent={{-64,-82},{-60,74}},
                  lineColor={238,46,47},
                  pattern=LinePattern.None,
                  fillColor={238,46,47},
                  fillPattern=FillPattern.Solid),
                Rectangle(
                  extent={{-60,-12},{16,-16}},
                  lineColor={238,46,47},
                  pattern=LinePattern.None,
                  fillColor={238,46,47},
                  fillPattern=FillPattern.Solid),
                Rectangle(
                  extent={{-60,74},{16,70}},
                  lineColor={238,46,47},
                  pattern=LinePattern.None,
                  fillColor={238,46,47},
                  fillPattern=FillPattern.Solid),
                Line(
                  points={{-16,70},{-22,58}},
                  color={255,0,0},
                  thickness=0.5),
                Line(
                  points={{-16,70},{-10,58}},
                  color={255,0,0},
                  thickness=0.5),
                Rectangle(
                  extent={{-60,-78},{-10,-82}},
                  lineColor={238,46,47},
                  pattern=LinePattern.None,
                  fillColor={238,46,47},
                  fillPattern=FillPattern.Solid),
                Rectangle(
                  extent={{10,-78},{62,-82}},
                  lineColor={0,0,255},
                  pattern=LinePattern.None,
                  fillColor={0,0,127},
                  fillPattern=FillPattern.Solid)}),
            Documentation(
              revisions="<html>
<ul>
<li>
January 2, 2023, by Kathryn Hinkelman:<br/>
Set <code>dp_fixed = 0</code> for the bypass valve because the pressure drop in this leg
will be significantly less than the cooling towers.<br/>
Propagated <code>riseTime</code> for the valve signal filters.
</li>
<li>
November 16, 2022, by Michael Wetter:<br/>
Changed rise time of valve to 30 seconds so that it is the same as the one for the pumps,
and set <code>use_inputFilter = false</code> for shut-off valve in cooling tower.
This avoids a sharp rise in pressure near <i>t=35</i> seconds.
</li>
<li>May 19, 2020 by Jing Wang:<br/>First implementation. </li>
</ul>
</html>",     info="<html>
<p>This model simulates parallel connected cooling tower subsystem with a bypass
valve. </p>
<p>The bypass valve is controlled to enforce that the leaving condenser water
temperature does not drop below the minimum temperature <code>TMin</code>.</p>
<p>By default, the condenser water setpoint is the ambient wet bulb temperature
<code>TWetBul</code> plus the approach temperature <code>dTApp</code>. </p>
<p>Inside the model, a cooling tower fan speed controller is also implemented to
maintain the condenser water at its setpoint.</p>
</html>"));
        end CoolingTowersWithBypass;

        package Examples "Example models integrating multiple components"
          extends Modelica.Icons.ExamplesPackage;

          model CoolingTowersParallel
            "Example model for parallel cooling tower model"
            extends Modelica.Icons.Example;
            extends
              estcp.DHC.Plants.Cooling.Subsystems.Examples.BaseClasses.PartialCoolingTowersSubsystem(
                redeclare
                estcp.DHC.Plants.Cooling.Subsystems.CoolingTowersParallel tow(
                TAirInWB_nominal=273.15 + 25.55,
                TWatIn_nominal=273.15 + 35,
                dT_nominal=5.56,
                dpValve_nominal=6000,
                dp_nominal=6000,
                PFan_nominal=4800,
                use_inputFilter=false), weaDat(final computeWetBulbTemperature=
                    true));

             Buildings.Controls.OBC.CDL.Reals.Sources.Constant TSetLea(
              k=273.15+18)
              "Setpoint for leaving temperature"
              annotation (Placement(transformation(extent={{-80,0},{-60,20}})));
            Buildings.Controls.OBC.CDL.Reals.PIDWithReset conFan(
              k=1,
              Ti=60,
              Td=10,
              reverseActing=false,
              u_s(
                unit="K",
                displayUnit="degC"),
              u_m(
                unit="K",
                displayUnit="degC"))
              "Controller for tower fan"
              annotation (Placement(transformation(extent={{-40,0},{-20,20}})));
          equation
            connect(TSetLea.y, conFan.u_s)
              annotation (Line(points={{-58,10},{-42,10}},  color={0,0,127}));
            connect(tow.TLvg, conFan.u_m)
              annotation (Line(points={{43,-47},{50,-47},{50,-20},{-30,-20},{-30,-2}},
                color={0,0,127}));
            connect(onOffCon.y, tow.on[1])
              annotation (Line(points={{2,-190},{12,-190},{12,-236},{-96,-236},{-96,-26},
                    {14,-26},{14,-44},{20,-44}},color={255,0,255}));
            connect(onOffCon.y, tow.on[2])
              annotation (Line(points={{2,-190},{12,-190},{12,-236},{-96,-236},{-96,-26},
                    {14,-26},{14,-44},{20,-44}},color={255,0,255}));
            connect(conFan.y, tow.uFanSpe)
              annotation (Line(points={{-18,10},{10,10},{10,-48},{20,-48}},
                color={0,0,127}));
            connect(weaBus.TWetBul, tow.TWetBul)
             annotation (Line(points={{-60,50},{-4,50},{-4,-56},{20,-56}},
              color={255,204,51},thickness=0.5),
               Text(string="%first",index=-1,extent={{-6,3},{-6,3}},
               horizontalAlignment=TextAlignment.Right));
            connect(conFan.trigger, onOffCon.y) annotation (Line(points={{-36,-2},{-36,
                    -26},{-96,-26},{-96,-236},{12,-236},{12,-190},{2,-190}},
                                                                        color={255,0,255}));
            annotation (
              Icon(
                coordinateSystem(
                  preserveAspectRatio=false,
                  extent={{-100,-100},{100,100}})),
              Diagram(
                coordinateSystem(
                  preserveAspectRatio=false,
                  extent={{-140,-260},{140,100}})),
              experiment(
                StartTime=15552000,
                StopTime=15724800,
                Tolerance=1e-06),
              __Dymola_Commands(
                file="modelica://Buildings/Resources/Scripts/Dymola/Experimental/DHC/Plants/Cooling/Subsystems/Examples/CoolingTowersParallel.mos"
                "Simulate and Plot"),
              Documentation(
                info="<html>
<p>This model validates the parallel connected cooling tower subsystem in
<a href=\"modelica://Buildings.Experimental.DHC.Plants.Cooling.Subsystems.CoolingTowersParallel\">
Buildings.Experimental.DHC.Plants.Cooling.Subsystems.CoolingTowersParallel</a>.</p>
</html>",       revisions="<html>
<ul>
<li>
August 6, 2020 by Jing Wang:<br/>
First implementation.
</li>
</ul>
</html>"));
          end CoolingTowersParallel;

          model CoolingTowersWithBypass
            "Example model for parallel cooling towers with bypass valve"
            extends Modelica.Icons.Example;
            extends
              estcp.DHC.Plants.Cooling.Subsystems.Examples.BaseClasses.PartialCoolingTowersSubsystem(
                redeclare
                estcp.DHC.Plants.Cooling.Subsystems.CoolingTowersWithBypass tow(
                dpValve_nominal=6000,
                dp_nominal(displayUnit="Pa") = 6000,
                TAirInWB_nominal=273.15 + 25.55,
                TWatIn_nominal=273.15 + 35,
                dT_nominal=5.56,
                PFan_nominal=4800,
                TMin=TMin,
                controllerType=Modelica.Blocks.Types.SimpleController.PI),
                weaDat(final computeWetBulbTemperature=true));
            parameter Modelica.Units.SI.Temperature TMin=273.15 + 10
              "Minimum allowed water temperature entering chiller";
          equation
            connect(weaBus.TWetBul, tow.TWetBul)
             annotation (Line( points={{-60,50},{0,50},{0,-52},{20,-52}},
              color={255,204,51},thickness=0.5),
               Text(string="%first",index=-1,extent={{-6,3},{-6,3}},
                horizontalAlignment=TextAlignment.Right));
            connect(onOffCon.y, tow.on[1])
             annotation (Line(points={{2,-190},{10,-190},{10,-236},{-96,-236},{-96,-20},{
                    10,-20},{10,-46},{20,-46}},color={255,0,255}));
            connect(onOffCon.y, tow.on[2])
             annotation (Line(points={{2,-190},{10,-190},{10,-236},{-96,-236},{-96,-20},{
                    10,-20},{10,-46},{20,-46}},color={255,0,255}));
            annotation (
              Icon(
                coordinateSystem(
                  preserveAspectRatio=false,
                  extent={{-100,-100},{100,100}})),
              Diagram(
                coordinateSystem(
                  preserveAspectRatio=false,
                  extent={{-140,-260},{140,100}})),
              experiment(
                StartTime=10368000,
                StopTime=10540800,
                Tolerance=1e-06),
              __Dymola_Commands(
                file="modelica://Buildings/Resources/Scripts/Dymola/Experimental/DHC/Plants/Cooling/Subsystems/Examples/CoolingTowersWithBypass.mos"
                "Simulate and Plot"),
              Documentation(
                revisions="<html>
<ul>
<li>
August 6, 2020 by Jing Wang:<br/>
First implementation.
</li>
</ul>
</html>",       info="<html>
<p>This model validates the parallel connected cooling tower subsystem in
<a href=\"modelica://Buildings.Experimental.DHC.Plants.Cooling.Subsystems.CoolingTowersWithBypass\">
Buildings.Experimental.DHC.Plants.Cooling.Subsystems.CoolingTowerWithBypass</a>.</p>
</html>"));
          end CoolingTowersWithBypass;

          package BaseClasses "Package with base classes"
            extends Modelica.Icons.BasesPackage;

            partial model PartialCoolingTowersSubsystem
              "Partial class for test models of subsystems"

              package Medium_W = Buildings.Media.Water "Medium model for water";

              parameter Modelica.Units.SI.MassFlowRate m_flow_nominal=0.5
                "Design water flow rate" annotation (Dialog(group="Nominal condition"));

              replaceable
                Buildings.Fluid.Interfaces.PartialTwoPortInterface tow
                constrainedby
                Buildings.Fluid.Interfaces.PartialTwoPortInterface(
                redeclare package Medium = Medium_W,
                m_flow_nominal=m_flow_nominal,
                show_T=true) "Cooling tower"
                annotation (Placement(transformation(extent={{22,-60},{42,-40}})));

              Buildings.Fluid.Movers.FlowControlled_m_flow pum(
                redeclare package Medium = Medium_W,
                m_flow_nominal=m_flow_nominal,
                energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,
                nominalValuesDefineDefaultPressureCurve=true,
                use_inputFilter=false)
                "Pump for condenser water loop"
                annotation (Placement(transformation(extent={{-70,-60},{-50,-40}})));

              Buildings.BoundaryConditions.WeatherData.ReaderTMY3 weaDat(filNam=
                Modelica.Utilities.Files.loadResource(
                  "modelica://Buildings/Resources/weatherdata/USA_CA_San.Francisco.Intl.AP.724940_TMY3.mos"))
                annotation (Placement(transformation(extent={{-100,40},{-80,60}})));

              Buildings.BoundaryConditions.WeatherData.Bus weaBus "Weather data bus"
                annotation (Placement(transformation(extent={{-70,40},{-50,60}})));

              Buildings.Controls.OBC.CDL.Logical.OnOffController onOffCon(
                bandwidth=2,
                reference(
                  unit="K",
                  displayUnit="degC"),
                u(unit="K",
                  displayUnit="degC"))
                "On/off controller"
                annotation (Placement(transformation(extent={{-20,-200},{0,-180}})));

              Buildings.Controls.OBC.CDL.Reals.Switch swi "Control switch for chilled water pump"
                annotation (Placement(transformation(extent={{20,-200},{40,-180}})));

              Buildings.Controls.OBC.CDL.Reals.Sources.Constant TSwi(k=273.15 + 22)
                "Switch temperature for switching tower pump on"
                annotation (Placement(transformation(extent={{-80,-206},{-60,-186}})));

              Buildings.Controls.OBC.CDL.Reals.Sources.Constant zer(k=0) "Zero flow rate"
                annotation (Placement(transformation(extent={{-20,-230},{0,-210}})));

              Buildings.Controls.OBC.CDL.Reals.Sources.Constant m_flow(k=m_flow_nominal)
                "Water flow rate"
                annotation (Placement(transformation(extent={{-20,-168},{0,-148}})));

              Buildings.Fluid.MixingVolumes.MixingVolume vol(nPorts=3,
                redeclare package Medium = Medium_W,
                m_flow_nominal=m_flow_nominal,
                V=0.5,
                energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial)
                annotation (Placement(transformation(extent={{20,-120},{40,-100}})));

              Buildings.Fluid.Sources.Boundary_pT exp(
                redeclare package Medium = Medium_W,
                nPorts=1) "Expansion vessel"
                annotation (Placement(transformation(extent={{100,-130},{80,-110}})));

              Modelica.Thermal.HeatTransfer.Sources.FixedHeatFlow fixHeaFlo(
                Q_flow=0.5*m_flow_nominal*4200*5) "Fixed heat flow rate"
                annotation (Placement(transformation(extent={{-40,-100},{-20,-80}})));

              Modelica.Thermal.HeatTransfer.Sensors.TemperatureSensor TVol
                "Water temperature"
                annotation (Placement(transformation(extent={{-70,-160},{-50,-140}})));

              Buildings.Fluid.Sensors.TemperatureTwoPort TEnt(
                redeclare package Medium = Medium_W,
                m_flow_nominal=m_flow_nominal)
                "Water entering temperature"
                annotation (Placement(transformation(extent={{-40,-60},{-20,-40}})));
            equation
              connect(weaDat.weaBus, weaBus)
               annotation (Line(points={{-80,50},{-60,50}},color={255,204,51}));
              connect(onOffCon.y, swi.u2)
               annotation (Line(points={{2,-190},{18,-190}},color={255,0,255}));
              connect(zer.y, swi.u3)
               annotation (Line(points={{2,-220},{8,-220},{8,-198},{18,-198}},
                 color={0,0,127}));
              connect(m_flow.y, swi.u1)
               annotation (Line(points={{2,-158},{8,-158},{8,-182},{18,-182}},
                 color={0,0,127}));
              connect(vol.ports[1], pum.port_a)
               annotation (Line(points={{28.6667,-120},{-76,-120},{-76,-50},{-70,-50}},
                  color={0,127,255}));
              connect(fixHeaFlo.port, vol.heatPort)
               annotation (Line(points={{-20,-90},{10,-90},{10,-110},{20,-110}},
                 color={191,0,0}));
              connect(vol.heatPort, TVol.port)
               annotation (Line(points={{20,-110},{-80,-110},{-80,-150},{-70,-150}},
                  color={191,0,0}));
              connect(tow.port_b, vol.ports[2])
               annotation (Line(points={{42,-50},{60,-50},{60,-120},{30,-120}},
                  color={0,127,255}));
              connect(onOffCon.u, TSwi.y)
               annotation (Line(points={{-22,-196},{-58,-196}},color={0,0,127}));
              connect(TVol.T, onOffCon.reference)
               annotation (Line(points={{-49,-150},{-40,-150},{-40,-184},{-22,-184}},
                  color={0,0,127}));
              connect(swi.y, pum.m_flow_in)
               annotation (Line(points={{42,-190},{46,-190},{46,-240},{-100,-240},{-100,-32},
                      {-60,-32},{-60,-38}},      color={0,0,127}));
              connect(exp.ports[1], vol.ports[3])
               annotation (Line(points={{80,-120},{31.3333,-120}},color={0,127,255}));

              connect(pum.port_b, TEnt.port_a)
                annotation (Line(points={{-50,-50},{-40,-50}}, color={0,127,255}));
              connect(TEnt.port_b, tow.port_a)
                annotation (Line(points={{-20,-50},{22,-50}},color={0,127,255}));
              annotation (Diagram(coordinateSystem(preserveAspectRatio=true, extent={{-140,
                        -260},{140,100}})),  Documentation(info="<html>
<p>
Partial model to test cooling tower models that are connected to a weather data reader
and a simple fluid loop to which a constant amount of heat is added.
The pump in the cooling tower loop is switched on and off depending
on the temperature of the control volume to which the heat is added.
</p>
</html>",   revisions="<html>
<ul>
<li>
November 16, 2022, by Michael Wetter:<br/>
Set <code>use_inputFilter=false</code>.
</li>
<li>
January 28, 2022, by Hongxiang Fu:<br/>
Added a temperature sensor for better measurement of the entering water
temperature. This is for
<a href=\"https://github.com/lbl-srg/modelica-buildings/issues/2866\">
#2866</a>.
</li>
<li>
May 28, 2021, by Chengnan Shi:<br/>
Duplicate <a href=\"modelica://Buildings.Fluid.HeatExchangers.CoolingTowers.Examples.BaseClasses.PartialStaticTwoPortCoolingTower\">
Buildings.Fluid.HeatExchangers.CoolingTowers.Examples.BaseClasses.PartialStaticTwoPortCoolingTower</a><br/>
Changed replaceable cooling tower model to <code>PartialTwoPortInterface</code>
for reusability in
<a href=\"modelica://Buildings.Experimental.DHC.Plants.Cooling.Subsystems.Examples\">
Buildings.Experimental.DHC.Plants.Cooling.Subsystems.Examples</a>.
</li>
</ul>
</html>"));
            end PartialCoolingTowersSubsystem;
            annotation (
              preferredView="info",
              Documentation(
                info="<html>
<p>This package contains base classes that are used to construct the classes in <a href=\"modelica://Buildings.Experimental.DHC.Plants\">Buildings.Experimental.DHC.Plants</a>. </p>
</html>"));
          end BaseClasses;
          annotation (
            Documentation(
              info="<html>
<p>
This package contains advanced examples illustrating the use of the models in
<a href=\"modelica://Buildings.Experimental.DHC.Plants.Cooling.Subsystems\">
Buildings.Experimental.DHC.Plants.Cooling.Subsystems</a>.
</p>
</html>"));
        end Examples;
        annotation (
          preferredView="info",
          Documentation(
            info="<html>
<p>
This package contains models for subsystems composing central cooling plants.
</p>
</html>"));
      end Subsystems;

      package Examples "Example models integrating multiple components"
        extends Modelica.Icons.ExamplesPackage;

        model ElectricChillerParallel
          "Example to test the chiller cooling plant"
          extends Modelica.Icons.Example;
          package Medium=Buildings.Media.Water
            "Medium model for water";
          // chiller and cooling tower
          replaceable parameter Buildings.Fluid.Chillers.Data.ElectricEIR.ElectricEIRChiller_York_YT_1055kW_5_96COP_Vanes perChi
            "Performance data of chiller";
          parameter Modelica.Units.SI.MassFlowRate mCHW_flow_nominal=18.3
            "Nominal chilled water mass flow rate";
          parameter Modelica.Units.SI.MassFlowRate mCW_flow_nominal=34.7
            "Nominal condenser water mass flow rate";
          parameter Modelica.Units.SI.PressureDifference dpCHW_nominal=44.8*1000
            "Nominal chilled water side pressure";
          parameter Modelica.Units.SI.PressureDifference dpCW_nominal=46.2*1000
            "Nominal condenser water side pressure";
          parameter Modelica.Units.SI.Power QChi_nominal=mCHW_flow_nominal*4200*(6.67
               - 18.56) "Nominal cooling capaciaty (Negative means cooling)";
          parameter Modelica.Units.SI.MassFlowRate mMin_flow=mCHW_flow_nominal*0.1
            "Minimum mass flow rate of single chiller";
          parameter Modelica.Units.SI.TemperatureDifference dTApp=3
            "Approach temperature";
          parameter Modelica.Units.SI.Power PFan_nominal=5000 "Fan power";
          // control settings
          parameter Modelica.Units.SI.Temperature TCHWSet=273.15 + 8
            "Chilled water temperature setpoint";
          parameter Modelica.Units.SI.Time tWai=30 "Waiting time";
          // pumps
          parameter Buildings.Fluid.Movers.Data.Generic perCHWPum(
            pressure=Buildings.Fluid.Movers.BaseClasses.Characteristics.flowParameters(
              V_flow=mCHW_flow_nominal/1000*{0.2,0.6,0.8,1.0},
              dp=(dpCHW_nominal+18000+30000)*{1,0.8,0.6,0.2}))
            "Performance data for chilled water pumps";
          parameter Buildings.Fluid.Movers.Data.Generic perCWPum(
            pressure=Buildings.Fluid.Movers.BaseClasses.Characteristics.flowParameters(
              V_flow=mCW_flow_nominal/1000*{0.2,0.6,1.0,1.2},
              dp=(2*dpCW_nominal+60000+6000)*{1,0.8,0.6,0.2}))
            "Performance data for condenser water pumps";
          parameter Modelica.Units.SI.Pressure dpCHWPumVal_nominal=6000
            "Nominal pressure drop of chilled water pump valve";
          parameter Modelica.Units.SI.Pressure dpCWPumVal_nominal=6000
            "Nominal pressure drop of chilled water pump valve";
          parameter Modelica.Units.SI.PressureDifference dpCooTowVal_nominal=6000
            "Nominal pressure difference of the cooling tower valve";
          replaceable estcp.DHC.Plants.Cooling.ElectricChillerParallel pla(
            perChi=perChi,
            dTApp=dTApp,
            perCHWPum=perCHWPum,
            perCWPum=perCWPum,
            mCHW_flow_nominal=mCHW_flow_nominal,
            dpCHW_nominal=dpCHW_nominal,
            QChi_nominal=QChi_nominal,
            mMin_flow=mMin_flow,
            mCW_flow_nominal=mCW_flow_nominal,
            dpCW_nominal=dpCW_nominal,
            TAirInWB_nominal=298.7,
            TCW_nominal=308.15,
            dT_nominal=5.56,
            TMin=288.15,
            PFan_nominal=PFan_nominal,
            dpCooTowVal_nominal=dpCooTowVal_nominal,
            dpCHWPumVal_nominal=dpCHWPumVal_nominal,
            dpCWPumVal_nominal=dpCWPumVal_nominal,
            tWai=tWai,
            energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial)
            "District cooling plant"
            annotation (Placement(transformation(extent={{-10,-20},{10,0}})));
          Buildings.BoundaryConditions.WeatherData.ReaderTMY3 weaDat(
            final computeWetBulbTemperature=true,
            filNam=Modelica.Utilities.Files.loadResource(
              "modelica://Buildings/Resources/weatherdata/USA_CA_San.Francisco.Intl.AP.724940_TMY3.mos"))
            "Weather data"
            annotation (Placement(transformation(extent={{-60,20},{-40,40}})));
          Modelica.Blocks.Sources.BooleanConstant on
            "On signal of the plant"
            annotation (Placement(transformation(extent={{-60,-20},{-40,0}})));
          Modelica.Blocks.Sources.Constant TCHWSupSet(
            k=TCHWSet)
            "Chilled water supply temperature setpoint"
            annotation (Placement(transformation(extent={{-60,-60},{-40,-40}})));
          Buildings.Fluid.MixingVolumes.MixingVolume vol(
            nPorts=2,
            redeclare package Medium = Medium,
            m_flow_nominal=pla.numChi*mCHW_flow_nominal,
            V=0.5,
            energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial)
            "Mixing volume"
            annotation (Placement(transformation(extent={{50,20},{70,40}})));
          Modelica.Thermal.HeatTransfer.Sources.PrescribedHeatFlow fixHeaFlo(
            T_ref=293.15)
            "Fixed heat flow rate"
            annotation (Placement(transformation(extent={{0,60},{20,80}})));
          Buildings.Fluid.FixedResistances.PressureDrop res(
            redeclare package Medium = Medium,
            m_flow_nominal=pla.numChi*mCHW_flow_nominal,
            dp_nominal(displayUnit="kPa") = 60000) "Flow resistance"
            annotation (Placement(transformation(extent={{70,-50},{50,-30}})));
          Modelica.Blocks.Sources.Sine loaVar(
            amplitude=913865,
            f=1/126900,
            offset=913865,
            startTime(displayUnit="h") = 21600) "Variable demand load"
            annotation (Placement(transformation(extent={{-60,60},{-40,80}})));
        equation
          connect(fixHeaFlo.port,vol.heatPort)
            annotation (Line(points={{20,70},{32,70},{32,30},{50,30}},color={191,0,0}));
          connect(vol.ports[1], res.port_a) annotation (Line(points={{58,20},{80,20},{
                  80,-40},{70,-40}},      color={0,127,255}));
          connect(res.port_b, pla.port_aSerCoo) annotation (Line(points={{50,-40},{-14,
                  -40},{-14,-11.3333},{-10,-11.3333}}, color={0,127,255}));
          connect(on.y,pla.on)
            annotation (Line(points={{-39,-10},{-38,-10},{-38,-2.6},{-10.7333,-2.6}},
              color={255,0,255}));
          connect(weaDat.weaBus,pla.weaBus)
            annotation (Line(points={{-40,30},{0.0333333,30},{0.0333333,-1.13333}},
              color={255,204,51}));
          connect(fixHeaFlo.Q_flow,loaVar. y)
            annotation (Line(points={{0,70},{-39,70}}, color={0,0,127}));
          connect(pla.port_bSerCoo, vol.ports[2]) annotation (Line(points={{10,-11.3333},
                  {20,-11.3333},{20,20},{62,20}}, color={0,127,255}));
          connect(pla.TCHWSupSet, TCHWSupSet.y) annotation (Line(points={{-10.6667,
                  -4.73333},{-30,-4.73333},{-30,-50},{-39,-50}},
                                                       color={0,0,127}));
          annotation (
            Icon(
              coordinateSystem(
                preserveAspectRatio=false)),
            Diagram(
              coordinateSystem(
                preserveAspectRatio=false)),
            experiment(
              StopTime=86400,
              Tolerance=1e-06),
            Documentation(
              info="<html>
<p>This model validates the district central cooling plant implemented in
<a href=\"modelica://Buildings.Experimental.DHC.Plants.Cooling.ElectricChillerParallel\">
Buildings.Experimental.DHC.Plants.Cooling.ElectricChillerParallel</a>.
</p>
</html>",     revisions="<html>
<ul>
<li>
December 14, 2022, by Kathryn Hinkelman:<br/>
Enabled filters for CHW pumps and valves. Corrected pressure drop in loop. 
This is for <a href=\"https://github.com/lbl-srg/modelica-buildings/issues/2912#issuecomment-1324375700\">issue 2912</a>.
</li>
<li>
October 20, 2021, by Chengnan Shi:<br/>
Revised the model for extensibility. This is for <a href=\"https://github.com/lbl-srg/modelica-buildings/issues/2749\">issue 2749</a>.
</li>
<li>
August 6, 2020 by Jing Wang:<br/>
First implementation.
</li>
</ul>
</html>"),  __Dymola_Commands(
              file="modelica://Buildings/Resources/Scripts/Dymola/Experimental/DHC/Plants/Cooling/Examples/ElectricChillerParallel.mos"
              "Simulate and Plot"));
        end ElectricChillerParallel;

        model StoragePlantDualSource
          "Idealised district system model with two sources and three users"
          extends Modelica.Icons.Example;

          package Medium = Buildings.Media.Water "Medium model for CHW";

          parameter Modelica.Units.SI.MassFlowRate m_flow_nominal=1
            "Nominal mass flow rate, slightly larger than needed by one user load";
          parameter Modelica.Units.SI.MassFlowRate mTan_flow_nominal=1
            "Nominal mass flow rate for CHW tank branch"
            annotation(Dialog(group="Nominal values"));
          parameter Modelica.Units.SI.MassFlowRate mChi_flow_nominal=1
            "Nominal mass flow rate for CHW chiller branch"
            annotation(Dialog(group="Nominal values"));
          parameter Modelica.Units.SI.PressureDifference dp_nominal(
            final displayUnit="Pa")=
             300000
            "Nominal pressure difference";
          parameter Modelica.Units.SI.Temperature T_CHWR_nominal(
            final displayUnit="degC")=
             12+273.15
            "Nominal temperature of CHW return";
          parameter Modelica.Units.SI.Temperature T_CHWS_nominal(
            final displayUnit="degC")=
             7+273.15
            "Nominal temperature of CHW supply";

        // First plant: chiller only
          Buildings.Fluid.Sources.PropertySource_T chi1(
            redeclare final package Medium = Medium,
            final use_T_in=true) "Chiller 1 represented by an ideal temperature source"
            annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=90,
                origin={-128,70})));
          Modelica.Blocks.Sources.Constant TSet1(k=T_CHWS_nominal)
            "Constant CHW leaving temperature"
            annotation (Placement(transformation(extent={{-178,56},{-158,76}})));
          Buildings.Fluid.Movers.Preconfigured.SpeedControlled_y pumSup1(
            redeclare final package Medium = Medium,
            final addPowerToMedium=false,
            final m_flow_nominal=m_flow_nominal,
            final dp_nominal=dp_nominal) "CHW supply pump for chi1"
            annotation (Placement(transformation(extent={{-110,82},{-90,102}})));
          Buildings.Controls.Continuous.LimPID conPI_pumChi1(
            final controllerType=Modelica.Blocks.Types.SimpleController.PI,
            k=0.2,
            Ti=10,
            final reverseActing=true) "PI controller" annotation (Placement(transformation(
                extent={{10,10},{-10,-10}},
                rotation=180,
                origin={-130,150})));
          estcp.DHC.Plants.Cooling.Controls.SelectMin selMin_dp(nin=3)
            "Min of pressure heads with the signal from storage plant optionally used"
            annotation (Placement(transformation(extent={{-180,100},{-160,120}})));

        // Second plant: chiller and tank
          estcp.DHC.Plants.Cooling.StoragePlant stoPla(
            redeclare final package Medium = Medium,
            mTan_flow_nominal=mTan_flow_nominal,
            mChi_flow_nominal=mChi_flow_nominal,
            dpPum_nominal=dp_nominal,
            dpVal_nominal=0.5*dp_nominal,
            T_CHWS_nominal=T_CHWS_nominal,
            T_CHWR_nominal=T_CHWR_nominal) "Storage plant" annotation (
              Placement(transformation(rotation=0, extent={{-98,-100},{-78,-80}})));
          Buildings.Fluid.Sources.Boundary_pT bou(
            p(final displayUnit="Pa") = 101325 + dp_nominal,
            redeclare final package Medium = Medium,
            nPorts=1) "Pressure boundary" annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={-88,-130})));
          Buildings.Fluid.Sources.PropertySource_T chi2(
            redeclare final package Medium = Medium,
            final use_T_in=true) "Chiller represented by an ideal temperature source"
            annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=90,
                origin={-128,-90})));
          Modelica.Blocks.Sources.Constant TSet2(final k=T_CHWS_nominal)
            "Constant CHW leaving temperature"
            annotation (Placement(transformation(extent={{-180,-104},{-160,-84}})));
          Modelica.Blocks.Math.Gain gaiStoPla(final k=1/stoPla.dpVal_nominal)
            "Gain to normalise dp measurement" annotation (Placement(transformation(
                extent={{10,-10},{-10,10}},
                rotation=180,
                origin={-222,110})));

        // Users
          estcp.DHC.Plants.Cooling.BaseClasses.IdealUser ideUse1(
            redeclare final package Medium = Medium,
            final m_flow_nominal=0.6*m_flow_nominal,
            dp_nominal=0.2*dp_nominal,
            final T_CHWR_nominal=T_CHWR_nominal) "Ideal user" annotation (
              Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={130,150})));
          estcp.DHC.Plants.Cooling.BaseClasses.IdealUser ideUse2(
            redeclare final package Medium = Medium,
            final m_flow_nominal=0.65*m_flow_nominal,
            dp_nominal=0.2*dp_nominal,
            final T_CHWR_nominal=T_CHWR_nominal) "Ideal user" annotation (
              Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={130,-10})));
          estcp.DHC.Plants.Cooling.BaseClasses.IdealUser ideUse3(
            redeclare final package Medium = Medium,
            final m_flow_nominal=0.65*m_flow_nominal,
            dp_nominal=0.2*dp_nominal,
            final T_CHWR_nominal=T_CHWR_nominal) "Ideal user" annotation (
              Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={130,-170})));
          Modelica.Blocks.Sources.Constant set_dpUse(final k=1)
            "Normalized consumer differential pressure setpoint"
            annotation (Placement(transformation(extent={{-10,-10},{10,10}},
                rotation=0,
                origin={-170,150})));
          Modelica.Blocks.Sources.TimeTable mLoa1_flow(table=[0,0; 1800,0; 1800,ideUse1.m_flow_nominal;
                7000,ideUse1.m_flow_nominal; 7000,0; 9000,0])
            "Cooling load of user 1 represented by flow rate"
            annotation (Placement(transformation(extent={{80,180},{100,200}})));
          Modelica.Blocks.Sources.TimeTable mLoa2_flow(table=[0,0; 3500,0; 3500,ideUse2.m_flow_nominal;
                6500,ideUse2.m_flow_nominal; 6500,0; 9000,0])
            "Cooling load of user 2 represented by flow rate"
            annotation (Placement(transformation(extent={{80,20},{100,40}})));
          Modelica.Blocks.Sources.TimeTable mLoa3_flow(table=[0,0; 4500,0; 4500,ideUse3.m_flow_nominal;
                6000,ideUse3.m_flow_nominal; 6000,0; 9000,0])
            "Cooling load of user 3 represented by flow rate"
            annotation (Placement(transformation(extent={{80,-140},{100,-120}})));
          Modelica.Blocks.Math.Gain gaiUse1(final k=1/ideUse1.dp_nominal)
            "Gain to normalise dp measurement" annotation (Placement(transformation(
                extent={{10,-10},{-10,10}},
                rotation=180,
                origin={202,154})));
          Modelica.Blocks.Math.Gain gaiUse2(final k=1/ideUse2.dp_nominal)
            "Gain to normalise dp measurement" annotation (Placement(transformation(
                extent={{10,-10},{-10,10}},
                rotation=180,
                origin={202,-6})));
          Modelica.Blocks.Math.Gain gaiUse3(final k=1/ideUse3.dp_nominal)
            "Gain to normalise dp measurement" annotation (Placement(transformation(
                extent={{10,-10},{-10,10}},
                rotation=180,
                origin={202,-166})));

        // District pipe network
          estcp.DHC.Plants.Cooling.BaseClasses.ParallelJunctions parJunPla1(
            redeclare final package Medium = Medium,
            T1_start=T_CHWS_nominal,
            T2_start=T_CHWR_nominal,
            m_flow_nominal=2*m_flow_nominal)
            "Parallel junctions for breaking algebraic loops" annotation (
              Placement(transformation(
                extent={{-10,10},{10,-10}},
                rotation=-90,
                origin={10,70})));
          estcp.DHC.Plants.Cooling.BaseClasses.ParallelJunctions parJunUse2(
            redeclare final package Medium = Medium,
            T1_start=T_CHWR_nominal,
            T2_start=T_CHWS_nominal,
            m_flow_nominal=2*m_flow_nominal)
            "Parallel junctions for breaking algebraic loops" annotation (
              Placement(transformation(
                extent={{-10,10},{10,-10}},
                rotation=90,
                origin={10,-10})));
          estcp.DHC.Plants.Cooling.BaseClasses.ParallelJunctions parJunPla2(
            redeclare final package Medium = Medium,
            T1_start=T_CHWS_nominal,
            T2_start=T_CHWR_nominal,
            m_flow_nominal=2*m_flow_nominal)
            "Parallel junctions for breaking algebraic loops" annotation (
              Placement(transformation(
                extent={{-10,10},{10,-10}},
                rotation=-90,
                origin={10,-90})));
          estcp.DHC.Plants.Cooling.BaseClasses.ParallelPipes parPipS1U1(
            redeclare package Medium = Medium,
            m_flow_nominal=m_flow_nominal,
            dp_nominal=0.15*dp_nominal) "Parallel pipes" annotation (Placement(
                transformation(
                extent={{10,-10},{-10,10}},
                rotation=-90,
                origin={10,110})));
          estcp.DHC.Plants.Cooling.BaseClasses.ParallelPipes parPipS1U2(
            redeclare package Medium = Medium,
            m_flow_nominal=2*m_flow_nominal,
            dp_nominal=0.15*dp_nominal) "Parallel pipes" annotation (Placement(
                transformation(
                extent={{10,-10},{-10,10}},
                rotation=-90,
                origin={10,30})));
          estcp.DHC.Plants.Cooling.BaseClasses.ParallelPipes parPipS2U2(
            redeclare package Medium = Medium,
            m_flow_nominal=2*m_flow_nominal,
            dp_nominal=0.15*dp_nominal) "Parallel pipes" annotation (Placement(
                transformation(
                extent={{10,-10},{-10,10}},
                rotation=-90,
                origin={10,-50})));
          estcp.DHC.Plants.Cooling.BaseClasses.ParallelPipes parPipS2U3(
            redeclare package Medium = Medium,
            m_flow_nominal=m_flow_nominal,
            dp_nominal=0.15*dp_nominal) "Parallel pipes" annotation (Placement(
                transformation(
                extent={{10,-10},{-10,10}},
                rotation=-90,
                origin={10,-130})));

          Modelica.Blocks.Routing.Multiplex muxDp(n=3) "Multiplexer block for routing"
            annotation (Placement(transformation(extent={{238,140},{258,160}})));
          Buildings.Controls.OBC.CDL.Reals.MultiMax mulMax_yVal_actual(nin=3)
            "Position of the most open user control valve"
            annotation (Placement(transformation(extent={{200,-220},{220,-200}})));
          Modelica.Blocks.Sources.IntegerTable com(table=[0,2; 200,1; 3000,2; 4000,3;
                6000,2; 7500,1])
            "Command: 1 = charge tank, 2 = no command, 3 = discharge from tank"
            annotation (Placement(transformation(extent={{-140,-30},{-120,-10}})));
          Modelica.Blocks.Sources.BooleanTable chiEnaSta(table={0,6000}, startValue=
                false) "Chiller enable status, true if chiller is enabled"
            annotation (Placement(transformation(extent={{-138,-60},{-118,-40}})));
          Buildings.Controls.OBC.CDL.Reals.Hysteresis hys_yVal_actual(uLow=0.05,
              uHigh=0.5) "Hysteresis for user control valve position"
            annotation (Placement(transformation(extent={{240,-220},{260,-200}})));

        equation
          connect(set_dpUse.y,conPI_pumChi1.u_s)
            annotation (Line(points={{-159,150},{-142,150}},
                                                           color={0,0,127}));
          connect(mLoa1_flow.y, ideUse1.mPre_flow) annotation (Line(points={{101,190},{110,
                  190},{110,158},{119,158}},
                                           color={0,0,127}));
          connect(mLoa2_flow.y, ideUse2.mPre_flow) annotation (Line(points={{101,30},{110,
                  30},{110,-2},{119,-2}},
                                        color={0,0,127}));
          connect(mLoa3_flow.y, ideUse3.mPre_flow) annotation (Line(points={{101,-130},{
                  110,-130},{110,-162},{119,-162}},
                                                 color={0,0,127}));
          connect(ideUse1.dp, gaiUse1.u) annotation (Line(points={{141,154},{190,154}},
                                       color={0,0,127}));
          connect(ideUse2.dp, gaiUse2.u) annotation (Line(points={{141,-6},{190,-6}},
                                       color={0,0,127}));
          connect(ideUse3.dp, gaiUse3.u) annotation (Line(points={{141,-166},{190,-166}},
                                          color={0,0,127}));
          connect(parJunUse2.port_c2, ideUse2.port_a) annotation (Line(points={{20,-4},{
                  120,-4}},                     color={0,127,255}));
          connect(ideUse2.port_b,parJunUse2.port_c1)  annotation (Line(points={{120,-16},
                  {20,-16}},                            color={0,127,255}));
          connect(parPipS1U1.port_b2, parJunPla1.port_a1)
            annotation (Line(points={{4,100},{4,80}},   color={0,127,255}));
          connect(parJunPla1.port_b2, parPipS1U1.port_a1)
            annotation (Line(points={{16,80},{16,100}}, color={0,127,255}));
          connect(parJunPla1.port_b1, parPipS1U2.port_a2)
            annotation (Line(points={{4,60},{4,40}},   color={0,127,255}));
          connect(parPipS1U2.port_b2, parJunUse2.port_a2)
            annotation (Line(points={{4,20},{4,0}},   color={0,127,255}));
          connect(parJunUse2.port_b1, parPipS1U2.port_a1)
            annotation (Line(points={{16,0},{16,20}}, color={0,127,255}));
          connect(parPipS1U2.port_b1, parJunPla1.port_a2)
            annotation (Line(points={{16,40},{16,60}}, color={0,127,255}));
          connect(parJunUse2.port_b2, parPipS2U2.port_a2)
            annotation (Line(points={{4,-20},{4,-40}},   color={0,127,255}));
          connect(parPipS2U2.port_b1, parJunUse2.port_a1)
            annotation (Line(points={{16,-40},{16,-20}}, color={0,127,255}));
          connect(parPipS2U2.port_a1, parJunPla2.port_b2)
            annotation (Line(points={{16,-60},{16,-80}}, color={0,127,255}));
          connect(parJunPla2.port_a1, parPipS2U2.port_b2)
            annotation (Line(points={{4,-80},{4,-60}},   color={0,127,255}));
          connect(parPipS2U3.port_a2, parJunPla2.port_b1)
            annotation (Line(points={{4,-120},{4,-100}},   color={0,127,255}));
          connect(parJunPla2.port_a2, parPipS2U3.port_b1)
            annotation (Line(points={{16,-100},{16,-120}}, color={0,127,255}));
          connect(gaiUse1.y, muxDp.u[1]) annotation (Line(points={{213,154},{220,154},{
                  220,147.667},{238,147.667}},
                                           color={0,0,127}));
          connect(gaiUse2.y, muxDp.u[2]) annotation (Line(points={{213,-6},{220,-6},{220,
                  150},{238,150}}, color={0,0,127}));
          connect(gaiUse3.y, muxDp.u[3]) annotation (Line(points={{213,-166},{220,-166},
                  {220,152.333},{238,152.333}}, color={0,0,127}));
          connect(ideUse1.yVal_actual, mulMax_yVal_actual.u[1]) annotation (Line(points={{141,158},
                  {160,158},{160,-210},{180,-210},{180,-210.667},{198,-210.667}},
                color={0,0,127}));
          connect(ideUse2.yVal_actual, mulMax_yVal_actual.u[2]) annotation (Line(points
                ={{141,-2},{160,-2},{160,-210},{198,-210}}, color={0,0,127}));
          connect(ideUse3.yVal_actual, mulMax_yVal_actual.u[3]) annotation (Line(points={{141,
                  -162},{160,-162},{160,-210},{180,-210},{180,-209.333},{198,-209.333}},
                color={0,0,127}));
          connect(com.y, stoPla.com) annotation (Line(points={{-119,-20},{-86,-20},{-86,
                  -79}},      color={255,127,0}));
          connect(chiEnaSta.y, stoPla.chiEnaSta) annotation (Line(points={{-117,-50},{-90,
                  -50},{-90,-79}},           color={255,0,255}));
          connect(hys_yVal_actual.y, stoPla.hasLoa) annotation (Line(points={{262,-210},
                  {262,-228},{-186,-228},{-186,-68},{-94,-68},{-94,-79}},
                                                   color={255,0,255}));
          connect(pumSup1.port_b, parJunPla1.port_c1) annotation (Line(points={{-90,92},
                  {-80,92},{-80,76},{1.77636e-15,76}},
                                        color={0,127,255}));
          connect(conPI_pumChi1.y, pumSup1.y)
            annotation (Line(points={{-119,150},{-100,150},{-100,104}},
                                                                     color={0,0,127}));
          connect(conPI_pumChi1.y, stoPla.yPum) annotation (Line(points={{-119,150},{-70,
                  150},{-70,-70},{-82,-70},{-82,-79}},
                                             color={0,0,127}));
          connect(pumSup1.port_a, chi1.port_b)
            annotation (Line(points={{-110,92},{-128,92},{-128,80}},
                                                                  color={0,127,255}));
          connect(chi1.port_a, parJunPla1.port_c2) annotation (Line(points={{-128,60},{-128,
                  54},{-80,54},{-80,64},{-1.77636e-15,64}},
                                                color={0,127,255}));
          connect(TSet1.y, chi1.T_in) annotation (Line(points={{-157,66},{-140,66}},
                             color={0,0,127}));
          connect(TSet2.y, chi2.T_in) annotation (Line(points={{-159,-94},{-140,-94}},
                                   color={0,0,127}));
          connect(stoPla.port_b1, parJunPla2.port_c1)
            annotation (Line(points={{-78,-84},{1.77636e-15,-84}},
                                                        color={0,127,255}));
          connect(parJunPla2.port_c2, stoPla.port_a2)
            annotation (Line(points={{-1.77636e-15,-96},{-78,-96}},
                                                        color={0,127,255}));
          connect(stoPla.port_b2, chi2.port_a) annotation (Line(points={{-98,-96},{-112,
                  -96},{-112,-106},{-128,-106},{-128,-100}},
                                                          color={0,127,255}));
          connect(chi2.port_b, stoPla.port_a1) annotation (Line(points={{-128,-80},{-128,
                  -74},{-112,-74},{-112,-84},{-98,-84}},
                                                       color={0,127,255}));
          connect(bou.ports[1], stoPla.port_a2) annotation (Line(points={{-78,-130},{6,-130},
                  {6,-96},{-78,-96}},     color={0,127,255}));
          connect(parPipS1U1.port_a2, ideUse1.port_a)
            annotation (Line(points={{4,120},{4,156},{120,156}},  color={0,127,255}));
          connect(ideUse1.port_b, parPipS1U1.port_b1)
            annotation (Line(points={{120,144},{16,144},{16,120}},color={0,127,255}));
          connect(parPipS2U3.port_b2, ideUse3.port_a) annotation (Line(points={{4,-140},
                  {4,-164},{120,-164}}, color={0,127,255}));
          connect(parPipS2U3.port_a1, ideUse3.port_b) annotation (Line(points={{16,-140},
                  {16,-176},{120,-176}},color={0,127,255}));
          connect(stoPla.dp, gaiStoPla.u) annotation (Line(points={{-76,-88},{-64,-88},{
                  -64,0},{-240,0},{-240,110},{-234,110}},
                                     color={0,0,127}));
          connect(selMin_dp.y, conPI_pumChi1.u_m)
            annotation (Line(points={{-159,110},{-130,110},{-130,138}},
                                                                     color={0,0,127}));
          connect(gaiStoPla.y, selMin_dp.dpStoPla) annotation (Line(points={{-211,110},{
                  -182,110}},                      color={0,0,127}));
          connect(stoPla.isChaRem, selMin_dp.isChaRem) annotation (Line(points={{-77,-92},
                  {-58,-92},{-58,46},{-184,46},{-184,104},{-181,104}},
                                                                     color={255,0,255}));
          connect(muxDp.y, selMin_dp.dpUse[1:3]) annotation (Line(points={{259,150},{
                  270,150},{270,208},{-200,208},{-200,116},{-182,116},{-182,116.667}},
                                                                        color={0,0,127}));
          connect(mulMax_yVal_actual.y, hys_yVal_actual.u)
            annotation (Line(points={{222,-210},{238,-210}}, color={0,0,127}));
          annotation (experiment(Tolerance=1e-06, StopTime=9000),
            __Dymola_Commands(file="modelica://Buildings/Resources/Scripts/Dymola/Experimental/DHC/Plants/Cooling/Examples/StoragePlantDualSource.mos"
                "Simulate and plot"),
                Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,
                    100}})),                                             Diagram(
                coordinateSystem(preserveAspectRatio=false, extent={{-300,-240},{300,220}})),
                Documentation(info="<html>
<p>
The modelled system is described in the documentation of
<a href=\"Modelica://Buildings.Experimental.DHC.Plants.Cooling.StoragePlant\">
Buildings.Experimental.DHC.Plants.Cooling.StoragePlant</a>.
</p>
<p>
The source blocks give the system the following operation schedule during
simulation:
</p>
<ul>
<li>
At <code>time = 0</code>, the system is all off.
</li>
<li>
At <code>time = 200</code>, the system is commanded to charge the tank.
The chiller is available and charges the tank locally.
After some time, the charging stops when the tank status signal returns
that the tank is charged.
</li>
<li>
At <code>time = 1800</code>, load appears at the district network.
The storage plant starts producing CHW to the system.
Currently the tank is not commanded to charge or discharge, therefore it
functions like a common pipe and the CHW is supplied by the chiller.
</li>
<li>
At <code>time = 3500</code>, the load increases and there is no more overflow
through the tank.
</li>
<li>
At <code>time = 4000</code>, the system is commanded to have the tank take
priority for CHW production. After some time, the cooling in the tank is
empty and the tank stops producing. Now the chiller takes over.
</li>
<li>
At <code>time = 7000</code>, there is no longer load in the district system.
The system is back to the all-off state.
</li>
<li>
At <code>time = 7500</code>, the system is once again commanded to charge
the tank, but the chiller in the storage plant is not enabled.
The tank is therefore charged remotely by the district.
This stops once the tank is charged again.
</li>
</ul>
<h4>Implementation</h4>
<p>
The chiller is implemented as an ideal temperature source using
<a href=\"Modelica://Buildings.Fluid.Sources.PropertySource_T\">
Buildings.Fluid.Sources.PropertySource_T</a>.
Its outlet temperature is always at the prescribed value.
</p>
</html>",         revisions="<html>
<ul>
<li>
July 31, 2023, by Michael Wetter:<br/>
Revised implementation, removed unused parameter.
</li>
<li>
January 11, 2023 by Hongxiang Fu:<br/>
First implementation. This is for
<a href=\"https://github.com/lbl-srg/modelica-buildings/issues/2859\">#2859</a>.
</li>
</ul>
</html>"));
        end StoragePlantDualSource;
        annotation (
          preferredView="info",
          Documentation(
            info="<html>
<p>
This package contains advanced examples illustrating the use of the models in
<a href=\"modelica://Buildings.Experimental.DHC.Plants.Cooling\">
Buildings.Experimental.DHC.Plants.Cooling</a>.
</p>
</html>"));
      end Examples;

      package BaseClasses "Package containing base classes"
        extends Modelica.Icons.BasesPackage;
        model IdealUser "Ideal user model"
          replaceable package Medium =
            Modelica.Media.Interfaces.PartialMedium "Medium package";

          parameter Modelica.Units.SI.MassFlowRate m_flow_nominal
            "Nominal mass flow rate";

          parameter Modelica.Units.SI.Temperature T_CHWR_nominal
            "Nominal temperature of CHW return";
          parameter Modelica.Units.SI.PressureDifference dp_nominal(
            final displayUnit="Pa")
            "Nominal pressure drop when valve is fully open";

          Buildings.Fluid.Actuators.Valves.TwoWayEqualPercentage val(
            redeclare final package Medium = Medium,
            final use_inputFilter=true,
            final dpValve_nominal=dp_nominal/2,
            final init=Modelica.Blocks.Types.Init.InitialState,
            final dpFixed_nominal=dp_nominal/2,
            final m_flow_nominal=m_flow_nominal,
            y_start=0) "User control valve"
            annotation (Placement(transformation(extent={{0,50},{20,70}})));
          Buildings.Controls.Continuous.LimPID conPI(
            controllerType=Modelica.Blocks.Types.SimpleController.PI,
            k=0.5,
            Ti=20,
            final reverseActing=true)  "PI controller" annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={-30,80})));
          Modelica.Blocks.Interfaces.RealInput mPre_flow(
            final quantity = "MassFlowRate",
            final unit = "kg/s")
            "Load in terms of flow rate prescription" annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={-110,80}), iconTransformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={-110,80})));
          Modelica.Blocks.Interfaces.RealOutput yVal_actual(
            final unit = "1")
            "Consumer control valve actuator position" annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={110,80}), iconTransformation(
                extent={{10,-10},{-10,10}},
                rotation=180,
                origin={110,80})));
          Buildings.Fluid.Sensors.RelativePressure senRelPre(
            redeclare final package Medium = Medium)
            "Differential pressure sensor" annotation (Placement(
                transformation(
                extent={{-10,10},{10,-10}},
                rotation=-90,
                origin={-72,20})));
          Modelica.Blocks.Interfaces.RealOutput dp(
            final quantity="PressureDifference",
            final unit="Pa",
            displayUnit="Pa")
            "Differential pressure from the sensor" annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={110,20}),  iconTransformation(
                extent={{10,-10},{-10,10}},
                rotation=180,
                origin={110,40})));
          Modelica.Fluid.Interfaces.FluidPort_a port_a(
            p(start=Medium.p_default),
            redeclare final package Medium = Medium,
            h_outflow(start=Medium.h_default, nominal=Medium.h_default))
            "Fluid connector a (positive design flow direction is from port_a to port_b)"
            annotation (Placement(transformation(extent={{-110,50},{-90,70}}),
                iconTransformation(extent={{-110,50},{-90,70}})));
          Modelica.Fluid.Interfaces.FluidPort_b port_b(
            p(start=Medium.p_default),
            redeclare final package Medium = Medium,
            h_outflow(start=Medium.h_default, nominal=Medium.h_default))
            "Fluid connector b (positive design flow direction is from port_a to port_b)"
            annotation (Placement(transformation(extent={{-90,-70},{-110,-50}}),
                iconTransformation(extent={{-90,-70},{-110,-50}})));
          Buildings.Fluid.Sensors.MassFlowRate senMasFlo(
            redeclare final package Medium = Medium)
            "Mass flow rate sensor"
            annotation (Placement(transformation(extent={{-20,-70},{-40,-50}})));
          Buildings.Fluid.Sources.PropertySource_T proSou(
            redeclare final package Medium = Medium,
            final use_T_in=true) "Ideal temperature source" annotation (Placement(
                transformation(
                extent={{10,-10},{-10,10}},
                rotation=0,
                origin={10,-60})));
          Modelica.Blocks.Sources.Constant TRet(final k=T_CHWR_nominal)
            "Constant CHW return temperature"
            annotation (Placement(transformation(extent={{-20,-40},{0,-20}})));
        equation
          connect(senRelPre.p_rel, dp) annotation (Line(points={{-63,20},{110,20}},
                                   color={0,0,127}));
          connect(val.y_actual, yVal_actual)
            annotation (Line(points={{15,67},{40,67},{40,80},{110,80}},
                                                                 color={0,0,127}));
          connect(senRelPre.port_a, port_a) annotation (Line(
              points={{-72,30},{-72,60},{-100,60}},
              color={0,127,255},
              pattern=LinePattern.Dash));
          connect(senRelPre.port_b, port_b) annotation (Line(
              points={{-72,10},{-72,-60},{-100,-60}},
              color={0,127,255},
              pattern=LinePattern.Dash));
          connect(conPI.y, val.y)
            annotation (Line(points={{-19,80},{10,80},{10,72}},   color={0,0,127}));
          connect(senMasFlo.port_b, port_b)
            annotation (Line(points={{-40,-60},{-100,-60}}, color={0,127,255}));
          connect(senMasFlo.m_flow, conPI.u_m)
            annotation (Line(points={{-30,-49},{-30,68}}, color={0,0,127}));
          connect(port_a, val.port_a)
            annotation (Line(points={{-100,60},{0,60}}, color={0,127,255}));
          connect(conPI.u_s, mPre_flow)
            annotation (Line(points={{-42,80},{-110,80}}, color={0,0,127}));
          connect(senMasFlo.port_a, proSou.port_b)
            annotation (Line(points={{-20,-60},{0,-60}}, color={0,127,255}));
          connect(proSou.port_a, val.port_b) annotation (Line(points={{20,-60},{40,-60},
                  {40,60},{20,60}}, color={0,127,255}));
          connect(TRet.y, proSou.T_in)
            annotation (Line(points={{1,-30},{14,-30},{14,-48}}, color={0,0,127}));
          annotation (
            defaultComponentName = "ideUse",
                                         Documentation(info="<html>
<p>
This is a simple ideal user model used by
<a href=\"Modelica://Buildings.Experimental.DHC.Plants.Cooling.Examples.StoragePlantDualSource\">
Buildings.Experimental.DHC.Plants.Cooling.Examples.StoragePlantDualSource</a>.
The load of the user is described by a varying mass flow rate setpoint.
The valve is controlled to maintain the requested mass flow rate.
The model sets its leaving water temperature to the user-specified temperature
<code>T_CHWR_nominal</code>.
</p>
</html>",         revisions="<html>
<ul>
<li>
July 31, 2023, by Michael Wetter:<br/>
Revised implementation, removed unused parameter.
</li>
<li>
February 18, 2022 by Hongxiang Fu:<br/>
First implementation. This is for
<a href=\"https://github.com/lbl-srg/modelica-buildings/issues/2859\">#2859</a>.
</li>
</ul>
</html>"),  Icon(graphics={
                Rectangle(
                  extent={{-100,100},{100,-100}},
                  lineColor={0,0,0},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Rectangle(
                  extent={{-40,40},{40,-40}},
                  fillColor={175,175,175},
                  fillPattern=FillPattern.Solid,
                  pattern=LinePattern.None),
                Rectangle(
                  extent={{-34,34},{-4,6}},
                  pattern=LinePattern.None,
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid,
                  lineColor={0,0,0}),
                Rectangle(
                  extent={{6,34},{34,6}},
                  pattern=LinePattern.None,
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid,
                  lineColor={0,0,0}),
                Rectangle(
                  extent={{-34,-4},{-4,-34}},
                  pattern=LinePattern.None,
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid,
                  lineColor={0,0,0}),
                Rectangle(
                  extent={{6,-4},{34,-34}},
                  pattern=LinePattern.None,
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid,
                  lineColor={0,0,0}),
                Text(
                  extent={{-151,-100},{149,-140}},
                  textColor={0,0,255},
                  textString="%name")}));
        end IdealUser;

        model ParallelJunctions "A pair of junctions in parallel"

          replaceable package Medium =
            Modelica.Media.Interfaces.PartialMedium "Medium package";

          parameter Modelica.Units.SI.MassFlowRate m_flow_nominal
            "Design mass flow rate (used to approximate dynamics"
            annotation (Dialog(group="Nominal condition"));
          parameter Modelica.Units.SI.Time tau=30 "Time constant at nominal flow"
            annotation (Dialog(tab="Dynamics", group="Nominal condition"));
          parameter Modelica.Units.SI.Temperature T1_start=Medium.T_default
            "Start temperature of the volume"
            annotation(Dialog(tab = "Initialization"));
          parameter Modelica.Units.SI.Temperature T2_start=Medium.T_default
            "Start temperature of the volume"
            annotation(Dialog(tab = "Initialization"));

          Modelica.Fluid.Interfaces.FluidPort_a port_a2(
            redeclare final package Medium = Medium,
            p(final displayUnit="Pa")) "Fluid connector" annotation (
            Placement(transformation(extent={{90,-70},{110,-50}}), iconTransformation(
                  extent={{90,-70},{110,-50}})));
          Modelica.Fluid.Interfaces.FluidPort_b port_b1(
            redeclare final package Medium = Medium,
            p(final displayUnit="Pa")) "Fluid connector" annotation (
            Placement(transformation(extent={{90,50},{110,70}}), iconTransformation(
                  extent={{90,50},{110,70}})));
          Modelica.Fluid.Interfaces.FluidPort_b port_b2(
            redeclare final package Medium = Medium,
            p(final displayUnit="Pa")) "Fluid connector" annotation (
            Placement(transformation(extent={{-110,-70},{-90,-50}}),
                iconTransformation(extent={{-110,-70},{-90,-50}})));
          Modelica.Fluid.Interfaces.FluidPort_a port_a1(
            redeclare final package Medium = Medium,
            p(final displayUnit="Pa")) "Fluid connector" annotation (
            Placement(transformation(extent={{-110,50},{-90,70}}), iconTransformation(
                  extent={{-110,50},{-90,70}})));
          Modelica.Fluid.Interfaces.FluidPort_a port_c1(
            redeclare final package Medium = Medium,
            p(final displayUnit="Pa")) "Fluid connector" annotation (
            Placement(transformation(extent={{-70,90},{-50,110}}), iconTransformation(
                  extent={{-70,90},{-50,110}})));
          Modelica.Fluid.Interfaces.FluidPort_b port_c2(
            redeclare final package Medium = Medium,
            p(final displayUnit="Pa")) "Fluid connector" annotation (
            Placement(transformation(extent={{50,90},{70,110}}), iconTransformation(
                  extent={{50,90},{70,110}})));
          Buildings.Fluid.FixedResistances.Junction jun1(
            redeclare final package Medium = Medium,
            energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,
            final tau=tau,
            final T_start=T1_start,
            final m_flow_nominal={-m_flow_nominal,-m_flow_nominal,m_flow_nominal},
            final dp_nominal={0,0,0})
            "Junction"
            annotation (Placement(transformation(extent={{-70,70},{-50,50}})));
          Buildings.Fluid.FixedResistances.Junction jun2(
            redeclare final package Medium = Medium,
            energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,
            final tau=tau,
            final T_start=T2_start,
            final m_flow_nominal={m_flow_nominal,m_flow_nominal,-m_flow_nominal},
            final dp_nominal={0,0,0})
            "Junction"
            annotation (Placement(transformation(extent={{50,-50},{70,-70}})));
        equation
          connect(port_a1, jun1.port_1)
            annotation (Line(points={{-100,60},{-70,60}}, color={0,127,255}));
          connect(jun1.port_3,port_c1)
            annotation (Line(points={{-60,70},{-60,100}}, color={0,127,255}));
          connect(jun1.port_2, port_b1)
            annotation (Line(points={{-50,60},{100,60}}, color={0,127,255}));
          connect(port_b2, jun2.port_1)
            annotation (Line(points={{-100,-60},{50,-60}}, color={0,127,255}));
          connect(jun2.port_2, port_a2)
            annotation (Line(points={{70,-60},{100,-60}}, color={0,127,255}));
          connect(jun2.port_3,port_c2)
            annotation (Line(points={{60,-50},{60,100}}, color={0,127,255}));
          annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                                       Rectangle(
                  extent={{-100,100},{100,-100}},
                  lineColor={0,0,0},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Rectangle(
                  extent={{-1.5,-100.5},{1.5,100.5}},
                  fillColor={0,0,0},
                  fillPattern=FillPattern.Solid,
                  pattern=LinePattern.None,
                  lineColor={0,0,0},
                  origin={-0.5,59.5},
                  rotation=90),
                Rectangle(
                  extent={{-1.5,-100.5},{1.5,100.5}},
                  fillColor={0,0,0},
                  fillPattern=FillPattern.Solid,
                  pattern=LinePattern.None,
                  lineColor={0,0,0},
                  origin={-0.5,-60.5},
                  rotation=90),
                Rectangle(
                  extent={{-19.5,-1.5},{19.5,1.5}},
                  fillColor={0,0,0},
                  fillPattern=FillPattern.Solid,
                  pattern=LinePattern.None,
                  lineColor={0,0,0},
                  origin={-59.5,79.5},
                  rotation=90),
                Rectangle(
                  extent={{-17.5,-1.5},{17.5,1.5}},
                  fillColor={0,0,0},
                  fillPattern=FillPattern.Solid,
                  pattern=LinePattern.None,
                  lineColor={0,0,0},
                  origin={60.5,81.5},
                  rotation=90),
                Rectangle(
                  extent={{-57.5,-1.5},{57.5,1.5}},
                  fillColor={0,0,0},
                  fillPattern=FillPattern.Solid,
                  pattern=LinePattern.None,
                  lineColor={0,0,0},
                  origin={60.5,-2.5},
                  rotation=90),
              Text(
                  extent={{-141,-99},{159,-139}},
                  textColor={0,0,255},
                  fillPattern=FillPattern.HorizontalCylinder,
                  fillColor={0,127,255},
                  textString="%name")}),                                 Diagram(
                coordinateSystem(preserveAspectRatio=false)),
                defaultComponentName = "parJun",
            Documentation(info="<html>
<p>
This model provides junction models in parallel on the distribution pipe lines.
This model is for breaking algebraic loops only and has no pressure drop.
</p>
</html>",         revisions="<html>
<ul>
<li>
July 31, 2023, by Michael Wetter:<br/>
Propagated parameters, and introduced design flow rate <code>m_flow_nominal</code>.
</li>
<li>
October 31, 2022 by Hongxiang Fu:<br/>
First implementation. This is for
<a href=\"https://github.com/lbl-srg/modelica-buildings/issues/2859\">#2859</a>.
</li>
</ul>
</html>"));
        end ParallelJunctions;

        model ParallelPipes "CHW supply and return pipes in parallel"
          extends Buildings.Fluid.Interfaces.PartialFourPortInterface(
            redeclare final package Medium1 = Medium,
            redeclare final package Medium2 = Medium,
            final m1_flow_nominal = m_flow_nominal,
            final m2_flow_nominal = m_flow_nominal);

          replaceable package Medium =
            Modelica.Media.Interfaces.PartialMedium "Medium package";

          parameter Modelica.Units.SI.MassFlowRate m_flow_nominal
            "Nominal mass flow rate"
            annotation(Dialog(group="Nominal condition"));
          parameter Modelica.Units.SI.PressureDifference dp_nominal(
            final displayUnit="Pa")
            "Nominal pressure drop"
            annotation(Dialog(group="Nominal condition"));

          Buildings.Fluid.FixedResistances.PressureDrop preDro1(
            redeclare package Medium = Medium1,
            final allowFlowReversal=true,
            final dp_nominal=dp_nominal,
            final m_flow_nominal=m1_flow_nominal) "Flow resistance"
            annotation (Placement(transformation(extent={{-10,50},{10,70}})));
          Buildings.Fluid.FixedResistances.PressureDrop preDro2(
            redeclare package Medium = Medium2,
            final allowFlowReversal=true,
            final dp_nominal=dp_nominal,
            final m_flow_nominal=m2_flow_nominal) "Flow resistance"
            annotation (Placement(transformation(extent={{10,-70},{-10,-50}})));
        equation
          connect(preDro1.port_a, port_a1)
            annotation (Line(points={{-10,60},{-100,60}}, color={0,127,255}));
          connect(preDro1.port_b, port_b1)
            annotation (Line(points={{10,60},{100,60}}, color={0,127,255}));
          connect(preDro2.port_a, port_a2)
            annotation (Line(points={{10,-60},{100,-60}}, color={0,127,255}));
          connect(preDro2.port_b, port_b2)
            annotation (Line(points={{-10,-60},{-100,-60}}, color={0,127,255}));
          annotation (Icon(graphics={
                Rectangle(
                  extent={{-100,100},{100,-100}},
                  lineColor={0,0,0},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Rectangle(
                  extent={{-28,72},{28,48}},
                  fillColor={0,0,0},
                  fillPattern=FillPattern.Solid,
                  pattern=LinePattern.None,
                  lineColor={0,0,0}),
                Rectangle(
                  extent={{-100,62},{100,58}},
                  fillColor={0,0,0},
                  fillPattern=FillPattern.Solid,
                  pattern=LinePattern.None,
                  lineColor={0,0,0}),
                Rectangle(
                  extent={{-100,-58},{100,-62}},
                  fillColor={0,0,0},
                  fillPattern=FillPattern.Solid,
                  pattern=LinePattern.None,
                  lineColor={0,0,0}),
                Rectangle(
                  extent={{-30,-48},{26,-72}},
                  fillColor={0,0,0},
                  fillPattern=FillPattern.Solid,
                  pattern=LinePattern.None,
                  lineColor={0,0,0})}),
        defaultComponentName="parPip",
        Documentation(info="<html>
<p>
This model contains two pipes in parallel that represent the supply and return
pipes of a district CHW network.
Only pressure drop is considered. This model does not consider heat loss.
</p>
</html>",         revisions="<html>
<ul>
<li>
July 27, 2022 by Hongxiang Fu:<br/>
First implementation. This is for
<a href=\"https://github.com/lbl-srg/modelica-buildings/issues/2859\">#2859</a>.
</li>
</ul>
</html>"));
        end ParallelPipes;

        model ReversibleConnection
          "A connection that supports reversible flow with a pump and a valve"
          extends Buildings.Fluid.Interfaces.PartialTwoPortInterface(
            final allowFlowReversal=true);

          parameter Modelica.Units.SI.MassFlowRate mTan_flow_nominal(min=0)
            "Nominal mass flow rate for CHW tank branch";
          parameter Modelica.Units.SI.PressureDifference dpPum_nominal
            "Nominal pressure difference for supply pump sizing";
          parameter Modelica.Units.SI.PressureDifference dpVal_nominal
            "Nominal pressure difference for return valve sizing";
          parameter Modelica.Units.SI.ThermodynamicTemperature T_start
            "Start temperature"
           annotation(Dialog(tab = "Initialization"));

          Modelica.Blocks.Interfaces.RealOutput PEle(
            final quantity="Power",
            final unit="W")
            "Estimated power consumption" annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={110,50}), iconTransformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={110,60})));
          Modelica.Blocks.Interfaces.RealInput yPum(final unit="1")
            "Normalized speed signal for pump" annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={-110,70}), iconTransformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={-110,60})));
          Buildings.Fluid.Movers.Preconfigured.SpeedControlled_y pum(
            redeclare final package Medium = Medium,
            final m_flow_nominal=m_flow_nominal,
            final addPowerToMedium=false,
            final dp_nominal=dpPum_nominal) "Supply pump"
            annotation (Placement(transformation(extent={{0,40},{20,60}})));
          Buildings.Fluid.FixedResistances.CheckValve cheVal(
            redeclare final package Medium = Medium,
            final m_flow_nominal=m_flow_nominal,
            final dpValve_nominal=0.1*dpPum_nominal,
            final dpFixed_nominal=0) "Check valve"
            annotation (Placement(transformation(extent={{-40,40},{-20,60}})));
          Buildings.Fluid.Actuators.Valves.TwoWayPressureIndependent val(
            redeclare final package Medium = Medium,
            final m_flow_nominal=mTan_flow_nominal,
            final dpValve_nominal=dpVal_nominal,
            y_start=0)
            "Valve that throttles CHW from the supply line to the tank"
            annotation (Placement(transformation(extent={{20,-40},{0,-20}})));
          Modelica.Blocks.Interfaces.RealInput yVal(final unit="1")
            "Normalized flow signal for valve" annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={-110,-70}), iconTransformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={-110,-60})));

        protected
          Buildings.Fluid.FixedResistances.Junction jun1(
            redeclare final package Medium = Medium,
            energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,
            tau=30,
            T_start=T_start,
            m_flow_nominal={-mTan_flow_nominal,m_flow_nominal,-m_flow_nominal},
            dp_nominal={0,0,0}) "Junction" annotation (Placement(transformation(
                extent={{-10,10},{10,-10}},
                rotation=90,
                origin={-70,0})));
          Buildings.Fluid.FixedResistances.Junction jun2(
            redeclare final package Medium = Medium,
            energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,
            tau=30,
            T_start=T_start,
            m_flow_nominal={-m_flow_nominal,-mTan_flow_nominal,m_flow_nominal},
            dp_nominal={0,0,0}) "Junction" annotation (Placement(transformation(
                extent={{-10,10},{10,-10}},
                rotation=270,
                origin={70,0})));

        equation
          connect(pum.port_b, jun2.port_1)
            annotation (Line(points={{20,50},{70,50},{70,10}}, color={0,127,255}));
          connect(jun2.port_3, port_b) annotation (Line(points={{80,-1.77636e-15},{90,-1.77636e-15},
                  {90,0},{100,0}}, color={0,127,255}));
          connect(val.port_a, jun2.port_2)
            annotation (Line(points={{20,-30},{70,-30},{70,-10}}, color={0,127,255}));
          connect(jun1.port_3, port_a) annotation (Line(points={{-80,5.55112e-16},{-90,5.55112e-16},
                  {-90,0},{-100,0}}, color={0,127,255}));
          connect(jun1.port_1, val.port_b)
            annotation (Line(points={{-70,-10},{-70,-30},{0,-30}}, color={0,127,255}));
          connect(pum.y, yPum)
            annotation (Line(points={{10,62},{10,70},{-110,70}}, color={0,0,127}));
          connect(yVal, val.y) annotation (Line(points={{-110,-70},{-20,-70},{-20,-10},{
                  10,-10},{10,-18}}, color={0,0,127}));
          connect(pum.P, PEle) annotation (Line(points={{21,59},{90,59},{90,50},{110,50}},
                color={0,0,127}));
          connect(jun1.port_2, cheVal.port_a)
            annotation (Line(points={{-70,10},{-70,50},{-40,50}}, color={0,127,255}));
          connect(cheVal.port_b, pum.port_a)
            annotation (Line(points={{-20,50},{0,50}}, color={0,127,255}));
          annotation (Documentation(info="<html>
<p>
This model implements a piping connection for reversible mass flow rate between the storage plant
and the district network.
</p>
</html>",         revisions="<html>
<ul>
<li>
March 22, 2023 by Hongxiang Fu:<br/>
First implementation. This is for
<a href=\"https://github.com/lbl-srg/modelica-buildings/issues/2859\">#2859</a>.
</li>
</ul>
</html>"),         defaultComponentName = "revCon", Icon(graphics={     Rectangle(
                  extent={{-100,100},{100,-100}},
                  lineColor={0,0,0},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Rectangle(extent={{-80,40},{80,-40}}, lineColor={28,108,200}),
                Line(points={{-100,0},{-80,0}},   color={28,108,200}),
                Ellipse(
                  extent={{20,60},{60,20}},
                  lineColor={0,0,0},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Polygon(
                  points={{40,-40},{24,-30},{24,-50},{40,-40}},
                  lineColor={0,0,0},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Polygon(
                  points={{40,-40},{56,-30},{56,-50},{40,-40}},
                  lineColor={0,0,0},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Polygon(
                  points={{60,40},{40,60},{40,20},{60,40}},
                  lineColor={0,0,0},
                  fillColor={0,0,0},
                  fillPattern=FillPattern.Solid),
                Line(points={{80,0},{100,0}},     color={28,108,200}),
                Polygon(
                  points={{-6,2},{2.74617e-16,-16},{-12,-16},{-6,2}},
                  lineColor={28,108,200},
                  lineThickness=1,
                  fillColor={28,108,200},
                  fillPattern=FillPattern.Solid,
                  origin={2,44},
                  rotation=-90),
                Line(points={{-14,50},{-54,50}}, color={0,127,255}),
                Line(points={{4,-30},{-36,-30}}, color={0,127,255}),
                Polygon(
                  points={{-2,6},{16,0},{16,12},{-2,6}},
                  lineColor={28,108,200},
                  lineThickness=1,
                  fillColor={28,108,200},
                  fillPattern=FillPattern.Solid,
                  origin={-52,-36},
                  rotation=360)}));
        end ReversibleConnection;

        model TankBranch "Model of the tank branch of a storage plant"

          extends Buildings.Fluid.Interfaces.PartialFourPort(
            redeclare final package Medium1 = Medium,
            redeclare final package Medium2 = Medium);

          replaceable package Medium =
            Modelica.Media.Interfaces.PartialMedium "Medium package";

          parameter Modelica.Units.SI.MassFlowRate m_flow_nominal(min=0)
            "Nominal mass flow rate"
            annotation(Dialog(group="Nominal values"));
          parameter Modelica.Units.SI.MassFlowRate mTan_flow_nominal(min=0)
            "Nominal mass flow rate for CHW tank branch"
            annotation(Dialog(group="Nominal values"));
          parameter Modelica.Units.SI.MassFlowRate mChi_flow_nominal(min=0)
            "Nominal mass flow rate for CHW chiller branch"
            annotation(Dialog(group="Nominal values"));
          parameter Modelica.Units.SI.Temperature T_CHWS_nominal(displayUnit="degC")=
            7+273.15 "Nominal temperature of CHW supply"
            annotation(Dialog(group="Nominal values"));
          parameter Modelica.Units.SI.Temperature T_CHWR_nominal(displayUnit="degC")=
            12+273.15
            "Nominal temperature of CHW return"
            annotation(Dialog(group="Nominal values"));

          // Storage tank parameters
          parameter Modelica.Units.SI.Volume VTan "Tank volume"
            annotation(Dialog(group="Tank"));
          parameter Modelica.Units.SI.Length hTan
            "Height of tank (without insulation)"
            annotation(Dialog(group="Tank"));
          parameter Modelica.Units.SI.Length dIns "Thickness of insulation"
            annotation(Dialog(group="Tank"));
          parameter Modelica.Units.SI.ThermalConductivity kIns=0.04
            "Specific heat conductivity of insulation"
            annotation(Dialog(group="Tank"));
          parameter Integer nSeg(min=2) = 5 "Number of volume segments"
            annotation(Dialog(group="Tank"));
          parameter Modelica.Fluid.Types.Dynamics energyDynamics=
            Modelica.Fluid.Types.Dynamics.FixedInitial
            "Formulation of energy balance"
            annotation(Evaluate=true, Dialog(tab = "Dynamics", group="Conservation equations"));
          parameter Medium.AbsolutePressure p_start = Medium.p_default
            "Start value of pressure"
            annotation(Dialog(tab = "Initialization"));
          parameter Medium.Temperature T_start=T_CHWR_nominal
            "Start value of temperature"
            annotation(Dialog(tab = "Initialization"));
          parameter Modelica.Units.SI.Temperature TFlu_start[nSeg]=T_start*ones(nSeg)
            "Initial temperature of the tank segments, with TFlu_start[1] being the top segment"
            annotation (Dialog(tab="Initialization"));
          parameter Modelica.Units.SI.Time tau=1 "Time constant for mixing"
            annotation(Dialog(group="Tank"));

          Buildings.Fluid.Storage.Stratified tan(
            redeclare final package Medium = Medium,
            final allowFlowReversal=true,
            final VTan=VTan,
            final hTan=hTan,
            final dIns=dIns,
            final kIns=kIns,
            final nSeg=nSeg,
            final energyDynamics=energyDynamics,
            final p_start=p_start,
            final T_start=T_start,
            final TFlu_start=TFlu_start,
            final tau=tau,
            final m_flow_nominal=mTan_flow_nominal,
            show_T=true) "Tank"
            annotation (Placement(transformation(extent={{-10,-10},{10,10}})));
          Buildings.Fluid.Sensors.MassFlowRate senFlo(
            redeclare final package Medium = Medium,
            final allowFlowReversal=true) "Flow rate sensor for the tank,"
            annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=90,
                origin={-50,-30})));
          Modelica.Blocks.Interfaces.RealOutput mTan_flow(
            final quantity="MassFlowRate",
            final unit="kg/s") "Mass flow rate of the tank"
            annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={110,90}), iconTransformation(
                extent={{10,-10},{-10,10}},
                rotation=180,
                origin={110,100})));
          Modelica.Blocks.Interfaces.RealOutput Ql_flow(
            final quantity="HeatFlowRate",
            final unit="W")
            "Heat loss of tank (positive if heat flows from tank to ambient)"
            annotation (Placement(transformation(extent={{100,0},{120,20}}),
                iconTransformation(extent={{-10,-10},{10,10}},
                rotation=0,
                origin={110,0})));
          Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_a heaPorTop
            "Heat port tank top (outside insulation)"
            annotation (Placement(transformation(extent={{-16,34},{-4,46}}),
                iconTransformation(extent={{14,34},{26,46}})));
          Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_a heaPorSid
            "Heat port tank side (outside insulation)"
            annotation (Placement(transformation(extent={{4,-26},{16,-14}}),
                iconTransformation(extent={{26,-6},{38,6}})));
          Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_a heaPorBot
            "Heat port tank bottom (outside insulation). Leave unconnected for adiabatic condition"
            annotation (Placement(transformation(extent={{-16,-46},{-4,-34}}),
                iconTransformation(extent={{14,-46},{26,-34}})));
          Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_a[tan.nSeg] heaPorVol
            "Heat port that connects to the control volumes of the tank"
            annotation (Placement(transformation(extent={{-26,-26},{-14,-14}}),
                iconTransformation(extent={{-6,-6},{6,6}})));
          Modelica.Blocks.Interfaces.RealOutput TTan[2](
            each final quantity="Temperature",
            each displayUnit="C") "Temperatures at the tank 1: top and 2: bottom"
            annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={110,-90}), iconTransformation(
                extent={{10,-10},{-10,10}},
                rotation=180,
                origin={110,-100})));
          Modelica.Thermal.HeatTransfer.Sensors.TemperatureSensor senTemTop
            "Temperature sensor for tank top"
            annotation (Placement(transformation(extent={{20,20},{40,40}})));
          Modelica.Thermal.HeatTransfer.Sensors.TemperatureSensor senTemBot
            "Temperature sensor for tank bottom"
            annotation (Placement(transformation(extent={{20,-40},{40,-20}})));

        protected
          Buildings.Fluid.FixedResistances.Junction junSup(
            redeclare final package Medium = Medium,
            energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,
            T_start=T_CHWS_nominal,
            tau=30,
            m_flow_nominal={-mChi_flow_nominal,mTan_flow_nominal,m_flow_nominal},
            dp_nominal={0,0,0}) "Junction on the supply side"
            annotation (Placement(transformation(extent={{40,50},{60,70}})));
          Buildings.Fluid.FixedResistances.Junction junRet(
            redeclare final package Medium = Medium,
            energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,
            T_start=T_CHWR_nominal,
            tau=30,
            m_flow_nominal={-m_flow_nominal,mChi_flow_nominal,mTan_flow_nominal},
            dp_nominal={0,0,0}) "Junction on the return side" annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=180,
                origin={-50,-60})));

        equation
          connect(senFlo.m_flow, mTan_flow) annotation (Line(points={{-61,-30},{-66,-30},
                  {-66,90},{110,90}},         color={0,0,127}));
          connect(tan.Ql_flow, Ql_flow)
            annotation (Line(points={{11,7.2},{11,10},{110,10}},
                                                               color={0,0,127}));
          connect(tan.heaPorTop, heaPorTop) annotation (Line(points={{2,7.4},{2,30},{-10,
                  30},{-10,40}},color={191,0,0}));
          connect(tan.heaPorSid, heaPorSid) annotation (Line(points={{5.6,0},{5.6,-4},{10,
                  -4},{10,-20}},    color={191,0,0}));
          connect(tan.heaPorBot, heaPorBot)
            annotation (Line(points={{2,-7.4},{2,-30},{-10,-30},{-10,-40}},
                                                                 color={191,0,0}));
          connect(heaPorVol, tan.heaPorVol) annotation (Line(points={{-20,-20},{-20,-4},
                  {0,-4},{0,0}},         color={191,0,0}));
          connect(junRet.port_3, senFlo.port_a)
            annotation (Line(points={{-50,-50},{-50,-40}}, color={0,127,255}));
          connect(senFlo.port_b, tan.port_a)
            annotation (Line(points={{-50,-20},{-50,0},{-10,0}}, color={0,127,255}));
          connect(tan.port_b, junSup.port_3)
            annotation (Line(points={{10,0},{50,0},{50,50}}, color={0,127,255}));
          connect(tan.heaPorTop, senTemTop.port)
            annotation (Line(points={{2,7.4},{2,30},{20,30}}, color={191,0,0}));
          connect(tan.heaPorBot, senTemBot.port)
            annotation (Line(points={{2,-7.4},{2,-30},{20,-30}}, color={191,0,0}));
          connect(senTemTop.T, TTan[1]) annotation (Line(points={{41,30},{70,30},{70,-90},
                  {110,-90},{110,-92.5}}, color={0,0,127}));
          connect(senTemBot.T, TTan[2]) annotation (Line(points={{41,-30},{70,-30},{70,-87.5},
                  {110,-87.5}}, color={0,0,127}));
          connect(port_b2, junRet.port_2)
            annotation (Line(points={{-100,-60},{-60,-60}}, color={0,127,255}));
          connect(junRet.port_1, port_a2)
            annotation (Line(points={{-40,-60},{100,-60}}, color={0,127,255}));
          connect(junSup.port_2, port_b1)
            annotation (Line(points={{60,60},{100,60}}, color={0,127,255}));
          connect(junSup.port_1, port_a1)
            annotation (Line(points={{40,60},{-100,60}}, color={0,127,255}));
          annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},
                    {100,100}}),       graphics={
                                       Rectangle(
                  extent={{-100,100},{100,-100}},
                  lineColor={0,0,0},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Line(points={{-100,-60},{100,-60}}, color={28,108,200}),
                Line(points={{-100,60},{100,60}}, color={28,108,200}),
                Line(points={{-42,-60}}, color={28,108,200}),
                Line(points={{-60,-58},{-60,50},{0,50},{0,-52},{60,-52},{60,60}}, color=
                     {28,108,200}),
                Rectangle(
                  extent={{-28,40},{32,-40}},
                  lineColor={0,0,0},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Line(
                  points={{38,0},{80,0},{100,0}},
                  color={127,0,0},
                  pattern=LinePattern.Dot),
                Line(
                  points={{26,-44},{52,-44},{52,0}},
                  color={127,0,0},
                  pattern=LinePattern.Dot),
                Line(
                  points={{26,44},{52,44},{52,-2}},
                  color={127,0,0},
                  pattern=LinePattern.Dot)}),                            Diagram(
                coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,100}})),
            defaultComponentName = "tanBra",
            Documentation(info="<html>
<p>
This model is part of a storage plant. This branch has a stratified tank.
This tank can potentially be charged remotely by a chiller from the district
CHW network, or by a chiller that is local to the energy transfer station that contains this tank.
</p>
</html>",         revisions="<html>
<ul>
<li>
October 4, 2022 by Hongxiang Fu:<br/>
First implementation. This is for
<a href=\"https://github.com/lbl-srg/modelica-buildings/issues/2859\">#2859</a>.
</li>
</ul>
</html>"));
        end TankBranch;

        package Validation "Package containing validation models"
          extends Modelica.Icons.ExamplesPackage;
          model IdealUser "Test model for the dummy user"
            extends Modelica.Icons.Example;

            package Medium = Buildings.Media.Water "Medium model";

            parameter Modelica.Units.SI.MassFlowRate m_flow_nominal=1
              "Nominal mass flow rate";
            parameter Modelica.Units.SI.PressureDifference dp_nominal=500000
              "Nominal pressure difference";
            parameter Modelica.Units.SI.AbsolutePressure p_Pressurisation=300000
              "Pressurisation point";
            parameter Modelica.Units.SI.Temperature T_CHWR_nominal(
              final displayUnit="degC")=12+273.15
              "Nominal temperature of CHW return";
            parameter Modelica.Units.SI.Temperature T_CHWS_nominal(
              final displayUnit="degC")=7+273.15
              "Nominal temperature of CHW supply";
            parameter Boolean allowFlowReversal=false
              "Flow reversal setting";
            parameter Modelica.Units.SI.Power QCooLoa_flow_nominal=5*4200*0.9
              "Nominal cooling load of one consumer";

            estcp.DHC.Plants.Cooling.BaseClasses.IdealUser ideUse(
              redeclare final package Medium = Medium,
              final m_flow_nominal=m_flow_nominal,
              T_CHWR_nominal=T_CHWR_nominal,
              final dp_nominal=dp_nominal) "Ideal user" annotation (Placement(
                  transformation(extent={{-10,-10},{10,10}}, rotation=0)));
            Buildings.Fluid.Sources.Boundary_pT sin(
              redeclare final package Medium = Medium,
              final p=p_Pressurisation,
              final T=T_CHWR_nominal,
              nPorts=1) "Sink representing CHW return line"
              annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={-70,-30})));
            Buildings.Fluid.Sources.Boundary_pT sou(
              redeclare final package Medium = Medium,
              final p=p_Pressurisation+dp_nominal,
              final T=T_CHWS_nominal,
              nPorts=1) "Source representing CHW supply line" annotation (Placement(
                  transformation(
                  extent={{10,10},{-10,-10}},
                  rotation=180,
                  origin={-70,30})));
            Modelica.Blocks.Sources.TimeTable mPre_flow(table=[0*3600,0; 0.5*3600,0; 0.5*
                  3600,m_flow_nominal; 0.75*3600,m_flow_nominal; 0.75*3600,0; 1*3600,0])
              "Prescribed flow rate representing cooling load"
              annotation (Placement(transformation(extent={{-80,60},{-60,80}})));
          equation
            connect(sou.ports[1],ideUse. port_a) annotation (Line(points={{-60,30},{-40,
                    30},{-40,6},{-10,6}},                      color={0,127,255}));
            connect(ideUse.port_b, sin.ports[1])
              annotation (Line(points={{-10,-6},{-40,-6},{-40,-30},{-60,-30}},
                                                       color={0,127,255}));
            connect(mPre_flow.y, ideUse.mPre_flow) annotation (Line(points={{-59,70},{-20,
                    70},{-20,8},{-11,8}}, color={0,0,127}));
          annotation(__Dymola_Commands(file="modelica://Buildings/Resources/Scripts/Dymola/Experimental/DHC/Plants/Cooling/BaseClasses/Validation/IdealUser.mos"
                  "Simulate and plot"),
          experiment(Tolerance=1e-06, StopTime=3600), Documentation(info="<html>
<p>
This is a simple test model for the ideal user.
</p>
</html>",           revisions="<html>
<ul>
<li>
July 31, 2023, by Michael Wetter:<br/>
Revised implementation, removed unused parameter.
</li>
<li>
February 18, 2022 by Hongxiang Fu:<br/>
First implementation. This is for
<a href=\"https://github.com/lbl-srg/modelica-buildings/issues/2859\">#2859</a>.
</li>
</ul>
</html>"));
          end IdealUser;
          annotation (Documentation(info="<html>
Package containing validation models for the base classes.
</html>"));
        end Validation;
        annotation (Documentation(info="<html>
Package containing base classes.
</html>"));
      end BaseClasses;
      annotation (
        preferredView="info",
        Documentation(
          info="<html>
<p>
This package contains models for central plants producing chilled water.
</p>
</html>"));
    end Cooling;

    package Heating "Package of models for central heating production"
      extends Modelica.Icons.Package;
      model SewageHeatRecovery
        "Model for sewage heat recovery plant"
        extends estcp.DHC.Plants.BaseClasses.PartialPlant(
          final have_fan=false,
          final have_pum=true,
          final have_eleHea=false,
          final have_eleCoo=false,
          final have_weaBus=false,
          final typ=estcp.DHC.Types.DistrictSystemType.CombinedGeneration5);

        parameter Modelica.Units.SI.MassFlowRate mSew_flow_nominal
          "Sewage water nominal mass flow rate"
          annotation (Dialog(group="Nominal conditions"));
        parameter Modelica.Units.SI.MassFlowRate mDis_flow_nominal
          "District water nominal mass flow rate"
          annotation (Dialog(group="Nominal conditions"));
        parameter Modelica.Units.SI.PressureDifference dpSew_nominal
          "Sewage side pressure drop at nominal mass flow rate"
          annotation (Dialog(group="Nominal conditions"));
        parameter Modelica.Units.SI.PressureDifference dpDis_nominal
          "District side pressure drop at nominal mass flow rate"
          annotation (Dialog(group="Nominal conditions"));
        parameter Modelica.Units.SI.Efficiency epsHex "Heat exchanger effectiveness";
        // IO CONNECTORS
        Buildings.Controls.OBC.CDL.Interfaces.RealInput TSewWat(
          final unit="K",
          displayUnit="degC")
          "Sewage water temperature"
          annotation (Placement(transformation(
              extent={{-20,-20},{20,20}},
              rotation=0,
              origin={-400,240}), iconTransformation(
              extent={{-40,-40},{40,40}},
              rotation=0,
              origin={-340,220})));
        Buildings.Controls.OBC.CDL.Interfaces.RealInput mPum_flow(
          final unit="kg/s")
          "Pumps mass flow rate"
          annotation (Placement(transformation(
              extent={{-20,-20},{20,20}},
              rotation=0,
              origin={-400,160}),iconTransformation(
              extent={{-40,-40},{40,40}},
              rotation=0,
              origin={-340,140})));
        Buildings.Controls.OBC.CDL.Interfaces.RealOutput dH_flow(final unit="W")
          "Variation of enthalpy flow rate across HX (leaving - entering)"
          annotation (
            Placement(transformation(extent={{300,60},{340,100}}),
              iconTransformation(extent={{300,80},{380,160}})));
        // COMPONENTS
        Buildings.Fluid.HeatExchangers.ConstantEffectiveness hex(
          redeclare final package Medium1 = Medium,
          redeclare final package Medium2 = Medium,
          final allowFlowReversal1=allowFlowReversal,
          final allowFlowReversal2=allowFlowReversal,
          final m1_flow_nominal=mSew_flow_nominal,
          final m2_flow_nominal=mDis_flow_nominal,
          final dp1_nominal=dpSew_nominal,
          final dp2_nominal=dpDis_nominal,
          final eps=epsHex) "Heat exchanger (primary is sewage water side)"
          annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=0,
              origin={0,14})));
        estcp.DHC.EnergyTransferStations.BaseClasses.Pump_m_flow pumDis(
          redeclare final package Medium = Medium,
          final m_flow_nominal=mDis_flow_nominal,
          final dp_nominal=dpDis_nominal,
          final allowFlowReversal=allowFlowReversal) "District water pump"
          annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={80,-40})));
        Buildings.Fluid.Sources.Boundary_pT souSew(
          redeclare final package Medium = Medium,
          final use_T_in=true,
          final nPorts=2) "Source of sewage water" annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={-70,76})));
        estcp.DHC.EnergyTransferStations.BaseClasses.Pump_m_flow pumSew(
          redeclare final package Medium = Medium,
          final m_flow_nominal=mSew_flow_nominal,
          final dp_nominal=dpSew_nominal,
          final allowFlowReversal=allowFlowReversal) "Sewage water pump"
          annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={40,80})));
        Buildings.Fluid.Sensors.TemperatureTwoPort senTSewOut(
          redeclare final package Medium = Medium,
          final allowFlowReversal=allowFlowReversal,
          final m_flow_nominal=mSew_flow_nominal,
          tau=0) annotation (Placement(transformation(
              extent={{-6,6},{6,-6}},
              rotation=180,
              origin={-40,20})));
        estcp.DHC.Networks.BaseClasses.DifferenceEnthalpyFlowRate senDifEntFlo(
            redeclare package Medium1 = Medium, final m_flow_nominal=
              mDis_flow_nominal) "Variation of enthalpy flow rate" annotation (
            Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=-90,
              origin={0,-16})));
       Buildings.Controls.OBC.CDL.Reals.MultiSum sumPPum(nin=2) "Sum pump power"
          annotation (Placement(transformation(extent={{260,150},{280,170}})));
      equation
        connect(senTSewOut.port_b, souSew.ports[1])
          annotation (Line(points={{-46,20},{-60,20},{-60,75}}, color={0,127,255}));
        connect(souSew.ports[2], pumSew.port_a)
          annotation (Line(points={{-60,77},{-60,80},{30,80}},
                                                       color={0,127,255}));
        connect(souSew.T_in, TSewWat) annotation (Line(points={{-82,80},{-100,80},{
                -100,240},{-400,240}},
                                color={0,0,127}));
        connect(mPum_flow, pumSew.m_flow_in)
          annotation (Line(points={{-400,160},{40,160},{40,92}},
                                                             color={0,0,127}));
        connect(pumSew.port_b, hex.port_a1) annotation (Line(points={{50,80},{60,80},
                {60,20},{10,20}},                color={0,127,255}));
        connect(hex.port_b1, senTSewOut.port_a) annotation (Line(points={{-10,20},{
                -34,20}},               color={0,127,255}));
        connect(mPum_flow, pumDis.m_flow_in)
          annotation (Line(points={{-400,160},{80,160},{80,-28}},
                                                               color={0,0,127}));
        connect(senDifEntFlo.dH_flow, dH_flow) annotation (Line(points={{3,-28},{3,
                -78},{258,-78},{258,80},{320,80}},
                                              color={0,0,127}));
        connect(senDifEntFlo.port_b2, hex.port_a2) annotation (Line(points={{-6,-6},{-6,
                0},{-20,0},{-20,8},{-10,8}},         color={0,127,255}));
        connect(hex.port_b2, senDifEntFlo.port_a1) annotation (Line(points={{10,8},{20,
                8},{20,0},{6,0},{6,-6}},         color={0,127,255}));
        connect(port_aSerAmb, senDifEntFlo.port_a2) annotation (Line(points={{-380,40},
                {-280,40},{-280,-40},{-6,-40},{-6,-26}}, color={0,127,255}));
        connect(senDifEntFlo.port_b1, pumDis.port_a)
          annotation (Line(points={{6,-26},{6,-40},{70,-40}}, color={0,127,255}));
        connect(pumDis.port_b, port_bSerAmb) annotation (Line(points={{90,-40},{280,
                -40},{280,40},{380,40}},
                                    color={0,127,255}));
        connect(sumPPum.y, PPum) annotation (Line(points={{282,160},{294,160},{294,
                160},{400,160}}, color={0,0,127}));
        connect(pumSew.P, sumPPum.u[1]) annotation (Line(points={{51,89},{238,89},{
                238,159.5},{258,159.5}},
                                     color={0,0,127}));
        connect(pumDis.P, sumPPum.u[2]) annotation (Line(points={{91,-31},{240,-31},{
                240,160.5},{258,160.5}},
                                     color={0,0,127}));
        annotation (
        DefaultComponentName="pla",
        Icon(coordinateSystem(preserveAspectRatio=false),
          graphics={
              Rectangle(
                extent={{-100,100},{100,-100}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid)}), Diagram(coordinateSystem(
                preserveAspectRatio=false)),
          Documentation(info="<html>
<p>
Model of sewage heat recovery plant with sewage mass flow rate and temperature as an input.
</p>
</html>",       revisions="<html>
<ul>
<li>
January 16, 2020, by Michael Wetter:<br/>
First implementation.
</li>
</ul>
</html>"));
      end SewageHeatRecovery;
    annotation (preferredView="info", Documentation(info="<html>
<p>
This package contains models for central plants producing hot water.
</p>
</html>"));
    end Heating;

    package Reservoir "Package of models for district-scale thermal reservoirs"
      extends Modelica.Icons.Package;
      model BoreField "Geothermal borefield model"
        extends Buildings.Fluid.Geothermal.Borefields.TwoUTubes(
          final energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,
          final tLoaAgg(displayUnit="h") = 3600,
          final nSeg=5,
          TExt0_start=282.55,
          final z0=10,
          final dT_dz=0.02,
          final dynFil=true,
          borFieDat(
            filDat=Buildings.Fluid.Geothermal.Borefields.Data.Filling.Bentonite(
                kFil=2.0,
                cFil=3040,
                dFil=1450),
            soiDat=Buildings.Fluid.Geothermal.Borefields.Data.Soil.SandStone(
                kSoi=2.3,
                cSoi=1000,
                dSoi=2600),
            conDat=Buildings.Fluid.Geothermal.Borefields.Data.Configuration.Example(
              borCon=Buildings.Fluid.Geothermal.Borefields.Types.BoreholeConfiguration.DoubleUTubeParallel,
              dp_nominal=35000,
              hBor=300,
              rBor=0.095,
              nBor=350,
              cooBor=cooBor,
              dBor=1,
              rTub=0.02,
              kTub=0.5,
              eTub=0.0037,
              xC=0.05)),
          show_T=true);
        /*
  Some parameters (such as nBor) cannot be propagated down to
  borFieDat.conDat otherwise Dymola fails to expand.
  We assign them literally within borFieDat.conDat and propagate them up here
  to compute dependent parameters.
  */
        parameter Integer nBor = borFieDat.conDat.nBor
          "Number of boreholes"
          annotation(Evaluate=true);
        parameter Real dxyBor = 10
          "Distance between boreholes";
        final parameter Modelica.Units.SI.Length cooBor[nBor,2]={dxyBor*{mod(i - 1,
            10),floor((i - 1)/10)} for i in 1:nBor}
          "Cartesian coordinates of the boreholes in meters";
        Buildings.Controls.OBC.CDL.Interfaces.RealOutput Q_flow(final unit="W")
          "Rate at which heat is extracted from soil"
          annotation (Placement(transformation(extent={{100,-50},{120,-30}}),
            iconTransformation(extent={{100,-64},{140,-24}})));
      equation
        connect(gaiQ_flow.y, Q_flow) annotation (Line(points={{1,80},{14,80},{14,54},{
                96,54},{96,-40},{110,-40}},
                                          color={0,0,127}));
        annotation (Documentation(info="<html>
<p>
This model represents a borefield composed of 350 boreholes,
with the following main assumptions.
</p>
<ul>
<li>
The soil is made of sandstone.
</li>
<li>
The boreholes are filled with a bentonite grout.
</li>
<li>
The boreholes have a height of 300 m and a diameter of 190 mm.
They are discretized vertically in five segments.
</li>
<li>
A distance of 10 m between each borehole is considered.
</li>
<li>
HDPE pipes with a diameter of 40 mm are considered, in a
double U-tube parallel configuration.
</li>
</ul>
</html>",       revisions="<html>
<ul>
<li>
May 31, 2023, by Michael Wetter:<br/>
Removed <code>final</code> modifier for <code>borFieDat</code> to allow record to be replaced
in models that extend this model.
</li>
<li>
February 23, 2021, by Antoine Gautier:<br/>
Updated documentation.
</li>
<li>
January 12, 2020, by Michael Wetter:<br/>
Added documentation.
</li>
</ul>
</html>"));
      end BoreField;
    annotation (preferredView="info", Documentation(info="<html>
<p>
This package contains models for district scale thermal reservoirs.
</p>
</html>"));
    end Reservoir;

    package Steam "Package with models for steam plants"
      extends Modelica.Icons.VariantsPackage;

      model SingleBoiler "A generic steam plant with a single boiler that discharges
  saturated steam"
        extends estcp.DHC.Plants.BaseClasses.PartialPlant(
          final typ=estcp.DHC.Types.DistrictSystemType.HeatingGeneration1,
          redeclare replaceable package MediumHea_b = Buildings.Media.Steam,
          final have_fan=false,
          final have_pum=true,
          final nFue=1,
          final fue={fueBoi},
          final have_eleHea=false,
          final have_eleCoo=false,
          final have_weaBus=false);

        parameter Buildings.Fluid.Data.Fuels.Generic fueBoi=
          Buildings.Fluid.Data.Fuels.NaturalGasLowerHeatingValue()
          "Boiler fuel type"
           annotation (choicesAllMatching = true, Dialog(enable=have_fue));

        // Nominal values
        parameter Modelica.Units.SI.MassFlowRate m_flow_nominal=1
          "Nominal mass flow rate";
        parameter Modelica.Units.SI.Power Q_flow_nominal=m_flow_nominal*(
            MediumHea_b.specificEnthalpy(MediumHea_b.setState_pTX(
              p=pSteSet,
              T=TSat,
              X=MediumHea_b.X_default)) -
            Medium.specificEnthalpy(Medium.setState_pTX(
              p=pSteSet,
              T=TSat,
              X=Medium.X_default)))
          "Nominal heating power";

        // Setpoints
        parameter Modelica.Units.SI.AbsolutePressure pSteSet=300000
          "Steam pressure setpoint";
        final parameter Modelica.Units.SI.Temperature TSat=
          MediumHea_b.saturationTemperature(pSteSet)
          "Saturation temperature at pressure setpoint";
        parameter Modelica.Units.SI.AbsolutePressure pTanFW=101325
          "Pressure of feedwater tank";
        parameter Modelica.Units.SI.Volume VBoiWatSet=VBoi/2
          "Setpoint for liquid water volume in the boiler";

        // System sizing
        parameter Modelica.Units.SI.Volume VBoi=3
          "Total drum volume of steam boiler";
        parameter Real boiSca = 1.25 "Boiler heat capacity scaling factor";
        parameter Modelica.Units.SI.Mass mDry = 1.5E-3*Q_flow_nominal
          "Mass of boiler that will be lumped to water heat capacity"
          annotation(Dialog(tab = "Dynamics",
            enable = not (energyDynamics == Modelica.Fluid.Types.Dynamics.SteadyState)));
        parameter Buildings.Fluid.Movers.Data.Generic per(
          pressure(
            V_flow=(m_flow_nominal/1000)*{0.4,0.6,0.8,1.0},
            dp=(pSteSet-pTanFW)*{1.34,1.27,1.17,1.0}))
          "Performance data for the feedwater pump";

        // Initial conditions
        parameter Modelica.Units.SI.Volume VTanFW_start=1
          "Setpoint for liquid water volume in the boiler"
          annotation(Dialog(tab = "Initialization"));
        parameter Modelica.Media.Interfaces.Types.AbsolutePressure pBoi_start=pTanFW
          "Start value of boiler pressure"
          annotation(Dialog(tab = "Initialization"));
        parameter Real yPum_start=0.7 "Initial value of pump speed"
          annotation(Dialog(tab="Initialization"));

        // Dynamics
        parameter Modelica.Fluid.Types.Dynamics energyDynamics=
          Modelica.Fluid.Types.Dynamics.DynamicFreeInitial
          "Type of energy balance: dynamic (3 initialization options) or steady state"
          annotation (Evaluate=true,Dialog(tab="Dynamics",group="Equations"));
        parameter Modelica.Fluid.Types.Dynamics massDynamics=energyDynamics
          "Type of mass balance: dynamic (3 initialization options) or steady state"
          annotation (Evaluate=true,Dialog(tab="Dynamics",group="Equations"));

        // Boiler controller
        parameter Modelica.Blocks.Types.SimpleController controllerTypeBoi=
          Modelica.Blocks.Types.SimpleController.PI "Type of controller"
          annotation (Dialog(tab="Control", group="Boiler"));
        parameter Real kBoi(min=0) = 10 "Gain of controller"
          annotation (Dialog(tab="Control", group="Boiler"));
        parameter Modelica.Units.SI.Time TiBoi(min=Modelica.Constants.small)=120
          "Time constant of Integrator block"
           annotation (Dialog(enable=
                controllerTypeBoi == Modelica.Blocks.Types.SimpleController.PI or
                controllerTypeBoi == Modelica.Blocks.Types.SimpleController.PID,
                tab="Control", group="Boiler"));
        parameter Modelica.Units.SI.Time TdBoi(min=0)=10
          "Time constant of Derivative block" annotation (Dialog(enable=
                controllerTypeBoi == Modelica.Blocks.Types.SimpleController.PD or
                controllerTypeBoi == Modelica.Blocks.Types.SimpleController.PID,
                tab="Control", group="Boiler"));
        parameter Real wpBoi(min=0) = 1 "Set-point weight for Proportional block (0..1)"
          annotation (Dialog(tab="Control", group="Boiler"));
        parameter Real wdBoi(min=0) = 0 "Set-point weight for Derivative block (0..1)"
          annotation(Dialog(enable=
            controllerTypeBoi==.Modelica.Blocks.Types.SimpleController.PD or
            controllerTypeBoi==.Modelica.Blocks.Types.SimpleController.PID,
            tab="Control", group="Boiler"));
        parameter Real NiBoi(min=100*Modelica.Constants.eps) = 0.9
          "Ni*Ti is time constant of anti-windup compensation"
           annotation(Dialog(enable=
             controllerTypeBoi==.Modelica.Blocks.Types.SimpleController.PI or
             controllerTypeBoi==.Modelica.Blocks.Types.SimpleController.PID,
             tab="Control", group="Boiler"));
        parameter Real NdBoi(min=100*Modelica.Constants.eps) = 10
          "The higher Nd, the more ideal the derivative block"
          annotation(Dialog(enable=
            controllerTypeBoi==.Modelica.Blocks.Types.SimpleController.PD or
            controllerTypeBoi==.Modelica.Blocks.Types.SimpleController.PID,
            tab="Control", group="Boiler"));

        // Feedwater pump controller
        parameter Modelica.Blocks.Types.SimpleController controllerTypePum=
          Modelica.Blocks.Types.SimpleController.PI "Type of controller"
          annotation (Dialog(tab="Control", group="Pump"));
        parameter Real kPum(min=0) = 5 "Gain of controller"
          annotation (Dialog(tab="Control", group="Pump"));
        parameter Modelica.Units.SI.Time TiPum(min=Modelica.Constants.small)=120
          "Time constant of Integrator block"
          annotation (Dialog(enable=
            controllerTypePum == Modelica.Blocks.Types.SimpleController.PI or
            controllerTypePum == Modelica.Blocks.Types.SimpleController.PID,
            tab="Control", group="Pump"));
        parameter Modelica.Units.SI.Time TdPum(min=0)=0.1
          "Time constant of Derivative block"
          annotation (Dialog(enable=
            controllerTypePum == Modelica.Blocks.Types.SimpleController.PD or
            controllerTypePum == Modelica.Blocks.Types.SimpleController.PID,
            tab="Control", group="Pump"));
        parameter Real wpPum(min=0) = 1 "Set-point weight for Proportional block (0..1)"
          annotation (Dialog(tab="Control", group="Pump"));
        parameter Real wdPum(min=0) = 0 "Set-point weight for Derivative block (0..1)"
          annotation(Dialog(enable=
            controllerTypePum==.Modelica.Blocks.Types.SimpleController.PD or
            controllerTypePum==.Modelica.Blocks.Types.SimpleController.PID,
            tab="Control", group="Pump"));
        parameter Real NiPum(min=100*Modelica.Constants.eps) = 0.9
          "Ni*Ti is time constant of anti-windup compensation"
           annotation(Dialog(enable=
             controllerTypePum==.Modelica.Blocks.Types.SimpleController.PI or
             controllerTypePum==.Modelica.Blocks.Types.SimpleController.PID,
             tab="Control", group="Pump"));
        parameter Real NdPum(min=100*Modelica.Constants.eps) = 10
          "The higher Nd, the more ideal the derivative block"
          annotation(Dialog(enable=
            controllerTypePum==.Modelica.Blocks.Types.SimpleController.PD or
            controllerTypePum==.Modelica.Blocks.Types.SimpleController.PID,
            tab="Control", group="Pump"));

        // Pump can have reverse flow at start up
        Buildings.Fluid.Movers.SpeedControlled_y pumFW(
          redeclare final package Medium = Medium,
          final energyDynamics=energyDynamics,
          p_start=pTanFW,
          final allowFlowReversal=allowFlowReversal,
          final per=per,
          final y_start=yPum_start)
          "Feedwater pump"
          annotation (Placement(transformation(extent={{-40,-10},{-20,10}})));

        // At start up, water leaves port_a, see Buildings.Experimental.DHC.Examples.Steam.SingleBoiler
        estcp.DHC.Plants.Steam.BaseClasses.BoilerPolynomial boi(
          redeclare final package MediumSte = MediumHea_b,
          redeclare final package MediumWat = Medium,
          final energyDynamics=energyDynamics,
          final massDynamics=massDynamics,
          final allowFlowReversal=allowFlowReversal,
          final p_start=pTanFW,
          fixed_p_start=true,
          final fue=fueBoi,
          final m_flow_nominal=m_flow_nominal,
          final dp_nominal=3000,
          final Q_flow_nominal=Q_flow_nominal*boiSca,
          final V=VBoi,
          final mDry=mDry) "Steam boiler"
          annotation (Placement(transformation(extent={{140,-10},{160,10}})));
        Buildings.Controls.Continuous.LimPID conPum(
          final controllerType=controllerTypePum,
          final k=kPum,
          final Ti=TiPum,
          final Td=TdPum,
          final wp=wpPum,
          final wd=wdPum,
          final Ni=NiPum,
          final Nd=NdPum,
          initType=Modelica.Blocks.Types.Init.InitialOutput,
          y_start=yPum_start)
          "Pump control"
          annotation (Placement(transformation(extent={{-80,100},{-60,120}})));
        Modelica.Blocks.Math.Gain VNor(final k=1/VBoiWatSet)
          "Normalized volume setpoint"
          annotation (Placement(transformation(extent={{160,60},{140,80}})));
        Buildings.Controls.Continuous.LimPID conBoi(
          final controllerType=controllerTypeBoi,
          final k=kBoi,
          final Ti=TiBoi,
          final Td=TdBoi,
          final wp=wpBoi,
          final wd=wdBoi,
          final Ni=NiBoi,
          final Nd=NdBoi)
          "Boiler control"
          annotation (Placement(transformation(extent={{80,-82},{100,-62}})));
        Modelica.Blocks.Math.Gain PNor(final k=1/pSteSet)
          "Normalized pressure setpoint"
          annotation (Placement(transformation(extent={{160,-100},{140,-80}})));
        Buildings.Fluid.Sensors.Pressure senPreSte(
          redeclare final package Medium = MediumHea_b)
          "Steam pressure sensor"
          annotation (Placement(transformation(extent={{220,-80},{200,-100}})));
        Modelica.Blocks.Sources.Constant uni(final k=1) "Unitary"
          annotation (Placement(transformation(extent={{-180,100},{-160,120}})));
        Buildings.Fluid.Storage.ExpansionVessel tanFW(
          redeclare final package Medium = Medium,
          final V_start=VTanFW_start,
          final p_start=pTanFW)
          "Feedwater tank"
          annotation (Placement(transformation(extent={{-80,20},{-60,40}})));
        Buildings.Fluid.FixedResistances.CheckValve cheVal(
          redeclare final package Medium = Medium,
          final allowFlowReversal=allowFlowReversal,
          final m_flow_nominal=m_flow_nominal,
          dpValve_nominal=6000,
          rhoStd=Medium.density_pTX(
              pSteSet,
              MediumHea_b.saturationTemperature(pSteSet),
              Medium.X_default))
          "Check valve"
          annotation (Placement(transformation(extent={{38,-10},{58,10}})));
      equation
        connect(port_aSerHea, pumFW.port_a)
          annotation (Line(points={{-300,0},{-40,0}}, color={0,127,255}));
        connect(boi.port_b, port_bSerHea)
          annotation (Line(points={{160,0},{300,0}}, color={0,127,255}));
        connect(conPum.y, pumFW.y)
          annotation (Line(points={{-59,110},{-30,110},{-30,12}},
                                                                color={0,0,127}));
        connect(uni.y, conPum.u_s)
          annotation (Line(points={{-159,110},{-82,110}},
                                                        color={0,0,127}));
        connect(VNor.y, conPum.u_m)
          annotation (Line(points={{139,70},{-70,70},{-70,98}}, color={0,0,127}));
        connect(boi.VLiq, VNor.u)
          annotation (Line(points={{161,6},{180,6},{180,70},{162,70}},
            color={0,0,127}));
        connect(senPreSte.port, boi.port_b)
          annotation (Line(points={{210,-80},{210,0},{160,0}}, color={0,127,255}));
        connect(senPreSte.p, PNor.u)
          annotation (Line(points={{199,-90},{162,-90}}, color={0,0,127}));
        connect(PNor.y, conBoi.u_m)
          annotation (Line(points={{139,-90},{90,-90},{90,-84}}, color={0,0,127}));
        connect(conBoi.y, boi.y)
          annotation (Line(points={{101,-72},{120,-72},{120,8},{138,8}},
            color={0,0,127}));
        connect(uni.y, conBoi.u_s)
          annotation (Line(points={{-159,110},{-150,110},{-150,-72},{78,-72}},
            color={0,0,127}));
        connect(QFue_flow, boi.QFueFlo)
          annotation (Line(points={{320,120},{200,120},{200,9},{161,9}},
            color={0,0,127}));
        connect(PPum, pumFW.P)
          annotation (Line(points={{320,160},{0,160},{0,9},{-19,9}},
            color={0,0,127}));
        connect(tanFW.port_a, pumFW.port_a)
          annotation (Line(points={{-70,20},{-70,0},{-40,0}}, color={0,127,255}));
        connect(pumFW.port_b, cheVal.port_a)
          annotation (Line(points={{-20,0},{38,0}}, color={0,127,255}));
        connect(cheVal.port_b, boi.port_a)
          annotation (Line(points={{58,0},{140,0},{140,0}}, color={0,127,255}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)),
          defaultComponentName="pla",
          Diagram(coordinateSystem(preserveAspectRatio=false)),
          Documentation(info="<html>
<p>
This is a generic steam plant model that can be used in
district heating system simulations. The model contains a
feedwater tank, feedwater pump, check valve, and a boiler.
The boiler is designed to discharge saturated steam vapor.
For controls, the feedwater pump maintains the water volume
setpoint in the drum boiler, while the boiler control
maintains the discharge pressure setpoint.
</p>
<h4>References </h4>
<p>
Kathryn Hinkelman, Saranya Anbarasu, Michael Wetter, Antoine Gautier, Wangda Zuo. 2022.
&ldquo;A Fast and Accurate Modeling Approach for Water and Steam
Thermodynamics with Practical Applications in District Heating System Simulation,&rdquo;
<i>Energy</i>, 254(A), pp. 124227.
<a href=\"https://doi.org/10.1016/j.energy.2022.124227\">10.1016/j.energy.2022.124227</a>
</p>
<p>
Kathryn Hinkelman, Saranya Anbarasu, Michael Wetter, Antoine Gautier, Baptiste Ravache, Wangda Zuo 2022.
&ldquo;Towards Open-Source Modelica Models For Steam-Based District Heating Systems.&rdquo;
<i>Proc. of the 1st International Workshop On Open Source Modelling And Simulation Of
Energy Systems (OSMSES 2022)</i>, Aachen, German, April 4-5, 2022.
<a href=\"https://doi.org/10.1109/OSMSES54027.2022.9769121\">10.1109/OSMSES54027.2022.9769121</a>
</p>
</html>",       revisions="<html>
<ul>
<li>
September 15, 2023, by Kathryn Hinkelman:<br/>
Added publication references.
</li>
<li>
July 18, 2023, by Michael Wetter:<br/>
Corrected assignment of <code>allowFlowReversal</code>, and set start pressure
of boiler to be equal to start pressure of feed water tank. Otherwise, backflow
occurs at the start of the simulation.
</li>
<li>
March 3, 2022 by Kathryn Hinkelman:<br/>
First implementation.
</li>
</ul>
</html>"));
      end SingleBoiler;

      package Examples "Example models for steam plants"
        extends Modelica.Icons.ExamplesPackage;

        model SingleBoiler "Example model to demonstrate the single-boiler steam plant 
  in a single closed loop"
          extends Modelica.Icons.Example;

          package MediumSte = Buildings.Media.Steam (
            p_default=300000,
            T_default=273.15+200,
            h_default=2700000)
            "Steam medium";
          package MediumWat =
            Buildings.Media.Specialized.Water.TemperatureDependentDensity (
              p_default=101325,
              T_default=273.15+100)
            "Water medium";

          parameter Modelica.Units.SI.AbsolutePressure pSat=300000
            "Saturation pressure";
          parameter Modelica.Units.SI.Temperature TSat=
             MediumSte.saturationTemperature(pSat)
             "Saturation temperature";

          parameter Modelica.Units.SI.MassFlowRate m_flow_nominal=1
            "Nominal mass flow rate of plant";
          parameter Modelica.Units.SI.PressureDifference dpPip=6000
            "Pressure drop in the condensate return pipe";
          // pumps
          parameter Buildings.Fluid.Movers.Data.Generic perPumFW(
            pressure(
              V_flow=(m_flow_nominal/1000)*{0.4,0.6,0.8,1.0},
              dp=(pSat-101325)*{1.34,1.27,1.17,1.0}))
            "Performance data for feedwater pump";
            parameter Buildings.Fluid.Movers.Data.Generic perPumCNR(
           pressure(
             V_flow=(m_flow_nominal/1000)*{0,1,2},
             dp=dpPip*{2,1,0}))
            "Performance data for condensate return pumps";

          estcp.DHC.Plants.Steam.SingleBoiler pla(
            redeclare final package Medium = MediumWat,
            redeclare final package MediumHea_b = MediumSte,
            allowFlowReversal=true,
            final m_flow_nominal=m_flow_nominal,
            final pSteSet=pSat,
            final per=perPumFW,
            energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,
            massDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial) "Plant"
            annotation (Placement(transformation(extent={{-20,20},{0,40}})));
          estcp.DHC.Loads.Steam.BaseClasses.ControlVolumeCondensation vol(
            redeclare final package MediumSte = MediumSte,
            redeclare final package MediumWat = MediumWat,
            energyDynamics=Modelica.Fluid.Types.Dynamics.SteadyState,
            final p_start=pSat,
            final m_flow_nominal=m_flow_nominal,
            V=1) "Volume"
            annotation (Placement(transformation(extent={{20,40},{40,20}})));
          Buildings.Fluid.FixedResistances.PressureDrop res(
            redeclare final package Medium = MediumWat,
            final m_flow_nominal=m_flow_nominal,
            final dp_nominal = dpPip)
            "Resistance in district network"
            annotation (Placement(transformation(extent={{0,-60},{-20,-40}})));
          estcp.DHC.Loads.Steam.BaseClasses.SteamTrap steTra(redeclare final
              package Medium = MediumWat, final m_flow_nominal=m_flow_nominal)
            "Steam trap"
            annotation (Placement(transformation(extent={{60,20},{80,40}})));
          Modelica.Blocks.Sources.Sine inp(
            amplitude=-0.5,
            f=1/86400,
            phase=3.1415926535898,
            offset=0.5)
            "Input signal"
            annotation (Placement(transformation(extent={{-90,-20},{-70,0}})));
          Buildings.Fluid.Sensors.MassFlowRate senMasFlo(
            redeclare final package Medium = MediumWat)
            "Mass flow rate sensor"
            annotation (Placement(transformation(extent={{80,-60},{60,-40}})));
          Buildings.Controls.Continuous.LimPID conPumCNR(
            controllerType=Modelica.Blocks.Types.SimpleController.PI,
            k=1,
            Ti=15)
            "Controller"
            annotation (Placement(transformation(extent={{0,-20},{20,0}})));
          Modelica.Blocks.Math.Gain m_flow(final k=m_flow_nominal)
            "Gain to calculate m_flow"
            annotation (Placement(transformation(extent={{-60,-20},{-40,0}})));
          Buildings.Fluid.Movers.SpeedControlled_y pumCNR(
            redeclare final package Medium = MediumWat,
            energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,
            p_start=101325,
            final per=perPumCNR,
            y_start=1)
            "Condensate return pump"
            annotation (Placement(transformation(extent={{40,-60},{20,-40}})));
        equation
          connect(res.port_b, pla.port_aSerHea) annotation (Line(points={{-20,-50},{-30,
                  -50},{-30,30},{-20,30}},
                                      color={0,127,255}));
          connect(vol.port_b, steTra.port_a)
            annotation (Line(points={{40,30},{60,30}}, color={0,127,255}));
          connect(pla.port_bSerHea, vol.port_a)
            annotation (Line(points={{0,30},{20,30}},  color={0,127,255}));
          connect(steTra.port_b, senMasFlo.port_a) annotation (Line(points={{80,30},{90,
                  30},{90,-50},{80,-50}}, color={0,127,255}));
          connect(senMasFlo.port_b, pumCNR.port_a)
            annotation (Line(points={{60,-50},{40,-50}},color={0,127,255}));
          connect(pumCNR.port_b, res.port_a)
            annotation (Line(points={{20,-50},{0,-50}},    color={0,127,255}));
          connect(senMasFlo.m_flow, conPumCNR.u_m)
            annotation (Line(points={{70,-39},{70,-30},{10,-30},{10,-22}},
                                                         color={0,0,127}));
          connect(conPumCNR.y, pumCNR.y)
            annotation (Line(points={{21,-10},{30,-10},{30,-38}},   color={0,0,127}));
          connect(m_flow.y, conPumCNR.u_s)
            annotation (Line(points={{-39,-10},{-2,-10}},color={0,0,127}));
          connect(inp.y, m_flow.u)
            annotation (Line(points={{-69,-10},{-62,-10}},
                                                         color={0,0,127}));
          annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
                coordinateSystem(preserveAspectRatio=false)),
            experiment(StopTime=86400, Tolerance=1e-6),
              __Dymola_Commands(file=
            "modelica://Buildings/Resources/Scripts/Dymola/Experimental/DHC/Plants/Steam/Examples/SingleBoiler.mos"
            "Simulate and plot"),
            Documentation(info="<html>
<p>This model validates the steam plant implemented in
<a href=\"modelica://Buildings.Experimental.DHC.Plants.Steam.SingleBoiler\">
Buildings.Experimental.DHC.Plants.Steam.SingleBoiler</a>.
</p>
</html>",         revisions="<html>
<ul>
<li>
March 3, 2022 by Kathryn Hinkelman:<br/>
First implementation.
</li>
</ul>
</html>"));
        end SingleBoiler;
        annotation (Documentation(info="<html>
<p>
This package contains advanced examples illustrating the use of the models in
<a href=\"modelica://Buildings.Experimental.DHC.Plants.Steam\">
Buildings.Experimental.DHC.Plants.Steam</a>.
</p>
</html>"));
      end Examples;

      package BaseClasses "Package with base classes for Buildings.Experimental.DHC.Plants.Steam"
        extends Modelica.Icons.BasesPackage;

        model BoilerPolynomial
          "A equilibrium boiler with water phase change from liquid to vapor, discharging
  saturated steam vapor, with the efficiency curve described by a polynomial."
          extends Buildings.BaseClasses.BaseIconLow;
          extends estcp.DHC.BaseClasses.Steam.PartialTwoPortTwoMedium(
            redeclare final package Medium_a = MediumWat,
            redeclare final package Medium_b = MediumSte,
            final T_start=MediumSte.saturationTemperature(p_start));

          // Medium declarations
          replaceable package MediumWat =
            Buildings.Media.Specialized.Water.TemperatureDependentDensity
            "Water medium - port_a (inlet)";
          replaceable package MediumSte = Buildings.Media.Steam
             "Steam medium - port_b (oulet)";
          // Initialization
          parameter Boolean fixed_p_start=false
            "Set to true if p_start is to be used as an explicit initial equation,
    not an initial guess"
            annotation(Dialog(tab = "Initialization"));
          // Nominal conditions
          parameter Modelica.Units.SI.PressureDifference dp_nominal(displayUnit="Pa")
            "Pressure drop at nominal mass flow rate"
            annotation(Dialog(group = "Nominal condition"));
          parameter Modelica.Units.SI.Power Q_flow_nominal "Nominal heating power";
          parameter Modelica.Units.SI.Temperature T_nominal = 373.15
            "Temperature used to compute nominal efficiency
    (only used if efficiency curve depends on temperature)";

          // Efficiency, fuel, and boiler properties
          parameter Buildings.Fluid.Types.EfficiencyCurves effCur=
            Buildings.Fluid.Types.EfficiencyCurves.Constant
            "Curve used to compute the efficiency";
          parameter Real a[:] = {0.9} "Coefficients for efficiency curve";
          parameter Buildings.Fluid.Data.Fuels.Generic fue "Fuel type"
           annotation (choicesAllMatching = true);
          parameter Modelica.Units.SI.ThermalConductance UA=0.05*Q_flow_nominal/30
            "Overall UA value";
          parameter Modelica.Units.SI.Volume V = 1.5E-6*Q_flow_nominal
            "Total internal volume of boiler"
            annotation(Dialog(tab = "Dynamics", enable = not (energyDynamics == Modelica.Fluid.Types.Dynamics.SteadyState)));
          parameter Modelica.Units.SI.Mass mDry = 1.5E-3*Q_flow_nominal
            "Mass of boiler that will be lumped to water heat capacity"
            annotation(Dialog(tab = "Dynamics", enable = not (energyDynamics == Modelica.Fluid.Types.Dynamics.SteadyState)));

          // Variables
          Modelica.Units.SI.Efficiency eta=
            if effCur == Buildings.Fluid.Types.EfficiencyCurves.Constant then
              a[1]
            elseif effCur == Buildings.Fluid.Types.EfficiencyCurves.Polynomial then
              Buildings.Utilities.Math.Functions.polynomial(a=a, x=y_internal)
            elseif effCur == Buildings.Fluid.Types.EfficiencyCurves.QuadraticLinear then
              Buildings.Utilities.Math.Functions.quadraticLinear(
                a=aQuaLin,
                x1=y_internal,
                x2=MediumSte.saturationTemperature(port_a.p))
            else 0
            "Boiler efficiency";
          Modelica.Units.SI.Power QFue_flow = y_internal * Q_flow_nominal/eta_nominal
            "Heat released by fuel";
          Modelica.Units.SI.Power QWat_flow = eta * QFue_flow
            "Heat transfer from gas into water";
          Modelica.Units.SI.MassFlowRate mFue_flow = QFue_flow/fue.h
            "Fuel mass flow rate";
          Modelica.Units.SI.VolumeFlowRate VFue_flow = mFue_flow/fue.d
            "Fuel volume flow rate";

          Modelica.Blocks.Interfaces.RealInput y(min=0, max=1) if not steadyDynamics
            "Part load ratio"
            annotation (Placement(transformation(extent={{-140,60},{-100,100}})));
          Modelica.Blocks.Interfaces.RealOutput VLiq(
            final quantity="Volume",
            final unit="m3",
            min=0) "Output liquid water volume"
            annotation (Placement(transformation(extent={{100,50},{120,70}})));
          Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_a heatPort if not steadyDynamics
            "Heat port, can be used to connect to ambient"
            annotation (Placement(transformation(extent={{-10,62}, {10,82}})));
          Modelica.Thermal.HeatTransfer.Components.HeatCapacitor heaCapDry(
            C=500*mDry,
            T(start=T_start)) if not steadyDynamics
            "Heat capacity of boiler metal"
            annotation (Placement(transformation(extent={{-80,12},{-60,32}})));
          estcp.DHC.Plants.Steam.BaseClasses.ControlVolumeEvaporation vol(
            redeclare final package MediumSte = MediumSte,
            redeclare final package MediumWat = MediumWat,
            final allowFlowReversal=allowFlowReversal,
            final energyDynamics=energyDynamics,
            final massDynamics=massDynamics,
            final p_start=p_start,
            final m_flow_nominal=m_flow_nominal,
            final show_T=show_T,
            final V=V,
            final fixed_p_start=fixed_p_start) "Steam/water control volume"
            annotation (Placement(transformation(extent={{0,-10},{20,10}})));
          Buildings.Fluid.FixedResistances.PressureDrop res(
            redeclare final package Medium = MediumWat,
            final allowFlowReversal=allowFlowReversal,
            final m_flow_nominal=m_flow_nominal,
            final show_T=show_T,
            final dp_nominal=dp_nominal)
            "Flow resistance"
            annotation (Placement(transformation(extent={{-60,-10},{-40,10}})));

          Modelica.Blocks.Interfaces.RealOutput QFueFlo(
            final quantity="HeatFlowRate",
            final unit="W",
            min=0) "Heat flow rate of the fuel"
            annotation (Placement(transformation(extent={{100,80},{120,100}})));

        protected
          final parameter Boolean steadyDynamics=
            if energyDynamics == Modelica.Fluid.Types.Dynamics.SteadyState then true
            else false
            "= true, if steady state formulation";
          parameter Real eta_nominal(fixed=false) "Boiler efficiency at nominal condition";
          parameter Real aQuaLin[6] = if size(a, 1) == 6 then a else fill(0, 6)
          "Auxiliary variable for efficiency curve because quadraticLinear requires exactly 6 elements";

          Modelica.Blocks.Interfaces.RealInput y_internal(min=0, max=1)
            "Internal block needed for conditional input part load ratio";

          Buildings.HeatTransfer.Sources.PrescribedHeatFlow preHeaFlo if not steadyDynamics
          "Prescribed heat flow (if heatPort is connected)"
            annotation (Placement(transformation(extent={{-49,-40},{-29,-20}})));
          Modelica.Blocks.Sources.RealExpression Q_flow_in(y=QWat_flow)
            if not steadyDynamics
            "Heat transfer from gas into water (if heatPort is connected)"
            annotation (Placement(transformation(extent={{-80,-40},{-60,-20}})));

          Modelica.Thermal.HeatTransfer.Components.ThermalConductor UAOve(G=UA) if not steadyDynamics
            "Overall thermal conductance (if heatPort is connected)"
            annotation (Placement(transformation(extent={{-48,10},{-28,30}})));

          Modelica.Blocks.Sources.RealExpression QFue_flow_out(y=QFue_flow)
            "Heat flow rate of the fuel"
            annotation (Placement(transformation(extent={{60,80},{80,100}})));
        initial equation
          if  effCur == Buildings.Fluid.Types.EfficiencyCurves.QuadraticLinear then
            assert(size(a, 1) == 6,
            "The boiler has the efficiency curve set to 'Buildings.Fluid.Types.EfficiencyCurves.QuadraticLinear',
    and hence the parameter 'a' must have exactly 6 elements.
    However, only "         + String(size(a, 1)) + " elements were provided.");
          end if;

          if effCur == Buildings.Fluid.Types.EfficiencyCurves.Constant then
            eta_nominal = a[1];
          elseif effCur == Buildings.Fluid.Types.EfficiencyCurves.Polynomial then
            eta_nominal = Buildings.Utilities.Math.Functions.polynomial(
              a=a, x=1);
          elseif effCur == Buildings.Fluid.Types.EfficiencyCurves.QuadraticLinear then
            // For this efficiency curve, a must have 6 elements.
            eta_nominal = Buildings.Utilities.Math.Functions.quadraticLinear(
              a=aQuaLin, x1=1, x2=T_nominal);
          else
             eta_nominal = 999;
          end if;

        equation
          assert(eta > 0.001, "Efficiency curve is wrong.");

          connect(y,y_internal);

          if steadyDynamics then
            if allowFlowReversal then
              -QWat_flow = port_a.m_flow*actualStream(port_a.h_outflow) +
                           port_b.m_flow*actualStream(port_b.h_outflow);
            else
              -QWat_flow = port_a.m_flow*inStream(port_a.h_outflow) +
                           port_b.m_flow*port_b.h_outflow;

            end if;
          end if;

          connect(UAOve.port_a, heatPort) annotation (Line(
              points={{-48,20},{-52,20},{-52,60},{0,60},{0,72}},
              color={191,0,0},
              smooth=Smooth.None));
          connect(Q_flow_in.y,preHeaFlo. Q_flow) annotation (Line(
              points={{-59,-30},{-49,-30}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(heaCapDry.port, UAOve.port_b) annotation (Line(points={{-70,12},{-70,6},
                  {-20,6},{-20,20},{-28,20}}, color={191,0,0}));
          connect(preHeaFlo.port, UAOve.port_b) annotation (Line(points={{-29,-30},{-20,
                  -30},{-20,20},{-28,20}}, color={191,0,0}));
          connect(vol.heatPort, UAOve.port_b) annotation (Line(points={{10,-10},{10,-20},
                  {-20,-20},{-20,20},{-28,20}}, color={191,0,0}));
          connect(vol.port_b, port_b)
            annotation (Line(points={{20,0},{100,0}}, color={0,127,255}));
          connect(port_a, res.port_a)
            annotation (Line(points={{-100,0},{-60,0}}, color={0,127,255}));
          connect(res.port_b, vol.port_a)
            annotation (Line(points={{-40,0},{0,0}}, color={0,127,255}));
          connect(vol.VLiq,VLiq)  annotation (Line(points={{21,7},{80,7},{80,60},{110,
                  60}},
                color={0,0,127}));
          connect(QFue_flow_out.y, QFueFlo)
            annotation (Line(points={{81,90},{110,90}}, color={0,0,127}));
          annotation (
            defaultComponentName="boi",
            Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                Rectangle(
                  extent={{-80,60},{80,-60}},
                  lineColor={0,0,255},
                  pattern=LinePattern.None,
                  fillColor={95,95,95},
                  fillPattern=FillPattern.Solid),
                Ellipse(
                  extent={{-40,40},{40,-40}},
                  fillColor={127,0,0},
                  fillPattern=FillPattern.Solid,
                  pattern=LinePattern.None),
              Line(
                points={{20,18},{0,8},{20,-12},{0,-22}},
                color={0,0,0},
                smooth=Smooth.Bezier),
              Line(
                points={{-2,18},{-22,8},{-2,-12},{-22,-22}},
                color={0,0,0},
                smooth=Smooth.Bezier)}), Diagram(coordinateSystem(
                  preserveAspectRatio=false)),
            Documentation(info="<html>
<p>
This model represents a steam boiler that discharges saturated
steam and has an efficiency curve defined by a polynomial.
The efficiency in this model represents the fuel-to-water
efficiency (e.g., thermal efficiency).
This model is similar to the
<a href=\"modelica://Buildings.Fluid.Boilers.BoilerPolynomial\">
Buildings.Fluid.Boilers.BoilerPolynomial</a> for the efficiency
and fuel mass flow rate computation with the following exceptions:
</p>
<ul>
<li>
Water enters <code>port_a</code> in liquid state and exits
<code>port_b</code> in vapor state.
</li>
<li>
The liquid and vapor phases are at equilibrium; thus, the steam
boiler is constrained to saturated states only with the volume
containing a wet steam mixture.
</li>
<li>
If the boiler is configured in steady state, several blocks involving
the heat flow rate are conditionally removed to avoid overconstraining
the model. This is because the discharging fluid is constrained at
a saturated state. The blocks that are conditionally removed as a
result are within the green region in the below figure:
</li>
</ul>

<p align=\"center\">
<img src=\"modelica://Buildings/Resources/Images/Experimental/DHC/Plants/Steam/BaseClasses/BoilerPolynomial.png\" border=\"1\"
alt=\"Boiler polynomial steam with blocks in green conditionally removed if steady state\"/>
</p>
<h4>Implementation</h4>
<p>
In order to improve the numerical efficiency, this model follows
the split-medium approach using the
<a href=\"modelica://Buildings.Experimental.DHC.BaseClasses.Steam.PartialTwoPortTwoMedium\">
Buildings.Experimental.DHC.BaseClasses.Steam.PartialTwoPortTwoMedium</a> interface model.
The saturated mixing volume for an evaporation process
<a href=\"modelica://Buildings.Experimental.DHC.Plants.Steam.BaseClasses.ControlVolumeEvaporation\">
Buildings.Experimental.DHC.Plants.Steam.BaseClasses.ControlVolumeEvaporation</a>
represents the phase change process of water from liquid
to vapor at equilibrium.
</p>
<h4>References </h4>
<p>
Kathryn Hinkelman, Saranya Anbarasu, Michael Wetter, Antoine Gautier, Wangda Zuo. 2022.
&ldquo;A Fast and Accurate Modeling Approach for Water and Steam
Thermodynamics with Practical Applications in District Heating System Simulation,&rdquo;
<i>Energy</i>, 254(A), pp. 124227.
<a href=\"https://doi.org/10.1016/j.energy.2022.124227\">10.1016/j.energy.2022.124227</a>
</p>
<p>
Kathryn Hinkelman, Saranya Anbarasu, Michael Wetter, Antoine Gautier, Baptiste Ravache, Wangda Zuo 2022.
&ldquo;Towards Open-Source Modelica Models For Steam-Based District Heating Systems.&rdquo;
<i>Proc. of the 1st International Workshop On Open Source Modelling And Simulation Of
Energy Systems (OSMSES 2022)</i>, Aachen, German, April 4-5, 2022.
<a href=\"https://doi.org/10.1109/OSMSES54027.2022.9769121\">10.1109/OSMSES54027.2022.9769121</a>
</p>
</html>",         revisions="<html>
<ul>
<li>
September 15, 2023, by Kathryn Hinkelman:<br/>
Updated publication references.
</li>
<li>
February 25, 2022 by Kathryn Hinkelman:<br/>
Refactored base classes for improved extensibility and relocated models into Steam subpackages.
</li>
<li>
July 22, 2021 by Kathryn Hinkelman:<br/>
First implementation.
</li>
</ul>
</html>"));
        end BoilerPolynomial;

        model ControlVolumeEvaporation
          "Control volume model exhibiting the evaporation process of water"
          extends estcp.DHC.BaseClasses.Steam.PartialSaturatedControlVolume(
            redeclare final package Medium_a = MediumWat,
            redeclare final package Medium_b = MediumSte,
            hSte(start=MediumSte.h_default),
            hWat(start=MediumWat.h_default),
            p(final fixed=fixed_p_start));
          parameter Boolean fixed_p_start = false
            "Set to true if p_start is to be used as an explicit initial equation,
    not an initial guess"
            annotation(Dialog(tab = "Initialization"));
        equation
        // boundary conditions at the ports
          port_a.m_flow = mWat_flow;
          port_a.h_outflow = hWat;
          port_b.m_flow = mSte_flow;
          port_b.h_outflow = hSte;

        annotation (defaultComponentName="vol",
            Icon(coordinateSystem(
                preserveAspectRatio=false,
                extent={{-100,-100},{100,100}}),
            graphics={
              Line(
                points={{40,42},{0,22},{40,-18},{0,-38}},
                color={238,46,47},
                smooth=Smooth.Bezier),
              Line(
                points={{0,42},{-40,22},{0,-18},{-40,-38}},
                color={238,46,47},
                smooth=Smooth.Bezier)}),
            Documentation(revisions="<html>
<ul>
<li>
September 15, 2023, by Kathryn Hinkelman:<br/>
Updated publication references.
</li>
<li>
February 26, 2022 by Kathryn Hinkelman:<br/>
Moved control volume formulation into a base class
for reusability in condensation and evaporation instances.
</li>
<li>
July 22, 2021 by Kathryn Hinkelman:<br/>
First implementation.
</li>
</ul>
</html>",         info="<html>
<p>
This model represents an evaporation process of water with
liquid and vapor phases in equilibrium and at a saturated state.
Further information regarding the model formulation and assumptions
are in the base class
<a href=\"modelica://Buildings.Experimental.DHC.BaseClasses.Steam.PartialSaturatedControlVolume\">
Buildings.Experimental.DHC.BaseClasses.Steam.PartialSaturatedControlVolume</a>.

<h4>References </h4>
<p>
Kathryn Hinkelman, Saranya Anbarasu, Michael Wetter, Antoine Gautier, Wangda Zuo. 2022.
&ldquo;A Fast and Accurate Modeling Approach for Water and Steam
Thermodynamics with Practical Applications in District Heating System Simulation,&rdquo;
<i>Energy</i>, 254(A), pp. 124227.
<a href=\"https://doi.org/10.1016/j.energy.2022.124227\">10.1016/j.energy.2022.124227</a>
</p>
<p>
Kathryn Hinkelman, Saranya Anbarasu, Michael Wetter, Antoine Gautier, Baptiste Ravache, Wangda Zuo 2022.
&ldquo;Towards Open-Source Modelica Models For Steam-Based District Heating Systems.&rdquo;
<i>Proc. of the 1st International Workshop On Open Source Modelling And Simulation Of
Energy Systems (OSMSES 2022)</i>, Aachen, German, April 4-5, 2022.
<a href=\"https://doi.org/10.1109/OSMSES54027.2022.9769121\">10.1109/OSMSES54027.2022.9769121</a>
</p>
</html>"));
        end ControlVolumeEvaporation;

        package Examples "Collection of models that illustrate model use and test models"
          extends Modelica.Icons.ExamplesPackage;

          model BoilerPolynomial
            "Example model for the steam boiler with a polynomial efficiency curve"
            extends Modelica.Icons.Example;

            // Medium declarations
            package MediumWat =
                Buildings.Media.Specialized.Water.TemperatureDependentDensity
              "Water medium - port_a (inlet)";
            package MediumSte = Buildings.Media.Steam
               "Steam medium - port_b (oulet)";

            // Nominal conditions
            parameter Modelica.Units.SI.AbsolutePressure p_nominal = 300000
              "Nominal pressure";
            parameter Modelica.Units.SI.Temperature T_nominal=
              MediumSte.saturationTemperature(p_nominal)
              "Nominal saturation temperature";
            parameter Modelica.Units.SI.Power Q_flow_nominal = 50000 "Nominal power";
            parameter Modelica.Units.SI.SpecificEnthalpy dh_nominal=
              MediumSte.specificEnthalpy(
                MediumSte.setState_pTX(p=p_nominal, T=T_nominal, X=MediumSte.X_default))
              "Nominal change in enthalpy";
            parameter Modelica.Units.SI.MassFlowRate m_flow_nominal=
              Q_flow_nominal/dh_nominal/2
              "Nominal mass flow rate";
            parameter Modelica.Units.SI.PressureDifference dp_nominal = 3000
              "Pressure drop at m_flow_nominal";

            Modelica.Blocks.Sources.TimeTable y(
              table=[0,0; 1200,1; 1200,0; 2000,0; 2000,1; 3600,1])
              "Load ratio"
              annotation (Placement(transformation(extent={{-80,40},{-60,60}})));
            Buildings.Fluid.Sources.Boundary_pT sin(
              redeclare package Medium = MediumSte,
              p(displayUnit="bar") = 300000,
              T=423.15,
              nPorts=2)
              "Sink"
              annotation (Placement(transformation(extent={{60,-20},{40,0}})));
            Buildings.Fluid.Sources.Boundary_pT sou(
              redeclare package Medium = MediumWat,
              p=300000 + dp_nominal,
              T=303.15,
              nPorts=2)
              "Source"
              annotation (Placement(transformation(extent={{-80,-20},{-60,0}})));
            Buildings.HeatTransfer.Sources.FixedTemperature TAmb(T=288.15)
              "Ambient temperature in boiler room"
              annotation (Placement(transformation(extent={{-40,40},{-20,60}})));
            estcp.DHC.Plants.Steam.BaseClasses.BoilerPolynomial boiDyn(
              redeclare package MediumSte = MediumSte,
              redeclare package MediumWat = MediumWat,
              energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,
              m_flow_nominal=m_flow_nominal,
              Q_flow_nominal=Q_flow_nominal,
              fue=Buildings.Fluid.Data.Fuels.NaturalGasLowerHeatingValue(),
              dp_nominal=dp_nominal) "Steam boiler with dynamic balance"
              annotation (Placement(transformation(extent={{-20,-20},{0,0}})));
            estcp.DHC.Plants.Steam.BaseClasses.BoilerPolynomial boiSte(
              redeclare package MediumSte = MediumSte,
              redeclare package MediumWat = MediumWat,
              energyDynamics=Modelica.Fluid.Types.Dynamics.SteadyState,
              m_flow_nominal=m_flow_nominal,
              Q_flow_nominal=Q_flow_nominal,
              fue=Buildings.Fluid.Data.Fuels.NaturalGasLowerHeatingValue(),
              dp_nominal=dp_nominal) "Steam boiler with steady state balance"
              annotation (Placement(transformation(extent={{-20,-60},{0,-40}})));
          equation
            connect(TAmb.port, boiDyn.heatPort)
              annotation (Line(points={{-20,50},{-10,50},{-10,-2.8}},
                                                                    color={191,0,0}));
            connect(y.y, boiDyn.y)
              annotation (Line(points={{-59,50},{-50,50},{-50,-2},{-22,-2}},
                             color={0,0,127}));
            connect(sou.ports[1], boiSte.port_a)
              annotation (Line(points={{-60,-11},{-50,-11},{-50,-50},{-20,-50}},
                                             color={0,127,255}));
            connect(boiDyn.port_a, sou.ports[2]) annotation (Line(points={{-20,-10},{-60,
                    -10},{-60,-9}}, color={0,127,255}));
            connect(boiSte.port_b, sin.ports[1]) annotation (Line(points={{0,-50},{30,-50},
                    {30,-11},{40,-11}}, color={0,127,255}));
            connect(boiDyn.port_b, sin.ports[2])
              annotation (Line(points={{0,-10},{40,-10},{40,-9}}, color={0,127,255}));
            annotation (__Dymola_Commands(file="modelica://Buildings/Resources/Scripts/Dymola/Experimental/DHC/Plants/Steam/BaseClasses/Examples/BoilerPolynomial.mos"
                  "Simulate and plot"),
              experiment(Tolerance=1e-6, StopTime=3600),
              Documentation(info="<html>
<p>
This example demonstrates the open loop response of the 
steam boiler model. The dynamic boiler includes a control 
signal that is first a ramp from <i>0</i> to <i>1</i>, 
followed by a step that switches the boiler off and then 
on again. The steady boiler is only dependent on the fluid
flow.
</p>
</html>",           revisions="<html>
<ul>
<li>
July 23, 2021 by Kathryn Hinkelman:<br/>
First implementation.
</li>
</ul>
</html>"));
          end BoilerPolynomial;

          model ControlVolumeEvaporation
            "Example model for heat transfer with the evaporation control volume"
            extends Modelica.Icons.Example;

            package MediumSte = Buildings.Media.Steam
              "Steam medium - Medium model for port_b (outlet)";
            package MediumWat =
                Buildings.Media.Specialized.Water.TemperatureDependentDensity
              "Water medium - Medium model for port_a (inlet)";

            parameter Modelica.Units.SI.AbsolutePressure p_start = 1E6 "Initial pressure";

            estcp.DHC.Plants.Steam.BaseClasses.ControlVolumeEvaporation volDyn(
              p_start=p_start,
              V=1,
              redeclare package MediumWat = MediumWat,
              redeclare package MediumSte = MediumSte,
              m_flow_nominal=0.01,
              energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,
              allowFlowReversal=true) "Dynamic volume"
              annotation (Placement(transformation(extent={{10,0},{30,-20}})));
            estcp.DHC.Plants.Steam.BaseClasses.ControlVolumeEvaporation volSte(
              V=1,
              redeclare package MediumWat = MediumWat,
              redeclare package MediumSte = MediumSte,
              m_flow_nominal=0.01,
              energyDynamics=Modelica.Fluid.Types.Dynamics.SteadyState,
              p_start=p_start,
              allowFlowReversal=true) "Steady volume" annotation (Placement(
                  transformation(extent={{10,-40},{30,-60}})));
            Modelica.Fluid.Sources.MassFlowSource_T sou(
              redeclare package Medium = MediumWat,
              use_m_flow_in=true,
              T=313.15,
              nPorts=1) "Flow source"
              annotation (Placement(transformation(extent={{-18,-20},{2,0}})));
            Modelica.Fluid.Sources.MassFlowSource_T sou1(
              redeclare package Medium = MediumWat,
              use_m_flow_in=true,
              T=313.15,
              nPorts=1) "Flow source"
              annotation (Placement(transformation(extent={{-20,-60},{0,-40}})));
            Modelica.Fluid.Sources.FixedBoundary bou(
              redeclare package Medium = MediumSte,
              p=p_start,
              nPorts=2) "Boundary condition"
              annotation (Placement(transformation(extent={{80,-20},{60,0}})));
            Modelica.Blocks.Sources.Ramp ramp(
              duration=1,
              offset=1,
              height=-2) "Ramp"
              annotation (Placement(transformation(extent={{-90,-20},{-70,0}})));
            Modelica.Thermal.HeatTransfer.Sensors.HeatFlowSensor heaFlo
              "Heat flow sensor"
              annotation (Placement(transformation(extent={{-20,40},{0,60}})));
            Modelica.Blocks.Sources.Constant const(k=-1000000) "Heat loss"
              annotation (Placement(transformation(extent={{-90,40},{-70,60}})));
            Modelica.Thermal.HeatTransfer.Sources.PrescribedHeatFlow preHeaFlo
              "Prescribed heat flow rate"
              annotation (Placement(transformation(extent={{-60,40},{-40,60}})));
          equation
            connect(sou.ports[1], volDyn.port_a)
              annotation (Line(points={{2,-10},{10,-10}}, color={0,127,255}));
            connect(preHeaFlo.port,heaFlo. port_a) annotation (Line(
                points={{-40,50},{-20,50}},
                color={191,0,0}));
            connect(preHeaFlo.Q_flow,const. y) annotation (Line(
                points={{-60,50},{-69,50}},
                color={0,0,127}));
            connect(heaFlo.port_b, volDyn.heatPort)
              annotation (Line(points={{0,50},{20,50},{20,0}}, color={191,0,0}));
            connect(sou1.ports[1], volSte.port_a)
              annotation (Line(points={{0,-50},{10,-50}}, color={0,127,255}));
            connect(ramp.y, sou.m_flow_in) annotation (Line(points={{-69,-10},{-40,-10},{-40,-2},{-18,-2}},
                                       color={0,0,127}));
            connect(ramp.y, sou1.m_flow_in) annotation (Line(points={{-69,-10},{-40,-10},
                    {-40,-42},{-20,-42}}, color={0,0,127}));
            connect(volSte.port_b, bou.ports[1]) annotation (Line(points={{30,-50},{50,-50},
                    {50,-8},{60,-8}},        color={0,127,255}));
            connect(volDyn.port_b, bou.ports[2])
              annotation (Line(points={{30,-10},{60,-10},{60,-12}},color={0,127,255}));
            annotation (Documentation(
                  info="<html>
<p>
This model demonstrates the use of the control volume with evaporation.
The dynamic volume includes heat conduction to the ambient while the
steady volume heat balance is only dependent on the mass flow rate.
</p>
</html>",           revisions="<html>
<ul>
<li>
July 22, 2021 by Kathryn Hinkelman:<br/>
First implementation.
</li>
</ul>
</html>"),experiment(Tolerance=1E-6, StopTime=1.0),
          __Dymola_Commands(file="modelica://Buildings/Resources/Scripts/Dymola/Experimental/DHC/Plants/Steam/BaseClasses/Examples/ControlVolumeEvaporation.mos"
                  "Simulate and plot"));
          end ControlVolumeEvaporation;
        annotation (preferredView="info", Documentation(info="<html>
<p>
This package contains examples for the use of models that can be found in
<a href=\"modelica://Buildings.Experimental.DHC.Plants.Steam.BaseClasses\">
Buildings.Experimental.DHC.Plants.Steam.BaseClasses</a>.
</p>
</html>"));
        end Examples;
      annotation (preferredView="info", Documentation(info="<html>
<p>
This package contains base classes that are used to construct the models in
<a href=\"modelica://Buildings.Experimental.DHC.Plants.Steam\">
Buildings.Experimental.DHC.Plants.Steam</a>.
</p>
</html>"));
      end BaseClasses;
    annotation (preferredView="info", Documentation(info="<html>
<p>
This package contains models for plants producing steam.
</p>
</html>"));
    end Steam;

    package BaseClasses "Package with base classes"
      extends Modelica.Icons.BasesPackage;

      partial model PartialPlant
        "Partial class for modeling a plant"
        replaceable package Medium=Buildings.Media.Water
          constrainedby Modelica.Media.Interfaces.PartialMedium
          "Service side medium";
        replaceable package MediumHea_b=Buildings.Media.Water
          constrainedby Modelica.Media.Interfaces.PartialMedium
          "Service side medium at heating supply"
          annotation(Dialog(enable=
            typ == TypDisSys.CombinedGeneration1 or
            typ == TypDisSys.HeatingGeneration1));
        parameter estcp.DHC.Types.DistrictSystemType typ=estcp.DHC.Types.DistrictSystemType.CombinedGeneration2to4
          "Type of district system"
          annotation (Evaluate=true, Dialog(group="Configuration"));
        parameter Boolean have_fan=false
          "Set to true if fan power is computed"
          annotation (Evaluate=true, Dialog(group="Configuration"));
        parameter Boolean have_pum=false
          "Set to true if pump power is computed"
          annotation (Evaluate=true, Dialog(group="Configuration"));
        parameter Boolean have_eleHea=false
          "Set to true if the plant has electric heating system"
          annotation (Evaluate=true, Dialog(group="Configuration"));
        parameter Integer nFue=0
          "Number of fuel types (0 means no combustion system)"
          annotation (Evaluate=true, Dialog(group="Configuration"));
        final parameter Boolean have_fue=nFue>0
          "Set to true if the plant has fuel use";
        parameter Boolean have_eleCoo=false
          "Set to true if the plant has electric cooling system"
          annotation (Evaluate=true, Dialog(group="Configuration"));
        parameter Boolean have_weaBus=false
          "Set to true to use a weather bus"
          annotation (Evaluate=true, Dialog(group="Configuration"));
        parameter Boolean allowFlowReversal=false
          "Set to true to allow flow reversal in service lines"
          annotation (Dialog(tab="Assumptions"),Evaluate=true);
        parameter Buildings.Fluid.Data.Fuels.Generic fue[nFue]
          "Fuel type"
           annotation (choicesAllMatching = true, Dialog(enable=have_fue));
        // IO CONNECTORS
        Modelica.Fluid.Interfaces.FluidPort_a port_aSerAmb(
          redeclare package Medium = Medium,
          m_flow(min=if allowFlowReversal then -Modelica.Constants.inf else 0),
          h_outflow(start=Medium.h_default, nominal=Medium.h_default))
       if have_serAmb
          "Fluid connector for ambient water service supply line"
          annotation (
            Placement(transformation(extent={{-390,30},{-370,50}}),
              iconTransformation(extent={{-310,30},{-290,50}})));
        Modelica.Fluid.Interfaces.FluidPort_b port_bSerAmb(
          redeclare package Medium = Medium,
          m_flow(max=if allowFlowReversal then +Modelica.Constants.inf else 0),
          h_outflow(start=Medium.h_default, nominal=Medium.h_default))
       if have_serAmb
          "Fluid connector for ambient water service return line"
          annotation (
            Placement(transformation(extent={{370,30},{390,50}}),
              iconTransformation(extent={{290,30},{310,50}})));
        Modelica.Fluid.Interfaces.FluidPort_a port_aSerHea(
          redeclare package Medium = Medium,
          m_flow(min=if allowFlowReversal then -Modelica.Constants.inf else 0),
          h_outflow(start=Medium.h_default, nominal=Medium.h_default)) if have_hea
          "Fluid connector for heating service supply line"
          annotation (Placement(
            transformation(extent={{-390,-10},{-370,10}}),    iconTransformation(
              extent={{-310,-10},{-290,10}})));
        Modelica.Fluid.Interfaces.FluidPort_b port_bSerHea(
          redeclare package Medium = MediumHea_b,
          m_flow(max=if allowFlowReversal then +Modelica.Constants.inf else 0),
          h_outflow(start=MediumHea_b.h_default, nominal=MediumHea_b.h_default)) if have_hea
          "Fluid connector for heating service return line"
          annotation (Placement(
              transformation(extent={{370,-10},{390,10}}),    iconTransformation(
                extent={{290,-10},{310,10}})));
        Modelica.Fluid.Interfaces.FluidPort_a port_aSerCoo(
          redeclare package Medium = Medium,
          m_flow(min=if allowFlowReversal then -Modelica.Constants.inf else 0),
          h_outflow(start=Medium.h_default, nominal=Medium.h_default))
       if have_coo
          "Fluid connector for cooling service supply line"
          annotation (Placement(transformation(extent={{-390,-50},{-370,-30}}),
              iconTransformation(extent={{-310,-50},{-290,-30}})));
        Modelica.Fluid.Interfaces.FluidPort_b port_bSerCoo(
          redeclare package Medium = Medium,
          m_flow(max=if allowFlowReversal then +Modelica.Constants.inf else 0),
          h_outflow(start=Medium.h_default, nominal=Medium.h_default))
       if have_coo
          "Fluid connector for cooling service return line"
          annotation (Placement(
            transformation(extent={{370,-50},{390,-30}}),   iconTransformation(
              extent={{290,-50},{310,-30}})));
        Buildings.BoundaryConditions.WeatherData.Bus weaBus if have_weaBus
          "Weather data bus"
          annotation (Placement(transformation(extent={{-20,360},{20,400}}),
            iconTransformation(extent={{-10,290},{10,310}})));
        Buildings.Controls.OBC.CDL.Interfaces.RealOutput PHea(
          final unit="W") if have_eleHea
          "Power drawn by heating system"
          annotation (Placement(transformation(extent={{380,260},{420,300}}),
            iconTransformation(extent={{300,240},{380,320}})));
        Buildings.Controls.OBC.CDL.Interfaces.RealOutput PCoo(
          final unit="W") if have_eleCoo
          "Power drawn by cooling system"
          annotation (Placement(transformation(extent={{380,220},{420,260}}),
            iconTransformation(extent={{300,200},{380,280}})));
        Buildings.Controls.OBC.CDL.Interfaces.RealOutput PFan(
          final unit="W") if have_fan
          "Power drawn by fan motors"
          annotation (Placement(transformation(extent={{380,180},{420,220}}),
            iconTransformation(extent={{300,160},{380,240}})));
        Buildings.Controls.OBC.CDL.Interfaces.RealOutput PPum(
          final unit="W") if have_pum
          "Power drawn by pump motors"
          annotation (Placement(transformation(extent={{380,140},{420,180}}),
            iconTransformation(extent={{300,120},{380,200}})));
        Buildings.Controls.OBC.CDL.Interfaces.RealOutput QFue_flow(
          final unit="W") if have_fue
          "Fuel energy input rate"
          annotation (
            Placement(transformation(extent={{380,100},{420,140}}),
              iconTransformation(extent={{300,80},{380,160}})));
      protected
        final parameter Boolean have_hea=typ <>estcp.DHC.Types.DistrictSystemType.Cooling                   and
        typ <>estcp.DHC.Types.DistrictSystemType.CombinedGeneration5
        "Boolean flag to enable fluid connectors for heating service line";
        final parameter Boolean have_coo=typ ==estcp.DHC.Types.DistrictSystemType.CombinedGeneration1                   or
        typ ==estcp.DHC.Types.DistrictSystemType.CombinedGeneration2to4                   or
        typ ==estcp.DHC.Types.DistrictSystemType.Cooling
        "Boolean flag to enable fluid connectors for cooling service line";
        final parameter Boolean have_serAmb=typ ==estcp.DHC.Types.DistrictSystemType.CombinedGeneration5
        "Boolean flag to enable fluid connector for ambient water service line";
        annotation (
          defaultComponentName="pla",
          Documentation(
            info="<html>
<p>
Partial class to be used for modeling a plant.
</p>
<p>
The connectors to the service lines are configured based on an enumeration
defining the type of district system, see
<a href=\"modelica://Buildings.Experimental.DHC.Types.DistrictSystemType\">
Buildings.Experimental.DHC.Types.DistrictSystemType</a>.
In case of a heating service line, the model allows for using two
different media at the supply port <code>port_bSerHea</code> and at the return
<code>port_aSerHea</code> to represent a steam supply and condensate
return.
</p>
</html>",
      revisions="<html>
<ul>
<li>
September 20, 2021, by Mingzhe Liu:<br/>
Refactored <code>if</code> statement to correctly enable and 
disable the fluid connector under different system types.
</li>
<li>
December 21, 2020, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>"),Icon(
            coordinateSystem(
              extent={{-300,-300},{300,300}},
              preserveAspectRatio=false),
            graphics={
              Rectangle(
                extent={{-300,-300},{300,300}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{18,-38},{46,-10}},
                lineColor={255,255,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-148,-326},{152,-366}},
                textColor={0,0,255},
                textString="%name"),
              Line(
                points={{-142,300},{-140,372}},
                color={0,0,255},
                pattern=LinePattern.None),
              Line(
                points={{-142,354},{-138,274}},
                color={0,0,255},
                pattern=LinePattern.None),
              Rectangle(
                extent={{-300,-48},{300,-32}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,0,255},
                fillPattern=FillPattern.Solid,
                visible=have_coo),
              Rectangle(
                extent={{-300,32},{-140,48}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,255,255},
                fillPattern=FillPattern.Solid,
                visible=have_serAmb),
              Rectangle(
                extent={{140,32},{300,48}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,255,255},
                fillPattern=FillPattern.Solid,
                visible=have_serAmb),
              Rectangle(
                extent={{-300,-8},{300,8}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={255,0,0},
                fillPattern=FillPattern.Solid,
                visible=have_hea),
              Rectangle(
                extent={{-140,140},{140,-142}},
                lineColor={27,0,55},
                fillColor={170,213,255},
                fillPattern=FillPattern.Solid)}),
          Diagram(
            coordinateSystem(
              preserveAspectRatio=false,
              extent={{-380,-380},{380,380}})));
      end PartialPlant;
      annotation (
        preferredView="info",
        Documentation(
          info="<html>
<p>
This package contains base classes that are used to construct the classes in
<a href=\"modelica://Buildings.Experimental.DHC.Plants\">
Buildings.Experimental.DHC.Plants</a>.
</p>
</html>"));
    end BaseClasses;
    annotation (
      preferredView="info",
      Documentation(
        info="<html>
<p>
This package contains models for central plants.
</p>
</html>"));
  end Plants;

  package Types  "Package with type definitions"
    extends Modelica.Icons.TypesPackage;

    type DistrictSystemType = enumeration(
        CombinedGeneration1
      "First generation district heating and cooling system",
        CombinedGeneration2to4
      "Second to fourth generation district heating and cooling system",
        CombinedGeneration5
      "Fifth generation district heating and cooling system",
        Cooling
      "District cooling system",
        HeatingGeneration1
      "First generation district heating system",
        HeatingGeneration2to4
      "Second to fourth generation district heating system")
      "Enumeration to define the type of district system"
      annotation (Documentation(info="<html>
  <p>
  Enumeration to define the type of district system:<br/>
  </p>
  <table border=\"1\" summary=\"Explanation of the enumeration\">
  <tr>
  <th>Enumeration</th>
  <th>Description</th>
  </tr>
  <tr>
  <td>CombinedGeneration1</td>
  <td>First generation district heating and cooling system (using steam and chilled
  water)</td>
  </tr>
  <tr>
  <td>CombinedGeneration2to4</td>
  <td>Second to fourth generation district heating and cooling system (using heating
  water and chilled water)</td>
  </tr>
  <tr>
  <td>CombinedGeneration5</td>
  <td>Fifth generation district heating and cooling system (using water near
  ambient temperature)</td>
  </tr>
  <tr>
  <td>Cooling</td>
  <td>District cooling system</td>
  </tr>
  <tr>
  <td>HeatingGeneration1</td>
  <td>First generation district heating system (using steam)</td>
  </tr>
  <tr>
  <td>HeatingGeneration2to4</td>
  <td>Second to fourth generation district heating system (using heating
  water)</td>
  </tr>
  </table>
  </html>",  revisions="<html>
<ul>
<li>
December 10, 2020, by Antoine Gautier:<br/>
First implementation.
</li>
</ul>
</html>"));

  annotation (Documentation(info="<html>
<p>
This package contains type definitions.
</p>
</html>"));
  end Types;

  package Examples "Collection of cases study"
    extends Modelica.Icons.ExamplesPackage;

    package Combined "Package of example models for DHC systems"
      extends Modelica.Icons.VariantsPackage;

      model SeriesConstantFlow
        "Example of series connection with constant district water mass flow rate"
        extends estcp.DHC.Examples.Combined.BaseClasses.PartialSeries(
            redeclare estcp.DHC.Loads.Combined.BuildingTimeSeriesWithETS bui[
            nBui](final filNam=filNam), datDes(
            mPumDis_flow_nominal=95,
            mPipDis_flow_nominal=95,
            dp_length_nominal=250,
            epsPla=0.935));
        parameter String filNam[nBui]={
          "modelica://Buildings/Resources/Data/Experimental/DHC/Loads/Examples/SwissOffice_20190916.mos",
          "modelica://Buildings/Resources/Data/Experimental/DHC/Loads/Examples/SwissResidential_20190916.mos",
          "modelica://Buildings/Resources/Data/Experimental/DHC/Loads/Examples/SwissHospital_20190916.mos"}
          "Library paths of the files with thermal loads as time series";
        Modelica.Blocks.Sources.Constant masFloMaiPum(
          k=datDes.mPumDis_flow_nominal)
          "Distribution pump mass flow rate"
          annotation (Placement(transformation(extent={{-280,-70},{-260,-50}})));
        Modelica.Blocks.Sources.Constant masFloDisPla(
          k=datDes.mPla_flow_nominal)
          "District water flow rate to plant"
          annotation (Placement(transformation(extent={{-250,10},{-230,30}})));
        Buildings.Controls.OBC.CDL.Reals.Sources.Constant THotWatSupSet[nBui](
          k=fill(63 + 273.15, nBui))
          "Hot water supply temperature set point"
          annotation (Placement(transformation(extent={{-190,170},{-170,190}})));
        Buildings.Controls.OBC.CDL.Reals.Sources.Constant TColWat[nBui](
          k=fill(15 + 273.15, nBui))
          "Cold water temperature"
          annotation (Placement(transformation(extent={{-160,150},{-140,170}})));
      equation
        connect(masFloMaiPum.y, pumDis.m_flow_in) annotation (Line(points={{-259,-60},
                {60,-60},{60,-60},{68,-60}}, color={0,0,127}));
        connect(pumSto.m_flow_in, masFloMaiPum.y) annotation (Line(points={{-180,-68},
                {-180,-60},{-259,-60}}, color={0,0,127}));
        connect(masFloDisPla.y, pla.mPum_flow) annotation (Line(points={{-229,20},
                {-184,20},{-184,4.66667},{-161.333,4.66667}},
                                        color={0,0,127}));
        connect(THotWatSupSet.y, bui.THotWatSupSet) annotation (Line(points={{-168,
                180},{-24,180},{-24,183},{-12,183}}, color={0,0,127}));
        connect(TColWat.y, bui.TColWat) annotation (Line(points={{-138,160},{-40,160},
                {-40,164},{-8,164},{-8,168}}, color={0,0,127}));
        annotation (
        Diagram(
        coordinateSystem(preserveAspectRatio=false, extent={{-360,-260},{360,260}})),
          __Dymola_Commands(
        file="modelica://Buildings/Resources/Scripts/Dymola/Experimental/DHC/Examples/Combined/SeriesConstantFlow.mos"
        "Simulate and plot"),
        experiment(
            StopTime=604800,
            Tolerance=1e-06),
          Documentation(info="<html>
<p>
This is a model of a so-called \"reservoir network\" (Sommer 2020), i.e., a fifth
generation district system with unidirectional mass flow rate in the
district loop, and energy transfer stations connected in series.
In this model, the temperature of the district loop is stabilized through
the operation of the plant and the borefield.
The main circulation pump has a constant mass flow rate.
Each substation takes water from the main district loop and feeds its return water back
into the main district loop downstream from the intake.
The pipes of the main loop are designed for a pressure drop of
<code>dpDis_length_nominal=250</code> Pa/m at the design flow rate.
</p>
<h4>References</h4>
<p>
Sommer T., Sulzer M., Wetter M., Sotnikov A., Mennel S., Stettler C.
<i>The reservoir network: A new network topology for district heating
and cooling.</i>
Energy, Volume 199, 15 May 2020, 117418.
</p>
</html>",       revisions="<html>
<ul>
<li>
February 23, 2021, by Antoine Gautier:<br/>
Refactored with base classes from the <code>DHC</code> package.<br/>
This is for
<a href=\"https://github.com/lbl-srg/modelica-buildings/issues/1769\">
issue 1769</a>.
</li>
<li>
January 12, 2020, by Michael Wetter:<br/>
Added documentation.
</li>
</ul>
</html>"));
      end SeriesConstantFlow;

      model SeriesVariableFlow
        "Example of series connection with variable district water mass flow rate"
        extends estcp.DHC.Examples.Combined.BaseClasses.PartialSeries(
            redeclare estcp.DHC.Loads.Combined.BuildingTimeSeriesWithETS bui[
            nBui](final filNam=filNam), datDes(
            mPumDis_flow_nominal=97.3,
            mPipDis_flow_nominal=69.5,
            dp_length_nominal=250,
            epsPla=0.91));
        parameter String filNam[nBui]={
          "modelica://Buildings/Resources/Data/Experimental/DHC/Loads/Examples/SwissOffice_20190916.mos",
          "modelica://Buildings/Resources/Data/Experimental/DHC/Loads/Examples/SwissResidential_20190916.mos",
          "modelica://Buildings/Resources/Data/Experimental/DHC/Loads/Examples/SwissHospital_20190916.mos"}
          "Library paths of the files with thermal loads as time series";
        Modelica.Blocks.Sources.Constant masFloDisPla(
          k=datDes.mPla_flow_nominal)
          "District water flow rate to plant"
          annotation (Placement(transformation(extent={{-250,10},{-230,30}})));
        Buildings.Controls.OBC.CDL.Reals.Sources.Constant THotWatSupSet[nBui](
          k=fill(63 + 273.15, nBui))
          "Hot water supply temperature set point"
          annotation (Placement(transformation(extent={{-190,170},{-170,190}})));
        Buildings.Controls.OBC.CDL.Reals.Sources.Constant TColWat[nBui](
          k=fill(15 + 273.15, nBui))
          "Cold water temperature"
          annotation (Placement(transformation(extent={{-160,150},{-140,170}})));
        estcp.DHC.Networks.Controls.MainPump conPum(
          nMix=nBui,
          nSou=2,
          TMin=279.15,
          TMax=290.15,
          use_temperatureShift=false) "Main pump controller" annotation (
            Placement(transformation(extent={{-280,-70},{-260,-50}})));
        Buildings.Controls.OBC.CDL.Reals.MultiplyByParameter gai(k=datDes.mPumDis_flow_nominal)
          "Scale with nominal mass flow rate"
          annotation (Placement(transformation(extent={{-240,-70},{-220,-50}})));
      equation
        connect(masFloDisPla.y, pla.mPum_flow) annotation (Line(points={{-229,20},{
                -184,20},{-184,4.66667},{-161.333,4.66667}},
                                        color={0,0,127}));
        connect(THotWatSupSet.y, bui.THotWatSupSet) annotation (Line(points={{-168,
                180},{-40,180},{-40,183},{-12,183}}, color={0,0,127}));
        connect(TColWat.y, bui.TColWat) annotation (Line(points={{-138,160},{-40,160},
                {-40,164},{-8,164},{-8,168}},
                                      color={0,0,127}));
        connect(pumDis.m_flow_in, gai.y)
          annotation (Line(points={{68,-60},{-218,-60}},
                                                       color={0,0,127}));
        connect(conPum.y, gai.u)
          annotation (Line(points={{-258,-60},{-242,-60}},
                                                       color={0,0,127}));
        connect(dis.TOut, conPum.TMix) annotation (Line(points={{22,134},{30,134},{30,
                120},{-300,120},{-300,-54},{-282,-54}},
                                               color={0,0,127}));
        connect(TDisWatRet.T, conPum.TSouIn[1]) annotation (Line(points={{69,0},{60,0},
                {60,80},{-304,80},{-304,-61},{-282,-61}},
                                                  color={0,0,127}));
        connect(TDisWatBorLvg.T, conPum.TSouIn[2]) annotation (Line(points={{-91,-40},
                {-290,-40},{-290,-58},{-282,-58},{-282,-59}},
                                                        color={0,0,127}));
        connect(TDisWatBorLvg.T, conPum.TSouOut[1]) annotation (Line(points={{-91,-40},
                {-290,-40},{-290,-67},{-282,-67}},              color={0,0,127}));
        connect(TDisWatSup.T, conPum.TSouOut[2]) annotation (Line(points={{-91,20},{-100,
                20},{-100,60},{-296,60},{-296,-65},{-282,-65}},
                                                         color={0,0,127}));
        connect(gai.y, pumSto.m_flow_in) annotation (Line(points={{-218,-60},{-180,-60},
                {-180,-68}}, color={0,0,127}));
        annotation (
        Diagram(
        coordinateSystem(preserveAspectRatio=false, extent={{-360,-260},{360,260}})),
          __Dymola_Commands(
        file="modelica://Buildings/Resources/Scripts/Dymola/Experimental/DHC/Examples/Combined/SeriesVariableFlow.mos"
        "Simulate and plot"),
        experiment(
            StopTime=604800,
            Tolerance=1e-06),
          Documentation(revisions="<html>
<ul>
<li>
February 23, 2021, by Antoine Gautier:<br/>
Refactored with base classes from the <code>DHC</code> package.<br/>
This is for
<a href=\"https://github.com/lbl-srg/modelica-buildings/issues/1769\">
issue 1769</a>.
</li>
<li>
January 12, 2020, by Michael Wetter:<br/>
Added documentation.
</li>
</ul>
</html>",       info="<html>
<p>
This model is identical to
<a href=\"modelica://Buildings.Experimental.DHC.Examples.Combined.SeriesConstantFlow\">
Buildings.Experimental.DHC.Examples.Combined.SeriesConstantFlow</a>
except for the pipe diameter and the control of the main circulation pump.
Rather than having a constant mass flow rate, the mass flow rate is varied
based on the mixing temperatures after each agent.
If these mixing temperatures are sufficiently far away from the minimum or maximum
allowed loop temperature, then the mass flow rate is reduced to save pump energy.
</p>
</html>"));
      end SeriesVariableFlow;

      package BaseClasses "Package with base classes that are used by multiple models"
        extends Modelica.Icons.BasesPackage;

        partial model PartialSeries "Partial model for series network"
          extends Modelica.Icons.Example;
          package Medium = Buildings.Media.Water "Medium model";
          constant Real facMul = 10
            "Building loads multiplier factor";
          parameter Real dpDis_length_nominal(final unit="Pa/m") = 250
            "Pressure drop per pipe length at nominal flow rate - Distribution line";
          parameter Real dpCon_length_nominal(final unit="Pa/m") = 250
            "Pressure drop per pipe length at nominal flow rate - Connection line";
          parameter Boolean allowFlowReversalSer = true
            "Set to true to allow flow reversal in the service lines"
            annotation(Dialog(tab="Assumptions"), Evaluate=true);
          parameter Boolean allowFlowReversalBui = false
            "Set to true to allow flow reversal for in-building systems"
            annotation(Dialog(tab="Assumptions"), Evaluate=true);
          parameter Integer nBui = datDes.nBui
            "Number of buildings connected to DHC system"
            annotation (Evaluate=true);
          inner parameter
            estcp.DHC.Examples.Combined.BaseClasses.DesignDataSeries datDes(final
              mCon_flow_nominal=bui.ets.mSerWat_flow_nominal) "Design data"
            annotation (Placement(transformation(extent={{-340,220},{-320,240}})));
          // COMPONENTS
          estcp.DHC.Plants.Reservoir.BoreField borFie(redeclare final package
              Medium = Medium) "Bore field" annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={-130,-80})));
          estcp.DHC.EnergyTransferStations.BaseClasses.Pump_m_flow pumDis(
            redeclare final package Medium = Medium,
            final m_flow_nominal=datDes.mPumDis_flow_nominal,
            final allowFlowReversal=allowFlowReversalSer,
            dp_nominal=150E3) "Distribution pump" annotation (Placement(
                transformation(
                extent={{10,-10},{-10,10}},
                rotation=90,
                origin={80,-60})));
          Buildings.Fluid.Sources.Boundary_pT bou(
            redeclare final package Medium=Medium,
            final nPorts=1)
            "Boundary pressure condition representing the expansion vessel"
            annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=180,
                origin={112,-20})));
          estcp.DHC.EnergyTransferStations.BaseClasses.Pump_m_flow pumSto(
              redeclare final package Medium = Medium, m_flow_nominal=datDes.mSto_flow_nominal)
            "Bore field pump" annotation (Placement(transformation(
                extent={{10,10},{-10,-10}},
                rotation=180,
                origin={-180,-80})));
          estcp.DHC.Networks.Combined.BaseClasses.ConnectionSeriesStandard conPla(
            redeclare final package Medium = Medium,
            final mDis_flow_nominal=datDes.mPipDis_flow_nominal,
            final mCon_flow_nominal=datDes.mPla_flow_nominal,
            lDis=0,
            lCon=0,
            final dhDis=0.2,
            final dhCon=0.2,
            final allowFlowReversal=allowFlowReversalSer)
            "Connection to the plant (pressure drop lumped in plant and network model)"
            annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=90,
                origin={-80,-10})));
          estcp.DHC.Networks.Combined.BaseClasses.ConnectionSeriesStandard conSto(
            redeclare final package Medium = Medium,
            final mDis_flow_nominal=datDes.mPipDis_flow_nominal,
            final mCon_flow_nominal=datDes.mSto_flow_nominal,
            lDis=0,
            lCon=0,
            final dhDis=0.2,
            final dhCon=0.2,
            final allowFlowReversal=allowFlowReversalSer)
            "Connection to the bore field (pressure drop lumped in plant and network model)"
            annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=90,
                origin={-80,-90})));
          estcp.DHC.Plants.Heating.SewageHeatRecovery pla(
            redeclare final package Medium = Medium,
            final mSew_flow_nominal=datDes.mPla_flow_nominal,
            final mDis_flow_nominal=datDes.mPla_flow_nominal,
            final dpSew_nominal=datDes.dpPla_nominal,
            final dpDis_nominal=datDes.dpPla_nominal,
            final epsHex=datDes.epsPla) "Sewage heat recovery plant"
            annotation (Placement(transformation(extent={{-160,-10},{-140,10}})));
          estcp.DHC.Networks.Combined.UnidirectionalSeries dis(
            redeclare final package Medium = Medium,
            final nCon=nBui,
            show_TOut=true,
            final mDis_flow_nominal=datDes.mPipDis_flow_nominal,
            final mCon_flow_nominal=datDes.mCon_flow_nominal,
            final dp_length_nominal=datDes.dp_length_nominal,
            final lDis=datDes.lDis,
            final lCon=datDes.lCon,
            final lEnd=datDes.lEnd,
            final allowFlowReversal=allowFlowReversalSer)
            "Distribution network"
            annotation (Placement(transformation(extent={{-20,130},{20,150}})));
          Buildings.Fluid.Sensors.TemperatureTwoPort TDisWatSup(redeclare
              final package Medium = Medium, final m_flow_nominal=datDes.mPumDis_flow_nominal)
            "District water supply temperature" annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=90,
                origin={-80,20})));
          Buildings.Fluid.Sensors.TemperatureTwoPort TDisWatRet(redeclare
              final package Medium = Medium, final m_flow_nominal=datDes.mPumDis_flow_nominal)
            "District water return temperature" annotation (Placement(
                transformation(
                extent={{10,-10},{-10,10}},
                rotation=90,
                origin={80,0})));
          Buildings.Fluid.Sensors.TemperatureTwoPort TDisWatBorLvg(redeclare
              final package Medium = Medium, final m_flow_nominal=datDes.mPumDis_flow_nominal)
            "District water borefield leaving temperature" annotation (
              Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=90,
                origin={-80,-40})));
          replaceable
            estcp.DHC.Loads.Combined.BaseClasses.PartialBuildingWithETS bui[nBui]
            constrainedby
            estcp.DHC.Loads.Combined.BaseClasses.PartialBuildingWithETS(
            bui(each final facMul=facMul),
            redeclare each final package MediumBui = Medium,
            redeclare each final package MediumSer = Medium,
            each final allowFlowReversalBui=allowFlowReversalBui,
            each final allowFlowReversalSer=allowFlowReversalSer)
            "Building and ETS"
            annotation (Placement(transformation(extent={{-10,170},{10,190}})));
          Modelica.Blocks.Sources.Constant TSewWat(k=273.15 + 17)
            "Sewage water temperature"
            annotation (Placement(transformation(extent={{-280,30},{-260,50}})));
         Buildings.Controls.OBC.CDL.Reals.Sources.Constant THeaWatSupMaxSet[nBui](
            k=bui.THeaWatSup_nominal)
            "Heating water supply temperature set point - Maximum value"
            annotation (Placement(transformation(extent={{-250,210},{-230,230}})));
         Buildings.Controls.OBC.CDL.Reals.Sources.Constant TChiWatSupSet[nBui](
            k=bui.TChiWatSup_nominal)
            "Chilled water supply temperature set point"
            annotation (Placement(transformation(extent={{-220,190},{-200,210}})));
         Buildings.Controls.OBC.CDL.Reals.Sources.Constant THeaWatSupMinSet[nBui](
            each k=28 + 273.15)
            "Heating water supply temperature set point - Minimum value"
            annotation (Placement(transformation(extent={{-280,230},{-260,250}})));
         Buildings.Controls.OBC.CDL.Reals.MultiSum PPumETS(
            final nin=nBui)
            "ETS pump power"
            annotation (Placement(transformation(extent={{140,190},{160,210}})));
          Modelica.Blocks.Continuous.Integrator EPumETS(
            initType=Modelica.Blocks.Types.Init.InitialState)
            "ETS pump electric energy"
            annotation (Placement(transformation(extent={{220,190},{240,210}})));
          Modelica.Blocks.Continuous.Integrator EPumDis(
            initType=Modelica.Blocks.Types.Init.InitialState)
            "Distribution pump electric energy"
            annotation (Placement(transformation(extent={{220,-90},{240,-70}})));
          Modelica.Blocks.Continuous.Integrator EPumSto(
            initType=Modelica.Blocks.Types.Init.InitialState)
            "Storage pump electric energy"
            annotation (Placement(transformation(extent={{220,-150},{240,-130}})));
          Modelica.Blocks.Continuous.Integrator EPumPla(initType=Modelica.Blocks.Types.Init.InitialState)
            "Plant pump electric energy"
            annotation (Placement(transformation(extent={{220,30},{240,50}})));
         Buildings.Controls.OBC.CDL.Reals.MultiSum EPum(nin=4)
            "Total pump electric energy"
            annotation (Placement(transformation(extent={{280,110},{300,130}})));
         Buildings.Controls.OBC.CDL.Reals.MultiSum PHeaPump(
            final nin=nBui)
            "Heat pump power"
            annotation (Placement(transformation(extent={{140,150},{160,170}})));
          Modelica.Blocks.Continuous.Integrator EHeaPum(
            initType=Modelica.Blocks.Types.Init.InitialState)
            "Heat pump electric energy"
            annotation (Placement(transformation(extent={{220,150},{240,170}})));
         Buildings.Controls.OBC.CDL.Reals.MultiSum ETot(nin=2) "Total electric energy"
            annotation (Placement(transformation(extent={{320,150},{340,170}})));
          estcp.DHC.Loads.BaseClasses.ConstraintViolation conVio(
            final uMin(
              final unit="K",
              displayUnit="degC") = datDes.TLooMin,
            final uMax(
              final unit="K",
              displayUnit="degC") = datDes.TLooMax,
            final nu=3 + nBui,
            u(each final unit="K", each displayUnit="degC"))
            "Check if loop temperatures are within given range"
            annotation (Placement(transformation(extent={{320,10},{340,30}})));
        equation
          connect(dis.TOut, conVio.u[4:4+nBui-1]);
          connect(bou.ports[1], pumDis.port_a)
            annotation (Line(points={{102,-20},{80,-20},{80,-50}}, color={0,127,255}));
          connect(borFie.port_b, conSto.port_aCon) annotation (Line(points={{-120,-80},
                  {-100,-80},{-100,-84},{-90,-84}}, color={0,127,255}));
          connect(pumDis.port_b, conSto.port_aDis) annotation (Line(points={{80,-70},{
                  80,-120},{-80,-120},{-80,-100}}, color={0,127,255}));
          connect(borFie.port_a, pumSto.port_b)
            annotation (Line(points={{-140,-80},{-170,-80}}, color={0,127,255}));
          connect(conSto.port_bCon, pumSto.port_a) annotation (Line(points={{-90,-90},{
                  -100,-90},{-100,-100},{-200,-100},{-200,-80},{-190,-80}}, color={0,
                  127,255}));
          connect(conPla.port_bDis, TDisWatSup.port_a)
            annotation (Line(points={{-80,0},{-80,10}}, color={0,127,255}));
          connect(TDisWatSup.port_b, dis.port_aDisSup) annotation (Line(points={{-80,30},
                  {-80,140},{-20,140}}, color={0,127,255}));
          connect(dis.port_bDisSup, TDisWatRet.port_a)
            annotation (Line(points={{20,140},{80,140},{80,10}}, color={0,127,255}));
          connect(TDisWatRet.port_b, pumDis.port_a)
            annotation (Line(points={{80,-10},{80,-50}}, color={0,127,255}));
          connect(conSto.port_bDis, TDisWatBorLvg.port_a)
            annotation (Line(points={{-80,-80},{-80,-50}}, color={0,127,255}));
          connect(TDisWatBorLvg.port_b, conPla.port_aDis)
            annotation (Line(points={{-80,-30},{-80,-20}}, color={0,127,255}));
          connect(bui.port_bSerAmb, dis.ports_aCon) annotation (Line(points={{10,180},{20,
                  180},{20,160},{12,160},{12,150}}, color={0,127,255}));
          connect(dis.ports_bCon, bui.port_aSerAmb) annotation (Line(points={{-12,150},{
                  -12,160},{-20,160},{-20,180},{-10,180}}, color={0,127,255}));
          connect(TSewWat.y, pla.TSewWat) annotation (Line(points={{-259,40},{
                  -180,40},{-180,7.33333},{-161.333,7.33333}},
                                      color={0,0,127}));
          connect(THeaWatSupMaxSet.y, bui.THeaWatSupMaxSet) annotation (Line(points={{-228,
                  220},{-20,220},{-20,187},{-12,187}}, color={0,0,127}));
          connect(TChiWatSupSet.y, bui.TChiWatSupSet) annotation (Line(points={{-198,200},
                  {-24,200},{-24,185},{-12,185}},      color={0,0,127}));
          connect(pla.port_bSerAmb, conPla.port_aCon) annotation (Line(points={{-140,1.33333},
                  {-100,1.33333},{-100,-4},{-90,-4}}, color={0,127,255}));
          connect(conPla.port_bCon, pla.port_aSerAmb) annotation (Line(points={{-90,-10},
                  {-100,-10},{-100,-20},{-200,-20},{-200,1.33333},{-160,1.33333}},
                color={0,127,255}));
          connect(THeaWatSupMinSet.y, bui.THeaWatSupMinSet) annotation (Line(points={{-258,
                  240},{-16,240},{-16,189},{-12,189}}, color={0,0,127}));
          connect(bui.PPumETS, PPumETS.u)
            annotation (Line(points={{7,192},{7,200},{138,200}}, color={0,0,127}));
          connect(PPumETS.y, EPumETS.u)
            annotation (Line(points={{162,200},{218,200}}, color={0,0,127}));
          connect(pumDis.P, EPumDis.u)
            annotation (Line(points={{71,-71},{71,-80},{218,-80}}, color={0,0,127}));
          connect(pumSto.P, EPumSto.u) annotation (Line(points={{-169,-71},{-160,-71},{-160,
                  -140},{218,-140}}, color={0,0,127}));
          connect(pla.PPum, EPumPla.u) annotation (Line(points={{-138.667,
                  5.33333},{-120,5.33333},{-120,40},{218,40}},
                                                     color={0,0,127}));
          connect(EPumETS.y, EPum.u[1]) annotation (Line(points={{241,200},{260,200},{260,
                  119.25},{278,119.25}},
                                       color={0,0,127}));
          connect(EPumPla.y, EPum.u[2]) annotation (Line(points={{241,40},{260,40},{260,
                  119.75},{278,119.75}},
                                       color={0,0,127}));
          connect(EPumDis.y, EPum.u[3]) annotation (Line(points={{241,-80},{262,-80},{262,
                  120.25},{278,120.25}},
                                       color={0,0,127}));
          connect(EPumSto.y, EPum.u[4]) annotation (Line(points={{241,-140},{264,-140},{
                  264,120.75},{278,120.75}},
                                           color={0,0,127}));
          connect(bui.PHea, PHeaPump.u) annotation (Line(points={{12,189},{120,189},{
                  120,160},{138,160}},
                                   color={0,0,127}));
          connect(PHeaPump.y, EHeaPum.u)
            annotation (Line(points={{162,160},{218,160}}, color={0,0,127}));
          connect(EHeaPum.y, ETot.u[1]) annotation (Line(points={{241,160},{300,160},{300,
                  159.5},{318,159.5}}, color={0,0,127}));
          connect(EPum.y, ETot.u[2]) annotation (Line(points={{302,120},{310,120},{310,160.5},
                  {318,160.5}},    color={0,0,127}));
          connect(TDisWatSup.T, conVio.u[1]) annotation (Line(points={{-91,20},{-100,20},
                  {-100,12},{-60,12},{-60,20},{318,20}},           color={0,0,127}));
          connect(TDisWatBorLvg.T, conVio.u[2]) annotation (Line(points={{-91,-40},{-100,
                  -40},{-100,-30},{-60,-30},{-60,-40},{300,-40},{300,20},{318,20}},
                                                                color={0,0,127}));
          connect(TDisWatRet.T, conVio.u[3]) annotation (Line(points={{69,6.66134e-16},{
                  60,6.66134e-16},{60,20},{318,20}},           color={0,0,127}));
          annotation (Diagram(
            coordinateSystem(preserveAspectRatio=false, extent={{-360,-260},{360,260}})),
              Documentation(revisions="<html>
<ul>
<li>
June 2, 2023, by Michael Wetter:<br/>
Added units to <code>conVio</code>.
</li>
<li>
November 16, 2022, by Michael Wetter:<br/>
Set correct nominal pressure for distribution pump.
</li>
<li>
February 23, 2021, by Antoine Gautier:<br/>
Refactored with base classes from the <code>DHC</code> package.<br/>
This is for
<a href=\"https://github.com/lbl-srg/modelica-buildings/issues/1769\">
issue 1769</a>.
</li>
<li>
January 16, 2020, by Michael Wetter:<br/>
Added documentation.
</li>
</ul>
</html>",         info="<html>
<p>
Partial model that is used by the reservoir network models.
The reservoir network models extend this model, add controls,
and configure some component sizes.
</p>
</html>"));
        end PartialSeries;

        record DesignDataSeries "Record with design data for series network"
          extends Modelica.Icons.Record;
          parameter Integer nBui = 3
            "Number of served buildings"
            annotation(Evaluate=true);
          parameter Modelica.Units.SI.MassFlowRate mPumDis_flow_nominal=95
            "Nominal mass flow rate of main distribution pump";
          parameter Modelica.Units.SI.MassFlowRate mPipDis_flow_nominal=
              mPumDis_flow_nominal "Nominal mass flow rate for main pipe sizing";
          parameter Modelica.Units.SI.MassFlowRate mCon_flow_nominal[nBui]
            "Nominal mass flow rate in each connection line";
          parameter Modelica.Units.SI.MassFlowRate mPla_flow_nominal=11.45
            "Plant HX nominal mass flow rate (primary = secondary)";
          parameter Modelica.Units.SI.MassFlowRate mSto_flow_nominal=105
            "Storage nominal mass flow rate";
          parameter Modelica.Units.SI.PressureDifference dpPla_nominal=50000
            "Plant HX pressure drop at nomninal flow rate (primary = secondary)";
          parameter Real epsPla = 0.935
            "Plant HX effectiveness (constant)";
          parameter Modelica.Units.SI.Temperature TLooMin=273.15 + 6
            "Minimum loop temperature";
          parameter Modelica.Units.SI.Temperature TLooMax=273.15 + 17
            "Maximum loop temperature";
          parameter Real dp_length_nominal(final unit="Pa/m") = 250
            "Pressure drop per pipe length at nominal flow rate";
          parameter Modelica.Units.SI.Length lDis[nBui]=fill(100, nBui)
            "Length of the distribution pipe before each connection";
          parameter Modelica.Units.SI.Length lCon[nBui]=fill(10, nBui)
            "Length of each connection pipe (supply only, not counting return line)";
          parameter Modelica.Units.SI.Length lEnd=sum(lDis)
            "Length of the end of the distribution line (after last connection)";
          annotation (
            defaultComponentName="datDes",
            defaultComponentPrefixes="inner",
            Documentation(info="<html>
<p>
This record contains parameter declarations used in example models of DHC systems.
</p>
</html>"));
        end DesignDataSeries;
      annotation (Documentation(info="<html>
<p>
This package contains base classes that are used to construct the classes in
<a href=\"modelica://Buildings.Experimental.DHC.Examples.Combined\">
Buildings.Experimental.DHC.Examples.Combined</a>.
</p>
</html>"));
      end BaseClasses;
      annotation (
        preferredView="info",
        Documentation(
          info="<html>
<p>
This package contains example models for
district heating and cooling systems.
</p>
</html>"));
    end Combined;

    package Cooling "Example model for entire district cooling system"
      extends Modelica.Icons.VariantsPackage;

      model ElectricChillersDirectETS "Example model for district cooling system with 
  an electric chiller plant and a direct controlled ETS at each building"
        extends Modelica.Icons.Example;
        package Medium=Buildings.Media.Water
          "Medium model for water";
        // Chiller and cooling tower
        replaceable parameter Buildings.Fluid.Chillers.Data.ElectricEIR.ElectricEIRChiller_York_YT_1055kW_5_96COP_Vanes perChi
          "Performance data of chiller"
          annotation (Dialog(group="Chiller and cooling tower"));
        parameter Modelica.Units.SI.MassFlowRate mCHW_flow_nominal=18.3
          "Nominal chilled water mass flow rate"
          annotation (Dialog(group="Chiller and cooling tower"));
        parameter Modelica.Units.SI.MassFlowRate mCW_flow_nominal=34.7
          "Nominal condenser water mass flow rate"
          annotation (Dialog(group="Chiller and cooling tower"));
        parameter Modelica.Units.SI.PressureDifference dpCHW_nominal=44.8*1000
          "Nominal chilled water side pressure"
          annotation (Dialog(group="Chiller and cooling tower"));
        parameter Modelica.Units.SI.PressureDifference dpCW_nominal=46.2*1000
          "Nominal condenser water side pressure"
          annotation (Dialog(group="Chiller and cooling tower"));
        parameter Modelica.Units.SI.Pressure dpDis=30000
          "Total pressure drop in the district pipes";
        parameter Modelica.Units.SI.Power QChi_nominal=mCHW_flow_nominal*4200*(6.67-18.56)
          "Nominal cooling capaciaty (Negative means cooling)"
          annotation (Dialog(group="Chiller and cooling tower"));
        // Pumps
        parameter Buildings.Fluid.Movers.Data.Generic perCHWPum(
          pressure=Buildings.Fluid.Movers.BaseClasses.Characteristics.flowParameters(
            V_flow=mCHW_flow_nominal/1000*{0.2,0.6,0.8,1.0},
            dp=(dpCHW_nominal+dpDis+20000+6000*3)*{1,0.8,0.6,0.2}))
          "Performance data for chilled water pumps"
          annotation (Dialog(group="Pumps"));
        parameter Buildings.Fluid.Movers.Data.Generic perCWPum(
          pressure=Buildings.Fluid.Movers.BaseClasses.Characteristics.flowParameters(
            V_flow=mCW_flow_nominal/1000*{0.2,0.6,1.0,1.2},
            dp=(dpCW_nominal+6000*2)*{1,0.8,0.6,0.2}))
          "Performance data for condenser water pumps"
          annotation (Dialog(group="Pumps"));
        // Network
        parameter Integer nLoa=3
          "Number of served loads"
          annotation (Dialog(group="Network"));
        final parameter Modelica.Units.SI.MassFlowRate mCon_flow_nominal[nLoa]=fill(10,nLoa)
          "Nominal mass flow rate in each connection line";
        // Buildings
        parameter String filNam[nLoa]={
         Modelica.Utilities.Files.loadResource("modelica://Buildings/Resources/Data/Experimental/DHC/Loads/Examples/MediumOffice-90.1-2010-5A.mos"),
         Modelica.Utilities.Files.loadResource("modelica://Buildings/Resources/Data/Experimental/DHC/Loads/Examples/MediumOffice-90.1-2010-5A.mos"),
         Modelica.Utilities.Files.loadResource("modelica://Buildings/Resources/Data/Experimental/DHC/Loads/Examples/MediumOffice-90.1-2010-5A.mos")}
          "Library path of the file with thermal loads as time series"
          annotation (Dialog(group="Buildings"));
        final parameter Modelica.Units.SI.HeatFlowRate QCoo_flow_nominal[nLoa](
          each max=-Modelica.Constants.eps)={estcp.DHC.Loads.BaseClasses.getPeakLoad(
          string="#Peak space cooling load",
          filNam=filNam[i]) for i in 1:nLoa}
          "Space cooling design load (<=0)";
        final parameter Modelica.Units.SI.MassFlowRate mBui_flow_nominal[nLoa](
          each final min=0,
          each final start=0.5)={-QCoo_flow_nominal[i]/(cp*buiETS[i].dT_nominal) for i in 1:nLoa}
          "Nominal mass flow rate of building cooling side";
        estcp.DHC.Plants.Cooling.ElectricChillerParallel pla(
          perChi=perChi,
          dTApp=3,
          perCHWPum=perCHWPum,
          perCWPum=perCWPum,
          mCHW_flow_nominal=mCHW_flow_nominal,
          dpCHW_nominal=dpCHW_nominal,
          QChi_nominal=QChi_nominal,
          mMin_flow=mCHW_flow_nominal*0.25,
          mCW_flow_nominal=mCW_flow_nominal,
          dpCW_nominal=dpCW_nominal,
          TAirInWB_nominal=298.7,
          TCW_nominal=308.15,
          dT_nominal=5.56,
          TMin=288.15,
          PFan_nominal=5000,
          tau=60,
          yCHWP_start=fill(0, 2),
          yCWP_start=fill(0, 2),
          dpCooTowVal_nominal=6000,
          dpCHWPumVal_nominal=6000,
          dpCWPumVal_nominal=6000,
          tWai=30,
          energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial)
          "District cooling plant"
          annotation (Placement(transformation(extent={{50,-20},{70,0}})));
        Buildings.BoundaryConditions.WeatherData.ReaderTMY3 weaDat(
          final computeWetBulbTemperature=true,
          filNam=Modelica.Utilities.Files.loadResource("modelica://Buildings/Resources/weatherdata/USA_CA_San.Francisco.Intl.AP.724940_TMY3.mos"))
          "Weather data"
          annotation (Placement(transformation(extent={{0,60},{20,80}})));
        Modelica.Blocks.Sources.Constant TCHWSupSet(k=273.15+7)
          "Chilled water supply temperature setpoint"
          annotation (Placement(transformation(extent={{0,-60},{20,-40}})));
        estcp.DHC.Networks.Distribution2PipePlugFlow dis(
          redeclare final package Medium = Medium,
          nCon=nLoa,
          allowFlowReversal=false,
          mDis_flow_nominal=sum(dis.mCon_flow_nominal),
          mCon_flow_nominal=mBui_flow_nominal,
          mEnd_flow_nominal=mBui_flow_nominal[nLoa],
          length=fill(30, nLoa))
          "Distribution network for district cooling system"
          annotation (Placement(transformation(extent={{100,-20},{140,0}})));
        estcp.DHC.Loads.Cooling.BuildingTimeSeriesWithETS buiETS[nLoa](
          each yMin=0.05,
          each use_inputFilter=true,
          filNam=filNam,
          mBui_flow_nominal=mBui_flow_nominal,
          each bui(w_aLoaCoo_nominal=0.015))
          "Vectorized time series building load model connected with ETS for cooling"
          annotation (Placement(transformation(extent={{120,40},{140,60}})));
        Modelica.Blocks.Sources.Constant TDisRetSet(k=273.15 + 16)
          "Setpoint for district return temperature"
          annotation (Placement(transformation(extent={{70,60},{90,80}})));
        Modelica.Blocks.Math.Sum QTotCoo_flow(nin=nLoa)
          "Total cooling flow rate for all buildings "
          annotation (Placement(transformation(extent={{-160,-10},{-140,10}})));
        Buildings.Controls.OBC.CDL.Reals.LessThreshold offCoo(t=1e-4)
          "Threshold comparison to disable the plant"
          annotation (Placement(transformation(extent={{-80,-10},{-60,10}})));
        Modelica.Blocks.Math.Gain norQFlo(k=1/sum(QCoo_flow_nominal))
          "Normalized Q_flow"
          annotation (Placement(transformation(extent={{-120,-10},{-100,10}})));
        Buildings.HeatTransfer.Sources.FixedTemperature gnd(T=285.15) "Ground"
          annotation (Placement(transformation(extent={{140,-60},{120,-40}})));
        Buildings.Controls.OBC.CDL.Logical.Timer tim(t=3600)
          annotation (Placement(transformation(extent={{-40,-10},{-20,10}})));
        Buildings.Controls.OBC.CDL.Logical.Not onPla "On signal for the plant"
          annotation (Placement(transformation(extent={{0,-18},{20,2}})));
      protected
        parameter Modelica.Units.SI.SpecificHeatCapacity cp=Medium.specificHeatCapacityCp(
          Medium.setState_pTX(
            Medium.p_default,
            Medium.T_default,
            Medium.X_default))
          "Default specific heat capacity of medium";
      equation
        connect(weaDat.weaBus, pla.weaBus) annotation (Line(
            points={{20,70},{60,70},{60,-1.13333},{60.0333,-1.13333}},
            color={255,204,51},
            thickness=0.5));
        connect(TCHWSupSet.y, pla.TCHWSupSet) annotation (Line(points={{21,-50},{32,
                -50},{32,-4.73333},{49.3333,-4.73333}},   color={0,0,127}));
        connect(pla.port_aSerCoo, dis.port_bDisRet) annotation (Line(points={{50,
                -11.3333},{36,-11.3333},{36,-60},{88,-60},{88,-16},{100,-16}},color={
                0,127,255}));
        connect(dis.port_aDisSup, pla.port_bSerCoo) annotation (Line(points={{100,-10},
                {100,-11.3333},{70,-11.3333}},        color={0,127,255}));
        connect(dis.ports_bCon, buiETS.port_aSerCoo)
          annotation (Line(points={{108,0},{80,0},{80,42},{120,42}},
                                                                 color={0,127,255}));
        connect(buiETS.port_bSerCoo, dis.ports_aCon) annotation (Line(points={{140,42},
                {160,42},{160,0},{132,0}},
                                        color={0,127,255}));
        for i in 1:nLoa loop
          connect(TDisRetSet.y, buiETS[i].TSetDisRet)
           annotation (Line(points={{91,70},{100,70},{100,57},{119,57}},
                                                                     color={0,0,127}));
        end for;
        connect(buiETS.QCoo_flow, QTotCoo_flow.u) annotation (Line(points={{137,38},{136,
                38},{136,24},{-170,24},{-170,0},{-162,0}},
                                         color={0,0,127}));
        connect(QTotCoo_flow.y, norQFlo.u)
          annotation (Line(points={{-139,0},{-122,0}},
                                                     color={0,0,127}));
        connect(norQFlo.y, offCoo.u)
          annotation (Line(points={{-99,0},{-82,0}}, color={0,0,127}));
        connect(gnd.port, dis.heatPort)
          annotation (Line(points={{120,-50},{107,-50},{107,-20}},
                                                                color={191,0,0}));
        connect(offCoo.y, tim.u)
          annotation (Line(points={{-58,0},{-42,0}},   color={255,0,255}));
        connect(tim.passed, onPla.u) annotation (Line(points={{-18,-8},{-2,-8}},
                                 color={255,0,255}));
        connect(onPla.y, pla.on) annotation (Line(points={{22,-8},{26,-8},{26,-2.6},{
                49.2667,-2.6}},         color={255,0,255}));
          annotation (
          Diagram(
            coordinateSystem(
            preserveAspectRatio=false, extent={{-180,-100},{180,100}})),
          __Dymola_Commands(
            file="modelica://Buildings/Resources/Scripts/Dymola/Experimental/DHC/Examples/Cooling/ElectricChillersDirectETS.mos" "Simulate and plot"),
          experiment(
            StartTime=15724800,
            StopTime=16329600,
            Tolerance=1e-06),
          Documentation(info="<html>
<p>
This model illustrates an example of district cooling system, 
consisting of a cooling plant with parallel electric chillers 
(<a href=\"modelica://Buildings/Experimental/DHC/Plants/Cooling/ElectricChillerParallel.mo\">
Buildings.Experimental.DHC.Plants.Cooling.ElectricChillerParallel</a>), 
a two-pipe distribution network with plug flow pipes (<a href=\"modelica://Buildings/Experimental/DHC/Networks/Distribution2PipePlugFlow.mo\">
Buildings.Experimental.DHC.Networks.Distribution2PipePlugFlow</a>), 
and time series building load that have directly connected ETS 
with the chilled water return temperatures controlled above a minimum 
threshold
(<a href=\"modelica://Buildings/Experimental/DHC/Loads/Cooling/BuildingTimeSeriesWithETS.mo\">
Buildings.Experimental.DHC.Loads.Cooling.BuildingTimeSeriesWithETS</a>).
This configuration is illustrated in the schematic below.
</p>
<p align=\"center\"><img src=\"modelica://Buildings/Resources/Images/Experimental/DHC/Examples/Cooling/ElectricChillersDirectETS.png\" alt=\"DC Schematic\"/></p>
</html>",       revisions="<html>
<ul>
<li>
August 22, 2023, by Michael Wetter:<br/>
Changed call to <code>loadResources</code>. This is needed for Dymola 2024x beta1 on Linux.
</li>
<li>
January 2, 2023, by Kathryn Hinkelman:<br/>
Revised chilled water pump controls to be constant speed and running 1-and-1 with the chillers.<br>
Changed building-side ets from direct uncontrolled to controlled.<br>
Revised distribution network from fixed resistance pipes to plug flow pipes. 
</li>
<li>
December 21, 2022, by Kathryn Hinkelman:<br/>
Corrected <code>dpMea</code> location to be at the terminal building.
Removed in-building pumping for direct uncontrolled ETS example.<br> 
This is for <a href=\"https://github.com/lbl-srg/modelica-buildings/issues/2912#issuecomment-1324375700\">#2912</a>.
</li>
<li>
December 18, 2022, by Kathryn Hinkelman:<br/>
Relocated dp sensor for CHW pump control to most distal building.
This is for <a href=\"https://github.com/lbl-srg/modelica-buildings/issues/2912#issuecomment-1324375700\">#2912</a>.
</li>
<li>March 20, 2022, by Chengnan Shi:<br>First implementation. </li>
</ul>
</html>"),Icon(coordinateSystem(extent={{-100,-100},{100,100}})));
      end ElectricChillersDirectETS;
      annotation (
        preferredView="info",
        Documentation(
          info="<html>
<p>
This package contains an example model for
district cooling system.
</p>
</html>"));
    end Cooling;

    package Steam "Package of example models for steam district heating systems"
      extends Modelica.Icons.VariantsPackage;

      model SingleBoiler "Example model for a complete steam district heating system with a
  central plant that contains a single boiler"
        extends Modelica.Icons.Example;

        package MediumSte = Buildings.Media.Steam (p_default=400000,
          T_default=273.15+143.61,
          h_default=2738100)
          "Steam medium";
        package MediumWat =
          Buildings.Media.Specialized.Water.TemperatureDependentDensity (
            p_default=101325,
            T_default=100+273.15,
            h_default=2738100)
          "Water medium";

        parameter Modelica.Units.SI.AbsolutePressure pSat=400000
          "Saturation pressure, high pressure";
        parameter Modelica.Units.SI.AbsolutePressure pLow=200000
          "Reduced pressure, after PRV";
        parameter Modelica.Units.SI.Temperature TSat=
           MediumSte.saturationTemperature(pSat)
           "Saturation temperature, at high pressure";

        parameter Integer N = 3 "Number of buildings";
        parameter Modelica.Units.SI.MassFlowRate mDis_flow_nominal=sum(bld.m_flow_nominal)*1.2
          "Nominal mass flow rate of entire district";
        parameter Modelica.Units.SI.HeatFlowRate QDis_flow_nominal=QBui_flow_nominal*N
          "Nominal heat flow rate of entire district";
        parameter Modelica.Units.SI.HeatFlowRate QBui_flow_nominal=20000
          "Nominal heat flow rate of each building";
        parameter Modelica.Units.SI.PressureDifference dpPip=6000
          "Pressure drop in the condensate return pipe";

        parameter Buildings.Fluid.Movers.Data.Generic perPumFW(
         pressure(V_flow=(mDis_flow_nominal/1000)*{0,1,2},
           dp=(pSat-101325)*{2,1,0}))
          "Performance data for feedwater pump at the plant";

        parameter Modelica.Units.SI.PressureDifference dp_nominal=6000
          "Pressure drop of distribution at nominal mass flow rate";

        estcp.DHC.Loads.Steam.BuildingTimeSeriesAtETS bld[N](
          redeclare final package MediumSte = MediumSte,
          redeclare final package MediumWat = MediumWat,
          each have_prv=true,
          each dp_nominal=dpPip/2,
          each final pSte_nominal=pSat,
          each final Q_flow_nominal=QBui_flow_nominal,
          each pLow_nominal=pLow,
          each energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,
          each tableOnFile=false,
          each QHeaLoa=[0,0.8; 2,1; 10,1; 12,0.5; 20,0.5; 24,0.8]*[1,0; 0,
              QBui_flow_nominal],
          each smoothness=Modelica.Blocks.Types.Smoothness.MonotoneContinuousDerivative1,

          each timeScale(displayUnit="s") = 3600,
          each show_T=true) "Buildings"
          annotation (Placement(transformation(extent={{60,20},{40,40}})));
        estcp.DHC.Networks.Steam.DistributionCondensatePipe dis(
          redeclare final package MediumSup = MediumSte,
          redeclare final package MediumRet = MediumWat,
          final dp_nominal=dp_nominal,
          final nCon=N,
          final mDis_flow_nominal=mDis_flow_nominal,
          final mCon_flow_nominal=bld.m_flow_nominal) "Distribution network"
          annotation (Placement(transformation(extent={{0,-20},{40,0}})));
        estcp.DHC.Plants.Steam.SingleBoiler pla(
          redeclare final package Medium = MediumWat,
          redeclare final package MediumHea_b = MediumSte,
          final m_flow_nominal=mDis_flow_nominal,
          final pSteSet=pSat,
          final Q_flow_nominal=QDis_flow_nominal,
          final per=perPumFW,
          energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,
          kBoi=600,
          TiBoi(displayUnit="min") = 120,
          kPum=200,
          TiPum=1000) "Plant"
          annotation (Placement(transformation(extent={{-50,20},{-30,40}})));
      equation
        connect(dis.ports_bCon, bld.port_a)
          annotation (Line(points={{8,0},{8,30},{40,30}},      color={0,127,255}));
        connect(bld.port_b, dis.ports_aCon)
          annotation (Line(points={{40,24},{32,24},{32,0}},  color={0,127,255}));
        connect(pla.port_bSerHea, dis.port_aDisSup)
          annotation (Line(points={{-30,30},{-20,30},{-20,-10},{0,-10}},
                                                       color={0,127,255}));
        connect(dis.port_bDisRet, pla.port_aSerHea) annotation (Line(points={{0,-16},{
                -60,-16},{-60,30},{-50,30}},                   color={0,127,255}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)),
            __Dymola_Commands(file=
          "modelica://Buildings/Resources/Scripts/Dymola/Experimental/DHC/Examples/Steam/SingleBoiler.mos"
          "Simulate and plot"),
          experiment(
            StopTime=86400,
            Tolerance=1e-06),
          Documentation(revisions="<html>
<ul>
<li>
September 15, 2023, by Kathryn Hinkelman:<br/>
Added publication references.
</li>
<li>
March 3, 2022 by Kathryn Hinkelman:<br/>
First implementation.
</li>
</ul>
</html>",       info="<html>
<p>
This example model demonstrates a complete system simulation for
steam district heating systems. The central plant features a single boiler.
For the distribution network, pressure losses on the condensate return
pipes are included, while the steam pipes are assumed to be lossless.
</p>
<h4>References </h4>
<p>
Kathryn Hinkelman, Saranya Anbarasu, Michael Wetter, Antoine Gautier, Wangda Zuo. 2022.
&ldquo;A Fast and Accurate Modeling Approach for Water and Steam
Thermodynamics with Practical Applications in District Heating System Simulation,&rdquo;
<i>Energy</i>, 254(A), pp. 124227.
<a href=\"https://doi.org/10.1016/j.energy.2022.124227\">10.1016/j.energy.2022.124227</a>
</p>
<p>
Kathryn Hinkelman, Saranya Anbarasu, Michael Wetter, Antoine Gautier, Baptiste Ravache, Wangda Zuo 2022.
&ldquo;Towards Open-Source Modelica Models For Steam-Based District Heating Systems.&rdquo;
<i>Proc. of the 1st International Workshop On Open Source Modelling And Simulation Of
Energy Systems (OSMSES 2022)</i>, Aachen, German, April 4-5, 2022.
<a href=\"https://doi.org/10.1109/OSMSES54027.2022.9769121\">10.1109/OSMSES54027.2022.9769121</a>
</p>
</html>"));
      end SingleBoiler;
    annotation (Documentation(info="<html>
<p>
This package contains example models for
steam-based district heating systems.
</p>
</html>"));
    end Steam;
    annotation (
      preferredView="info",
      Documentation(
        info="<html>
<p>
This package contains district heating and cooling case studies to show how the 
developed models can be used for design and operation.
</p>
</html>"));
  end Examples;

  package BaseClasses "Package with base classes for Buildings.Experimental.DHC"
    extends Modelica.Icons.BasesPackage;
    package Steam "Package for steam systems using the split-medium approach."
      extends Modelica.Icons.VariantsPackage;

      partial model PartialSaturatedControlVolume
        "Partial control volume for evaporation/condensation processes"
        extends Buildings.BaseClasses.BaseIcon;
        extends estcp.DHC.BaseClasses.Steam.PartialTwoPortTwoMedium(p_start=
              MediumSte.p_default, final T_start=
              MediumSte.saturationTemperature(p_start));

        // Medium declarations
        replaceable package MediumWat =
          Buildings.Media.Specialized.Water.TemperatureDependentDensity
          "Liquid water medium";
        replaceable package MediumSte = Buildings.Media.Steam
           "Steam medium";

        // Parameters
        parameter Modelica.Units.SI.Volume V "Total volume";
        // Initialization
        parameter Modelica.Units.SI.Volume VWat_start=V/2
          "Start value of liquid volume"
          annotation (Dialog(tab="Initialization"));

        // Variables
        MediumWat.ThermodynamicState stateWat(p=p, T=T)
          "Saturated state, liquid water";
        MediumSte.ThermodynamicState stateSte(p=p, T=T)
          "Saturated state, steam";
        MediumSte.AbsolutePressure p(
          final start=p_start,
          stateSelect=if massDynamics == Modelica.Fluid.Types.Dynamics.SteadyState
          then StateSelect.default else StateSelect.prefer)
          "Pressure inside volume";
        MediumSte.Temperature T(final start=T_start) "Temperature inside volume";
        Modelica.Units.SI.Volume VSte "Volume of steam vapor";
        Modelica.Units.SI.Volume VWat(
          final start=VWat_start,
          fixed=true,
          stateSelect=if massDynamics == Modelica.Fluid.Types.Dynamics.SteadyState
            then StateSelect.default else StateSelect.prefer)
          "Volume of liquid water phase";
        Modelica.Units.SI.VolumeFlowRate VWat_flow(start=0)
          "Volumetric flow rate of liquid water";
        MediumSte.SpecificEnthalpy hSte "Specific enthalpy of steam vapor";
        MediumWat.SpecificEnthalpy hWat "Specific enthalpy of liquid water";
        MediumSte.Density rhoSte "Density of steam vapor";
        MediumWat.Density rhoWat "Density of liquid water";
        Modelica.Units.SI.Mass m "Total mass of volume";
        Modelica.Units.SI.Energy U "Internal energy";
        Modelica.Units.SI.MassFlowRate mWat_flow "Water mass flow rate";
        Modelica.Units.SI.MassFlowRate mSte_flow "Steam mass flow rate";

        // Input
        Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_a heatPort(
          T(final start=T_start)) if not steadyDynamics "Heat port"
        annotation (Placement(transformation(extent={{-10,-90},{10,-110}})));
        //Output
        Modelica.Blocks.Interfaces.RealOutput VLiq(final unit="m3") "Liquid volume"
        annotation (Placement(transformation(
              origin={110,70},
              extent={{-10,-10},{10,10}},
              rotation=0), iconTransformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={110,70})));

      protected
        final parameter Boolean steadyDynamics=
          energyDynamics == Modelica.Fluid.Types.Dynamics.SteadyState
          "= true, if steady state formulation";

        Buildings.HeatTransfer.Sources.PrescribedTemperature preTem if not steadyDynamics
          "Prescribed temperature"
          annotation (Placement(transformation(extent={{-60,-60},{-40,-40}})));
        Modelica.Blocks.Sources.RealExpression portT(y=T)  if not steadyDynamics
          "Port temperature"
          annotation (Placement(transformation(extent={{-90,-60},{-70,-40}})));
        Modelica.Thermal.HeatTransfer.Sensors.HeatFlowSensor heaFloSen if not steadyDynamics
          "Heat flow sensor"
          annotation (Placement(transformation(extent={{-10,-40},{-30,-60}})));
        Modelica.Blocks.Interfaces.RealInput Q_flow_internal
          "Needed to use conditional connector Q_flow";

      initial equation
        // Make sure that if energyDynamics is SteadyState, then
        // massDynamics is also SteadyState.
        // Otherwise, the system of ordinary differential equations may be inconsistent.
        if energyDynamics == Modelica.Fluid.Types.Dynamics.SteadyState then
          assert(massDynamics == energyDynamics, "In " + getInstanceName() + ":
         If 'energyDynamics == Modelica.Fluid.Types.Dynamics.SteadyState', then it is
         required that 'massDynamics==Modelica.Fluid.Types.Dynamics.SteadyState'.
         Otherwise, the system of equations may not be consistent.
         You need to select other parameter values.");
        end if;

      // Initial conditions
        if energyDynamics == Modelica.Fluid.Types.Dynamics.SteadyStateInitial then
          der(T) = 0;
        end if;
        if massDynamics == Modelica.Fluid.Types.Dynamics.SteadyStateInitial then
          der(p)=0;
        end if;

      equation
       // Total quantities
        m = rhoSte*VSte + rhoWat*VWat "Total mass";
        U = rhoSte*VSte*hSte + rhoWat*VWat*hWat - p*V "Total energy";
        V = VWat + VSte "Total volume";

        // Mass balance
        if massDynamics == Modelica.Fluid.Types.Dynamics.SteadyState then
          0 = mWat_flow + mSte_flow "Steady state mass balance";
        else
          der(m) = mWat_flow + mSte_flow "Dynamic mass balance";
        end if;
        der(VWat) = VWat_flow;

        // Energy balance
        if energyDynamics == Modelica.Fluid.Types.Dynamics.SteadyState then
          der(U) = 0;
          Q_flow_internal = 0;
        else
          connect(heaFloSen.Q_flow, Q_flow_internal) "Needed because of conditional input";
          if allowFlowReversal then
            der(U) = Q_flow_internal
                  + port_a.m_flow*actualStream(port_a.h_outflow)
                  + port_b.m_flow*actualStream(port_b.h_outflow);
          else
            der(U) = Q_flow_internal
                  + port_a.m_flow*inStream(port_a.h_outflow)
                  + port_b.m_flow*port_b.h_outflow;
          end if;
        end if;

        // Properties of saturated liquid and steam
        T = MediumSte.saturationTemperature(p);
        hSte=MediumSte.specificEnthalpy(stateSte);
        hWat=MediumWat.specificEnthalpy(stateWat);
        rhoSte=MediumSte.density(stateSte);
        rhoWat=MediumWat.density(stateWat);

        // boundary conditions at the ports
        port_a.p = p;
        port_b.p = p;

      // outputs
        VLiq = VWat;

        // Check that evaporation is actually possible
        assert(VSte >= 0, "There is no more steam vapor in the volume.");
        assert(VWat >= 0, "There is no more liquid water in the volume.");

        connect(portT.y,preTem. T)
          annotation (Line(points={{-69,-50},{-62,-50}},color={0,0,127}));
        connect(heaFloSen.port_b,preTem. port)
          annotation (Line(points={{-30,-50},{-40,-50}},color={191,0,0}));
        connect(heaFloSen.port_a, heatPort)
          annotation (Line(points={{-10,-50},{0,-50},{0,-100}}, color={191,0,0}));

      annotation (defaultComponentName="vol",
          Icon(coordinateSystem(
              preserveAspectRatio=false,
              extent={{-100,-100},{100,100}}), graphics={
             Ellipse(
                extent={{-100,100},{100,-100}},
                lineColor={0,0,0},
                fillPattern=FillPattern.Sphere,
                fillColor=DynamicSelect({170,213,255},
                min(1, max(0, (1-(T-273.15)/50)))*{28,108,200}
                +min(1, max(0, (T-273.15)/50))*{255,0,0}))}),
          Documentation(revisions="<html>
<ul>
<li>
May 4, 2022 by David Blum:<br/>
Update stateSte to use MediumSte instead of MediumWat.
</li>
<li>
February 26, 2022 by Kathryn Hinkelman:<br/>
First implementation.
</li>
</ul>
</html>",       info="<html>
<p>
This model represents a partial control volume for either condensation or 
evaporation processes of water with liquid and vapor phases in equilibrium
and at a saturated state. 
Models that extend this base class need to assign the mass flow rate at 
each port and the enthlapy at each port, as exemplifed in the evaporation
and condensation models listed below.
The volume can exchange heat through 
its <code>heatPort</code> when configured with dynamic mass and 
energy balances. In steady state, the heat port is conditionally removed
in order to maintain a consistent set of equations.
</p>
<p>
This model is similar to 
<a href=\"modelica://Modelica.Fluid.Examples.DrumBoiler.BaseClasses.EquilibriumDrumBoiler\">
Modelica.Fluid.Examples.DrumBoiler.BaseClasses.EquilibriumDrumBoiler</a> 
with the following exceptions:
</p>
<ul>
<li>
Rather than a two-phase medium, fluid mediums are modeled as two
single-state fluids, with liquid water at the up-stream port<code>(port_a)</code>, and
steam vapor at the downstream port <code>(port_b)</code> for instances of this 
base class that model evaporation (the opposite for condensation);
</li>
<li>
The metal drum is excluded from the mass and energy balances;
</li>
</ul>

<h4> Implementation</h4>
<p>
This model is configured to allow both steady state and dynamic mass 
and energy balances. The heat transfer through the 
<code>heatPort</code> is disabled in steady state balance.
This is required because the fluid is restricted to a saturated state;
thus, the heat transfer rate is a function of mass flow rate only
if the volume is steady. The fluid mass <i>m</i> in the volume is 
calculated as
</p>

<p align = \"center\" style = \"font-style:italic;\">
m = ρ<sub>s</sub>V<sub>s</sub> + ρ<sub>w</sub>V<sub>w</sub>
</p>
<p>
where <i>ρ</i> is density,<i>V</i> is volume, and subscripts represent 
the steam and liquid water components, respectively. 
The total internal energy <i>U</i> is
</p>
<p align = \"center\" style = \"font-style:italic;\">
U = ρ<sub>s</sub>V<sub>s</sub>h<sub>s</sub> + ρ<sub>w</sub>V<sub>w</sub> − pV
</p>
<p>
where <i>h</i> is specific enthalpy, <i>p</i> is pressure, and the 
total volume of fluid <i>V=V<sub>s</sub>+V<sub>w</sub></i>.
</p>

<p>The steady state mass balance is given as</p>
<p align = \"center\" style = \"font-style:italic;\">
m&#775;<sub>s</sub> + m&#775;<sub>w</sub> = 0,
</p>
<p>
while no additional equation is given for the steady state energy 
balance, since the heat flow rate into the water must be removed
from the system in which the control volume is used.
</p>

<p>The dynamic mass and energy balances are given as</p>
<p align = \"center\" style = \"font-style:italic;\">
dm/dt = m&#775;<sub>s</sub> + m&#775;<sub>w</sub><Br>
dU/dt = Q&#775; + m&#775;<sub>s</sub> h<sub>s</sub> + m&#775;
<sub>w</sub> h<sub>w</sub></p> 

<p>
where ̇<i>m&#775;<sub>s</sub></i> and <i>m&#775;<sub>w</sub></i> 
are the mass flow rates of steam and liquid water
respectively; <i>Q&#775;</i> is the heat flow rate 
into the control volume; 
<i>h<sub>s</sub></i> and <i>h<sub>w</sub></i> are the specific 
enthalpies of steam and liquid water, respectively. 
Note that with an evaporation process, the liquid
phase (water) is always assigned at the <code>port_a</code> (inlet), 
while the vapor phase (steam) is always at the <code>port_b</code> (outlet).
The opposite holds for a condensation process.
</p> 

<h4>Assumptions</h4>
<p>
Three principal assumptions are made with this model:
</p>
<ul>
<li>
The fluid within the volume is wet steam.
</li>
<li>
Liquid and vapor subcomponents are at equilibrium; and
</li>
<li>
Fluid is discharged from the volume as ei
ther saturated 
liquid or saturated vapor.
</li>

</ul>
<p>
Models that extend this base class include
<a href = \"modelica://Buildings.Experimental.DHC.Plants.Steam.BaseClasses.ControlVolumeEvaporation\">
Buildings.Experimental.DHC.Plants.Steam.BaseClasses.ControlVolumeEvaporation</a> and
<a href = \"modelica://Buildings.Experimental.DHC.Loads.Steam.BaseClasses.ControlVolumeCondensation\">
Buildings.Experimental.DHC.Loads.Steam.BaseClasses.ControlVolumeCondensation</a>.
</p>

<h4>Reference</h4>
<p>
Hinkelman, Kathryn, Saranya Anbarasu, Michael Wetter, 
Antoine Gautier, and Wangda Zuo. 2022. “A Fast and Accurate Modeling 
Approach for Water and Steam Thermodynamics with Practical 
Applications in District Heating System Simulation.” Preprint. February 24. 
<a href=\"http://dx.doi.org/10.13140/RG.2.2.20710.29762\">doi:10.13140/RG.2.2.20710.29762</a>.
</p>

</html>"));
      end PartialSaturatedControlVolume;

      partial model PartialTwoPortTwoMedium
        "Partial model with two ports with two separate medium models without storing mass or energy"

        replaceable package Medium_a =
            Modelica.Media.Interfaces.PartialMedium
          "Medium model for port_a (inlet)";
        replaceable package Medium_b =
            Modelica.Media.Interfaces.PartialMedium
          "Medium model for port_b (outlet)";

        parameter Modelica.Units.SI.MassFlowRate m_flow_nominal
          "Nominal mass flow rate"
          annotation(Dialog(group = "Nominal condition"));
        parameter Modelica.Units.SI.MassFlowRate m_flow_small(min=0) = 1E-4*abs(m_flow_nominal)
          "Small mass flow rate for regularization of zero flow";

        // Diagnostics
         parameter Boolean show_T = false
          "= true, if actual temperature at port is computed"
          annotation(Dialog(tab="Advanced",group="Diagnostics"));

        Modelica.Units.SI.MassFlowRate m_flow(start=_m_flow_start) = port_a.m_flow
          "Mass flow rate from port_a to port_b (m_flow > 0 is design flow direction)";

        Modelica.Units.SI.PressureDifference dp(start=_dp_start, displayUnit="Pa") = port_a.p - port_b.p
          "Pressure difference between port_a and port_b";

        Medium_a.ThermodynamicState sta_a=
            Medium_a.setState_phX(port_a.p,
                                noEvent(actualStream(port_a.h_outflow)),
                                noEvent(actualStream(port_a.Xi_outflow))) if show_T
          "Medium properties in port_a";

        Medium_b.ThermodynamicState sta_b=
            Medium_b.setState_phX(port_b.p,
                                noEvent(actualStream(port_b.h_outflow)),
                                noEvent(actualStream(port_b.Xi_outflow))) if show_T
          "Medium properties in port_b";

        Modelica.Fluid.Interfaces.FluidPort_a port_a(
          redeclare final package Medium = Medium_a,
           m_flow(min=if allowFlowReversal then -Modelica.Constants.inf else 0),
           h_outflow(start = Medium_a.h_default, nominal = Medium_a.h_default))
          "Fluid connector a (positive design flow direction is from port_a to port_b)"
          annotation (Placement(transformation(extent={{-110,-10},{-90,10}})));
        Modelica.Fluid.Interfaces.FluidPort_b port_b(
          redeclare final package Medium = Medium_b,
           m_flow(max=if allowFlowReversal then +Modelica.Constants.inf else 0),
           h_outflow(start = Medium_b.h_default, nominal = Medium_b.h_default))
          "Fluid connector b (positive design flow direction is from port_a to port_b)"
          annotation (Placement(transformation(extent={{110,-10},{90,10}})));

        // Assumptions
        parameter Boolean allowFlowReversal = true
          "= false to simplify equations, assuming, but not enforcing, no flow reversal. Used only if model has two ports."
          annotation(Dialog(tab="Assumptions"), Evaluate=true);

         //Dynamics
        parameter Modelica.Fluid.Types.Dynamics energyDynamics=Modelica.Fluid.Types.Dynamics.DynamicFreeInitial
          "Type of energy balance: dynamic (3 initialization options) or steady state"
          annotation(Evaluate=true, Dialog(tab = "Dynamics", group="Equations"));

        parameter Modelica.Fluid.Types.Dynamics massDynamics=energyDynamics
          "Type of mass balance: dynamic (3 initialization options) or steady state"
          annotation(Evaluate=true, Dialog(tab = "Dynamics", group="Equations"));

        // Initialization
        parameter Medium_b.AbsolutePressure p_start = Medium_b.p_default
          "Start value of pressure"
          annotation(Dialog(tab = "Initialization"));
        parameter Medium_b.Temperature T_start=Medium_b.T_default
          "Start value of temperature"
          annotation(Dialog(tab = "Initialization"));

      protected
        final parameter Modelica.Units.SI.MassFlowRate _m_flow_start = 0
        "Start value for m_flow, used to avoid a warning if not set in m_flow, and to avoid m_flow.start in parameter window";
        final parameter Modelica.Units.SI.PressureDifference _dp_start(displayUnit="Pa") = 0
        "Start value for dp, used to avoid a warning if not set in dp, and to avoid dp.start in parameter window";

        annotation (Documentation(info="<html>
<p>
This partial model defines an interface for components 
with two ports and separate medium definitions at each port. 
The component transports fluid between two ports 
without storing mass or energy. The treatment of the 
design flow direction and of flow reversal are 
predefined based on the parameter <code>allowFlowReversal</code>.
</p>
<p>
This model is intended for steam heating applications, where
phase change is inherently present. The split-medium approach
enables a numerically-efficient liquid water model (i.e., 
<a href=\"modelica://Buildings.Media.Specialized.Water.TemperatureDependentDensity\">
Buildings.Media.Specialized.Water.TemperatureDependentDensity</a>) 
to be implemented alongside various water/steam models for other phases.
For most applications, 
an efficient model (i.e., <a href=\"modelica://Modelica.Media.Water.StandardWater\">Modelica.Media.Water.StandardWater</a>
is suitable as it covers the largest range of pressure-temperature conditions through 
its implementation of the IAPWS-IF97 water/steam formulation.
If a reduce pressure-temperature range is applicable, 
<a href=\"modelica://Buildings.Media.Steam\">Buildings.Media.Steam</a>)
provides a more efficient implementation.  
Through the split-medium approach, pressure and density calculations are decoupled, 
eliminating costly nonlinear systems of equations. 
This interface model also includes parameters for mass and 
energy dynamics as well as initialization.   
</p>
<h4>Reference</h4>
<p>
Hinkelman, Kathryn, Saranya Anbarasu, Michael Wetter, 
Antoine Gautier, and Wangda Zuo. 2022. “A Fast and Accurate Modeling 
Approach for Water and Steam Thermodynamics with Practical 
Applications in District Heating System Simulation.” Preprint. February 24. 
<a href=\"http://dx.doi.org/10.13140/RG.2.2.20710.29762\">doi:10.13140/RG.2.2.20710.29762</a>.
</p>
</html>",       revisions="<html>
<ul>
<li>July 22, 2021 by Kathryn Hinkelman: </li>
<li>First implementation. </li>
</ul>
</html>"));
      end PartialTwoPortTwoMedium;
    annotation (preferredView="info", Documentation(info="<html>
<p>
This package contains base class models for steam systems. 
These models use the split-medium approach to allow various 
water/steam models to be coupled with a numerically-efficient
liquid water model. This can greatly improve the computing performance
by decoupling the energy and mass balance equations.
</p>
</html>"));
    end Steam;
  annotation (preferredView="info", Documentation(info="<html>
<p>
This package contains base classes that are used to construct the models in
<a href=\"modelica://Buildings.Experimental.DHC\">
Buildings.Experimental.DHC</a>.
</p>
</html>"));
  end BaseClasses;

  package Tests
    extends Modelica.Icons.ExamplesPackage;
    model test_chiller
      EnergyTransferStations.Combined.ChillerBorefield ets
        annotation (Placement(transformation(extent={{-28,-40},{32,20}})));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
            coordinateSystem(preserveAspectRatio=false)));
    end test_chiller;
  end Tests;
  annotation (
    preferredView="info",
    Documentation(
      info="<html>
<p>
This package contains models for district heating and cooling (DHC) systems.
</p>
</html>"));
end DHC;
